<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>速学block在ARC和MRC中的使用</title>
      <link href="/2018/09/04/%E9%80%9F%E5%AD%A6block%E5%9C%A8ARC%E5%92%8CMRC%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/09/04/%E9%80%9F%E5%AD%A6block%E5%9C%A8ARC%E5%92%8CMRC%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>你想知道Objective-C中blocks是怎么工作的吗？接下来就让我们通过几个测试题来了解下吧。</p><h2 id="1-ARC转MRC-MRC转ARC"><a href="#1-ARC转MRC-MRC转ARC" class="headerlink" title="1.ARC转MRC MRC转ARC"></a>1.ARC转MRC MRC转ARC</h2><p>首先, 先要了解下ARC转MRC和MRC转ARC.<br><strong>ARC项目转MRC</strong><br>创建项目, 打开Xcode,  点击项目,  找到Build Phases中的Compile Sources, 将需要转为MRC的 .m文件加入编译标记  <code>-fno-objc-arc</code></p><p><strong>MRC项目转ARC</strong><br>给MRC项目中.m文件添加ARC标记  <code>-fobjc-arc</code></p><h2 id="2-示例演示"><a href="#2-示例演示" class="headerlink" title="2.示例演示"></a>2.示例演示</h2><p><strong>Example A</strong></p><pre class=" language-objc"><code class="language-objc">void exampleA() {    char a = 'A';    ^{        printf("%c\n", a);    }();}</code></pre><p>1.ARC和MRC都有效 ?<br>2.只有ARC 有效?<br>3.MRC有效 ?<br>4.都没有效?</p><p><strong>Example B</strong></p><pre class=" language-objc"><code class="language-objc">void exampleB_addBlockToArray(NSMutableArray *array) {    char b = 'B';    [array addObject:^{        printf("%c\n", b);    }];}void exampleB() {    NSMutableArray *array = [NSMutableArray array];    exampleB_addBlockToArray(array);    void (^block)(void) = [array objectAtIndex:0];    block();                    //MRC 断点查看下 __NSStackBlock__    NSLog(@"%@", [block class]);// ARC __NSMallocBlock__}</code></pre><p>1.ARC和MRC都有效 ?<br>2.只有ARC 有效?<br>3.MRC有效 ?<br>4.都没有效?</p><p><strong>Example C</strong></p><pre class=" language-objc"><code class="language-objc">void exampleC_addBlockToArray(NSMutableArray *array) {    [array addObject:^{        printf("C\n");    }];}void exampleC() {    NSMutableArray *array = [NSMutableArray array];    exampleC_addBlockToArray(array);    void (^block)(void) = [array objectAtIndex:0];    block();    NSLog(@"%@", [block class]); // __NSGlobalBlock__}</code></pre><p>1.ARC和MRC都有效 ?<br>2.只有ARC 有效?<br>3.MRC有效 ?<br>4.都没有效?</p><p><strong>Example D</strong></p><pre class=" language-objc"><code class="language-objc">typedef void (^dBlock)(void);dBlock exampleD_getBlock() {    char d = 'D';    return ^{        printf("%c\n", d);    } ;}void exampleD() {    exampleD_getBlock()();}</code></pre><p>1.ARC和MRC都有效 ?<br>2.只有ARC 有效?<br>3.MRC有效 ?<br>4.都没有效?</p><p><strong>Example E</strong></p><pre class=" language-objc"><code class="language-objc">typedef void (^eBlock)(void);eBlock exampleE_getBlock() {    char e = 'E';    void (^block)(void) = ^{        printf("%c\n", e);    };    return block;}void exampleE() {    eBlock block = exampleE_getBlock();    block();                //MRC 断点查看下 __NSStackBlock__    NSLog(@"%@", [block class]); // ARC __NSMallocBlock__}</code></pre><p>1.ARC和MRC都有效 ?<br>2.只有ARC 有效?<br>3.MRC有效 ?<br>4.都没有效?</p><h2 id="3-解析"><a href="#3-解析" class="headerlink" title="3.解析"></a>3.解析</h2><p><strong>Example A: ARC和MRC都有效</strong></p><blockquote><p>不管在 ARC 还是 MRC 下，不论 block 存放在 stack 还是 heap 内存中，当example A 被调用时，block 仍然有效，都能正常执行.</p></blockquote><p><strong>Example B: 只有ARC 有效</strong></p><blockquote><p>在 MRC 下，exampleB_addBlockToArray 中的 block 是 NSStackBlock 类型，存放在stack内存中。当执行 exampleB 时，stack 内存被释放，block 失效.</p></blockquote><blockquote><p>在 ARC 下，block 是 autoreleased NSMallocBlock 类型，存放在 heap 内存中，所以 Exmaple B 只有ARC 有效.</p></blockquote><p><strong>Example C: ARC和MRC都有效</strong></p><blockquote><p>当 block 不需要从外部获取变量时，它不需要在 runtime 设置任何状态。此时，block 被编译成 NSGlobalBlock 类型，放在内存 data 段，就像 C 函数一样，属于代码的一部分，所以 ARC和MRC都有效.</p></blockquote><p><strong>Example D: 只有ARC 有效</strong></p><blockquote><p>这题有点类似于 Example B. 在 MRC 下，exampleD_getBlock 中的block 会被创建在 stack 内存中，当函数返回时，block马上失效。鉴于本题的错误实在太明显，编译器在编译时，就会抛出错误 error: returning block that lives on the local stack.</p></blockquote><blockquote><p>而在 ARC 下，block 会被编译成 autoreleased NSMallocBlock 类型，存放于 heap 内存中。<br>所以 只有ARC 有效.</p></blockquote><p><strong>Example E: 只有ARC 有效</strong></p><blockquote><p>本题类似于 Example D，区别在于本题代码不会出现编译错误，而是在运行时才会崩溃。更槽糕的是，如果你关闭了编译器优化选项，代码运行正常，而无法发现这个隐藏的bug。</p></blockquote><blockquote><p>而在 ARC 下，block 会被编译成 autoreleased NSMallocBlock 类型，存放于 heap 内存中。<br>所以 只有ARC 有效.</p></blockquote><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p><strong>总结1:</strong></p><blockquote><p>MRC 中block 没有引用外部变量, block为 NSGlobalBlock 类型,存储在全局数据区.<br>MRC 中block 引用外部变量,block为NSStackBlock 类型,存储在栈内存中.<br>所以, 在block所属的栈作用域外使用block时, 需要将调用copy方法将该block存储在堆区.</p></blockquote><p><strong>总结2:</strong></p><blockquote><p>ARC 中 没有引用外部变量, block为 NSGlobalBlock 类型,存储在全局数据区.<br>ARC 中 引用外部变量, block为 autoreleased NSMallocBlock 类型,存储在堆内存中.</p></blockquote><p><strong>例外:匿名block 引用外部变量</strong></p><blockquote><p>在ARC下其实很少见到 NSStackBlock 类的Block，大多数情况编译器都保证了Block是在堆上创建的</p><pre class=" language-objc"><code class="language-objc">int count = 11;NSLog(@"Stack Block:%@", [^{NSLog(@"Stack Block:%d",count);} class]);//打印：Stack Block:__NSStackBlock__</code></pre></blockquote><h2 id="5-以上这么多例子告诉我们什么？"><a href="#5-以上这么多例子告诉我们什么？" class="headerlink" title="5.以上这么多例子告诉我们什么？"></a>5.以上这么多例子告诉我们什么？</h2><p>告诉我们要使用ARC！在ARC下，block总能正确运行。如果你不用ARC，最好能保证在 stack 内存中声明定义的block，能够拷贝到heap内存，保证block的正常运行。</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> block </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown语法</title>
      <link href="/2018/08/30/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/08/30/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="欢迎使用马克飞象"><a href="#欢迎使用马克飞象" class="headerlink" title="欢迎使用马克飞象"></a>欢迎使用马克飞象</h1><p>@(示例笔记本)[马克飞象|帮助|Markdown]</p><p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p><ul><li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li><li><strong>得心应手</strong> ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；</li><li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li></ul><hr><p>[TOC] (不支持)</p><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><p>(hexo引用不一样)</p><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="noopener">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Cmd + /</code>查看帮助。 </p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre class=" language-python"><code class="language-python">@requires_authorization<span class="token keyword">def</span> <span class="token function">somefunc</span><span class="token punctuation">(</span>param1<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> param2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''A docstring'''</span>    <span class="token keyword">if</span> param1 <span class="token operator">></span> param2<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># interesting</span>        <span class="token keyword">print</span> <span class="token string">'Greater'</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>param2 <span class="token operator">-</span> param1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">or</span> None<span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token operator">>></span><span class="token operator">></span> message <span class="token operator">=</span> <span class="token triple-quoted-string string">'''interpreter... prompt'''</span></code></pre><h3 id="LaTeX-公式-hexo不支持此写法"><a href="#LaTeX-公式-hexo不支持此写法" class="headerlink" title="LaTeX 公式 (hexo不支持此写法)"></a>LaTeX 公式 (hexo不支持此写法)</h3><p>可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：</p><p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><h3 id="表格-不一样"><a href="#表格-不一样" class="headerlink" title="表格 (不一样)"></a>表格 (不一样)</h3><table><thead><tr><th style="text-align:left">Item</th><th style="text-align:right">Value</th><th style="text-align:center">Qty</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 USD</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 USD</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 USD</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="流程图-hexo不支持此写法"><a href="#流程图-hexo不支持此写法" class="headerlink" title="流程图 (hexo不支持此写法)"></a>流程图 (hexo不支持此写法)</h3><pre class=" language-flow"><code class="language-flow">st=>start: Starte=>endop=>operation: My Operationcond=>condition: Yes or No?st->op->condcond(yes)->econd(no)->op</code></pre><p>以及时序图:</p><pre class=" language-sequence"><code class="language-sequence">Alice->Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob-->Alice: I am good thanks!</code></pre><blockquote><p><strong>提示：</strong>想了解更多，请查看<strong>流程图</strong>[语法][3]以及<strong>时序图</strong>[语法][4]。</p></blockquote><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p><ul><li style="list-style: none"><input type="checkbox" checked> 已完成事项</li><li style="list-style: none"><input type="checkbox"> 待办事项1</li><li style="list-style: none"><input type="checkbox"> 待办事项2</li></ul><blockquote><p><strong>注意：</strong>目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在<strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将会全面支持。</p></blockquote><h2 id="印象笔记相关"><a href="#印象笔记相关" class="headerlink" title="印象笔记相关"></a>印象笔记相关</h2><h3 id="笔记本和标签"><a href="#笔记本和标签" class="headerlink" title="笔记本和标签"></a>笔记本和标签</h3><p><strong>马克飞象</strong>增加了<code>@(笔记本)[标签A|标签B]</code>语法, 以选择笔记本和添加标签。 <strong>绑定账号后</strong>， 输入<code>(</code>自动会出现笔记本列表，请从中选择。</p><h3 id="笔记标题"><a href="#笔记标题" class="headerlink" title="笔记标题"></a>笔记标题</h3><p><strong>马克飞象</strong>会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 <code>欢迎使用马克飞象</code>。</p><h3 id="快捷编辑"><a href="#快捷编辑" class="headerlink" title="快捷编辑"></a>快捷编辑</h3><p>保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到<strong>马克飞象</strong>中打开并编辑该笔记。</p><blockquote><p><strong>注意：</strong>目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。</p></blockquote><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p><strong>马克飞象</strong>通过<strong>将Markdown原文以隐藏内容保存在笔记中</strong>的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。</p><blockquote><p><strong>隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。</strong></p></blockquote><h3 id="离线存储"><a href="#离线存储" class="headerlink" title="离线存储"></a>离线存储</h3><p><strong>马克飞象</strong>使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过<code>文档管理</code>打开。</p><blockquote><p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，<strong>请务必经常及时同步到印象笔记</strong>。</p></blockquote><h2 id="编辑器相关"><a href="#编辑器相关" class="headerlink" title="编辑器相关"></a>编辑器相关</h2><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>右侧系统菜单（快捷键<code>Cmd + M</code>）的<code>设置</code>中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>帮助    <code>Cmd + /</code><br>同步文档    <code>Cmd + S</code><br>创建文档    <code>Cmd + Opt + N</code><br>最大化编辑器    <code>Cmd + Enter</code><br>预览文档 <code>Cmd + Opt + Enter</code><br>文档管理    <code>Cmd + O</code><br>系统菜单    <code>Cmd + M</code> </p><p>加粗    <code>Cmd + B</code><br>插入图片    <code>Cmd + G</code><br>插入链接    <code>Cmd + L</code><br>提升标题    <code>Cmd + H</code></p><h2 id="关于收费"><a href="#关于收费" class="headerlink" title="关于收费"></a>关于收费</h2><p><strong>马克飞象</strong>为新用户提供 10 天的试用期，试用期过后需要<a href="maxiang.info/vip.html">续费</a>才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。</p><h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul><li>微博：<a href="http://weibo.com/u/2788354117" target="_blank" rel="noopener">@马克飞象</a>，<a href="http://weibo.com/ggock" title="开发者个人账号" target="_blank" rel="noopener">@GGock</a></li><li>邮箱：<a href="mailto:&#104;&#x75;&#115;&#x74;&#x67;&#x6f;&#99;&#107;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;" target="_blank" rel="noopener">&#104;&#x75;&#115;&#x74;&#x67;&#x6f;&#99;&#107;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></li></ul><hr><p>感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。</p><p>[^demo] (hexo不支持)</p><p>[^demo]: 这是一个示例脚注。请查阅 <a href="https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes" target="_blank" rel="noopener">MultiMarkdown 文档</a> 关于脚注的说明。 <strong>限制：</strong> 印象笔记的笔记内容使用 [ENML][5] 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致<code>脚注</code>和<code>TOC</code>无法正常点击。</p><p>(支持)<br>  [1]: <a href="http://maxiang.info/client_zh" target="_blank" rel="noopener">http://maxiang.info/client_zh</a><br>  [2]: <a href="https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop</a><br>  [3]: <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">http://adrai.github.io/flowchart.js/</a><br>  [4]: <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">http://bramp.github.io/js-sequence-diagrams/</a><br>  [5]: <a href="https://dev.yinxiang.com/doc/articles/enml.php" target="_blank" rel="noopener">https://dev.yinxiang.com/doc/articles/enml.php</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo语法体验</title>
      <link href="/2018/08/30/hexo%E8%AF%AD%E6%B3%95%E4%BD%93%E9%AA%8C/"/>
      <url>/2018/08/30/hexo%E8%AF%AD%E6%B3%95%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26085703&auto=1&height=66"></iframe><h2 id="标签插件（Tag-Plugins）"><a href="#标签插件（Tag-Plugins）" class="headerlink" title="标签插件（Tag Plugins）"></a>标签插件（Tag Plugins）</h2><h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><p>在文章中插入引言，可包含作者、来源和标题。</p><h4 id="别号：-quote"><a href="#别号：-quote" class="headerlink" title="别号： quote"></a>别号： quote</h4><blockquote><p>content</p><footer><strong>[author[</strong><cite>source]] [link] [source_link_title]</cite></footer></blockquote><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p><strong>没有提供参数，则只输出普通的 blockquote</strong></p><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><blockquote><p>111111</p></blockquote><blockquote><blockquote><p>222222</p></blockquote></blockquote><blockquote><blockquote><p>333</p></blockquote></blockquote><hr><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在文章中插入代码。</p><h4 id="别名：-code"><a href="#别名：-code" class="headerlink" title="别名： code"></a>别名： code</h4><pre><code>code snippet</code></pre><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><h4 id="普通的代码块"><a href="#普通的代码块" class="headerlink" title="普通的代码块"></a>普通的代码块</h4><pre><code>alert(&#39;Hello World!&#39;);</code></pre><p>alert(‘Hello World!’);</p><h4 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h4><pre><code>[rectangle setX: 10 y: 10 width: 20 height: 20];</code></pre><p>[rectangle setX: 10 y: 10 width: 20 height: 20];</p><pre class=" language-oc"><code class="language-oc">[rectangle setX: 10 y: 10 width: 20 height: 20];</code></pre><h4 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h4><pre><code>array.map(callback[, thisArg])</code></pre><p>Array.map<br>array.map(callback[, thisArg])</p><h4 id="附加说明和网址"><a href="#附加说明和网址" class="headerlink" title="附加说明和网址"></a>附加说明和网址</h4><pre><code>_.compact([0, 1, false, 2, &#39;&#39;, 3]);=&gt; [1, 2, 3]</code></pre><p>_.compactUnderscore.js<br>_.compact([0, 1, false, 2, ‘’, 3]);<br>=&gt; [1, 2, 3]</p><h4 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h4><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p><figcaption>[title] [url] [link text] </figcaption><pre class=" language-[language]"><code class="language-[language]">code snippet</code></pre><hr><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>在文章中插入指定大小的图片。</p><img src="/path/to/image" class="[class names]" title="[width] [height] [title text [alt text]]"><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。</p><a>text url [external] [title]</a><h3 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h3><p>在文章中插入 Youtube 视频。</p><div class="video-container"><iframe src="//www.youtube.com/embed/video_id" frameborder="0" allowfullscreen></iframe></div><h3 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h3><p>在文章中插入 Vimeo 视频。</p><div class="video-container"><iframe src="//player.vimeo.com/video/video_id" frameborder="0" allowfullscreen></iframe></div><h3 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h3><p>引用其他文章的链接。</p><h3 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h3><p>引用文章的资源。</p><p><div class="bdsharebuttonbox"><a href="#" class="bds_more" data-cmd="more"></a><a href="#" class="bds_qzone" data-cmd="qzone"></a><a href="#" class="bds_tsina" data-cmd="tsina"></a><a href="#" class="bds_tqq" data-cmd="tqq"></a><a href="#" class="bds_renren" data-cmd="renren"></a><a href="#" class="bds_weixin" data-cmd="weixin"></a></div></p><script>window._bd_share_config={"common":{"bdSnsKey":{},"bdText":"","bdMini":"2","bdPic":"","bdStyle":"0","bdSize":"16"},"share":{},"image":{"viewList":["qzone","tsina","tqq","renren","weixin"],"viewText":"分享到：","viewSize":"16"},"selectShare":{"bdContainerClass":null,"bdSelectMiniList":["qzone","tsina","tqq","renren","weixin"]}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];</script>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客开篇</title>
      <link href="/2018/08/30/%E5%8D%9A%E5%AE%A2%E5%BC%80%E7%AF%87/"/>
      <url>/2018/08/30/%E5%8D%9A%E5%AE%A2%E5%BC%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>　　终于下决心要开始写博客了，做程序员快四年了，四年的时间里，由一个嫩头青，成长为了一个能在公司项目里独立完成一些业务逻辑复杂的大模块的中坚程序员。首先我还是概括下这几年的成长历程吧。</p><p>　　由于本人的脸长得比较缓慢，刚出道时还是一张孩童脸，用时下流行的一个词来描述那就是“萌”。因为太萌，刚安排到客户现场做开发时，还被客户开玩笑说你们公司违法招收童工，我一怒之下蓄了几个月胡须，留了几个月飘逸的长发，想让自己在外表上看上去更老成。但不巧的是，此时的我又与那时刚出道的“犀利哥”风格极为类似，又被戏称为犀利程序哥，再怒之下，开始潜心工作，不再追求表面的浮夸，在工作中逐渐展露头角，完成了项目中几个重要需求的开发，在后来的普选中当选为公司年度优秀员工之一。最近1，2年波澜不惊，因为自学没有断过，技术也在逐步积累。</p><p>下面进入主题，关于我的博客，我用自问自答的方式来介绍：</p><h4 id="1、我为什么要写博客？"><a href="#1、我为什么要写博客？" class="headerlink" title="1、我为什么要写博客？"></a>1、我为什么要写博客？</h4><p>　　做程序员这几年，技术不断积累，思想不断在升华，有些思考和想法在与同事、朋友的交流中会迸发出来。在交流的过程中，我觉得很过瘾。有些模糊不清的事情，通过交流明确了，有些以为自己把握的很准的事情，通过交流颠覆了，而有些自己已经明白的事情，又开阔了新的思路。但交流只是瞬时的、已逝的，我们的讨论不是国家政要接见外国领导，没有人把我们的谈话记录下来。就像在内存里一样，断电后恢复不了，事后很难回忆起来那些曾经闪光的思想。所以我要把我在程序人生中得到的思想给持久化了，给固化下来。再一个就是，我的同事、朋友始终是我身边熟悉的人，我需要一个更大的世界，所以，我也想通过博客与大家交流！</p><h4 id="2、我的博客写些什么东西？"><a href="#2、我的博客写些什么东西？" class="headerlink" title="2、我的博客写些什么东西？"></a>2、我的博客写些什么东西？</h4><p>　　这个问题我想了很久，以前想写些关于iOS的、关于前端博文。有时候在草稿中写好一段文字，最后一搜索，全世界拥有同样知识点的，同样解决方案的数不胜数，太多了。作为一个讨厌重复的人，我不能再罗列这些网上一抓一大把的普世技术知识点，更何况以我现在的积累，还不能做到非常好。当然我不是说罗列技术点没有技术含量，正是因为网上这些庞大的知识，我才能很快的找到我想要的，解决我的问题。综上，我不能做重复的事，也不要因为说的东西不扎实而误导别人。当然了，在某个技术领域达到一定境界了，我也会写研究技术细节的博文。<br>　　那我写什么？什么是不重复的？那必须斩钉截铁的说那就是我的思想，世上没有任何一个人和我的人生轨迹完全一样，在这个过程中，我会思考我会总结，我要把我的思想留存于世，即使有时候会有相同思想的东西同时存在，那也会因为是我个人的总结和反思而有所不同！</p><h4 id="3、写博客的计划？"><a href="#3、写博客的计划？" class="headerlink" title="3、写博客的计划？"></a>3、写博客的计划？</h4><p>　　不追求一个月一定要写几篇几篇的，当我有深刻的感触，对事物有不同的理解，我就写一篇，记录下来，一步一个脚印，向卓越程序员迈进！</p><p>　　夜空霓虹，都是我不要的繁荣，完。</p>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>timeline</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
