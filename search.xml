<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>[Flutter] 02-Mac环境搭建Flurrer问题解决</title>
      <link href="/2020/06/16/Flutter-02-Mac%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAFlurrer%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/06/16/Flutter-02-Mac%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAFlurrer%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<blockquote><p>个人环境搭建遇到问题解决方案总结</p></blockquote><h3 id="一、VSCode-配置问题"><a href="#一、VSCode-配置问题" class="headerlink" title="一、VSCode 配置问题:"></a>一、VSCode 配置问题:</h3><h4 id="问题1-bin-sh-dart-command-not-found"><a href="#问题1-bin-sh-dart-command-not-found" class="headerlink" title="问题1: bin/sh dart:command not found"></a>问题1: bin/sh dart:command not found</h4><p>错误: VSCode 运行时显示错误: <strong>bin/sh dart:command not found</strong><br>或者写代码时,基本函数不提示, 比如main函数不自动显示代码块</p><p>解决:<br>1.首先确定已经安装Dart和Flutter插件.<br>2.然后要确定环境是否正确配置, 打开<code>.bash_profile</code>,参考上边配置</p><pre><code>open ~/.bash_profile</code></pre><p>3.安装dart环境</p><pre><code>$ brew tap dart-lang/dart$ brew install dart</code></pre><p>4.重启VSCode</p><h4 id="问题2-提示Could-not-find-a-Flutter-SDK"><a href="#问题2-提示Could-not-find-a-Flutter-SDK" class="headerlink" title="问题2: 提示Could not find a Flutter SDK"></a>问题2: 提示Could not find a Flutter SDK</h4><p>使用VSCode打开flutter项目, 如果提示显示错误信息: <strong>Could not find a Flutter SDK. Please ensure flutter is installed and in your PATH (you may need to restart).</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-332fea56d139ff4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>解决: </strong><br>这说明我们上面配置flutter命令没有成功，检测一下路径是否有问题，可以cd到本地flutter目录下，使用flutter -h，查看运行结果，如果失败，就检测一下路径。<br>如果上面路径下提示成功，在其他路径下提示不成功，那么进行下面命令：</p><pre><code>vim ~/.zshrc</code></pre><p>在打开的文件里最下面增加一行代码，就是配置的路径</p><pre><code>export PATH=本地flutter路径/bin:$PATH</code></pre><p>保存退出后，再使用source命令重新加载一下：</p><pre><code>source ~/.zshrc</code></pre><p>到这里，应该可是在任何路径下使用flutter命令了。</p><h4 id="问题3-For-full-Dart-language-support-please-open-a-folder-containing-your-Dart-files-instead-of-individual-loose-files"><a href="#问题3-For-full-Dart-language-support-please-open-a-folder-containing-your-Dart-files-instead-of-individual-loose-files" class="headerlink" title="问题3:  For full Dart language support, please open a folder containing your Dart files instead of individual loose files"></a>问题3:  For full Dart language support, please open a folder containing your Dart files instead of individual loose files</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-fa04334d2d3d5d1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/550" alt=""></p><p><strong>原因:</strong><br>如果直接新建一个 .dart 文件进行编辑不支持，需要新建一个文件夹，再在里面新建  .dart文件就可以了.</p><p><strong>解决:</strong><br><img src="https://upload-images.jianshu.io/upload_images/126164-2d2c1e1875967be3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>提示翻译: 要获得Dart语言的全面支持，请打开一个包含Dart文件的文件夹.<br>所以点击打开文件夹按钮, 找到新建dart文件所在文件夹即可.</p><h3 id="二、AndroidStudio配置问题"><a href="#二、AndroidStudio配置问题" class="headerlink" title="二、AndroidStudio配置问题"></a>二、AndroidStudio配置问题</h3><h4 id="问题1-AndroidStudio-打开新项目-顶部提示-‘package-get’-has-not-been-run"><a href="#问题1-AndroidStudio-打开新项目-顶部提示-‘package-get’-has-not-been-run" class="headerlink" title="问题1: AndroidStudio 打开新项目, 顶部提示: ‘package get’ has not been run"></a>问题1: AndroidStudio 打开新项目, 顶部提示: ‘package get’ has not been run</h4><p>错误信息:Flutter: ‘package get’ has not been run; ‘Pub get’ has not been run</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-5227af37213a9ebf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>原因: Dart与node类似。它有一个pubspec.yaml相当于package.json包含你的依赖项和内容的项。需要下载这些依赖项。</p><p>解决：<br><a href="https://stackoverflow.com/questions/49056126/flutter-package-get-has-not-been-run-pub-get-has-not-been-run" target="_blank" rel="noopener">参考stackoverflow</a></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-2921c673be80ca6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>此警告仅在此处提醒您未下载依赖项 =&gt;单击Get Dependencies第一个警告.</p><ul><li>如果卡在<code>flutter packages get</code>, 请看问题2</li></ul><h4 id="问题2-flutter-packages-get-慢或者卡"><a href="#问题2-flutter-packages-get-慢或者卡" class="headerlink" title="问题2:  flutter packages get 慢或者卡"></a>问题2:  flutter packages get 慢或者卡</h4><p><strong>错误信息: Running “flutter pub get” in xxx</strong><br>如果默认镜像已经修改为国内镜像，并重新执行命令安装；结果问题还是出现。</p><p><strong>1) .zshrc文件没有配置</strong></p><p>如果你使用终端是zsh，终端启动时 ~/.bash_profile 将不会被加载，解决办法就是修改 ～/.zshrc ，在其中添加：</p><pre><code>source ～/.bash_profile</code></pre><p>重启</p><p><strong>2) 终端优先执行下面三条指令尝试:</strong><br>此方法修改临时环境的配置</p><pre><code>export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cnflutter packages get</code></pre><p><strong>3) 手动下载插件直接放本地使用</strong><br>如果网络正常，镜像正常，环境正常，三条指令执行后，还是依旧会出现卡在<code>flutter packages get</code>的情况。可以考虑<strong>手动下载插件</strong>直接放本地使用。<br>这里就直接po出flutter插件默认本地路径：</p><pre><code>flutter的SDK目录/.pub-cache/hosted/当前使用的镜像地址文件夹/参考示例：/usr/local/flutter1.5.4/.pub-cache/hosted/pub.flutter-io.cn/</code></pre><ul><li>在<code>hosted</code>文件夹下，可以发现几个以flutter镜像域名命名的文件夹<pre><code>./hosted.../dart-pub.mirrors.sjtug.sjtu.edu.cn%47/.../pub.dartlang.org/.../pub.flutter-io.cn/</code></pre></li></ul><p>可见下载的依赖包都是按不同镜像分目录存放，所以每切一回镜像，都需要重新下载所有项目的依赖插件；因为加载的插件较多，也就导致等待时间非常久，这也是切换了几个国内镜像依旧卡flutter packages get很久的原因。</p><p><strong>解决方法:</strong></p><p>第一步，按需选择操作步骤：</p><ul><li>耐心等待下载（若下载的插件数量非常多，等待的耗时会比较长）</li><li>将其他镜像文件夹下已下载的插件文件，拷贝到当前使用的镜像的目录下，并执行flutter packages get（避免有遗漏的插件）</li><li>手动到插件的github下载文件，放到当前使用的镜像目录下</li></ul><p>第二步，执行<code>flutter run</code>。</p><h4 id="问题3-Waiting-for-another-flutter-command-to-release-the-startup-lock…"><a href="#问题3-Waiting-for-another-flutter-command-to-release-the-startup-lock…" class="headerlink" title="问题3: Waiting for another flutter command to release the startup lock…"></a>问题3: Waiting for another flutter command to release the startup lock…</h4><ul><li>删除flutter SDK 下的/bin/cache/lockfile文件, 重启Android Studio</li></ul><h4 id="问题4-it-is-taking-an-unexpectedly-long-time"><a href="#问题4-it-is-taking-an-unexpectedly-long-time" class="headerlink" title="问题4:  it is taking an unexpectedly long time."></a>问题4:  it is taking an unexpectedly long time.</h4><p>Please try steps below:</p><p>a. delete all contents under /home/nima/.gradle<br>b. cd to the android folder for your flutter project and run ./gradlew sync command, it will download the gradle-xxx.zip automatically. It this gradle process succeeds, re-run the flutter run command.<br>翻译:</p><ul><li>1&gt; 删除 <code>/home/nima/.gradle</code> 下的所有内容</li><li>2&gt; cd到flutter项目的android文件夹并运行./gradlew sync 命令，它将自动下载gradle-xxx.zip。如果此gradle过程成功，请重新运行flutter run命令。</li><li><p>3&gt;  flutter run -v</p><p><strong>flutter run -v</strong> : it usually download gradle(which is a large file) for the first time you run a flutter program.The above will help you to see the message that its downloading gradle/dist.It wont happen from the next program</p></li></ul><h4 id="问题5-Checking-Android-licenses-is-taking-an-unexpectedly-long-time…"><a href="#问题5-Checking-Android-licenses-is-taking-an-unexpectedly-long-time…" class="headerlink" title="问题5: Checking Android licenses is taking an unexpectedly long time…"></a>问题5: Checking Android licenses is taking an unexpectedly long time…</h4><p>终端运行</p><pre><code>flutter doctor --android-licenses</code></pre><p>会检查是否需要更新 Android SDK  ,并重启电脑 </p><p>如下提示则成功:</p><pre><code>All SDK package licenses accepted.======] 100% Computing updates...  </code></pre><h4 id="问题6-AndroidStudio安装完flutter-dart插件后，重启，AndroidStudio再次提示没有安装dart-实际上flutter-sdk中已经有dart了"><a href="#问题6-AndroidStudio安装完flutter-dart插件后，重启，AndroidStudio再次提示没有安装dart-实际上flutter-sdk中已经有dart了" class="headerlink" title="问题6 AndroidStudio安装完flutter,dart插件后，重启，AndroidStudio再次提示没有安装dart,实际上flutter sdk中已经有dart了"></a>问题6 AndroidStudio安装完flutter,dart插件后，重启，AndroidStudio再次提示没有安装dart,实际上flutter sdk中已经有dart了</h4><p><strong>解决</strong>：AndroidStudio需要设置flutter的目录，设置方法：<br>file-&gt;setting-&gt;languages&amp;Frameworks-&gt;flutter</p><h4 id="问题7-Failed-to-install-the-following-Android-SDK-packages-as-some-licences-have-not-been-accepted"><a href="#问题7-Failed-to-install-the-following-Android-SDK-packages-as-some-licences-have-not-been-accepted" class="headerlink" title="问题7: Failed to install the following Android SDK packages as some licences have not been accepted"></a>问题7: Failed to install the following Android SDK packages as some licences have not been accepted</h4><p><strong>解决</strong>：</p><p>用flutter进行编写时出现了标题的错误，不是配置的原因，而是需要接受SDK的证书，反正不难操作即可解决。</p><ul><li>1、首先打开控制台，使用如下命令：</li></ul><pre><code>cd /Users/你的用户名/Library/Android/sdkcd toolscd bin</code></pre><ul><li>2、最关键的一部就是下面这个语句</li></ul><pre><code>sdkmanager.bat --licenses</code></pre><p>执行之后，它会提示你去允许认证，然后<br>命令会提醒你确定y/n（accept lincense），一路y下去便可以了。</p><p><a href="https://www.cnblogs.com/tian874540961/p/10560985.html" target="_blank" rel="noopener">参考解决方案</a></p><h4 id="问题8-No-active-package-devtools-pub-finished-with-exit-code-65"><a href="#问题8-No-active-package-devtools-pub-finished-with-exit-code-65" class="headerlink" title="问题8: No active package devtools. pub finished with exit code 65"></a>问题8: No active package devtools. pub finished with exit code 65</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-75739e9485c18dc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>Android Studio 点击 Open in DevTools時，报错：</li></ul><pre><code>No active package devtools. pub finished with exit code 65</code></pre><p><strong>解决</strong>：<br>没有安装DevTools, 终端调用命令安装, 安装后重新启动Android Studio, 并运行项目,再次点击Open in DevTools</p><pre><code>flutter packages pub global activate devtools</code></pre><ul><li>如果没有安装成功, 并且提示以下信息,按照信息提示,在<code>.bash_profile</code>文件中添加<br><strong>export PATH=”$PATH”:”你的flutterSDK路径/.pub-cache/bin”</strong></li></ul><pre><code>Warning: Pub installs executables into /Users/SKFlutter/flutter/.pub-cache/bin, which is not on your path.You can fix that by adding this to your shell&#39;s config file (.bashrc, .bash_profile, etc.):  export PATH=&quot;$PATH&quot;:&quot;你的flutterSDK路径/.pub-cache/bin&quot;Activated devtools 0.2.5.</code></pre><p>再次执行</p><pre><code>flutter packages pub global activate devtools</code></pre>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Flutter] 01-Mac环境搭建Flurrer </title>
      <link href="/2020/06/14/Flutter-01-Mac%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAFlurrer/"/>
      <url>/2020/06/14/Flutter-01-Mac%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAFlurrer/</url>
      <content type="html"><![CDATA[<blockquote><p>建议先看官方文档, 下面是作者自己的搭建过程,仅供参考<br><a href="https://flutterchina.club/setup-macos/" target="_blank" rel="noopener">官方中文文档</a></p></blockquote><h3 id="一、安装Android-Studio"><a href="#一、安装Android-Studio" class="headerlink" title="一、安装Android Studio"></a>一、安装Android Studio</h3><p>如果想为Flutter配置Android开发环境，需要在我们的电脑上安装一个Android Studio.<br>Android Studio是基于IntelliJ IDEA的、Google 官方的 Android 应用集成开发环境 (IDE)。</p><h4 id="1-建议从官网下载安装3-5-3版使用-用最新版3-6-3有和Flutter和Dart插件兼容问题"><a href="#1-建议从官网下载安装3-5-3版使用-用最新版3-6-3有和Flutter和Dart插件兼容问题" class="headerlink" title="1.建议从官网下载安装3.5.3版使用, 用最新版3.6.3有和Flutter和Dart插件兼容问题"></a>1.建议从官网下载安装3.5.3版使用, 用最新版3.6.3有和Flutter和Dart插件兼容问题</h4><p><a href="https://developer.android.google.cn/studio/archive" target="_blank" rel="noopener">Android Studio所有版本下载</a></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-cbbb4e902b030aa2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-下载Flutter和Dart插件"><a href="#2-下载Flutter和Dart插件" class="headerlink" title="2.下载Flutter和Dart插件"></a>2.下载Flutter和Dart插件</h4><ul><li>Android Studio完后下载Flutter和Dart插件</li><li>点击左上角Android Studio进入Preferences</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-d2a971bd09681ec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>Plugins中搜索Flutter, 下载第一个,同样下载Dart</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-92ad402d4b7307cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="3-添加模拟器"><a href="#3-添加模拟器" class="headerlink" title="3.添加模拟器"></a>3.添加模拟器</h4><p>1&gt;.  在您的机器上启用 <a href="https://developer.android.com/studio/run/emulator-acceleration.html" target="_blank" rel="noopener">VM acceleration</a> .<br>2&gt;.  启动 <strong>Android Studio&gt;Tools&gt;Android&gt;AVD Manager</strong> 并选择 <strong>Create Virtual Device</strong>.<br>3&gt;.  选择一个设备并选择 <strong>Next</strong>。<br>4&gt;.  为要模拟的Android版本选择一个或多个系统映像，然后选择 <strong>Next</strong>. 建议使用 <em>x86</em> 或 <em>x86_64</em> image .<br>5&gt;.  在 Emulated Performance下, 选择 <strong>Hardware - GLES 2.0</strong> 以启用 <a href="https://developer.android.com/studio/run/emulator-acceleration.html" target="_blank" rel="noopener">硬件加速</a>.<br>6&gt;.  验证AVD配置是否正确，然后选择 <strong>Finish</strong>。<br>有关上述步骤的详细信息，请参阅 <a href="https://developer.android.com/studio/run/managing-avds.html" target="_blank" rel="noopener">Managing AVDs</a>.<br>7&gt;.  在 Android Virtual Device Manager中, 点击工具栏的 <strong>Run</strong>。模拟器启动并显示所选操作系统版本或设备的启动画面.<br>8&gt;.  运行 <code>flutter run</code> 启动您的设备. 连接的设备名是 <code>Android SDK built for &lt;platform&gt;</code>,其中 <em>platform</em> 是芯片系列, 如 x86.</p><h4 id="4-查看AndroidSDK路径"><a href="#4-查看AndroidSDK路径" class="headerlink" title="4. 查看AndroidSDK路径"></a>4. 查看AndroidSDK路径</h4><ul><li>Android Studio可以查看AndroidSDK路径, 启动页点击Configure-&gt;SDKManager</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-e55b092439d6d34a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="二、Flutter-SDK"><a href="#二、Flutter-SDK" class="headerlink" title="二、Flutter SDK"></a>二、Flutter SDK</h3><p>1.Flutter官网下载其最新可用的安装包下载SDK<br><a href="https://flutter.dev/docs/development/tools/sdk/releases" target="_blank" rel="noopener">Flutter官网SDK下载</a></p><p>2.解压安装包到你指定的目录，可以右键用解压工具,也可以用下面命令</p><pre><code>cd ~/developmentunzip ~/Downloads/flutter_macos_1.17.1-stable.zip</code></pre><p>3.如果下面指令只在当前命令行窗口执行, 该设置PATH环境变量是临时的，要想永久将Flutter添加到PATH,需要将下面代码添加到<code>.bash_profile</code>文件中:</p><p>首先终端输入, 打开<code>.bash_profile</code>文件</p><pre><code>open ~/.bash_profile</code></pre><p><code>.bash_profile</code>文件中添加下面环境配置</p><pre><code>#Flutter环境变量SDK地址export PATH=本地flutter路径/bin:$PATH#Android环境变量,#android sdk目录，替换为你自己的即可, 该路径可以在 Android Studio 中查看export ANDROID_HOME=&quot;/Users/用户名/Library/Android/sdk&quot;export PATH=${PATH}:${ANDROID_HOME}/toolsexport PATH=${PATH}:${ANDROID_HOME}/platform-tools#google提供服务地址export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn#Dart环境变量export DART_HOME=/Users/SKFlutter/flutter/bin/cache/dart-sdk/binexport PATH=&quot;${DART_HOME}:${PATH}&quot;</code></pre><p>其中google提供服务地址 也可以使用上海交通大学的镜像地址</p><pre><code>export PUB_HOSTED_URL=https://dart-pub.mirrors.sjtug.sjtu.edu.cnexport FLUTTER_STORAGE_BASE_URL=https://mirrors.sjtug.sjtu.edu.cn</code></pre><p>4.运行 source $HOME/.bash_profile 刷新当前终端窗口。</p><blockquote><p>注意: 如果你使用终端是zsh，终端启动时 ~/.bash_profile 将不会被加载，解决办法就是修改 ～/.zshrc ，在其中添加：<code>source ～/.bash_profile</code></p></blockquote><p>5.验证“flutter/bin”是否已在PATH中：</p><pre><code>echo $PATH</code></pre><h3 id="三、当前终端窗口检测flutter环境"><a href="#三、当前终端窗口检测flutter环境" class="headerlink" title="三、当前终端窗口检测flutter环境"></a>三、当前终端窗口检测flutter环境</h3><pre><code>export FLUTTER_HOME=flutterSDK路径export PATH=$PATH:$FLUTTER_HOME/binexport PATH=$PATH:$FLUTTER_HOME/bin/cache/dart-sdk/binflutter doctor</code></pre><p>完成提示:</p><pre><code>Doctor summary (to see all details, run flutter doctor -v):[✓] Flutter (Channel stable, v1.17.1, on Mac OS X 10.15.4 19E287, locale    zh-Hans-CN)[✓] Android toolchain - develop for Android devices (Android SDK version 28.0.3)[✓] Xcode - develop for iOS and macOS (Xcode 11.5)[✓] Android Studio (version 3.5)[✓] VS Code (version 1.45.1)[✓] Connected device (1 available)• No issues found!</code></pre><h3 id="四、VSCode-配置"><a href="#四、VSCode-配置" class="headerlink" title="四、VSCode 配置"></a>四、VSCode 配置</h3><h4 id="1-VSCode中文配置"><a href="#1-VSCode中文配置" class="headerlink" title="1) VSCode中文配置"></a>1) VSCode中文配置</h4><p>1.打开“vscode” ，按快捷键“Ctrl+Shift+P”。<br>2.在顶部搜索框中输入“configure language”，按回车键。<br><img src="https://upload-images.jianshu.io/upload_images/126164-5ed72cada481a61d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="快捷键“Ctrl+Shift+P” 后弹窗 "></p><p>3.“vscode”里面就会打开一个语言配置文件，将“en-us”修改成“zh-cn”，按“Ctrl+S”保存设置，重启“vscode”就可以了.<br><img src="https://upload-images.jianshu.io/upload_images/126164-466f5268fa68902f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>4.如果没有zh-cn ,点击下面 <code>Install additional languages</code>, 下载中文语言包后,再次重复上面操作.</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-489d8d9725037075.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载中文包"></p><h4 id="2-VSCode代码提示配置"><a href="#2-VSCode代码提示配置" class="headerlink" title="2) VSCode代码提示配置"></a>2) VSCode代码提示配置</h4><ul><li><p>代码片段<br><code>Flutter Widget Snippets</code>: 提供 Widget 代码片段<br><code>Awesome Flutter Snippets</code>: 提供常用函数的代码片段。使用起来非常方便，例如创建一个 Stateful App，只需要输入 fstful，即可快速创建。</p></li><li><p>高亮<br><code>Bracket Pair Colorizer</code><br>vscode 自动会为 Dart 代码进行高亮显示，因此无需下载其他高亮插件。但是写过 Flutter 的应该都会觉得， Flutter 简直就是嵌套地狱。因此推荐这个插件，可对括号进行高亮匹配显示，这样更易于阅读以及修改代码。</p></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 28-响应式编程</title>
      <link href="/2020/06/11/Swift5-1-28-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/06/11/Swift5-1-28-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h3><p>响应式编程（Reactive Programming，简称RP）</p><ul><li>也是一种编程范式，于1997年提出，可以简化异步编程，提供更优雅的数据绑定</li><li>一般与函数式融合在一起，所以也会叫做：<code>函数响应式编程</code>（Functional Reactive Programming，简称FRP）</li></ul><p><strong>比较著名的、成熟的响应式框架:</strong></p><ul><li><p>ReactiveCocoa<br>简称RAC，有Objective-C、Swift版本<br>官网： <a href="http://reactivecocoa.io/" target="_blank" rel="noopener">http://reactivecocoa.io/</a><br>github：<a href="https://github.com/ReactiveCocoa" target="_blank" rel="noopener">https://github.com/ReactiveCocoa</a></p></li><li><p>ReactiveX<br>简称Rx，有众多编程语言的版本，比如RxJava、RxKotlin、RxJS、RxCpp、RxPHP、RxGo、RxSwift等等<br>官网： <a href="http://reactivex.io/" target="_blank" rel="noopener">http://reactivex.io/</a><br>github： <a href="https://github.com/ReactiveX" target="_blank" rel="noopener">https://github.com/ReactiveX</a></p></li></ul><h3 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h3><ul><li><p>RxSwift（ReactiveX for Swift），ReactiveX的Swift版本<br>源码：<a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="noopener">https://github.com/ReactiveX/RxSwift</a><br>中文文档： <a href="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/" target="_blank" rel="noopener">https://beeth0ven.github.io/RxSwift-Chinese-Documentation/</a></p></li><li><p>RxSwift的github上已经有详细的安装教程，这里只演示CocoaPods方式的安装</p></li></ul><p>①    Podfile</p><pre><code>use_frameworks!target &#39;target_name&#39; dopod &#39;RxSwift&#39;, &#39;~&gt; 5&#39;pod &#39;RxCocoa&#39;, &#39;~&gt; 5&#39;end</code></pre><p>②    命令行</p><pre><code>pod repo updatepod install</code></pre><p>③    导入模块</p><pre><code>import RxSwiftimport RxCocoa</code></pre><ul><li>模块说明:<br>RxSwift：Rx标准API的Swift实现，不包括任何iOS相关的内容<br>RxCocoa：基于RxSwift，给iOS UI控件扩展了很多Rx特性</li></ul><h3 id="RxSwift的核心角色"><a href="#RxSwift的核心角色" class="headerlink" title="RxSwift的核心角色"></a>RxSwift的核心角色</h3><ul><li>Observable：负责发送事件（Event）</li><li>Observer：负责订阅Observable，监听Observable发送的事件（Event）</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-602713453e477267.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>发出事件为枚举实例:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token builtin">Event</span><span class="token operator">&lt;</span><span class="token builtin">Element</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// Next element is produced.</span>    <span class="token keyword">case</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token builtin">Element</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/// Sequence terminated with an error.</span>    <span class="token keyword">case</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token builtin">Swift</span><span class="token punctuation">.</span><span class="token builtin">Error</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/// Sequence completed successfully.</span>    <span class="token keyword">case</span> completed<span class="token punctuation">}</span></code></pre><p><strong>Event有3种:</strong></p><ul><li>next：携带具体数据</li><li>error：携带错误信息，表明Observable终止，不会再发出事件</li><li>completed：表明Observable终止，不会再发出事件</li></ul><h3 id="创建、订阅Observable"><a href="#创建、订阅Observable" class="headerlink" title="创建、订阅Observable"></a>创建、订阅Observable</h3><ul><li>发送一个事件</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> observable <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">.</span>create <span class="token punctuation">{</span> observer <span class="token keyword">in</span>    observer<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    observer<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">Disposables</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等价于</span>observable <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> observable <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  observable <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>发送多个事件</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> observable <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">.</span>create <span class="token punctuation">{</span>    observer <span class="token keyword">in</span>  observer<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    observer<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    observer<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    observer<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">Disposables</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等价于</span>observable <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>observable <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift">observable<span class="token punctuation">.</span>subscribe <span class="token punctuation">{</span> event <span class="token keyword">in</span>    <span class="token function">print</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift">observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>onNext<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">,</span> $<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> onError<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> $<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> onCompleted<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"completed"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> onDisposed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"dispose"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>创建定时器</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//参数1: 延迟时间,  period:间隔时间,  scheduler: 执行线程</span><span class="token keyword">let</span> observable <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                       period<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                       scheduler<span class="token punctuation">:</span> <span class="token builtin">MainScheduler</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span>observable<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token string">"数值是<span class="token interpolation"><span class="token delimiter variable">\(</span>$<span class="token number">0</span><span class="token delimiter variable">)</span></span>"</span> <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> label<span class="token punctuation">.</span>rx<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">disposed</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> bag<span class="token punctuation">)</span></code></pre><h3 id="创建Observer"><a href="#创建Observer" class="headerlink" title="创建Observer"></a>创建Observer</h3><ul><li>1&gt;AnyObserver 创建Observer</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token builtin">AnyObserver</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token keyword">init</span> <span class="token punctuation">{</span> event <span class="token keyword">in</span>    <span class="token keyword">switch</span> event <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">let</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span>completed<span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"completed"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">let</span> error<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>2&gt; Binder 创建Observer</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> binder <span class="token operator">=</span> <span class="token builtin">Binder</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span><span class="token punctuation">(</span>label<span class="token punctuation">)</span> <span class="token punctuation">{</span> label<span class="token punctuation">,</span> text <span class="token keyword">in</span>    label<span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">}</span><span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token string">"数值是<span class="token interpolation"><span class="token delimiter variable">\(</span>$<span class="token number">0</span><span class="token delimiter variable">)</span></span>"</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>binder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token string">"数值是<span class="token interpolation"><span class="token delimiter variable">\(</span>$<span class="token number">0</span><span class="token delimiter variable">)</span></span>"</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> binder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="扩展Binder属性"><a href="#扩展Binder属性" class="headerlink" title="扩展Binder属性"></a>扩展Binder属性</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">Reactive</span> <span class="token keyword">where</span> <span class="token builtin">Base</span><span class="token punctuation">:</span> <span class="token builtin">UIView</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> hidden<span class="token punctuation">:</span> <span class="token builtin">Binder</span><span class="token operator">&lt;</span><span class="token builtin">Bool</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token builtin">Binder</span><span class="token operator">&lt;</span><span class="token builtin">Bool</span><span class="token operator">></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span> <span class="token punctuation">{</span> view<span class="token punctuation">,</span> value <span class="token keyword">in</span>            view<span class="token punctuation">.</span>isHidden <span class="token operator">=</span> value        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> observable <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          scheduler<span class="token punctuation">:</span> <span class="token builtin">MainScheduler</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span>observable<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> button<span class="token punctuation">.</span>rx<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disposed</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> bag<span class="token punctuation">)</span></code></pre><h3 id="传统的状态监听"><a href="#传统的状态监听" class="headerlink" title="传统的状态监听"></a>传统的状态监听</h3><p>在开发中经常要对各种状态进行监听，传统的常见监听方案有</p><ul><li>KVO</li><li>Target-Action</li><li>Notification</li><li>Delegate</li><li>Block Callback</li></ul><p>传统方案经常会出现错综复杂的依赖关系、耦合性较高，还需要编写重复的非业务代码</p><h3 id="RxSwift的状态监听1"><a href="#RxSwift的状态监听1" class="headerlink" title="RxSwift的状态监听1"></a>RxSwift的状态监听1</h3><pre class=" language-swift"><code class="language-swift">button<span class="token punctuation">.</span>rx<span class="token punctuation">.</span>tap<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>onNext<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"按钮被点击了1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disposed</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> bag<span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Rose"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> tableView<span class="token punctuation">.</span>rx<span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>cellIdentifier<span class="token punctuation">:</span> <span class="token string">"cell"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> row<span class="token punctuation">,</span> person<span class="token punctuation">,</span> cell <span class="token keyword">in</span>    cell<span class="token punctuation">.</span>textLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> person<span class="token punctuation">.</span>name    cell<span class="token punctuation">.</span>detailTextLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>person<span class="token punctuation">.</span>age<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">disposed</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> bag<span class="token punctuation">)</span>tableView<span class="token punctuation">.</span>rx<span class="token punctuation">.</span><span class="token function">modelSelected</span><span class="token punctuation">(</span><span class="token builtin">Person</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>onNext<span class="token punctuation">:</span> <span class="token punctuation">{</span> person <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"点击了"</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disposed</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> bag<span class="token punctuation">)</span></code></pre><h3 id="RxSwift的状态监听2"><a href="#RxSwift的状态监听2" class="headerlink" title="RxSwift的状态监听2"></a>RxSwift的状态监听2</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span> <span class="token builtin">NSObject</span> <span class="token punctuation">{</span>    <span class="token atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token operator">?</span><span class="token punctuation">}</span>dog<span class="token punctuation">.</span>rx<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>onNext<span class="token punctuation">:</span> <span class="token punctuation">{</span> name <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"name is"</span><span class="token punctuation">,</span> name <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">"nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disposed</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> bag<span class="token punctuation">)</span>dog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"larry"</span>dog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"wangwang"</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token builtin">NotificationCenter</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span>rx    <span class="token punctuation">.</span><span class="token function">notification</span><span class="token punctuation">(</span><span class="token builtin">UIApplication</span><span class="token punctuation">.</span>didEnterBackgroundNotification<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>onNext<span class="token punctuation">:</span> <span class="token punctuation">{</span> notification <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"APP进入后台"</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disposed</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> bag<span class="token punctuation">)</span></code></pre><h3 id="既是Observable，又是Observer"><a href="#既是Observable，又是Observer" class="headerlink" title="既是Observable，又是Observer"></a>既是Observable，又是Observer</h3><pre class=" language-swift"><code class="language-swift"><span class="token builtin">Observable</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> slider<span class="token punctuation">.</span>rx<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>slider.rx.value.map {    &quot;当前数值是：\($0)&quot;}.bind(to: textField.rx.text).disposed(by: bag)</code></pre><pre class=" language-swift"><code class="language-swift">textField<span class="token punctuation">.</span>rx<span class="token punctuation">.</span>text    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>onNext<span class="token punctuation">:</span> <span class="token punctuation">{</span> text <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"text is"</span><span class="token punctuation">,</span> text <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">"nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disposed</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> bag<span class="token punctuation">)</span></code></pre><ul><li>诸如UISlider.rx.value、UTextField.rx.text这类属性值，既是Observable，又是Observer</li><li>它们是RxCocoa.ControlProperty类型</li></ul><h3 id="Disposable"><a href="#Disposable" class="headerlink" title="Disposable"></a>Disposable</h3><ul><li>每当Observable被订阅时，都会返回一个Disposable实例，当调用Disposable的dispose，就相当于取消订阅</li><li>在不需要再接收事件时，建议取消订阅，释放资源。有3种常见方式取消订阅</li></ul><p>1&gt; 立即取消订阅（一次性订阅）</p><pre class=" language-swift"><code class="language-swift">observable<span class="token punctuation">.</span>subscribe <span class="token punctuation">{</span> event <span class="token keyword">in</span>    <span class="token function">print</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>2&gt; 当bag销毁（deinit）时，会自动调用Disposable实例的dispose</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> bag <span class="token operator">=</span> <span class="token function">DisposeBag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>observable<span class="token punctuation">.</span>subscribe <span class="token punctuation">{</span> event <span class="token keyword">in</span>    <span class="token function">print</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">disposed</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> bag<span class="token punctuation">)</span></code></pre><p>3&gt; self销毁时（deinit）时，会自动调用Disposable实例的dispose</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> <span class="token number">_</span> <span class="token operator">=</span> observable<span class="token punctuation">.</span><span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>rx<span class="token punctuation">.</span>deallocated<span class="token punctuation">)</span><span class="token punctuation">.</span>subscribe <span class="token punctuation">{</span> event <span class="token keyword">in</span>    <span class="token function">print</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 27-面向协议编程</title>
      <link href="/2020/06/10/Swift5-1-27-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/06/10/Swift5-1-27-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="面向协议编程"><a href="#面向协议编程" class="headerlink" title="面向协议编程"></a>面向协议编程</h3><p>面向协议编程（Protocol Oriented Programming，简称POP）</p><ul><li>是Swift的一种编程范式， Apple于2015年WWDC提出</li><li>在Swift的标准库中，能见到大量POP的影子</li></ul><ul><li>同时，Swift也是一门面向对象的编程语言（Object Oriented Programming，简称OOP）</li><li>在Swift开发中，OOP和POP是相辅相成的，任何一方并不能取代另一方</li><li>POP能弥补OOP一些设计上的不足</li></ul><h3 id="回顾OOP"><a href="#回顾OOP" class="headerlink" title="回顾OOP"></a>回顾OOP</h3><p>1&gt; OOP的三大特性：封装、继承、多态</p><p>2&gt; 继承的经典使用场合:</p><ul><li>当多个类（比如A、B、C类）具有很多共性时，可以将这些共性抽取到一个父类中（比如D类），最后A、B、C类继承D类</li></ul><h3 id="OOP的不足"><a href="#OOP的不足" class="headerlink" title="OOP的不足"></a>OOP的不足</h3><p><strong>1)但有些问题，使用OOP并不能很好解决</strong> </p><ul><li>比如 如何将 BVC、DVC 的公共方法 run 抽取出来？</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">BVC</span><span class="token punctuation">:</span> <span class="token builtin">UIViewController</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">DVC</span><span class="token punctuation">:</span> <span class="token builtin">UITableViewController</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2) 基于OOP想到的一些解决方案？</strong></p><p>1.将run方法放到另一个对象A中，然后BVC、DVC拥有对象A属性<br>缺点: 多了一些额外的依赖关系</p><p>2.将run方法增加到UIViewController分类中<br>缺点: UIViewController会越来越臃肿，而且会影响它的其他所有子类</p><p>3.将run方法抽取到新的父类，采用多继承？（C++支持多继承）<br>缺点: 会增加程序设计复杂度，产生菱形继承等问题，需要开发者额外解决</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-d9a1ec67e45b1731.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="POP的解决方案"><a href="#POP的解决方案" class="headerlink" title="POP的解决方案"></a>POP的解决方案</h3><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BVC</span><span class="token punctuation">:</span> <span class="token builtin">UIViewController</span><span class="token punctuation">,</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DVC</span><span class="token punctuation">:</span> <span class="token builtin">UITableViewController</span><span class="token punctuation">,</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="再举例"><a href="#再举例" class="headerlink" title="再举例"></a>再举例</h3><p><img src="https://upload-images.jianshu.io/upload_images/126164-e1c014c18559b004.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="POP的注意点"><a href="#POP的注意点" class="headerlink" title="POP的注意点"></a>POP的注意点</h3><ul><li>优先考虑创建协议，而不是父类（基类）</li><li>优先考虑值类型（struct、enum），而不是引用类型（class）</li><li>巧用协议的扩展功能</li><li>不要为了面向协议而使用协议</li></ul><h3 id="利用协议实现前缀效果"><a href="#利用协议实现前缀效果" class="headerlink" title="利用协议实现前缀效果"></a>利用协议实现前缀效果</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123fdsf434"</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>my<span class="token punctuation">.</span><span class="token function">numberCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>1&gt; 前缀类型:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token constant">MY</span><span class="token operator">&lt;</span><span class="token builtin">Base</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> base<span class="token punctuation">:</span> <span class="token builtin">Base</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token number">_</span> base<span class="token punctuation">:</span> <span class="token builtin">Base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>base <span class="token operator">=</span> base    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2&gt; 利用协议 扩展前缀属性</p><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">MYCompatible</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">MYCompatible</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> my<span class="token punctuation">:</span> <span class="token constant">MY</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">{</span> <span class="token constant">MY</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token keyword">self</span> <span class="token punctuation">}</span>        <span class="token keyword">set</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> my<span class="token punctuation">:</span><span class="token constant">MY</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token function">MY</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3&gt; 让扩展功能的类型 遵守协议, 给前缀类型扩展功能</p><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//给字符串扩展功能, 让String拥有my前缀属性</span><span class="token keyword">extension</span> <span class="token builtin">String</span><span class="token punctuation">:</span> <span class="token builtin">MYCompatible</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//给String.my , String().my 前缀扩展功能</span><span class="token keyword">extension</span> <span class="token constant">MY</span> <span class="token keyword">where</span> <span class="token builtin">Base</span> <span class="token operator">==</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">numberCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> <span class="token builtin">count</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> base <span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token builtin">count</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token builtin">count</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Base-类"><a href="#Base-类" class="headerlink" title="Base: 类"></a>Base: 类</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Person</span><span class="token punctuation">:</span> <span class="token builtin">MYCompatible</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token constant">MY</span> <span class="token keyword">where</span> <span class="token builtin">Base</span><span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token builtin">Person</span><span class="token punctuation">.</span>my<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">Student</span><span class="token punctuation">.</span>my<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>my<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>my<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Base-协议"><a href="#Base-协议" class="headerlink" title="Base: 协议"></a>Base: 协议</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> s1<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"123fdsf434"</span><span class="token keyword">var</span> s2<span class="token punctuation">:</span> <span class="token builtin">NSString</span> <span class="token operator">=</span> <span class="token string">"123fdsf434"</span><span class="token keyword">var</span> s3<span class="token punctuation">:</span> <span class="token builtin">NSMutableString</span> <span class="token operator">=</span> <span class="token string">"123fdsf434"</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>my<span class="token punctuation">.</span><span class="token function">numberCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>my<span class="token punctuation">.</span><span class="token function">numberCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>my<span class="token punctuation">.</span><span class="token function">numberCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">String</span><span class="token punctuation">:</span> <span class="token builtin">MYCompatible</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">NSString</span><span class="token punctuation">:</span> <span class="token builtin">MYCompatible</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token constant">MY</span> <span class="token keyword">where</span> <span class="token builtin">Base</span><span class="token punctuation">:</span> <span class="token builtin">ExpressibleByStringLiteral</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">numberCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> string <span class="token operator">=</span> base <span class="token keyword">as</span><span class="token operator">!</span> <span class="token builtin">String</span>        <span class="token keyword">var</span> <span class="token builtin">count</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> string <span class="token keyword">where</span>  <span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token builtin">count</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token builtin">count</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="利用协议实现类型判断"><a href="#利用协议实现类型判断" class="headerlink" title="利用协议实现类型判断"></a>利用协议实现类型判断</h3><ul><li>协议最终就是一个具体类型, 有 metadate</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token number">_</span> value<span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span> value <span class="token keyword">is</span> <span class="token punctuation">[</span><span class="token builtin">Any</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token function">isArray</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token function">isArray</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token function">isArray</span><span class="token punctuation">(</span> <span class="token function">NSArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token function">isArray</span><span class="token punctuation">(</span> <span class="token function">NSMutableArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">ArrayType</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Array</span><span class="token punctuation">:</span> <span class="token builtin">ArrayType</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">NSArray</span><span class="token punctuation">:</span> <span class="token builtin">ArrayType</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">isArrayType</span><span class="token punctuation">(</span><span class="token number">_</span> type<span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">.</span><span class="token keyword">Type</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span> type <span class="token keyword">is</span> <span class="token builtin">ArrayType</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token punctuation">}</span><span class="token function">isArrayType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token function">isArrayType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>  <span class="token function">isArrayType</span><span class="token punctuation">(</span><span class="token builtin">NSArray</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token function">isArrayType</span><span class="token punctuation">(</span><span class="token builtin">NSMutableArray</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 26-函数式编程</title>
      <link href="/2020/06/10/Swift5-1-26-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/06/10/Swift5-1-26-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="Array的常见操作"><a href="#Array的常见操作" class="headerlink" title="Array的常见操作"></a>Array的常见操作</h3><ul><li><strong>arr.map()</strong> : 遍历数组每一个元素, 每遍历一个元素调用一次闭包,将元素传入闭包,闭包获取元素进行各种处理, 最后返回一个值.</li><li><strong>arr.filter()</strong> : 遍历数组每一个元素, 每遍历一个元素调用一次闭包,将元素传入闭包, 闭包获取元素进行各种处理, 最后返回Bool值, 如果返回true会将元素添加到新数组中.</li><li><strong>arr.reduce()</strong> : 遍历数组每一个元素,每遍历一个元素调用一次闭包,<br>将元素传入闭包, 闭包中 <code>result</code>上次遍历返回值 , <code>result</code>初始值为reduce传入值, <code>element</code> 每次遍历取出元素</li></ul><p><strong>1) map 映射函数</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token keyword">in</span>    <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2, 4, 6, 8]</span><span class="token comment" spellcheck="true">// 简化为</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span></code></pre><p><strong>2) filter 过滤函数</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token builtin">filter</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token keyword">in</span>    <span class="token keyword">return</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [2, 4]</span><span class="token comment" spellcheck="true">//简化为:</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token builtin">filter</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span></code></pre><p><strong>3) reduce 函数</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token keyword">in</span>    result <span class="token operator">+</span> element<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//10</span><span class="token comment" spellcheck="true">//简化为:</span><span class="token comment" spellcheck="true">// $0 上次遍历返回的结果 (初始值为0)</span><span class="token comment" spellcheck="true">// $1 每次遍历到的数组元素</span><span class="token keyword">var</span> arr4 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> $<span class="token number">1</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 10</span><span class="token keyword">var</span> arr5 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-25701fceadf845d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一张图解说Map/filter/reduce"></p><p><strong>示例一:</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// [2, 4, 6, 8]</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>double<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>示例二: Map 与 flatMap区别</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// [[1], [2, 2], [3, 3, 3]]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>repeating<span class="token punctuation">:</span> $<span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">count</span><span class="token punctuation">:</span> $<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// [1, 2, 2, 3, 3, 3]</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span>flatMap <span class="token punctuation">{</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>repeating<span class="token punctuation">:</span> $<span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">count</span><span class="token punctuation">:</span> $<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><pre><code>arr.map(transform: (Int) throws -&gt;  T)arr.flatMap(transform: (Int) throws -&gt; Sequence)</code></pre><ul><li>flatMap: 传入数组元素, 遍历完后,返回<code>Sequence</code> 新的数组, 新数组元素为<code>ElementOfResult</code>.</li><li>map: 传入数组元素, 返回新数组, 新数组数组元素和传入元素类型相同. </li></ul><p>区别:</p><ul><li>map: 无论返回什么类型, 再次包装可选项</li><li>flatMap: 如果以前是非可选项,会包装成可选项. 如果以前是可选项,  不再包装成可选项.</li></ul><p><strong>示例三: compactMap() 函数</strong><br>compactMap() 压缩紧凑: 每次遍历后自动将处理结果解包, 如果结果为空则过滤</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"-30"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// [Optional(123), nil, nil, Optional(-30)]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token function">Int</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// [123, -30]</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span>compactMap <span class="token punctuation">{</span> <span class="token function">Int</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p><strong>示例四: 使用reduce实现map、filter的功能</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// [2, 4, 6, 8]</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> <span class="token punctuation">[</span>$<span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [2, 4]</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token builtin">filter</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> $<span class="token number">1</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> $<span class="token number">0</span> <span class="token operator">+</span> <span class="token punctuation">[</span>$<span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> $<span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="lazy的优化"><a href="#lazy的优化" class="headerlink" title="lazy的优化"></a>lazy的优化</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token keyword">lazy</span><span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token keyword">in</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"mapping <span class="token interpolation"><span class="token delimiter variable">\(</span>i<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"begin-----"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"mapped"</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"mapped"</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"mapped"</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"end----"</span><span class="token punctuation">)</span></code></pre><p>打印结果</p><pre><code>begin-----mapping 1mapped 2mapping 2mapped 4mapping 3mapped 6end----</code></pre><h3 id="Optional的map和flatMap"><a href="#Optional的map和flatMap" class="headerlink" title="Optional的map和flatMap"></a>Optional的map和flatMap</h3><p><strong>示例一:</strong></p><pre><code>var num1: Int? = 10// Optional(20)var num2 = num1.map { $0 * 2 }var num3: Int? = nil// nilvar num4 = num3.map { $0 * 2 }</code></pre><ul><li>map() 会将传入值解包.</li><li>map() 会将返回值包装为 Optional</li><li>map() 如果返回值为nil, 则不再执行闭包, 返回nil</li></ul><p><strong>示例二:</strong></p><pre><code>var num1: Int? = 10// Optional(Optional(20))var num2 = num1.map { Optional.some($0 * 2) }// Optional(20)var num3 = num1.flatMap { Optional.some($0 * 2) }</code></pre><ul><li>flatMap () 返回值如果已经是Optional, 就不会再次包装.如果返回值不是Optional会包装为Optional.</li></ul><p><strong>示例三:</strong></p><pre><code>var num1: Int? = 10var num2 = (num1 != nil) ? (num1! + 10) : nilvar num3 = num1.map { $0 + 10 }// num2、num3是等价的</code></pre><p><strong>示例四:</strong></p><pre><code>var fmt = DateFormatter()fmt.dateFormat = &quot;yyyy-MM-dd&quot;var str: String? = &quot;2011-09-10&quot;// oldvar date1 = str != nil ? fmt.date(from: str!) : nilvar date2 = str.flatMap { fmt.date(from: $0)  } //可简写为//  newvar date3 = str.flatMap(fmt.date)</code></pre><p><strong>示例五: map替换三目运算符</strong></p><pre><code>var score: Int? = 98// oldvar str1 = score != nil ? &quot;socre is \(score!)&quot; : &quot;No score&quot;// newvar str2 = score.map { &quot;score is \($0)&quot; } ?? &quot;No score&quot;</code></pre><p><strong>示例六:</strong></p><pre><code>struct Person {var name: String  var age: Int}var items = [    Person(name: &quot;jack&quot;, age: 20),    Person(name: &quot;rose&quot;, age: 21),    Person(name: &quot;kate&quot;, age: 22)]// oldfunc getPerson1(_ name: String) -&gt; Person? {    let index = items.firstIndex { $0.name == name }    return index != nil ? items[index!] : nil}// newfunc getPerson2(_ name: String) -&gt; Person? {    return items.firstIndex { $0.name == name }.map { items[$0] }}</code></pre><p><strong>示例七:</strong></p><pre><code>struct Person {    var name: String  var age: Int    init?(_ json: [String : Any]) {        guard let name = json[&quot;name&quot;] as? String,            let age = json[&quot;age&quot;] as? Int else { // 逗号代表两边条件必须同时成立                return nil        }        self.name = name        self.age = age    }}var json: Dictionary? = [&quot;name&quot; : &quot;Jack&quot;, &quot;age&quot; : 10]// oldvar p1 = json != nil ? Person(json!) : nil// newvar p2 = json.flatMap(Person.init)</code></pre><h3 id="函数式编程（Funtional-Programming）"><a href="#函数式编程（Funtional-Programming）" class="headerlink" title="函数式编程（Funtional Programming）"></a>函数式编程（Funtional Programming）</h3><p>1&gt; 函数式编程（Funtional Programming，简称FP）是一种编程范式，也就是如何编写程序的方法论.</p><ul><li>主要思想：把计算过程尽量分解成一系列可复用函数的调用</li><li>主要特征：函数是“第一等公民”</li><li>函数与其他数据类型一样的地位，可以赋值给其他变量，也可以作为函数参数、函数返回值</li></ul><p>2&gt; 函数式编程最早出现在LISP语言，绝大部分的现代编程语言也对函数式编程做了不同程度的支持，比如</p><ul><li>Haskell、JavaScript、Python、Swift、Kotlin、Scala等</li></ul><p>3&gt; 函数式编程中几个常用的概念</p><ul><li>Higher-Order Function、Function Currying</li><li>Functor、Applicative Functor、Monad</li></ul><p>参考资料:<br><a href="http://www.mokacoding.com/blog/functor-applicative-monads-in-pictures" target="_blank" rel="noopener">1.Swift Functors, Applicatives, and Monads in Pictures</a><br><a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html" target="_blank" rel="noopener">2.Functors, Applicatives, And Monads In Pictures</a></p><h3 id="FP实践-–-传统写法"><a href="#FP实践-–-传统写法" class="headerlink" title="FP实践 – 传统写法"></a>FP实践 – 传统写法</h3><p>假设要实现以下功能：[(num + 3) * 5 - 1] % 10 / 2</p><ul><li>传统写法:</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> v1 <span class="token operator">+</span> v2 <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> v1 <span class="token operator">-</span> v2 <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">multiple</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> v1 <span class="token operator">*</span> v2 <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> v1 <span class="token operator">/</span> v2 <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> v1 <span class="token operator">%</span> v2 <span class="token punctuation">}</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token function">multiple</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><h3 id="FP实践-–-函数式写法"><a href="#FP实践-–-函数式写法" class="headerlink" title="FP实践 – 函数式写法"></a>FP实践 – 函数式写法</h3><p><strong>1) 单个加法运算简化</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">_</span> v<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>         $<span class="token number">0</span> <span class="token operator">+</span> v  <span class="token comment" spellcheck="true">// 3传给v , num传入参数 $0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可以简写为</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//先接收一个参数, 再接收一个参数</span></code></pre><p>最终简化为:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">_</span> v<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> v   <span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//先接收一个参数, 再接收一个参数</span></code></pre><p><strong>2) 定义加 减 乘 除 取模 函数</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">_</span> v<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> v <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">_</span> v<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">-</span> v <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">multiple</span><span class="token punctuation">(</span><span class="token number">_</span> v<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">*</span> v <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">_</span> v<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">/</span> v <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">_</span> v<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">%</span> v <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>传统调用依然很繁琐:</li></ul><pre><code>let fn1 = add(3)let fn2 = multiple(5)let fn3 = sub(1)let fn4 = mod(10)let fn5 = divide(2)//num -&gt; fn1 -&gt; fn2 -&gt; fn3 -&gt; fn4 -&gt; fn5fn5( fn4( fn3( fn2( fn1(num) ) ) ) )</code></pre><p><strong>4) 函数合成</strong></p><ul><li>合成加和乘函数</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">composite</span><span class="token punctuation">(</span><span class="token number">_</span> f1<span class="token punctuation">:</span> @<span class="token function">escaping</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> f2<span class="token punctuation">:</span> @<span class="token function">escaping</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token function">f2</span><span class="token punctuation">(</span> <span class="token function">f1</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">composite</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">multiple</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//20</span></code></pre><ul><li>自定义运算符, 合成函数</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">infix</span> <span class="token keyword">operator</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token builtin">AdditionPrecedence</span><span class="token keyword">func</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">_</span> f1<span class="token punctuation">:</span> @<span class="token function">escaping</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">,</span>          <span class="token number">_</span> f2<span class="token punctuation">:</span> @<span class="token function">escaping</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">{</span>        <span class="token punctuation">{</span> <span class="token function">f2</span><span class="token punctuation">(</span> <span class="token function">f1</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token function">multiple</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//20</span><span class="token comment" spellcheck="true">//所有运算</span><span class="token keyword">let</span> fn2 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token function">multiple</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token function">fn2</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//4</span><span class="token comment" spellcheck="true">//参数传递: num先传入f1的参数, f1返回值传入f2的参数,  f2返回值传出</span></code></pre><ul><li><strong>注意: 柯里化<code>参数类型</code>和<code>返回值类型</code>必须相同才能合并!</strong></li><li>即 f1参数 必须和f2参数相同.</li></ul><p>函数合成最终简化为:</p><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 函数合成</span><span class="token keyword">infix</span> <span class="token keyword">operator</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token builtin">AdditionPrecedence</span><span class="token keyword">func</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> f1<span class="token punctuation">:</span> @<span class="token function">escaping</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> B<span class="token punctuation">,</span>                  <span class="token number">_</span> f2<span class="token punctuation">:</span> @<span class="token function">escaping</span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> C<span class="token punctuation">)</span>         <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> C <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token function">multiple</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><h3 id="高阶函数（Higher-Order-Function）"><a href="#高阶函数（Higher-Order-Function）" class="headerlink" title="高阶函数（Higher-Order Function）"></a>高阶函数（Higher-Order Function）</h3><p>高阶函数是至少满足下列一个条件的函数:</p><ul><li>接受一个或多个函数作为输入（map、filter、reduce等）</li><li>返回一个函数</li></ul><p>FP中到处都是高阶函数</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">_</span> v<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> v <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="柯里化（Currying）"><a href="#柯里化（Currying）" class="headerlink" title="柯里化（Currying）"></a>柯里化（Currying）</h3><p><strong>1) 什么是柯里化？</strong></p><ul><li>将一个接受多参数的函数变换为一系列只接受单个参数的函数</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-60a7385d3b662d69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><code>Array</code>、<code>Optional</code>的map方法接收的参数就是一个柯里化函数</li></ul><p><strong>2) 函数柯里化后参数顺序</strong></p><ul><li>根据给定函数柯里化</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>v1 <span class="token operator">-</span> v2<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v3<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>v1 <span class="token operator">-</span> v2 <span class="token operator">-</span> v3<span class="token punctuation">}</span></code></pre><ul><li>add1 add2分别柯里化</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span>$<span class="token number">0</span> <span class="token operator">-</span> v2<span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//$0 == 20 , v2 == 10</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 10</span><span class="token keyword">func</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">_</span> v3<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//v3 == 10</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> v2 <span class="token keyword">in</span>  <span class="token comment" spellcheck="true">// v2 == 20</span>        <span class="token keyword">return</span><span class="token punctuation">{</span> v1 <span class="token keyword">in</span>  <span class="token comment" spellcheck="true">// v1 == 30</span>            <span class="token keyword">return</span> v1 <span class="token operator">-</span> v2 <span class="token operator">-</span> v3          <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 0</span></code></pre><ul><li>最终写为:</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> currying<span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> fn<span class="token punctuation">:</span> @<span class="token function">escaping</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> C<span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> C <span class="token punctuation">{</span>        <span class="token punctuation">{</span> b <span class="token keyword">in</span> <span class="token punctuation">{</span> a <span class="token keyword">in</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> currying<span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> fn<span class="token punctuation">:</span> @<span class="token function">escaping</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> D<span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> D <span class="token punctuation">{</span>        <span class="token punctuation">{</span> c <span class="token keyword">in</span> <span class="token punctuation">{</span> b <span class="token keyword">in</span> <span class="token punctuation">{</span> a <span class="token keyword">in</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// c = 10 , b = 20 , a = 30</span><span class="token punctuation">}</span><span class="token keyword">let</span> curriedAdd1 <span class="token operator">=</span> <span class="token function">currying</span><span class="token punctuation">(</span>add1<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">curriedAdd1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//  20 - 10 </span><span class="token keyword">let</span> curriedAdd2 <span class="token operator">=</span> <span class="token function">currying</span><span class="token punctuation">(</span>add2<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">curriedAdd2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30 - 20 - 10</span></code></pre><ul><li><strong>注意: 如果传入参数有运算顺序的, 柯里化后会和原先传入参数顺序相反.</strong></li><li>函数add1 柯里化参数 A == v2,  B == v1</li><li>函数add2 柯里化参数 A == v3,  B == v2, C== v1</li><li>包装一次少一次参数, 最后包装剩一个参数就开始计算</li></ul><p><strong>3) 自定义运算符实现函数柯里化</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> v1 <span class="token operator">+</span> v2 <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> v1 <span class="token operator">-</span> v2 <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">multiple</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> v1 <span class="token operator">*</span> v2 <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> v1 <span class="token operator">/</span> v2 <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> v1 <span class="token operator">%</span> v2 <span class="token punctuation">}</span></code></pre><ul><li>示例函数自定义运算符, 函数转为柯里版本</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">prefix</span> <span class="token keyword">func</span> <span class="token operator">~</span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> fn<span class="token punctuation">:</span> @<span class="token function">escaping</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> C<span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> C <span class="token punctuation">{</span> <span class="token punctuation">{</span> b <span class="token keyword">in</span> <span class="token punctuation">{</span> a <span class="token keyword">in</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">~</span>sub<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//-10</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">infix</span> <span class="token keyword">operator</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token builtin">AdditionPrecedence</span><span class="token keyword">func</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> f1<span class="token punctuation">:</span> @<span class="token function">escaping</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> B<span class="token punctuation">,</span>                  <span class="token number">_</span> f2<span class="token punctuation">:</span> @<span class="token function">escaping</span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> C<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> C <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span>add<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">~</span>multiple<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">~</span>sub<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">~</span>mod<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">~</span>divide<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><h3 id="函子（Functor）"><a href="#函子（Functor）" class="headerlink" title="函子（Functor）"></a>函子（Functor）</h3><ul><li>像Array、Optional这样支持map运算的类型，称为<code>函子</code>（Functor）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token builtin">map</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Inner</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> T<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">Type</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token comment" spellcheck="true">// Inner是Type里边包装的东西</span></code></pre><p>Array的map</p><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// Array&lt;Element></span><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token builtin">map</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> transform<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Element</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> T<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span></code></pre><p>Optional的map</p><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// Optional&lt;Wrapped></span><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token builtin">map</span><span class="token operator">&lt;</span>U<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> transform<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Wrapped</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> U<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Optional</span><span class="token operator">&lt;</span>U<span class="token operator">></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-80bcf6574f315b8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-6ae8b4d1d7246d15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>图解: 将包装的2先解包, 加3操作后, 再次包装成盒子返回</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-2724a3408d6d71cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>图解: 如果盒子是空的, 就不能进行加3操作.</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-e33968ad15c27d3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>图解: 如果传入一堆包装的数据, 每次会遍历出一个盒子并解包进行加3操作, 操作后再次包装成盒子返回</p><h3 id="适用函子（Applicative-Functor）"><a href="#适用函子（Applicative-Functor）" class="headerlink" title="适用函子（Applicative Functor）"></a>适用函子（Applicative Functor）</h3><ul><li>对任意一个函子 F，如果能支持以下运算，该函子就是一个<code>适用函子</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> pure<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> value<span class="token punctuation">:</span> A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> F<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token keyword">func</span> <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token operator">></span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> F<span class="token operator">&lt;</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> B<span class="token operator">></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> F<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> F<span class="token operator">&lt;</span>B<span class="token operator">></span></code></pre><ul><li>Optional可以成为适用函子</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> pure<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> value<span class="token punctuation">:</span> A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> A <span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token keyword">infix</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token builtin">AdditionPrecedence</span><span class="token keyword">func</span> <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token operator">></span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> B<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span>A<span class="token operator">?</span> <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> B<span class="token operator">?</span> <span class="token punctuation">{</span>    <span class="token keyword">guard</span> <span class="token keyword">let</span> f <span class="token operator">=</span> fn<span class="token punctuation">,</span> <span class="token keyword">let</span> v <span class="token operator">=</span> value <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant">nil</span> <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> value<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> fn<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Operator(20)</span><span class="token function">print</span><span class="token punctuation">(</span>fn <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span> value <span class="token keyword">as</span> <span class="token builtin">Any</span><span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-bc687477a0e24888.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-21c471b3eec3ec58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>Array可以成为适用函子</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> pure<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> value<span class="token punctuation">:</span> A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token operator">></span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> B<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span>B<span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span>B<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> fn<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">==</span> value<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> fn<span class="token punctuation">.</span>startIndex<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>fn<span class="token punctuation">.</span>endIndex <span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// [10]</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">pure</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">-</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// [2, 12, -2]</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></code></pre><h3 id="单子（Monad）"><a href="#单子（Monad）" class="headerlink" title="单子（Monad）"></a>单子（Monad）</h3><ul><li>对任意一个类型 F，如果能支持以下运算，那么就可以称为是一个<code>单子</code>（Monad）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> pure<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> value<span class="token punctuation">:</span> A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> F<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token keyword">func</span> flatMap<span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> value<span class="token punctuation">:</span> F<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token punctuation">,</span> <span class="token number">_</span> fn<span class="token punctuation">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> F<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> F<span class="token operator">&lt;</span>B<span class="token operator">></span></code></pre><ul><li>很显然，Array、Optional都是单子</li></ul>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 25-Swift 常规用法</title>
      <link href="/2020/06/09/Swift5-1-25-Swift-%E5%B8%B8%E8%A7%84%E7%94%A8%E6%B3%95/"/>
      <url>/2020/06/09/Swift5-1-25-Swift-%E5%B8%B8%E8%A7%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Swift的字符串类型<code>String</code>，跟OC的<code>NSString</code>，在API设计上还是有较大差异:</p><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 空字符串</span><span class="token keyword">var</span> emptyStr1 <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">var</span> emptyStr2 <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> str<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token comment" spellcheck="true">// 拼接，jack_rose</span>str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"_2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 重载运算符 +</span>str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">"_3"</span><span class="token comment" spellcheck="true">// 重载运算符 +=</span>str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"_4"</span><span class="token comment" spellcheck="true">// \()插值</span>str <span class="token operator">=</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>str<span class="token delimiter variable">)</span></span>_5"</span><span class="token comment" spellcheck="true">// 长度，9，1_2_3_4_5</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token builtin">count</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="String的插入和删除"><a href="#String的插入和删除" class="headerlink" title="String的插入和删除"></a>String的插入和删除</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"1_2"</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token builtin">count</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span>startIndex<span class="token punctuation">,</span> str<span class="token punctuation">.</span>endIndex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3 Index(_rawBits: 1) Index(_rawBits: 196609)</span></code></pre><ul><li>注意: <code>startIndex</code>代表1后面位置, <code>endIndex</code> 代表2后面位置</li><li><code>insert(&quot;&quot; , at:)</code> 只能插入字符</li><li><code>insert(contentsOf: &quot;&quot;, at: )</code>  插入字符串</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"1_2"</span><span class="token comment" spellcheck="true">// 1_2_</span>str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> str<span class="token punctuation">.</span>endIndex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1_2_3_4</span>str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> <span class="token string">"3_4"</span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> str<span class="token punctuation">.</span>endIndex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1666_2_3_4</span>str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> <span class="token string">"666"</span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> str<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>after<span class="token punctuation">:</span> str<span class="token punctuation">.</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1666_2_3_8884</span>str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> <span class="token string">"888"</span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> str<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>before<span class="token punctuation">:</span> str<span class="token punctuation">.</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 从startIndex开始偏移4,插入hello</span>str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> str<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>startIndex<span class="token punctuation">,</span> offsetBy<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1666hello_2_3_8884  </span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 删除第一个字符</span>str<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> str<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 666hello_2_3_8884</span><span class="token comment" spellcheck="true">// 删除含有6的字符</span>str<span class="token punctuation">.</span>removeAll <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">"6"</span> <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//hello_2_3_8884 </span><span class="token comment" spellcheck="true">// 删除范围</span><span class="token keyword">var</span> range <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>endIndex<span class="token punctuation">,</span> offsetBy<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>before<span class="token punctuation">:</span> str<span class="token punctuation">.</span>endIndex<span class="token punctuation">)</span>str<span class="token punctuation">.</span><span class="token function">removeSubrange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//hello_2_3_4  </span></code></pre><h3 id="Substring-子串"><a href="#Substring-子串" class="headerlink" title="Substring 子串"></a>Substring 子串</h3><p>String可以通过下标、 prefix、 suffix等截取子串，子串类型不是String，而是<code>Substring</code></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"1_2_3_4_5"</span><span class="token comment" spellcheck="true">// 截取前3个字符的子串</span><span class="token keyword">var</span> substr1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token keyword">prefix</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//1_2</span><span class="token comment" spellcheck="true">//  截取后3个字符的子串</span><span class="token keyword">var</span> substr2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">suffix</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 4_5</span><span class="token comment" spellcheck="true">// 1_2  从开始截取3个字符</span><span class="token keyword">var</span> range <span class="token operator">=</span> str<span class="token punctuation">.</span>startIndex<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>startIndex<span class="token punctuation">,</span> offsetBy<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">var</span> substr3 <span class="token operator">=</span> str<span class="token punctuation">[</span>range<span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 最初的String，1_2_3_4_5</span><span class="token function">print</span><span class="token punctuation">(</span>substr3<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Substring -> String</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>substr3<span class="token punctuation">)</span></code></pre><ul><li>Substring和它的base，共享字符串数据</li><li>Substring发生<code>修改</code> 或者 <code>转为String</code>时，会分配新的内存存储字符串数据</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-873b183a62467541.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="String-与-Character"><a href="#String-与-Character" class="headerlink" title="String 与 Character"></a>String 与 Character</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"jack"</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// c是Character类型</span>    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token comment" spellcheck="true">// c是Character类型</span><span class="token keyword">var</span> c <span class="token operator">=</span> str<span class="token punctuation">[</span>str<span class="token punctuation">.</span>startIndex<span class="token punctuation">]</span></code></pre><h3 id="String相关的协议"><a href="#String相关的协议" class="headerlink" title="String相关的协议"></a>String相关的协议</h3><p><strong>BidirectionalCollection 协议包含的部分内容:</strong></p><ul><li>startIndex 、 endIndex 属性、index 方法</li><li><code>String</code>、<code>Array</code> 都遵守了这个协议</li></ul><p><strong>RangeReplaceableCollection 协议包含的部分内容:</strong></p><ul><li>append、insert、remove 方法</li><li><code>String</code>、<code>Array</code> 都遵守了这个协议</li></ul><p><strong>Dictionary、Set 也有实现上述协议中声明的一些方法，只是并没有遵守上述协议</strong></p><h3 id="多行String"><a href="#多行String" class="headerlink" title="多行String"></a>多行String</h3><p>多行字符串: 三个双引号开头, 三个双引号结尾的字符串</p><ul><li>注意: 字符串内容是按照最后一个三双引号对齐.</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">""</span>"<span class="token number">1</span>    <span class="token string">"2"</span><span class="token number">3</span>    <span class="token string">'4'</span><span class="token string">""</span>"<span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre><p>打印结果:</p><pre><code>1    &quot;2&quot;3    &#39;4&#39;</code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 以下2个字符串是等价的</span><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">"These are the same."</span> <span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">""</span>"<span class="token builtin">These</span> are the same<span class="token punctuation">.</span><span class="token string">""</span>"</code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 如果要显示3引号，至少转义1个引号</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">""</span>"<span class="token builtin">Escaping</span> the <span class="token builtin">first</span> quote \<span class="token string">""</span>"<span class="token builtin">Escaping</span> two quotes \<span class="token string">"\""</span><span class="token builtin">Escaping</span> all three quotes \<span class="token string">"\"\"  "</span><span class="token string">""</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token builtin">Escaping</span> the <span class="token builtin">first</span> quote <span class="token string">""</span>"<span class="token builtin">Escaping</span> two quotes <span class="token string">""</span>"<span class="token builtin">Escaping</span> all three quotes <span class="token string">""</span>"</code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//缩进以结尾的3引号为对齐线</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">""</span>"        <span class="token number">1</span>            <span class="token string">"2"</span>    <span class="token number">3</span>        <span class="token string">'4'</span>    <span class="token string">""</span>"<span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre><p>打印结果:</p><pre><code>    1        &quot;2&quot;3    &#39;4&#39;</code></pre><h3 id="String-与-NSString"><a href="#String-与-NSString" class="headerlink" title="String 与 NSString"></a>String 与 NSString</h3><p><strong>1&gt; String 与 NSString 之间可以随时随地桥接转换</strong></p><ul><li>如果你觉得String的API过于复杂难用，可以考虑将String转为NSString</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> str1<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token keyword">var</span> str2<span class="token punctuation">:</span> <span class="token builtin">NSString</span> <span class="token operator">=</span> <span class="token string">"rose"</span><span class="token keyword">var</span> str3 <span class="token operator">=</span> str1 <span class="token keyword">as</span> <span class="token builtin">NSString</span><span class="token keyword">var</span> str4 <span class="token operator">=</span> str2 <span class="token keyword">as</span> <span class="token builtin">String</span><span class="token comment" spellcheck="true">// ja</span><span class="token keyword">var</span> str5 <span class="token operator">=</span> str3<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token function">NSRange</span><span class="token punctuation">(</span>location<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span></code></pre><ul><li>注意: String 与 NSString 之间桥接后是两个不同类型, 修改内容互补影响.</li></ul><p><strong>2&gt; 比较字符串内容是否等价</strong></p><ul><li>String使用 == 运算符</li><li>NSString使用isEqual方法，也可以使用 == 运算符（本质还是调用了isEqual方法）</li></ul><p><strong>3&gt; Swift、OC桥接转换表</strong></p><ul><li>String与NSString可以互相桥接转换</li><li>String不能桥接转换成NSMutableString</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-db27906d9d7530db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>总结:</strong></p><ul><li>桥接指的是通过 <code>as</code> <code>as?</code> <code>as!</code> 转换类型</li><li>Swift中<code>String</code> \ <code>Array</code> \ <code>Dictionary</code> \ <code>Set</code>可以和OC不可变类型相互桥接转换</li><li>OC可变类型可以桥接转换成Swift中对应的 <code>String</code> \ <code>Array</code> \ <code>Dictionary</code> \ <code>Set</code></li><li>Swift中 <code>String</code> \ <code>Array</code> \ <code>Dictionary</code> \ <code>Set</code> 桥接转换成OC可变类型. 但可以创建新的可变类型存储内容.</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token comment" spellcheck="true">//String 不能桥接转换为 NSMutableString</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> str <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">NSMutableString</span>  <span class="token comment" spellcheck="true">// nil </span><span class="token keyword">var</span> str3 <span class="token operator">=</span> <span class="token function">NSMutableString</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//123456</span></code></pre><p><strong>问题: Person 继承NSObject, 内存是否有变化?</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">:</span><span class="token builtin">NSObject</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> weight <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span>  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>答:<br>Person 继承NSObject, 内存是有变化的.</p><ul><li>Swift中 p占32个字节: 8个字节 metadata, 8个字节 引用计数相关, 8个字节 age , 8个字节weight</li><li>OC中   p占32个字节: 8个字节 isa指针, 8个字节 age, 8个字节weight, 最后8个字节凑数</li></ul><h3 id="只能被class继承的协议"><a href="#只能被class继承的协议" class="headerlink" title="只能被class继承的协议"></a>只能被class继承的协议</h3><p>只能被class继承的协议, 如下三种方式:</p><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Runnable1</span><span class="token punctuation">:</span> <span class="token builtin">AnyObject</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>protocol <span class="token builtin">Runnable2</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token atrule">@objc</span> protocol <span class="token builtin">Runnable3</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>被 @objc 修饰的协议，还可以暴露给OC去遵守实现</p><h3 id="可选协议"><a href="#可选协议" class="headerlink" title="可选协议"></a>可选协议</h3><ul><li>可以通过 <code>@objc</code> 定义可选协议，这种协议只能被 <code>class</code> 遵守</li><li>还可以通过<code>extension</code> 定义可选协议</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token atrule">@objc</span> protocol <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token atrule">@objc</span> <span class="token keyword">optional</span> <span class="token keyword">func</span> <span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">run3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">extension</span>  <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Dog run2"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Dog run3"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Dog run1"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Dog run1</span>d<span class="token punctuation">.</span><span class="token function">run3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Dog run3</span></code></pre><h3 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h3><p>被 <code>@objc dynamic</code> 修饰的内容会具有动态性，比如调用方法会走<code>runtime</code>那一套流程</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span> <span class="token builtin">NSObject</span> <span class="token punctuation">{</span>    <span class="token atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  d<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-63c6c3d2f206131d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-bcf1a88d86fe4a23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="KVC-KVO"><a href="#KVC-KVO" class="headerlink" title="KVC\KVO"></a>KVC\KVO</h3><p>Swift 支持 KVC \ KVO 的条件</p><ul><li>属性所在的类、监听器最终继承自 <code>NSObject</code></li><li>用 <code>@objc dynamic</code> 修饰对应的属性</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">:</span> <span class="token builtin">NSObject</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">observeValue</span><span class="token punctuation">(</span>forKeyPath keyPath<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token operator">?</span><span class="token punctuation">,</span>                               of object<span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token operator">?</span><span class="token punctuation">,</span>                               change<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">NSKeyValueChangeKey</span> <span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">,</span>                               context<span class="token punctuation">:</span> <span class="token builtin">UnsafeMutableRawPointer</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"observeValue"</span><span class="token punctuation">,</span> change<span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">.</span>newKey<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token builtin">Any</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span> <span class="token builtin">NSObject</span> <span class="token punctuation">{</span>    <span class="token atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> observer<span class="token punctuation">:</span> <span class="token builtin">Observer</span> <span class="token operator">=</span> <span class="token function">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span>                         forKeyPath<span class="token punctuation">:</span> <span class="token string">"age"</span><span class="token punctuation">,</span>                         options<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">,</span>                         context<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">deinit</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">removeObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span>                            forKeyPath<span class="token punctuation">:</span> <span class="token string">"age"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// observeValue Optional(20)</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true">// observeValue Optional(25)</span>p<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string">"age"</span><span class="token punctuation">)</span></code></pre><h3 id="block方式的KVO"><a href="#block方式的KVO" class="headerlink" title="block方式的KVO"></a>block方式的KVO</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span> <span class="token builtin">NSObject</span> <span class="token punctuation">{</span>    <span class="token atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> observation<span class="token punctuation">:</span> <span class="token builtin">NSKeyValueObservation</span><span class="token operator">?</span>    <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        observation <span class="token operator">=</span> <span class="token function">observe</span><span class="token punctuation">(</span>\<span class="token builtin">Person</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span>person<span class="token punctuation">,</span> change<span class="token punctuation">)</span> <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>change<span class="token punctuation">.</span>newValue <span class="token keyword">as</span> <span class="token builtin">Any</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Optional(20)</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true">// Optional(25)</span>p<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string">"age"</span><span class="token punctuation">)</span></code></pre><h3 id="关联对象（Associated-Object）"><a href="#关联对象（Associated-Object）" class="headerlink" title="关联对象（Associated Object）"></a>关联对象（Associated Object）</h3><ul><li>在Swift中，<code>class</code>依然可以使用关联对象</li><li>默认情况，<code>extension</code>不可以增加<code>存储属性</code></li><li>借助关联对象，可以实现类似extension为class增加存储属性的效果</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">var</span> <span class="token constant">AGE_KEY</span><span class="token punctuation">:</span> <span class="token builtin">Void</span><span class="token operator">?</span>    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token function">objc_getAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token constant">AGE_KEY</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            <span class="token function">objc_setAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span>                                     <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token constant">AGE_KEY</span><span class="token punctuation">,</span>                                     newValue<span class="token punctuation">,</span>                                     <span class="token punctuation">.</span><span class="token constant">OBJC_ASSOCIATION_ASSIGN</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><h3 id="资源名管理"><a href="#资源名管理" class="headerlink" title="资源名管理"></a>资源名管理</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token function">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string">"logo"</span><span class="token punctuation">)</span><span class="token keyword">let</span> btn <span class="token operator">=</span> <span class="token function">UIButton</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token punctuation">.</span>custom<span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"添加"</span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>normal<span class="token punctuation">)</span><span class="token function">performSegue</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> <span class="token string">"login_main"</span><span class="token punctuation">,</span> sender<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token function">UIImage</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>image<span class="token punctuation">.</span>logo<span class="token punctuation">)</span><span class="token keyword">let</span> btn <span class="token operator">=</span> <span class="token function">UIButton</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token punctuation">.</span>custom<span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>add<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>normal<span class="token punctuation">)</span><span class="token function">performSegue</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> R<span class="token punctuation">.</span>segue<span class="token punctuation">.</span>login_main<span class="token punctuation">,</span> sender<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></code></pre><ul><li><p>这种做法实际上是参考了Android的资源名管理方式</p></li><li><p>实现原理:</p></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> R <span class="token punctuation">{</span>    <span class="token keyword">enum</span> string<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> add <span class="token operator">=</span> <span class="token string">"添加"</span>    <span class="token punctuation">}</span>    <span class="token keyword">enum</span> image<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> logo    <span class="token punctuation">}</span>    <span class="token keyword">enum</span> segue<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> login_main    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">UIImage</span> <span class="token punctuation">{</span>    <span class="token keyword">convenience</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token number">_</span> name<span class="token punctuation">:</span> R<span class="token punctuation">.</span>image<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> name<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">UIViewController</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">performSegue</span><span class="token punctuation">(</span>withIdentifier identifier<span class="token punctuation">:</span> R<span class="token punctuation">.</span>segue<span class="token punctuation">,</span> sender<span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">performSegue</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> identifier<span class="token punctuation">.</span>rawValue<span class="token punctuation">,</span> sender<span class="token punctuation">:</span> sender<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">UIButton</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token number">_</span> title<span class="token punctuation">:</span> R<span class="token punctuation">.</span>string<span class="token punctuation">,</span> <span class="token keyword">for</span> state<span class="token punctuation">:</span> <span class="token builtin">UIControl</span><span class="token punctuation">.</span><span class="token builtin">State</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>rawValue<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> state<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="资源名管理的其他思路"><a href="#资源名管理的其他思路" class="headerlink" title="资源名管理的其他思路"></a>资源名管理的其他思路</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token function">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string">"logo"</span><span class="token punctuation">)</span><span class="token keyword">let</span> font <span class="token operator">=</span> <span class="token function">UIFont</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Arial"</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token keyword">let</span> img <span class="token operator">=</span> R<span class="token punctuation">.</span>image<span class="token punctuation">.</span>logo<span class="token keyword">let</span> font <span class="token operator">=</span> R<span class="token punctuation">.</span>font<span class="token punctuation">.</span><span class="token function">arial</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span></code></pre><p>实现原理:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> R <span class="token punctuation">{</span>    <span class="token keyword">enum</span> image <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">var</span> logo <span class="token operator">=</span> <span class="token function">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string">"logo"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">enum</span> font <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">arial</span><span class="token punctuation">(</span><span class="token number">_</span> size<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">UIFont</span><span class="token operator">?</span> <span class="token punctuation">{</span>            <span class="token function">UIFont</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Arial"</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>更多优秀的思路参考<br><a href="https://github.com/mac-cain13/R.swift" target="_blank" rel="noopener">https://github.com/mac-cain13/R.swift</a><br><a href="https://github.com/SwiftGen/SwiftGen" target="_blank" rel="noopener">https://github.com/SwiftGen/SwiftGen</a></p><h3 id="多线程开发-–-异步"><a href="#多线程开发-–-异步" class="headerlink" title="多线程开发 – 异步"></a>多线程开发 – 异步</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">typealias</span> <span class="token builtin">Task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token builtin">Asyncs</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">async</span><span class="token punctuation">(</span><span class="token number">_</span> task<span class="token punctuation">:</span> @escaping <span class="token builtin">Task</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">_async</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">async</span><span class="token punctuation">(</span><span class="token number">_</span> task<span class="token punctuation">:</span> @escaping <span class="token builtin">Task</span><span class="token punctuation">,</span>                             <span class="token number">_</span> mainTask<span class="token punctuation">:</span> @escaping <span class="token builtin">Task</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">_async</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> mainTask<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">_async</span><span class="token punctuation">(</span><span class="token number">_</span> task<span class="token punctuation">:</span> @escaping <span class="token builtin">Task</span><span class="token punctuation">,</span>                               <span class="token number">_</span> mainTask<span class="token punctuation">:</span> <span class="token builtin">Task</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//DispatchWorkItem(block:) 包装任务</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token function">DispatchWorkItem</span><span class="token punctuation">(</span>block<span class="token punctuation">:</span> task<span class="token punctuation">)</span>        <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>execute<span class="token punctuation">:</span> item<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> main <span class="token operator">=</span> mainTask <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//item 任务执行完后, 执行notify(), 执行主任务</span>            item<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">,</span> execute<span class="token punctuation">:</span> main<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用:</p><pre><code>class ViewController: UIViewController {    override func viewDidLoad() {        super.viewDidLoad()        Asyncs.async {            print(1)        }        Asyncs.async({            print(1, Thread.current)        }) {            print(2, Thread.current)        }    }}/*11 &lt;NSThread: 0x600000805c00&gt;{number = 4, name = (null)}2 &lt;NSThread: 0x600000840e40&gt;{number = 1, name = main}*/</code></pre><h3 id="多线程开发-–-延迟"><a href="#多线程开发-–-延迟" class="headerlink" title="多线程开发 – 延迟"></a>多线程开发 – 延迟</h3><p><code>asyncAfter()</code> 延迟</p><pre class=" language-swift"><code class="language-swift">@discardableResult<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">_</span> seconds<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span>                         <span class="token number">_</span> block<span class="token punctuation">:</span> @escaping <span class="token builtin">Task</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">DispatchWorkItem</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token function">DispatchWorkItem</span><span class="token punctuation">(</span>block<span class="token punctuation">:</span> block<span class="token punctuation">)</span>    <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token builtin">DispatchTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> seconds<span class="token punctuation">,</span>                                  execute<span class="token punctuation">:</span> item<span class="token punctuation">)</span>    <span class="token keyword">return</span> item<span class="token punctuation">}</span></code></pre><h3 id="多线程开发-–-异步延迟"><a href="#多线程开发-–-异步延迟" class="headerlink" title="多线程开发 – 异步延迟"></a>多线程开发 – 异步延迟</h3><pre class=" language-swift"><code class="language-swift">@discardableResult<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">asyncDelay</span><span class="token punctuation">(</span><span class="token number">_</span> seconds<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span>                              <span class="token number">_</span> task<span class="token punctuation">:</span> @escaping <span class="token builtin">Task</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">DispatchWorkItem</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_asyncDelay</span><span class="token punctuation">(</span>seconds<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">}</span>@discardableResult<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">asyncDelay</span><span class="token punctuation">(</span><span class="token number">_</span> seconds<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span>                              <span class="token number">_</span> task<span class="token punctuation">:</span> @escaping <span class="token builtin">Task</span><span class="token punctuation">,</span>                              <span class="token number">_</span> mainTask<span class="token punctuation">:</span> @escaping <span class="token builtin">Task</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">DispatchWorkItem</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_asyncDelay</span><span class="token punctuation">(</span>seconds<span class="token punctuation">,</span> task<span class="token punctuation">,</span> mainTask<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">_asyncDelay</span><span class="token punctuation">(</span><span class="token number">_</span> seconds<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span>                                <span class="token number">_</span> task<span class="token punctuation">:</span> @escaping <span class="token builtin">Task</span><span class="token punctuation">,</span>                                <span class="token number">_</span> mainTask<span class="token punctuation">:</span> <span class="token builtin">Task</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">DispatchWorkItem</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token function">DispatchWorkItem</span><span class="token punctuation">(</span>block<span class="token punctuation">:</span> task<span class="token punctuation">)</span>    <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token builtin">DispatchTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> seconds<span class="token punctuation">,</span>                                      execute<span class="token punctuation">:</span> item<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> main <span class="token operator">=</span> mainTask <span class="token punctuation">{</span>        item<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">,</span> execute<span class="token punctuation">:</span> main<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> item<span class="token punctuation">}</span></code></pre><h3 id="多线程开发-–-once"><a href="#多线程开发-–-once" class="headerlink" title="多线程开发 – once"></a>多线程开发 – once</h3><ul><li><code>dispatch_once</code>在Swift中已被废弃，取而代之</li><li>可以用<code>类型属性</code>或者<code>全局变量\常量</code></li><li>默认自带    <code>lazy</code> +  <code>dispatch_once</code> 效 果</li></ul><pre class=" language-swift"><code class="language-swift">fileprivate <span class="token keyword">let</span> initTask2<span class="token punctuation">:</span> <span class="token builtin">Void</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"initTask2---------"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token builtin">UIViewController</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> initTask1<span class="token punctuation">:</span> <span class="token builtin">Void</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"initTask1---------"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> <span class="token number">_</span> <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">.</span>initTask1        <span class="token keyword">let</span> <span class="token number">_</span> <span class="token operator">=</span> initTask2    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="多线程开发-–-加锁"><a href="#多线程开发-–-加锁" class="headerlink" title="多线程开发 – 加锁"></a>多线程开发 – 加锁</h3><ul><li>GCD信号量</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">var</span> lock <span class="token operator">=</span> <span class="token function">DispatchSemaphore</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">_</span> key<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token number">_</span> value<span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> <span class="token punctuation">{</span> lock<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>NSLock() 互斥锁<br>但是有递归调用会死锁</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">var</span> lock <span class="token operator">=</span> <span class="token function">NSLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">_</span> key<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token number">_</span> value<span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token punctuation">{</span> lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>NSRecursiveLock() 递归锁</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">var</span> lock <span class="token operator">=</span> <span class="token function">NSRecursiveLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">_</span> key<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token number">_</span> value<span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token punctuation">{</span> lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 24-OC与Swift 混编</title>
      <link href="/2020/06/09/Swift5-1-24-OC%E4%B8%8ESwift-%E6%B7%B7%E7%BC%96/"/>
      <url>/2020/06/09/Swift5-1-24-OC%E4%B8%8ESwift-%E6%B7%B7%E7%BC%96/</url>
      <content type="html"><![CDATA[<h3 id="MARK、TODO、FIXME"><a href="#MARK、TODO、FIXME" class="headerlink" title="MARK、TODO、FIXME"></a>MARK、TODO、FIXME</h3><pre><code>// MARK: 类似于OC中的 #pragma mark// MARK: - 类似于OC中的 #pragma mark -// TODO: 用于标记未完成的任务// FIXME: 用于标记待修复的问题</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-80e9280690880554.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-28e3b753077e0902.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-58d9db0d3f6d84a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-61ff08e692f2190b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>补充:</p><ul><li>使用#warning(“undo”) 标记未做的事情</li><li>定义有返回值函数, 如果没写完可以用<code>fatalError()</code>占位</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    #<span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">"undo"</span><span class="token punctuation">)</span>    <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 操作系统：macOS\iOS\tvOS\watchOS\Linux\Android\Windows\FreeBSD</span>#<span class="token keyword">if</span> <span class="token function">os</span><span class="token punctuation">(</span>macOS<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">os</span><span class="token punctuation">(</span>iOS<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// CPU 架 构 ：i386\x86_64\arm\arm64</span>#elseif <span class="token function">arch</span><span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">arch</span><span class="token punctuation">(</span>arm64<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// swift版本</span>#elseif <span class="token function">swift</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">swift</span><span class="token punctuation">(</span><span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 模拟器</span>#elseif <span class="token function">targetEnvironment</span><span class="token punctuation">(</span>simulator<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可以导入某模块</span>#elseif <span class="token function">canImport</span><span class="token punctuation">(</span><span class="token builtin">Foundation</span><span class="token punctuation">)</span>  #<span class="token keyword">else</span>#endif</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-89f2dade06b1ba3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre class=" language-swift"><code class="language-swift">#<span class="token keyword">if</span> <span class="token constant">DEBUG</span><span class="token comment" spellcheck="true">// debug模式</span>#<span class="token keyword">else</span><span class="token comment" spellcheck="true">// release模式 </span>#endif</code></pre><pre class=" language-swift"><code class="language-swift">#<span class="token keyword">if</span> <span class="token constant">TEST</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>#endif#<span class="token keyword">if</span> <span class="token constant">OTHER</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span>#endif</code></pre><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> log<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> msg<span class="token punctuation">:</span> T<span class="token punctuation">,</span>            file<span class="token punctuation">:</span> <span class="token builtin">NSString</span> <span class="token operator">=</span> #file<span class="token punctuation">,</span>            line<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> #line<span class="token punctuation">,</span>            fn<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> #function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    #<span class="token keyword">if</span> <span class="token constant">DEBUG</span>    <span class="token keyword">let</span> <span class="token keyword">prefix</span> <span class="token operator">=</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>file<span class="token punctuation">.</span>lastPathComponent<span class="token delimiter variable">)</span></span>_<span class="token interpolation"><span class="token delimiter variable">\(</span>line<span class="token delimiter variable">)</span></span>_<span class="token interpolation"><span class="token delimiter variable">\(</span>fn<span class="token delimiter variable">)</span></span>:"</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">prefix</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>    #endif<span class="token punctuation">}</span></code></pre><h3 id="系统版本检测"><a href="#系统版本检测" class="headerlink" title="系统版本检测"></a>系统版本检测</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">if</span> #<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">10</span><span class="token punctuation">,</span> macOS <span class="token number">10.12</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对于iOS平台，只在iOS10及以上版本执行</span>    <span class="token comment" spellcheck="true">// 对于macOS平台，只在macOS 10.12及以上版本执行</span>    <span class="token comment" spellcheck="true">// 最后的*表示在其他所有平台都执行</span><span class="token punctuation">}</span></code></pre><h3 id="API可用性说明"><a href="#API可用性说明" class="headerlink" title="API可用性说明"></a>API可用性说明</h3><pre class=" language-swift"><code class="language-swift">@<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">10</span><span class="token punctuation">,</span> macOS <span class="token number">10.15</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token builtin">Student</span> <span class="token punctuation">{</span>    @<span class="token function">available</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> unavailable<span class="token punctuation">,</span> renamed<span class="token punctuation">:</span> <span class="token string">"study"</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">study_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    @<span class="token function">available</span><span class="token punctuation">(</span>iOS<span class="token punctuation">,</span> deprecated<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">)</span>    @<span class="token function">available</span><span class="token punctuation">(</span>macOS<span class="token punctuation">,</span> deprecated<span class="token punctuation">:</span> <span class="token number">10.12</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>更多用法参考：<a href="https://docs.swift.org/swift-book/ReferenceManual/Attributes.html" target="_blank" rel="noopener">https://docs.swift.org/swift-book/ReferenceManual/Attributes.html</a></p><h3 id="iOS程序的入口"><a href="#iOS程序的入口" class="headerlink" title="iOS程序的入口"></a>iOS程序的入口</h3><ul><li><p>在AppDelegate上面默认有个<code>@UIApplicationMain</code>标记，这表示<br>编译器自动生成入口代码（main函数代码），自动设置AppDelegate为APP的代理</p></li><li><p>也可以删掉<code>@UIApplicationMain</code>，自定义入口代码：新建一个main.swift文件</p></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//  main.swift</span><span class="token comment" spellcheck="true">//  TestDemo</span><span class="token keyword">import</span> <span class="token builtin">UIKit</span><span class="token keyword">class</span> <span class="token class-name">MyApplication</span><span class="token punctuation">:</span> <span class="token builtin">UIApplication</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">UIApplicationMain</span><span class="token punctuation">(</span><span class="token builtin">CommandLine</span><span class="token punctuation">.</span>argc<span class="token punctuation">,</span>                  <span class="token builtin">CommandLine</span><span class="token punctuation">.</span>unsafeArgv<span class="token punctuation">,</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span><span class="token builtin">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span><span class="token builtin">AppDelegate</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="Swift调用OC"><a href="#Swift调用OC" class="headerlink" title="Swift调用OC"></a>Swift调用OC</h3><ul><li>1&gt; 新建1个桥接头文件，文件名格式默认为：<strong>{targetName}-Bridging-Header.h</strong></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-14fdf07fdc0cfb57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>如果直接创建OC类文件, 会提示(如下图)并自动创建 {targetName}-Bridging-Header.h文件</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-a3fa074b7a6b8d8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>2&gt; 在 {targetName}-Bridging-Header.h 文件中 #import OC需要暴露给Swift的内容</li></ul><pre><code>#import &quot;Person.h&quot;</code></pre><h3 id="Swift调用OC-1"><a href="#Swift调用OC-1" class="headerlink" title="Swift调用OC"></a>Swift调用OC</h3><ul><li>1&gt; Person.h 代码</li></ul><pre><code>int sum(int a, int b);@interface Person : NSObject@property (nonatomic, assign) NSInteger age;@property (nonatomic, copy) NSString *name;- (instancetype)initWithAge:(NSInteger)age name:(NSString *)name;+ (instancetype)personWithAge:(NSInteger)age name:(NSString *)name;- (void)run;+ (void)run;- (void)eat:(NSString *)food other:(NSString *)other;+ (void)eat:(NSString *)food other:(NSString *)other;@end</code></pre><ul><li>2&gt; Person.m 代码</li></ul><pre><code>@implementation Person- (instancetype)initWithAge:(NSInteger)age name:(NSString *)name {    if (self = [super init]) {        self.age = age;        self.name = name;    }    return self;}+ (instancetype)personWithAge:(NSInteger)age name:(NSString *)name {    return [[self alloc] initWithAge:age name:name];}+ (void)run { NSLog(@&quot;Person +run&quot;); }-  (void)run { NSLog(@&quot;%zd %@ -run&quot;, _age, _name); }+ (void)eat:(NSString *)food other:(NSString *)other {    NSLog(@&quot;Person +eat %@ %@&quot;, food, other);}- (void)eat:(NSString *)food other:(NSString *)other {    NSLog(@&quot;%zd %@-eat %@ %@&quot;, _age, _name, food, other);}@endint sum(int a, int b) { return a + b; }</code></pre><ul><li>3&gt; main.swift 中 swift代码</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Rose"</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 18 Rose -run</span>p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token string">"Water"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 18 Rose -eat Apple Water</span><span class="token builtin">Person</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Person +run</span><span class="token builtin">Person</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"Pizza"</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token string">"Banana"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Person +eat Pizza Banana</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span></code></pre><h3 id="Swift调用OC-–-silgen-name"><a href="#Swift调用OC-–-silgen-name" class="headerlink" title="Swift调用OC – @_silgen_name"></a>Swift调用OC – @_silgen_name</h3><p><strong>应用场景1:</strong></p><ul><li>如果C语言暴露给Swift的函数名跟Swift中的其他函数名冲突了</li><li>可以在Swift中使用 <code>@_silgen_name</code> 修改C函数名</li></ul><pre><code>// C语言int sum(int a, int b) {    return a + b;}</code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// Swift  </span>@<span class="token function">_silgen_name</span><span class="token punctuation">(</span><span class="token string">"sum"</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">swift_sum</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int32</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int32</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int32</span><span class="token comment" spellcheck="true">// C语言函数名, 重命名函数 swift_sum</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">swift_sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span></code></pre><p><strong>应用场景2</strong>:<br> <code>_silgen_name</code>可以将系统私有函数重命名后使用.</p><h3 id="OC调用Swift"><a href="#OC调用Swift" class="headerlink" title="OC调用Swift"></a>OC调用Swift</h3><ul><li>Xcode已经默认生成一个用于OC调用Swift的头文件，文件名格式是：    {targetName}-Swift.h</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-4c81f867f57142d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>OC项目中如果直接创建swift类文件, 会提示(如下图)并自动创建 {targetName}-Bridging-Header.h文件</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-1433357fe1d57c33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>1&gt; Car.swift 文件</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token builtin">Foundation</span>@objcMembers <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span> <span class="token builtin">NSObject</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> price<span class="token punctuation">:</span> <span class="token builtin">Double</span>    <span class="token keyword">var</span> band<span class="token punctuation">:</span> <span class="token builtin">String</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>price<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> band<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price        <span class="token keyword">self</span><span class="token punctuation">.</span>band <span class="token operator">=</span> band    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> band<span class="token punctuation">,</span> <span class="token string">"run"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Car run"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> band<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>2&gt; Swift暴露给OC的类最终继承自NSObject</li><li>3&gt; 使用<code>@objc</code>修饰需要暴露给OC的成员</li><li>4&gt; 使用<code>@objcMembers</code>修饰类<br>代表默认所有成员都会暴露给OC（包括扩展中定义的成员）<br>最终是否成功暴露，还需要考虑成员自身的访问级别</li></ul><ul><li>6&gt; OC代码<br>OC文件中导入<code>#import &quot;Test-Swift.h&quot;</code></li></ul><pre class=" language-swift"><code class="language-swift">#<span class="token keyword">import</span> <span class="token string">"Test-Swift.h"</span>int <span class="token function">sum</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">Car</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">Car</span> alloc<span class="token punctuation">]</span> initWithPrice<span class="token punctuation">:</span><span class="token number">10.5</span> band<span class="token punctuation">:</span>@<span class="token string">"BMW"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span>band <span class="token operator">=</span> @<span class="token string">"Bently"</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">108.5</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>c run<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 108.5 Bently run  [c test]; // 108.5 Bently test  [Car run]; // Car run</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="OC调用Swift-–-objc"><a href="#OC调用Swift-–-objc" class="headerlink" title="OC调用Swift – @objc"></a>OC调用Swift – @objc</h3><p>可以通过 <code>@objc</code> 重命名Swift暴露给OC的符号名（类名、属性名、函数名等）</p><pre class=" language-swift"><code class="language-swift">@<span class="token function">objc</span><span class="token punctuation">(</span><span class="token builtin">Car</span><span class="token punctuation">)</span>@objcMembers <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span> <span class="token builtin">NSObject</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> price<span class="token punctuation">:</span> <span class="token builtin">Double</span>    @<span class="token function">objc</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">var</span> band<span class="token punctuation">:</span> <span class="token builtin">String</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>price<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> band<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price        <span class="token keyword">self</span><span class="token punctuation">.</span>band <span class="token operator">=</span> band    <span class="token punctuation">}</span>    @<span class="token function">objc</span><span class="token punctuation">(</span>drive<span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> band<span class="token punctuation">,</span> <span class="token string">"run"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Car run"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Car</span> <span class="token punctuation">{</span>  @<span class="token function">objc</span><span class="token punctuation">(</span>exec<span class="token punctuation">:</span>v2<span class="token punctuation">:</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> band<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>Car *c = [[Car alloc] initWithPrice:10.5 band:@&quot;BMW&quot;];c.name = @&quot;Bently&quot;;c.price = 108.5;[c drive]; // 108.5 Bently run[c exec:10 v2:20]; // 108.5 Bently test[Car run]; // Car run</code></pre><p><strong>思考:</strong><br>1.为什么Swfit暴露给OC类最终要继承自NSObject?<br>答:<br>OC依赖于runtime机制,runtime要求类有isa指针, 使用消息传递机制就需要继承自NSObject</p><p>2.p.run()底层是怎么调用的?反过来,OC调用Swift底层又是如何调用?<br>答:运行runtime机制, 执行obj_msgSend</p><p>3.car.run()底层是怎么调用的?<br>答:<br>swift中, 调用暴露给OC类的方法,使用虚表.<br>如果实在要用OC的runtime机制, 可以在方法前加<code>dynamic</code>关键字. </p><h3 id="选择器（Selector）"><a href="#选择器（Selector）" class="headerlink" title="选择器（Selector）"></a>选择器（Selector）</h3><ul><li>Swift中依然可以使用选择器，使用<code>#selector(name)</code>定义一个选择器</li><li>必须是被<code>@objcMembers</code>或<code>@objc</code>修饰的方法才可以定义选择器</li></ul><pre class=" language-swift"><code class="language-swift">@objcMembers <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span> <span class="token builtin">NSObject</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"test2(v1:v2:)"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"test2(_:_:)"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perform</span><span class="token punctuation">(</span>#<span class="token function">selector</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">perform</span><span class="token punctuation">(</span>#<span class="token function">selector</span><span class="token punctuation">(</span><span class="token function">test1</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">perform</span><span class="token punctuation">(</span>#<span class="token function">selector</span><span class="token punctuation">(</span><span class="token function">test2</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span>v2<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">perform</span><span class="token punctuation">(</span>#<span class="token function">selector</span><span class="token punctuation">(</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token number">_</span><span class="token punctuation">:</span><span class="token number">_</span><span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">perform</span><span class="token punctuation">(</span>#<span class="token function">selector</span><span class="token punctuation">(</span>test2 <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 23-模式匹配</title>
      <link href="/2020/06/08/Swift5-1-23-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
      <url>/2020/06/08/Swift5-1-23-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
      <content type="html"><![CDATA[<h3 id="什么是模式？"><a href="#什么是模式？" class="headerlink" title="什么是模式？"></a>什么是模式？</h3><ul><li>模式是用于匹配的规则，比如<code>switch</code>的<code>case</code>、捕捉错误的<code>catch</code>、<code>if\guard\while\for</code>语句的条件等</li></ul><p><strong>Swift中的模式有:</strong></p><ul><li>通配符模式（Wildcard Pattern）</li><li>标识符模式（Identifier Pattern）</li><li>值绑定模式（Value-Binding Pattern）</li><li>元组模式（Tuple Pattern）</li><li>枚举Case模式（Enumeration Case Pattern）</li><li>可选模式（Optional Pattern）</li><li>类型转换模式（Type-Casting Pattern）</li><li>表达式模式（Expression Pattern）</li></ul><h3 id="通配符模式（Wildcard-Pattern）"><a href="#通配符模式（Wildcard-Pattern）" class="headerlink" title="通配符模式（Wildcard Pattern）"></a>通配符模式（Wildcard Pattern）</h3><ul><li><code>_</code> 匹配任何值</li><li><code>_?</code> 匹配非nil值</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Life</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">human</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">animal</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">_</span> life<span class="token punctuation">:</span> <span class="token builtin">Life</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> life <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">human</span><span class="token punctuation">(</span><span class="token keyword">let</span> name<span class="token punctuation">,</span> <span class="token number">_</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"human"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">animal</span><span class="token punctuation">(</span><span class="token keyword">let</span> name<span class="token punctuation">,</span> <span class="token number">_</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"animal"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">human</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Rose"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// human Rose</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">human</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// human Jack</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">animal</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Dog"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// animal Dog</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">animal</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Cat"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// other</span></code></pre><h3 id="标识符模式（Identifier-Pattern）"><a href="#标识符模式（Identifier-Pattern）" class="headerlink" title="标识符模式（Identifier Pattern）"></a>标识符模式（Identifier Pattern）</h3><ul><li>给对应的变量、常量名赋值</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"jack"</span></code></pre><h3 id="值绑定模式（Value-Binding-Pattern）"><a href="#值绑定模式（Value-Binding-Pattern）" class="headerlink" title="值绑定模式（Value-Binding Pattern）"></a>值绑定模式（Value-Binding Pattern）</h3><ul><li>将元组point 值绑定到 元组 (x, y)中</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">switch</span> point <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The point is at (<span class="token interpolation"><span class="token delimiter variable">\(</span>x<span class="token delimiter variable">)</span></span>, <span class="token interpolation"><span class="token delimiter variable">\(</span>y<span class="token delimiter variable">)</span></span>)."</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="元组模式（Tuple-Pattern）"><a href="#元组模式（Tuple-Pattern）" class="headerlink" title="元组模式（Tuple Pattern）"></a>元组模式（Tuple Pattern）</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">_</span><span class="token punctuation">)</span> <span class="token keyword">in</span> points <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">let</span> info<span class="token punctuation">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">_</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token number">_</span> <span class="token punctuation">,</span> <span class="token number">_</span> <span class="token keyword">as</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"case"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// default</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"jack"</span> <span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">"rose"</span> <span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"kate"</span> <span class="token punctuation">:</span> <span class="token number">86</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token keyword">in</span> scores <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="枚举Case模式（Enumeration-Case-Pattern）"><a href="#枚举Case模式（Enumeration-Case-Pattern）" class="headerlink" title="枚举Case模式（Enumeration Case Pattern）"></a>枚举Case模式（Enumeration Case Pattern）</h3><p><code>if case</code>语句等价于只有1个case的<code>switch</code>语句</p><ul><li>示例一:</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// 原来的写法</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"[0, 9]"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 枚举Case模式</span><span class="token keyword">if</span> <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">9</span> <span class="token operator">=</span> age <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"[0, 9]"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">guard</span> <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">9</span> <span class="token operator">=</span> age <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"[0, 9]"</span><span class="token punctuation">)</span></code></pre><p>等价于:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">switch</span> age <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"[0, 9]"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">}</span></code></pre><ul><li>示例二:</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> ages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token operator">?</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token constant">nil</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token keyword">case</span> <span class="token constant">nil</span> <span class="token keyword">in</span> ages <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"有nil值"</span><span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 有nil值</span></code></pre><ul><li>示例三:</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">in</span> points <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 1 3</span></code></pre><h3 id="可选模式（Optional-Pattern）"><a href="#可选模式（Optional-Pattern）" class="headerlink" title="可选模式（Optional Pattern）"></a>可选模式（Optional Pattern）</h3><ul><li>示例一:</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token keyword">if</span> <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">let</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> age <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//可选类型本质是枚举</span><span class="token comment" spellcheck="true">//上行代码等价于下行</span><span class="token keyword">if</span> <span class="token keyword">case</span> <span class="token keyword">let</span> x<span class="token operator">?</span> <span class="token operator">=</span> age <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p>将age解包赋值给x, 打印x</p><ul><li>示例二:</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> ages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token operator">?</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">nil</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token constant">nil</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token keyword">case</span> <span class="token keyword">let</span> age<span class="token operator">?</span> <span class="token keyword">in</span> ages <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 2 3 5</span></code></pre><p>将数组ages中元素取出,与age进行匹配,非空的话解包并打印</p><ul><li>示例三:</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> ages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token operator">?</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">nil</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token constant">nil</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> ages <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> age <span class="token operator">=</span> item <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 跟上面的for，效果是等价的</span></code></pre><ul><li>示例四:</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">_</span> num<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> num <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">?</span><span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">?</span><span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">_</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">_</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// other</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token constant">nil</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// nil</span></code></pre><h3 id="类型转换模式（Type-Casting-Pattern）"><a href="#类型转换模式（Type-Casting-Pattern）" class="headerlink" title="类型转换模式（Type-Casting Pattern）"></a>类型转换模式（Type-Casting Pattern）</h3><ul><li>示例一:</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> <span class="token number">6</span>  <span class="token keyword">switch</span> num <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token keyword">is</span> <span class="token builtin">Int</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// 编译器依然认为num是Any类型</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"is Int"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// case let n as Int:</span>    <span class="token comment" spellcheck="true">//    print("as Int", n + 1)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">}</span></code></pre><p><code>is</code>只是判断num是否Int类型, num依然是Any类型<br><code>as</code>可以强转为Int类型</p><ul><li>示例二:</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> <span class="token keyword">func</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"eat"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> <span class="token builtin">Animal</span> <span class="token punctuation">{</span> <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"run"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> <span class="token builtin">Animal</span> <span class="token punctuation">{</span> <span class="token keyword">func</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"jump"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">_</span> animal<span class="token punctuation">:</span> <span class="token builtin">Animal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> animal <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token keyword">let</span> dog <span class="token keyword">as</span> <span class="token builtin">Dog</span><span class="token punctuation">:</span>        dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token keyword">is</span> <span class="token builtin">Cat</span><span class="token punctuation">:</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>animal <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">Cat</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//调用Car 的jump</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">break</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Dog eat</span><span class="token comment" spellcheck="true">// Dog run</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Cat eat</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="表达式模式（Expression-Pattern）"><a href="#表达式模式（Expression-Pattern）" class="headerlink" title="表达式模式（Expression Pattern）"></a>表达式模式（Expression Pattern）</h3><p>表达式模式用在 <code>case</code>中</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">switch</span> point <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"(0, 0) is at the origin."</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"(<span class="token interpolation"><span class="token delimiter variable">\(</span>point<span class="token punctuation">.</span><span class="token number">0</span><span class="token delimiter variable">)</span></span>, <span class="token interpolation"><span class="token delimiter variable">\(</span>point<span class="token punctuation">.</span><span class="token number">1</span><span class="token delimiter variable">)</span></span>) is near the origin."</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The point is at (<span class="token interpolation"><span class="token delimiter variable">\(</span>point<span class="token punctuation">.</span><span class="token number">0</span><span class="token delimiter variable">)</span></span>, <span class="token interpolation"><span class="token delimiter variable">\(</span>point<span class="token punctuation">.</span><span class="token number">1</span><span class="token delimiter variable">)</span></span>)."</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// (1, 2) is near the origin.</span></code></pre><h3 id="自定义表达式模式"><a href="#自定义表达式模式" class="headerlink" title="自定义表达式模式"></a>自定义表达式模式</h3><p>可以通过重载运算符，自定义表达式模式的匹配规则</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">~</span><span class="token operator">=</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span> value<span class="token punctuation">.</span>score <span class="token operator">>=</span> pattern <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">~</span><span class="token operator">=</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">:</span> <span class="token builtin">ClosedRange</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span> pattern<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">~</span><span class="token operator">=</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">:</span> <span class="token builtin">Range</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span> pattern<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>pattern</code>是case后内容,  <code>value</code> 是switch后边内容,</li></ul><p>示例一:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span>score<span class="token punctuation">:</span> <span class="token number">75</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token keyword">switch</span> stu <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">100</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">">= 100"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">90</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">">= 90"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">80</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">90</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"[80, 90)"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">60</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">79</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"[60, 79]"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">">= 0"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// [60, 79]</span></code></pre><p>示例二:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">if</span> <span class="token keyword">case</span> <span class="token number">60</span> <span class="token operator">=</span> stu <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">">= 60"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// >= 60</span></code></pre><p>示例三:</p><pre><code>var info = (Student(score: 70, name: &quot;Jack&quot;), &quot;及格&quot;)switch info {case let (60, text): print(text)default: break} // 及格</code></pre><p>示例四: </p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">~</span><span class="token operator">=</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>        <span class="token function">pattern</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token number">_</span> <span class="token keyword">prefix</span><span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $<span class="token number">0</span><span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token keyword">prefix</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token number">_</span> <span class="token builtin">suffix</span><span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $<span class="token number">0</span><span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token builtin">suffix</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token keyword">switch</span> str <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"以j开头，以k结尾"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 以j开头，以k结尾</span></code></pre><p>示例五: </p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Int</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">~</span><span class="token operator">=</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span><span class="token punctuation">{</span>        <span class="token function">pattern</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">switch</span> age <span class="token punctuation">{</span><span class="token keyword">case</span> isEven<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"偶数"</span><span class="token punctuation">)</span><span class="token keyword">case</span> isOdd<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"奇数"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"其他"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>示例六: 自定义运算符</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">prefix</span> <span class="token keyword">operator</span> <span class="token operator">~</span><span class="token operator">></span><span class="token keyword">prefix</span> <span class="token keyword">operator</span> <span class="token operator">~</span><span class="token operator">>=</span><span class="token keyword">prefix</span> <span class="token keyword">operator</span> <span class="token operator">~</span><span class="token operator">&lt;</span><span class="token keyword">prefix</span> <span class="token keyword">operator</span> <span class="token operator">~</span><span class="token operator">&lt;=</span><span class="token keyword">prefix</span> <span class="token keyword">func</span> <span class="token operator">~</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">></span> i <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">prefix</span> <span class="token keyword">func</span> <span class="token operator">~</span><span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">>=</span> i <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">prefix</span> <span class="token keyword">func</span> <span class="token operator">~</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">&lt;</span> i <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">prefix</span> <span class="token keyword">func</span> <span class="token operator">~</span><span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">&lt;=</span> i<span class="token operator">=</span><span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">=</span><span class="token string">""</span> <span class="token operator">&lt;=</span><span class="token string">""</span> code<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">=</span><span class="token operator">></span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">switch</span> age <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">~</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token operator">~</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// [0, 10]</span></code></pre><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>可以使用<code>where</code>为模式匹配增加匹配条件</p><p>示例一: 在case后边使用</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token keyword">switch</span> data <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>age<span class="token punctuation">,</span> <span class="token number">_</span><span class="token punctuation">)</span> <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"age>10"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>age<span class="token punctuation">,</span> <span class="token number">_</span><span class="token punctuation">)</span> <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"age>0"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">}</span></code></pre><p>示例二: 在for循环中使用</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span class="token keyword">for</span> age <span class="token keyword">in</span> ages <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">30</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 44 55</span></code></pre><p>示例三: 在关联类型后面使用</p><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Stackable</span> <span class="token punctuation">{</span> associatedtype <span class="token builtin">Element</span> <span class="token punctuation">}</span>protocol <span class="token builtin">Container</span> <span class="token punctuation">{</span>    associatedtype <span class="token builtin">Stack</span> <span class="token punctuation">:</span> <span class="token builtin">Stackable</span> <span class="token keyword">where</span> <span class="token builtin">Stack</span><span class="token punctuation">.</span><span class="token builtin">Element</span> <span class="token punctuation">:</span> <span class="token builtin">Equatable</span><span class="token punctuation">}</span></code></pre><p>示例四: 在函数返回值后面使用</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token builtin">equal</span><span class="token operator">&lt;</span><span class="token builtin">S1</span><span class="token punctuation">:</span> <span class="token builtin">Stackable</span><span class="token punctuation">,</span> <span class="token builtin">S2</span><span class="token punctuation">:</span> <span class="token builtin">Stackable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> s1<span class="token punctuation">:</span> <span class="token builtin">S1</span><span class="token punctuation">,</span> <span class="token number">_</span> s2<span class="token punctuation">:</span> <span class="token builtin">S2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span>  <span class="token keyword">where</span> <span class="token builtin">S1</span><span class="token punctuation">.</span><span class="token builtin">Element</span> <span class="token operator">==</span> <span class="token builtin">S2</span><span class="token punctuation">.</span><span class="token builtin">Element</span><span class="token punctuation">,</span> <span class="token builtin">S1</span><span class="token punctuation">.</span><span class="token builtin">Element</span> <span class="token punctuation">:</span> <span class="token builtin">Hashable</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p>示例五: 带条件的扩展</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">Container</span> <span class="token keyword">where</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token builtin">Stack</span><span class="token punctuation">.</span><span class="token builtin">Element</span> <span class="token punctuation">:</span> <span class="token builtin">Hashable</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 22-字面量</title>
      <link href="/2020/06/08/Swift5-1-22-%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
      <url>/2020/06/08/Swift5-1-22-%E5%AD%97%E9%9D%A2%E9%87%8F/</url>
      <content type="html"><![CDATA[<h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><pre><code>var age = 10var isRed = falsevar name = &quot;Jack&quot;</code></pre><ul><li>上面代码中的10、false、”Jack”就是字面量</li></ul><ul><li>常见字面量的默认类型</li></ul><pre><code>public typealias IntegerLiteralType = Intpublic typealias FloatLiteralType = Doublepublic typealias BooleanLiteralType = Boolpublic typealias StringLiteralType = String</code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 可以通过typealias修改字面量的默认类型</span><span class="token keyword">typealias</span> <span class="token builtin">FloatLiteralType</span> <span class="token operator">=</span> <span class="token builtin">Float</span><span class="token keyword">typealias</span> <span class="token builtin">IntegerLiteralType</span> <span class="token operator">=</span> <span class="token builtin">UInt8</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">// UInt8</span><span class="token keyword">var</span> height <span class="token operator">=</span> <span class="token number">1.68</span> <span class="token comment" spellcheck="true">// Float</span></code></pre><ul><li>Swift自带的绝大部分类型，都支持直接通过字面量进行初始化</li><li>Bool、Int、Float、Double、String、Array、Dictionary、Set、Optional等</li></ul><h3 id="字面量协议"><a href="#字面量协议" class="headerlink" title="字面量协议"></a>字面量协议</h3><p>Swift自带类型之所以能够通过字面量初始化，是因为它们遵守了对应的协议:</p><ul><li><strong>Bool</strong> : ExpressibleByBooleanLiteral</li><li><strong>Int</strong> : ExpressibleByIntegerLiteral</li><li><strong>Float</strong>、<strong>Double</strong> : ExpressibleByIntegerLiteral、ExpressibleByFloatLiteral</li><li><strong>Dictionary</strong> : ExpressibleByDictionaryLiteral</li><li><strong>String</strong> : ExpressibleByStringLiteral</li><li><strong>Array</strong>、<strong>Set</strong> : ExpressibleByArrayLiteral</li><li><strong>Optional</strong> : ExpressibleByNilLiteral</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> b<span class="token punctuation">:</span> <span class="token builtin">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// ExpressibleByBooleanLiteral</span><span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">// ExpressibleByIntegerLiteral</span><span class="token keyword">var</span> f0<span class="token punctuation">:</span> <span class="token builtin">Float</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">// ExpressibleByIntegerLiteral</span><span class="token keyword">var</span> f1<span class="token punctuation">:</span> <span class="token builtin">Float</span> <span class="token operator">=</span> <span class="token number">10.0</span> <span class="token comment" spellcheck="true">// ExpressibleByFloatLiteral</span><span class="token keyword">var</span> d0<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">// ExpressibleByIntegerLiteral</span><span class="token keyword">var</span> d1<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">10.0</span> <span class="token comment" spellcheck="true">// ExpressibleByFloatLiteral</span><span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"jack"</span> <span class="token comment" spellcheck="true">// ExpressibleByStringLiteral</span><span class="token keyword">var</span> arr<span class="token punctuation">:</span> <span class="token builtin">Array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// ExpressibleByArrayLiteral</span><span class="token keyword">var</span> <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token builtin">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// ExpressibleByArrayLiteral</span><span class="token keyword">var</span> dict<span class="token punctuation">:</span> <span class="token builtin">Dictionary</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"jack"</span> <span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// ExpressibleByDictionaryLiteral</span><span class="token keyword">var</span> o<span class="token punctuation">:</span> <span class="token builtin">Optional</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">nil</span> <span class="token comment" spellcheck="true">// ExpressibleByNilLiteral</span></code></pre><h3 id="字面量协议应用"><a href="#字面量协议应用" class="headerlink" title="字面量协议应用"></a>字面量协议应用</h3><ul><li>Int 赋值Bool类型值</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">Int</span> <span class="token punctuation">:</span> <span class="token builtin">ExpressibleByBooleanLiteral</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">init</span><span class="token punctuation">(</span>booleanLiteral value<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">self</span> <span class="token operator">=</span> value <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> num<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>有点类似于C++中的转换构造函数</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token builtin">ExpressibleByIntegerLiteral</span><span class="token punctuation">,</span> <span class="token builtin">ExpressibleByFloatLiteral</span><span class="token punctuation">,</span> <span class="token builtin">ExpressibleByStringLiteral</span><span class="token punctuation">,</span>  <span class="token builtin">CustomStringConvertible</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">var</span> score<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span>floatLiteral value<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>score <span class="token operator">=</span> value <span class="token punctuation">}</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span>integerLiteral value<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token function">Double</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span>stringLiteral value<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> value <span class="token punctuation">}</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span>unicodeScalarLiteral value<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> value <span class="token punctuation">}</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span>extendedGraphemeClusterLiteral value<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> value <span class="token punctuation">}</span>    <span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span> <span class="token string">"name=<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span>,score=<span class="token interpolation"><span class="token delimiter variable">\(</span>score<span class="token delimiter variable">)</span></span>"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu<span class="token punctuation">:</span> <span class="token builtin">Student</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token function">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name=,score=90.0</span>stu <span class="token operator">=</span> <span class="token number">98.5</span><span class="token function">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name=,score=98.5</span>stu <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token function">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name=Jack,score=0.0</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Point</span> <span class="token punctuation">:</span> <span class="token builtin">ExpressibleByArrayLiteral</span><span class="token punctuation">,</span> <span class="token builtin">ExpressibleByDictionaryLiteral</span> <span class="token punctuation">{</span>  <span class="token keyword">init</span><span class="token punctuation">(</span>arrayLiteral elements<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">guard</span> elements<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">=</span> elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">guard</span> elements<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token operator">=</span> elements<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>dictionaryLiteral elements<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> elements <span class="token punctuation">{</span>            <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token string">"x"</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">=</span> v <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token operator">=</span> v <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token builtin">Point</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10.5</span><span class="token punctuation">,</span> <span class="token number">20.5</span><span class="token punctuation">]</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Point(x:10.5, y: 20.5)</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"y"</span> <span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Point(x:11.0, y: 22.0)</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 21-指针</title>
      <link href="/2020/06/07/Swift5-1-21-%E6%8C%87%E9%92%88/"/>
      <url>/2020/06/07/Swift5-1-21-%E6%8C%87%E9%92%88/</url>
      <content type="html"><![CDATA[<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>Swift中也有专门的指针类型，这些都被定性为“Unsafe”（不安全的），<strong>常见的有以下4种类型:</strong></p><ul><li><code>UnsafePointer&lt;Pointee&gt;</code> 类似于 const Pointee *</li><li><code>UnsafeMutablePointer&lt;Pointee&gt;</code> 类似于 Pointee *</li><li><code>UnsafeRawPointer</code> 类似于 const void *</li><li><code>UnsafeMutableRawPointer</code> 类似于 void *</li></ul><p><code>UnsafePointer</code>和<code>UnsafeMutablePointer</code>指针可以通过<code>pointee</code>属性获取指针指向内存地址的值, 并访问或者修改该值.</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token number">_</span> ptr<span class="token punctuation">:</span> <span class="token builtin">UnsafeMutablePointer</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// int *</span>    ptr<span class="token punctuation">.</span>pointee <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token number">_</span> ptr<span class="token punctuation">:</span> <span class="token builtin">UnsafePointer</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// const int *</span>    <span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span>pointee<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span><span class="token function">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span></code></pre><ul><li><code>UnsafeMutableRawPointer</code>指针通过storeBytes(of: as:) 存储数据.</li><li><code>UnsafeRawPointer</code>指针通过load(as:)访问数据.</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">func</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token number">_</span> ptr<span class="token punctuation">:</span> <span class="token builtin">UnsafeMutableRawPointer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// void *</span>    ptr<span class="token punctuation">.</span><span class="token function">storeBytes</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token number">_</span> ptr<span class="token punctuation">:</span> <span class="token builtin">UnsafeRawPointer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// const void *</span>    <span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span>  <span class="token function">test4</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span><span class="token function">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span></code></pre><h3 id="指针的应用示例"><a href="#指针的应用示例" class="headerlink" title="指针的应用示例"></a>指针的应用示例</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token function">NSArray</span><span class="token punctuation">(</span>objects<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span>enumerateObjects <span class="token punctuation">{</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> stop<span class="token punctuation">)</span> <span class="token keyword">in</span>    <span class="token function">print</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>    <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 下标为2就停止遍历</span>        stop<span class="token punctuation">.</span>pointee <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>swift推荐遍历使用<code>enumerated</code>, 从(idx, obj)  元组中获取索引和值</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token function">NSArray</span><span class="token punctuation">(</span>objects<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>idx<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token keyword">in</span> arr<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>      <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="获得指向某个变量的指针"><a href="#获得指向某个变量的指针" class="headerlink" title="获得指向某个变量的指针"></a>获得指向某个变量的指针</h3><ul><li>withUnsafeMutablePointer(to:) { $0 }</li><li>withUnsafePointer(to:) { $0 }</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">11</span><span class="token keyword">var</span> ptr1 <span class="token operator">=</span> <span class="token function">withUnsafeMutablePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token punctuation">}</span><span class="token keyword">var</span> ptr2 <span class="token operator">=</span> <span class="token function">withUnsafePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token punctuation">}</span>ptr1<span class="token punctuation">.</span>pointee <span class="token operator">=</span> <span class="token number">22</span><span class="token function">print</span><span class="token punctuation">(</span>ptr2<span class="token punctuation">.</span>pointee<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 22</span><span class="token function">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 22</span><span class="token keyword">var</span> ptr3 <span class="token operator">=</span> <span class="token function">withUnsafeMutablePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">UnsafeMutableRawPointer</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">var</span> ptr4 <span class="token operator">=</span> <span class="token function">withUnsafePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">UnsafeRawPointer</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>ptr3<span class="token punctuation">.</span><span class="token function">storeBytes</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>ptr4<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 33</span><span class="token function">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 33</span></code></pre><h3 id="获得指向堆空间实例的指针"><a href="#获得指向堆空间实例的指针" class="headerlink" title="获得指向堆空间实例的指针"></a>获得指向堆空间实例的指针</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> ptr <span class="token operator">=</span> <span class="token function">withUnsafePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token operator">&amp;</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">UnsafeRawPointer</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">var</span> heapPtr <span class="token operator">=</span> <span class="token function">UnsafeRawPointer</span><span class="token punctuation">(</span>bitPattern<span class="token punctuation">:</span> ptr<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">UInt</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ptr.load(as: UInt.self) 堆空间person对象地址值</span><span class="token function">print</span><span class="token punctuation">(</span>heapPtr<span class="token operator">!</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 0x000000010055b5d0</span></code></pre><ul><li>ptr指向person指针变量,等价于person本身,存储person地址值</li><li>bitPattern:  传入内存地址, heapPtr存储传入的地址</li></ul><pre><code>var age = 11  //值类型var ptr2 = withUnsafePointer(to: &amp;age) { $0 }//ptr2.pointee == ageprint(ptr2)  // 0x00000001000031b0</code></pre><h3 id="创建指针"><a href="#创建指针" class="headerlink" title="创建指针"></a>创建指针</h3><h4 id="1-指定内存创建指针"><a href="#1-指定内存创建指针" class="headerlink" title="1)指定内存创建指针"></a>1)指定内存创建指针</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> ptr <span class="token operator">=</span> <span class="token function">UnsafeRawPointer</span><span class="token punctuation">(</span>bitPattern<span class="token punctuation">:</span> <span class="token number">0x100001234</span><span class="token punctuation">)</span></code></pre><h4 id="2-malloc方式创建指针"><a href="#2-malloc方式创建指针" class="headerlink" title="2)malloc方式创建指针"></a>2)malloc方式创建指针</h4><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 创建</span><span class="token keyword">var</span> ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 堆空间分配16个字节</span><span class="token comment" spellcheck="true">// 存</span>ptr<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">storeBytes</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>ptr<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">storeBytes</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> toByteOffset<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// toByteOffset 偏移量, 从ptr开始偏移8个字节,后8个字节存储Int类型 22 </span><span class="token comment" spellcheck="true">// 取</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ptr<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 11</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ptr<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fromByteOffset<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 22</span><span class="token comment" spellcheck="true">// 销毁</span><span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span></code></pre><h4 id="3-allocate方式创建指针"><a href="#3-allocate方式创建指针" class="headerlink" title="3)allocate方式创建指针"></a>3)allocate方式创建指针</h4><ul><li>注意:只有<strong>UnsafeMutableRawPointer</strong> 和 <strong>UnsafeMutablePointer</strong> 才可以调用 <code>allocate</code>分配内存.</li><li><strong>UnsafeMutableRawPointer</strong>调用<code>allocate</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> ptr <span class="token operator">=</span> <span class="token builtin">UnsafeMutableRawPointer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>byteCount<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> alignment<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 存储</span>ptr<span class="token punctuation">.</span><span class="token function">storeBytes</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指针偏移8个字节,存储Int类型 22 </span>ptr<span class="token punctuation">.</span><span class="token function">advanced</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storeBytes</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 取</span><span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 11</span><span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">advanced</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 22</span><span class="token comment" spellcheck="true">//释放</span>ptr<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>UnsafeMutablePointer</strong> 调用<code>allocate</code><br>泛型指针,建议使用<code>initialize</code>初始化指针<br><strong>注意</strong>:该方式一定要调用<code>deinitialize(count:)</code>和<code>deallocate ()</code>销毁对象,否则产生内存泄漏. 反初始化<code>deinitialize(count:)</code>和<code>allocate(capacity:)</code>对应.</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//创建</span><span class="token comment" spellcheck="true">//有泛型Int , 只需要写容量即可. capacity 表示申请 3* 8 = 24个字节</span><span class="token keyword">var</span> ptr <span class="token operator">=</span> <span class="token builtin">UnsafeMutablePointer</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>capacity<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//存储</span>ptr<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//初始化前8个字节</span>ptr<span class="token punctuation">.</span><span class="token function">successor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//下一个Int 初始化22</span>ptr<span class="token punctuation">.</span><span class="token function">successor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">successor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//取值方式一:</span><span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span>pointee<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 11</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//22</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//33</span><span class="token comment" spellcheck="true">//取值方式二:</span><span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//11</span><span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//22</span><span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//33</span><span class="token comment" spellcheck="true">//取值方式三 等价于 方式一和二</span><span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span>pointee<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">successor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">successor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">successor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//销毁</span>ptr<span class="token punctuation">.</span><span class="token function">deinitialize</span><span class="token punctuation">(</span><span class="token builtin">count</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//反初始化, deinitialize(count:)和allocate(capacity:) 对应</span>ptr<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>示例: 创建3个指针指向的Person对象</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token keyword">deinit</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"deinit"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> ptr <span class="token operator">=</span> <span class="token builtin">UnsafeMutablePointer</span><span class="token operator">&lt;</span><span class="token builtin">Person</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>capacity<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>ptr<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Rose"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Kate"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Jack deinit</span><span class="token comment" spellcheck="true">// Rose deinit</span><span class="token comment" spellcheck="true">// Kate deinit</span>ptr<span class="token punctuation">.</span><span class="token function">deinitialize</span><span class="token punctuation">(</span><span class="token builtin">count</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>ptr<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="指针之间的转换"><a href="#指针之间的转换" class="headerlink" title="指针之间的转换"></a>指针之间的转换</h3><ul><li><code>assumingMemoryBound(to:)</code>  可以将RawPointer <code>非泛型指针</code>转为 <code>泛型指针</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//创建非泛型指针</span><span class="token keyword">var</span> ptr <span class="token operator">=</span> <span class="token builtin">UnsafeMutableRawPointer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>byteCount<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> alignment<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>ptr<span class="token punctuation">.</span><span class="token function">assumingMemoryBound</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee <span class="token operator">=</span> <span class="token number">11</span><span class="token comment" spellcheck="true">//非泛型指针 + 8 , 就是偏移8个字节</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assumingMemoryBound</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee <span class="token operator">=</span> <span class="token number">22.0</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">unsafeBitCast</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token builtin">UnsafePointer</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 11</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">unsafeBitCast</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token builtin">UnsafePointer</span><span class="token operator">&lt;</span><span class="token builtin">Double</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 22.0</span>ptr<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>unsafeBitCast原理:  <code>unsafeBitCast</code>是忽略数据类型的强制转换，不会因为数据类型的变化而改变原来的内存数据.(简单说: 直接将二进制数据搬过去, 只是类型发生改变)</li><li>类似于C++中的<code>reinterpret_cast</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> ptr <span class="token operator">=</span> <span class="token function">unsafeBitCast</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token builtin">UnsafeRawPointer</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 20-内存管理</title>
      <link href="/2020/06/07/Swift5-1-20-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2020/06/07/Swift5-1-20-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>跟OC一样，Swift也是采取基于引用计数的ARC内存管理方案（针对堆空间）.</p><p><strong>Swift的ARC中有3种引用:</strong><br>1)<strong>强引用</strong>（strong reference）：默认情况下，引用都是强引用</p><p>2)<strong>弱引用</strong>（weak reference）：通过<code>weak</code>定义弱引用</p><ul><li>必须是可选类型的<code>var</code>，因为实例销毁后，ARC会自动将弱引用设置为nil</li><li>ARC自动给弱引用设置<code>nil</code>时，不会触发属性观察器</li></ul><p>3)<strong>无主引用</strong>（unowned reference）：通过<code>unowned</code>定义无主引用.</p><ul><li>不会产生强引用，实例销毁后仍然存储着实例的内存地址（类似于OC中的unsafe_unretained）</li><li>试图在实例销毁后访问无主引用，会产生运行时错误（野指针）<br>Fatal error: Attempted to read an unowned reference but object 0x0 was already deallocated</li></ul><h3 id="weak、unowned的使用限制"><a href="#weak、unowned的使用限制" class="headerlink" title="weak、unowned的使用限制"></a>weak、unowned的使用限制</h3><ul><li>weak、unowned只能用在<code>类实例</code>上面</li></ul><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Livable</span> <span class="token punctuation">:</span> <span class="token builtin">AnyObject</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">weak</span> <span class="token keyword">var</span> p0<span class="token punctuation">:</span> <span class="token builtin">Person</span><span class="token operator">?</span><span class="token keyword">weak</span> <span class="token keyword">var</span> p1<span class="token punctuation">:</span> <span class="token builtin">AnyObject</span><span class="token operator">?</span><span class="token keyword">weak</span> <span class="token keyword">var</span> p2<span class="token punctuation">:</span> <span class="token builtin">Livable</span><span class="token operator">?</span><span class="token keyword">unowned</span> <span class="token keyword">var</span> p10<span class="token punctuation">:</span> <span class="token builtin">Person</span><span class="token operator">?</span><span class="token keyword">unowned</span> <span class="token keyword">var</span> p11<span class="token punctuation">:</span> <span class="token builtin">AnyObject</span><span class="token operator">?</span><span class="token keyword">unowned</span> <span class="token keyword">var</span> p12<span class="token punctuation">:</span> <span class="token builtin">Livable</span><span class="token operator">?</span></code></pre><h3 id="Autoreleasepool"><a href="#Autoreleasepool" class="headerlink" title="Autoreleasepool"></a>Autoreleasepool</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">func</span> autoreleasepool<span class="token operator">&lt;</span><span class="token builtin">Result</span><span class="token operator">></span><span class="token punctuation">(</span>invoking body<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Result</span><span class="token punctuation">)</span> <span class="token keyword">rethrows</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Result</span></code></pre><pre class=" language-swift"><code class="language-swift">autoreleasepool <span class="token punctuation">{</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">MJPerson</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="循环引用（Reference-Cycle）"><a href="#循环引用（Reference-Cycle）" class="headerlink" title="循环引用（Reference Cycle）"></a>循环引用（Reference Cycle）</h3><ul><li><code>weak</code>、<code>unowned</code> 都能解决循环引用的问题，<code>unowned</code> 要比 <code>weak</code> 少一些性能消耗</li><li>在生命周期中可能会变为 nil 的使用<code>weak</code></li><li>初始化赋值后再也不会变为 nil 的使用 <code>unowned</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-a1cd379e50baaffa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-2c855eb310e65065.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-a12ce7b93e2cdb1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="闭包的循环引用"><a href="#闭包的循环引用" class="headerlink" title="闭包的循环引用"></a>闭包的循环引用</h3><ul><li>闭包表达式默认会对用到的外层对象产生额外的强引用（对外层对象进行了retain操作）</li><li>下面代码会产生循环引用，导致Person对象无法释放（看不到Person的deinit被调用）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">deinit</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"deinit"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token punctuation">{</span> p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>解决闭包的循环引用:</strong><br>在闭包表达式的<code>捕获列表</code>声明<code>weak</code>或<code>unowned</code>引用，解决循环引用问题</p><pre class=" language-swift"><code class="language-swift">p<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token keyword">weak</span> p<span class="token punctuation">]</span> <span class="token keyword">in</span>    p<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift">p<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token keyword">unowned</span> p<span class="token punctuation">]</span> <span class="token keyword">in</span>    p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>捕获列表可以定义新的名称</li></ul><pre class=" language-swift"><code class="language-swift">p<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token keyword">weak</span> wp <span class="token operator">=</span> p<span class="token punctuation">,</span> <span class="token keyword">unowned</span> up <span class="token operator">=</span> p<span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token keyword">in</span>    wp<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="闭包的self"><a href="#闭包的self" class="headerlink" title="闭包的self"></a>闭包的self</h3><ul><li>1)如果想在定义闭包属性的同时引用<code>self</code>，这个闭包必须是<code>lazy</code>的（因为在实例初始化完毕之后才能引用self）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">lazy</span> <span class="token keyword">var</span> fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span>        <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">deinit</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"deinit"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>左边的闭包fn内部如果用到了实例成员（属性、方法）</li><li>编译器会强制要求明确写出self</li></ul><ul><li>2)如果<code>lazy</code>属性是闭包调用的结果，那么不用考虑循环引用的问题（因为闭包调用后，闭包的生命周期就结束了）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">//getAge本质是Int类型, 不是闭包</span>    <span class="token keyword">lazy</span> <span class="token keyword">var</span> getAge<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>age    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">deinit</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"deinit"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>getAge<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="escaping"><a href="#escaping" class="headerlink" title="@escaping"></a>@escaping</h3><p>非逃逸闭包、逃逸闭包，一般都是<strong>当做参数传递给函数</strong>:</p><ul><li><strong>非逃逸闭包</strong>：闭包调用发生在函数结束前，闭包调用在函数作用域内</li><li><strong>逃逸闭包</strong>：闭包有可能在函数结束后调用，闭包调用逃离了函数的作用域，需要通过<code>@escaping</code>声明</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token builtin">Dispatch</span><span class="token keyword">typealias</span> <span class="token builtin">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// fn是非逃逸闭包</span><span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token number">_</span> fn<span class="token punctuation">:</span> <span class="token builtin">Fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// fn是逃逸闭包</span><span class="token keyword">var</span> gFn<span class="token punctuation">:</span> <span class="token builtin">Fn</span><span class="token operator">?</span><span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token number">_</span> fn<span class="token punctuation">:</span> @escaping <span class="token builtin">Fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> gFn <span class="token operator">=</span> fn <span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// fn是逃逸闭包</span><span class="token keyword">func</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token number">_</span> fn<span class="token punctuation">:</span> @escaping <span class="token builtin">Fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>async <span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> fn<span class="token punctuation">:</span> <span class="token builtin">Fn</span>    <span class="token comment" spellcheck="true">// fn是逃逸闭包</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> @escaping <span class="token builtin">Fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// DispatchQueue.global().async也是一个逃逸闭包</span>        <span class="token comment" spellcheck="true">// 它用到了实例成员（属性、方法），编译器会强制要求明确写出self</span>        <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>async <span class="token punctuation">{</span>              <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//如果Person对象销毁不再执行闭包,可以这样写</span>            <span class="token comment" spellcheck="true">//[weak weakSelf = self] in </span>            <span class="token comment" spellcheck="true">//weakSelf?.fn()</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="逃逸闭包的注意点"><a href="#逃逸闭包的注意点" class="headerlink" title="逃逸闭包的注意点"></a>逃逸闭包的注意点</h3><ul><li>逃逸闭包不可以捕获inout参数</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">typealias</span> <span class="token builtin">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">other1</span><span class="token punctuation">(</span><span class="token number">_</span> fn<span class="token punctuation">:</span> <span class="token builtin">Fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">other2</span><span class="token punctuation">(</span><span class="token number">_</span> fn<span class="token punctuation">:</span> @escaping <span class="token builtin">Fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Fn</span> <span class="token punctuation">{</span>    other1 <span class="token punctuation">{</span> value <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// error: 逃逸闭包不能捕获inout参数</span>    other2 <span class="token punctuation">{</span> value <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> value <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// error: 逃逸闭包不能捕获inout参数</span>    <span class="token keyword">return</span> plus<span class="token punctuation">}</span></code></pre><h3 id="内存访问冲突（Conflicting-Access-to-Memory）"><a href="#内存访问冲突（Conflicting-Access-to-Memory）" class="headerlink" title="内存访问冲突（Conflicting Access to Memory）"></a>内存访问冲突（Conflicting Access to Memory）</h3><p><strong>内存访问冲突会在两个访问满足下列条件时发生：</strong><br>(在全局作用域中)</p><ul><li>至少一个是写入操作</li><li>它们访问的是同一块内存</li><li>它们的访问时间重叠（比如在同一个函数内）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 不存在内存访问冲突</span><span class="token keyword">func</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">_</span> num<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> num <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">1</span>number <span class="token operator">=</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number<span class="token punctuation">)</span></code></pre><p>存在内存访问冲突</p><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 存在内存访问冲突</span><span class="token comment" spellcheck="true">// Simultaneous accesses to 0x0, but modification requires exclusive access</span><span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">func</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">_</span> num<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> num <span class="token operator">+</span><span class="token operator">=</span> step <span class="token punctuation">}</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>step<span class="token punctuation">)</span></code></pre><p>解决内存访问冲突</p><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 解决内存访问冲突</span><span class="token keyword">var</span> copyOfStep <span class="token operator">=</span> step<span class="token function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>copyOfStep<span class="token punctuation">)</span>step <span class="token operator">=</span> copyOfStep</code></pre><h3 id="内存访问冲突示例"><a href="#内存访问冲突示例" class="headerlink" title="内存访问冲突示例"></a>内存访问冲突示例</h3><p>1)同时访问同一变量内存地址</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">balance</span><span class="token punctuation">(</span><span class="token number">_</span> x<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> y<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y    x <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">2</span>    y <span class="token operator">=</span> sum <span class="token operator">-</span> x<span class="token punctuation">}</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">42</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">30</span><span class="token function">balance</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// OK</span><span class="token function">balance</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Error</span></code></pre><p>2)同时访问同一对象属性内存地址</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Player</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span>    <span class="token keyword">var</span> health<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> energy<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">shareHealth</span><span class="token punctuation">(</span>with teammate<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Player</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">balance</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>teammate<span class="token punctuation">.</span>health<span class="token punctuation">,</span> <span class="token operator">&amp;</span>health<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> oscar <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Oscar"</span><span class="token punctuation">,</span> health<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> energy<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">var</span> maria <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Maria"</span><span class="token punctuation">,</span> health<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> energy<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>oscar<span class="token punctuation">.</span><span class="token function">shareHealth</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token operator">&amp;</span>maria<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// OK</span>oscar<span class="token punctuation">.</span><span class="token function">shareHealth</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token operator">&amp;</span>oscar<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Error </span><span class="token comment" spellcheck="true">//同时访问同一对象属性health内存地址</span></code></pre><p>3)同时访问同一元组内存地址</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> tulpe <span class="token operator">=</span> <span class="token punctuation">(</span>health<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> energy<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Error</span><span class="token function">balance</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tulpe<span class="token punctuation">.</span>health<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tulpe<span class="token punctuation">.</span>energy<span class="token punctuation">)</span><span class="token keyword">var</span> holly <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Holly"</span><span class="token punctuation">,</span> health<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> energy<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Error</span><span class="token function">balance</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>holly<span class="token punctuation">.</span>health<span class="token punctuation">,</span> <span class="token operator">&amp;</span>holly<span class="token punctuation">.</span>energy<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//health和energy在元组中属于同一块内存</span></code></pre><h3 id="内存访问冲突示例二"><a href="#内存访问冲突示例二" class="headerlink" title="内存访问冲突示例二"></a>内存访问冲突示例二</h3><p>如果下面的条件可以满足，就说明重叠访问结构体的属性是<code>安全的</code>:<br>(在局部作用域中)</p><ul><li>你只访问实例存储属性，不是<code>计算属性</code>或者<code>类属性</code></li><li>结构体是<code>局部变量</code>而<code>非全局变量</code></li><li>结构体要么<code>没有被闭包捕获</code>要么<code>只被非逃逸闭包捕获</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// Ok</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> tulpe <span class="token operator">=</span> <span class="token punctuation">(</span>health<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> energy<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token function">balance</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tulpe<span class="token punctuation">.</span>health<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tulpe<span class="token punctuation">.</span>energy<span class="token punctuation">)</span>    <span class="token keyword">var</span> holly <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Holly"</span><span class="token punctuation">,</span> health<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> energy<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">balance</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>holly<span class="token punctuation">.</span>health<span class="token punctuation">,</span> <span class="token operator">&amp;</span>holly<span class="token punctuation">.</span>energy<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 19-访问控制</title>
      <link href="/2020/06/07/Swift5-1-19-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
      <url>/2020/06/07/Swift5-1-19-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="访问控制（Access-Control）"><a href="#访问控制（Access-Control）" class="headerlink" title="访问控制（Access Control）"></a>访问控制（Access Control）</h3><p>在访问权限控制这块，Swift提供了5个不同的访问级别:<br>（以下是从高到低排列， 实体指被访问级别修饰的内容）</p><ul><li><strong>open</strong>：允许在定义实体的模块、其他模块中访问，允许其他模块进行继承、重写（open只能用在类、类成员上）</li><li><strong>public</strong>：允许在定义实体的模块、其他模块中访问，不允许其他模块进行继承、重写</li><li><strong>internal</strong>：只允许在定义实体的模块中访问，不允许在其他模块中访问</li><li><strong>fileprivate</strong>：只允许在定义实体的源文件中访问</li><li><strong>private</strong>：只允许在定义实体的封闭声明中访问</li></ul><p>绝大部分实体默认都是 <strong>internal</strong> 级别</p><h3 id="访问级别的使用准则"><a href="#访问级别的使用准则" class="headerlink" title="访问级别的使用准则"></a>访问级别的使用准则</h3><p>一个实体不可以被更低访问级别的实体定义，比如:<br>(左边定义右边, 左边访问级别大于等于右边访问级别)</p><ul><li>变量\常量类型 ≥ 变量\常量  (示例一)</li><li>参数类型、返回值类型 ≥ 函数 (示例二)</li><li>父类 ≥ 子类</li><li>父协议 ≥ 子协议</li><li>原类型 ≥ typealias (示例三)</li><li>原始值类型、关联值类型 ≥ 枚举类型 (示例四)</li><li>定义类型A时用到的其他类型 ≥    类型A (示例五)<br>……</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//示例一:</span>fileprivate <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">var</span> person <span class="token punctuation">:</span> <span class="token builtin">Person</span><span class="token comment" spellcheck="true">//编译错误: Variable cannot be declared internal because its type uses a fileprivate type</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//示例二:</span><span class="token keyword">internal</span> <span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">_</span> num<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Double</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//参数类型Int  Double为系统类型, 相当于public</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//示例三:</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span>fileprivate <span class="token keyword">typealias</span> <span class="token builtin">MyPerson</span> <span class="token operator">=</span> <span class="token builtin">Person</span><span class="token comment" spellcheck="true">//Person默认 internal,  internal >  fileprivate</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//示例四:</span>fileprivate <span class="token keyword">typealias</span> <span class="token builtin">MyInt</span> <span class="token operator">=</span> <span class="token builtin">Int</span>fileprivate <span class="token keyword">typealias</span> <span class="token builtin">MyString</span> <span class="token operator">=</span> <span class="token builtin">String</span><span class="token keyword">enum</span> <span class="token builtin">Scroe</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">grade</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 改为下面代码, 编译错误</span><span class="token keyword">enum</span> <span class="token builtin">Scroe</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token builtin">MyInt</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ❌Enum case in an internal enum uses a fileprivate type</span>    <span class="token keyword">case</span> <span class="token function">grade</span><span class="token punctuation">(</span><span class="token builtin">MyString</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//❌Enum case in an internal enum uses a fileprivate type</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//示例五</span><span class="token keyword">struct</span> <span class="token builtin">Dog</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> dog<span class="token punctuation">:</span> <span class="token builtin">Dog</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用到的类型Int , Dog一定要大于等于Person访问级别</span></code></pre><h3 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h3><ul><li>元组类型的访问级别是所有成员类型最低的那个</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">internal</span> <span class="token keyword">struct</span> <span class="token builtin">Dog</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>fileprivate <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// (Dog, Person)的访问级别是fileprivate</span>fileprivate <span class="token keyword">var</span> data1<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Dog</span><span class="token punctuation">,</span> <span class="token builtin">Person</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">var</span> data2<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Dog</span><span class="token punctuation">,</span> <span class="token builtin">Person</span><span class="token punctuation">)</span></code></pre><h3 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h3><p>泛型类型的访问级别是 <code>类型的访问级别</code> 以及 <code>所有泛型类型参数的访问级别</code> 中最低的那个</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>fileprivate <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span><span class="token builtin">T1</span><span class="token punctuation">,</span> <span class="token builtin">T2</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Person&lt;Car, Dog>的访问级别是fileprivate</span>fileprivate <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token builtin">Person</span><span class="token operator">&lt;</span><span class="token builtin">Car</span><span class="token punctuation">,</span> <span class="token builtin">Dog</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="成员、嵌套类型"><a href="#成员、嵌套类型" class="headerlink" title="成员、嵌套类型"></a>成员、嵌套类型</h3><ul><li>类型的访问级别会影响成员（属性、方法、初始化器、下标）、嵌套类型的默认访问级别</li><li>一般情况下，类型为<code>private</code>或<code>fileprivate</code>，那么成员\嵌套类型默认也是<code>private</code>或<code>fileprivate</code></li><li>一般情况下，类型为<code>internal</code>或<code>public</code>，那么成员\嵌套类型默认是<code>internal</code></li><li>如果在类中明确成员\嵌套类型写 <code>private</code>或<code>fileprivate</code>, 那么成员\嵌套类型,只能在当前类中访问,不能在外部调用</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PublicClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// public</span>    <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// internal</span>    fileprivate <span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// fileprivate</span>    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// private</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InternalClass</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// internal</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// internal</span>    fileprivate <span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// fileprivate</span>    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// private</span><span class="token punctuation">}</span></code></pre><pre><code>fileprivate class FilePrivateClass { // fileprivate    func f1() {} // fileprivate    private func f2() {} // private}private class PrivateClass { // private    func f() {} // private}</code></pre><h3 id="成员的重写"><a href="#成员的重写" class="headerlink" title="成员的重写"></a>成员的重写</h3><ul><li>子类重写成员的访问级别必须 ≥ 子类的访问级别，或者 ≥ 父类被重写成员的访问级别</li><li>父类的成员不能被成员作用域外定义的子类重写</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-899af7b3467af00f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>        <span class="token keyword">override</span> <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="下面代码能否编译通过？"><a href="#下面代码能否编译通过？" class="headerlink" title="下面代码能否编译通过？"></a>下面代码能否编译通过？</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>fileprivate <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token builtin">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>fileprivate <span class="token keyword">struct</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dog<span class="token punctuation">:</span> <span class="token builtin">Dog</span> <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  dog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token builtin">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>fileprivate <span class="token keyword">struct</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dog<span class="token punctuation">:</span> <span class="token builtin">Dog</span> <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  dog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>直接在全局作用域下定义的<code>private</code>等价于<code>fileprivate</code></li></ul><p>分情况:<br>1.在局部作用域中,编译不通过<br>2.在全局作用域中可以通过</p><h3 id="getter、setter"><a href="#getter、setter" class="headerlink" title="getter、setter"></a>getter、setter</h3><ul><li><code>getter</code>、<code>setter</code>默认自动接收它们所属环境的访问级别</li><li>可以给<code>setter</code>单独设置一个比<code>getter</code>更低的访问级别，用以限制写的权限</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token function">fileprivate</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">fileprivate</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">var</span> weight<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token number">10</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">internal</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> index <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="初始化器"><a href="#初始化器" class="headerlink" title="初始化器"></a>初始化器</h3><ul><li>如果一个<code>public类</code>想在另一个模块调用编译生成的默认无参初始化器，必须显式提供<code>public</code>的无参初始化器.</li><li><strong>因为public类的默认初始化器是<code>internal</code>级别.</strong>  internal初始化器不能在其他模块调用.</li></ul><ul><li><code>required</code>初始化器 ≥ 它的默认访问级别</li></ul><ul><li>如果结构体有<code>private</code> \ <code>fileprivate</code>的存储实例属性，那么它的<code>成员</code>初始化器也是<code>private</code> \ <code>fileprivate</code></li><li>否则默认就是<code>internal</code></li></ul><h3 id="枚举类型的case"><a href="#枚举类型的case" class="headerlink" title="枚举类型的case"></a>枚举类型的case</h3><ul><li><p>不能给<code>enum</code>的每个<code>case</code>单独设置访问级别</p></li><li><p>每个case自动接收<code>enum</code>的访问级别</p></li><li><code>public</code> <code>enum</code>定义的<code>case</code>也是<code>public</code></li></ul><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li>协议中定义的要求自动接收协议的访问级别，不能单独设置访问级别</li><li><code>public</code>协议定义的要求也是<code>public</code></li><li><p>协议实现的访问级别必须 ≥ 类型的访问级别，或者 ≥ 协议的访问级别<br>(实现协议方法, 属性的访问级别要至少大于等于 协议访问级别或者 类的访问级别 )</p></li><li><p>下面代码能编译通过么？</p></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> protocol <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">:</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//public 类的方法默认访问级别  internal</span><span class="token punctuation">}</span></code></pre><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul><li>如果有显式设置扩展的访问级别，扩展添加的成员自动接收扩展的访问级别</li><li>如果没有显式设置扩展的访问级别，扩展添加的成员的默认访问级别，跟直接在类型中定义的成员一样</li><li>可以单独给扩展添加的成员设置访问级别</li><li>不能给用于遵守协议的<code>扩展</code>显式设置扩展的访问级别</li></ul><ul><li>在同一文件中的扩展，可以写成类似多个部分的类型声明.<br>1)在原本的声明中声明一个私有成员，可以在同一文件的扩展中访问它<br>2)在扩展中声明一个私有成员，可以在同一文件的其他扩展中、原本声明中访问它</li></ul><p>下面三段代码在同一个文件中:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">run0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">eat0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">eat1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">run0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">eat2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="将方法赋值给var-let"><a href="#将方法赋值给var-let" class="headerlink" title="将方法赋值给var\let"></a>将方法赋值给var\let</h3><p>方法也可以像函数那样，赋值给一个let或者var.</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token number">_</span> v<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"func run"</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token number">_</span> v<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"static func run"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> fn1 <span class="token operator">=</span> <span class="token builtin">Person</span><span class="token punctuation">.</span>run<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// static func run 10</span><span class="token keyword">let</span> fn2<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">Person</span><span class="token punctuation">.</span>run<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// static func run 20</span><span class="token keyword">let</span> fn3<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Person</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">Person</span><span class="token punctuation">.</span>run<span class="token function">fn3</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// func run 18 30</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 18-扩展</title>
      <link href="/2020/06/06/Swift5-1-18-%E6%89%A9%E5%B1%95/"/>
      <url>/2020/06/06/Swift5-1-18-%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h3 id="扩展（Extension）"><a href="#扩展（Extension）" class="headerlink" title="扩展（Extension）"></a>扩展（Extension）</h3><ul><li><p>Swift中的扩展，有点类似于OC中的分类（Category）</p></li><li><p>扩展可以为枚举、结构体、类、协议添加新功能。<br>可以添加方法、计算属性、下标、（便捷）初始化器、嵌套类型、协议等等。</p></li><li><p>扩展不能办到的事情:<br>不能覆盖原有的功能<br>不能添加存储属性，不能向已有的属性添加属性观察器<br>不能添加父类<br>不能添加指定初始化器，不能添加反初始化器<br>…</p></li></ul><h3 id="计算属性、下标、方法、嵌套类型"><a href="#计算属性、下标、方法、嵌套类型" class="headerlink" title="计算属性、下标、方法、嵌套类型"></a>计算属性、下标、方法、嵌套类型</h3><p>1)添加计算属性</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> km<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span> <span class="token keyword">self</span> <span class="token operator">*</span> <span class="token number">1_000.0</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> m<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span> <span class="token keyword">self</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> dm<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span> <span class="token keyword">self</span> <span class="token operator">/</span> <span class="token number">10.0</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> cm<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span> <span class="token keyword">self</span> <span class="token operator">/</span> <span class="token number">100.0</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> mm<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span> <span class="token keyword">self</span> <span class="token operator">/</span> <span class="token number">1_000.0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2)添加下标</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">Array</span> <span class="token punctuation">{</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>nullable idx<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Element</span><span class="token operator">?</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token constant">nil</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3)添加嵌套类型</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">repetitions</span><span class="token punctuation">(</span>task<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token number">_</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token keyword">self</span> <span class="token punctuation">{</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token keyword">self</span> <span class="token operator">*</span> <span class="token keyword">self</span>        <span class="token keyword">return</span> <span class="token keyword">self</span>    <span class="token punctuation">}</span>    <span class="token keyword">enum</span> <span class="token builtin">Kind</span> <span class="token punctuation">{</span> <span class="token keyword">case</span> negative<span class="token punctuation">,</span> zero<span class="token punctuation">,</span> positive <span class="token punctuation">}</span>    <span class="token keyword">var</span> kind<span class="token punctuation">:</span> <span class="token builtin">Kind</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">.</span>zero        <span class="token keyword">case</span> <span class="token keyword">let</span> x <span class="token keyword">where</span> x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">.</span>positive        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">.</span>negative        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>digitIndex<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> decimalBase <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> <span class="token number">_</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>digitIndex <span class="token punctuation">{</span> decimalBase <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">self</span> <span class="token operator">/</span> decimalBase<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="协议、初始化器"><a href="#协议、初始化器" class="headerlink" title="协议、初始化器"></a>协议、初始化器</h3><ul><li>类扩展协议</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Person</span><span class="token punctuation">:</span> <span class="token builtin">Equatable</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">:</span><span class="token builtin">Person</span><span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">:</span> <span class="token builtin">Person</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token builtin">Bool</span><span class="token punctuation">{</span>        <span class="token keyword">left</span><span class="token punctuation">.</span>age <span class="token operator">==</span> <span class="token keyword">right</span><span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token keyword">left</span><span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token keyword">right</span><span class="token punctuation">.</span>name    <span class="token punctuation">}</span>    <span class="token keyword">convenience</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>结构体扩展 初始化器</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token number">_</span> point<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token number">_</span> point<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span>point<span class="token punctuation">.</span>y<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">var</span> p4 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">var</span> p5 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//扩展的初始化器</span></code></pre><p><strong>总结:</strong></p><ul><li>如果希望自定义初始化器的同时，编译器也能够生成默认初始化器</li><li>可以在扩展中编写自定义初始化器</li><li><code>required</code>初始化器, 也不能写在扩展中</li></ul><h3 id="扩展协议"><a href="#扩展协议" class="headerlink" title="扩展协议"></a>扩展协议</h3><ul><li>如果一个类型已经实现了协议的所有要求，但是还没有声明它遵守了这个协议</li><li>可以通过扩展来让它遵守这个协议</li></ul><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">TestProtocol</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">TestClass</span> <span class="token punctuation">:</span> <span class="token builtin">TestProtocol</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>编写一个函数，判断一个整数是否为奇数？</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> isOdd<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> <span class="token builtin">BinaryInteger</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>    i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">BinaryInteger</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span> <span class="token keyword">self</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="扩展协议细节"><a href="#扩展协议细节" class="headerlink" title="扩展协议细节"></a>扩展协议细节</h3><ul><li>扩展可以给协议提供<code>默认实现</code>，也间接实现<code>可选协议</code>的效果</li><li>扩展可以给协议扩充<code>协议中从未声明过的方法</code></li></ul><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">TestProtocol</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">TestProtocol</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"TestProtocol test1"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"TestProtocol test2"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">:</span> <span class="token builtin">TestProtocol</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> cls <span class="token operator">=</span> <span class="token function">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cls<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// TestProtocol test1</span>cls<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// TestProtocol test2</span><span class="token keyword">var</span> cls2<span class="token punctuation">:</span> <span class="token builtin">TestProtocol</span> <span class="token operator">=</span> <span class="token function">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cls2<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// TestProtocol test1</span>cls2<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// TestProtocol test2</span></code></pre><ul><li>类遵守协议,实现协议方法.</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">:</span> <span class="token builtin">TestProtocol</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"TestClass test1"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"TestClass test2"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> cls <span class="token operator">=</span> <span class="token function">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cls<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// TestClass test1</span>cls<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// TestClass test2</span><span class="token keyword">var</span> cls2<span class="token punctuation">:</span> <span class="token builtin">TestProtocol</span> <span class="token operator">=</span> <span class="token function">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//结果分析看总结</span>cls2<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// TestClass test1</span>cls2<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// TestProtocol test2</span></code></pre><p><strong>总结:</strong></p><ul><li>如果调用方法是在协议声明中的, 编译器优先去实例中查找.</li><li>如果调用方法是在协议声明中没有, 同时对象定义为协议类型,编译器会认为实例中没有该方法, 会直接去协议中查找.</li></ul><h3 id="扩展泛型"><a href="#扩展泛型" class="headerlink" title="扩展泛型"></a>扩展泛型</h3><ul><li>扩展中依然可以使用原类型中的泛型类型.</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span>E<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token number">_</span> element<span class="token punctuation">:</span> E<span class="token punctuation">)</span> <span class="token punctuation">{</span>        elements<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> E <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 扩展中依然可以使用原类型中的泛型类型</span><span class="token keyword">extension</span> <span class="token builtin">Stack</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> E <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token builtin">last</span><span class="token operator">!</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 符合条件才扩展</span><span class="token keyword">extension</span> <span class="token builtin">Stack</span> <span class="token punctuation">:</span> <span class="token builtin">Equatable</span> <span class="token keyword">where</span> E <span class="token punctuation">:</span> <span class="token builtin">Equatable</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">:</span> <span class="token builtin">Stack</span><span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">:</span> <span class="token builtin">Stack</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>        <span class="token keyword">left</span><span class="token punctuation">.</span>elements <span class="token operator">==</span> <span class="token keyword">right</span><span class="token punctuation">.</span>elements    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 17-高级运算符</title>
      <link href="/2020/06/06/Swift5-1-17-%E9%AB%98%E7%BA%A7%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/06/06/Swift5-1-17-%E9%AB%98%E7%BA%A7%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h3 id="溢出运算符（Overflow-Operator）"><a href="#溢出运算符（Overflow-Operator）" class="headerlink" title="溢出运算符（Overflow Operator）"></a>溢出运算符（Overflow Operator）</h3><ul><li>Swift的算数运算符出现溢出时会抛出运行时错误</li><li>Swift有溢出运算符（&amp;+、&amp;-、&amp;*），用来支持溢出运算<br>溢出时仍在范围内,超出范围从头开始</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> <span class="token builtin">min</span> <span class="token operator">=</span> <span class="token builtin">UInt8</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">min</span> <span class="token operator">&amp;</span><span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 255, Int8.max</span><span class="token keyword">var</span> <span class="token builtin">max</span> <span class="token operator">=</span> <span class="token builtin">UInt8</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">max</span> <span class="token operator">&amp;</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0, Int8.min</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">max</span> <span class="token operator">&amp;</span><span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 254, 等价于 max &amp;+ max</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-1ed2f8326e8c68fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-282445784ded3a43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-aa7c8d3e34990a01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="运算符重载（Operator-Overload）"><a href="#运算符重载（Operator-Overload）" class="headerlink" title="运算符重载（Operator Overload）"></a>运算符重载（Operator Overload）</h3><h4 id="1-运算符重载定义"><a href="#1-运算符重载定义" class="headerlink" title="1)运算符重载定义"></a>1)运算符重载定义</h4><ul><li>类、结构体、枚举可以为现有的运算符提供自定义的实现，这个操作叫做：<strong>运算符重载</strong></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token operator">+</span> <span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> p1<span class="token punctuation">.</span>x <span class="token operator">+</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> p1<span class="token punctuation">.</span>y <span class="token operator">+</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Point(x: 21, y: 42)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">+</span> <span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>        <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> p1<span class="token punctuation">.</span>x <span class="token operator">+</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> p1<span class="token punctuation">.</span>y <span class="token operator">+</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-运算符重载前缀和后缀"><a href="#2-运算符重载前缀和后缀" class="headerlink" title="2)运算符重载前缀和后缀"></a>2)运算符重载前缀和后缀</h4><p>运算符重载默认中缀, 可以用<code>prefix</code> 设置前缀运算符重载, 用<code>postfix</code>设置后缀运算符重载</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">+</span> <span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> p1<span class="token punctuation">.</span>x <span class="token operator">+</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> p1<span class="token punctuation">.</span>y <span class="token operator">+</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">-</span> <span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> p1<span class="token punctuation">.</span>x <span class="token operator">-</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运算符重载:取反</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">static</span> <span class="token keyword">prefix</span> <span class="token keyword">func</span> <span class="token operator">-</span> <span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">-</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">-</span>p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运算符重载:+=</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Point</span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p1 <span class="token operator">=</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">}</span></code></pre><p>运算符重载:==</p><pre><code>static func == (p1: Point, p2: Point) -&gt; Bool {    (p1.x == p2.x) &amp;&amp; (p1.y == p2.y)}</code></pre><p>运算符重载:++</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">static</span> <span class="token keyword">prefix</span> <span class="token keyword">func</span> <span class="token operator">++</span> <span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    p <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">postfix</span> <span class="token keyword">func</span> <span class="token operator">++</span> <span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> tmp <span class="token operator">=</span> p    p <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">}</span></code></pre><h3 id="Equatable"><a href="#Equatable" class="headerlink" title="Equatable"></a>Equatable</h3><ul><li>要想得知2个实例是否等价，一般做法是遵守 <code>Equatable</code> 协议，重载 == 运算符</li><li>与此同时，等价于重载了    != 运算符</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">:</span> <span class="token builtin">Equatable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">print</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> p2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p><strong>Swift为以下类型提供默认的 Equatable 实现:</strong></p><ul><li>没有关联类型的<code>枚举</code>  (示例一)</li><li>只拥有遵守 Equatable 协议关联类型的<code>枚举</code> (示例二)</li><li>只拥有遵守 Equatable 协议存储属性的<code>结构体</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//示例一</span><span class="token keyword">enum</span> <span class="token builtin">Answer</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> wrong    <span class="token keyword">case</span> <span class="token keyword">right</span><span class="token punctuation">}</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token builtin">Answer</span><span class="token punctuation">.</span>wrong<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token builtin">Answer</span><span class="token punctuation">.</span><span class="token keyword">right</span><span class="token function">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//示例二</span><span class="token keyword">enum</span> <span class="token builtin">Answer</span> <span class="token punctuation">:</span> <span class="token builtin">Equatable</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token keyword">right</span><span class="token punctuation">}</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token builtin">Answer</span><span class="token punctuation">.</span><span class="token function">wrong</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token builtin">Answer</span><span class="token punctuation">.</span><span class="token function">wrong</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//false</span></code></pre><ul><li>引用类型比较存储的地址值是否相等（是否引用着同一个对象），使用恒等运算符 === 、!==</li></ul><h3 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h3><p>要想比较2个实例的大小，一般做法是：</p><ul><li>遵守 Comparable 协议</li><li>重载相应的运算符</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// score大的比较大，若score相等，age小的比较大</span><span class="token keyword">struct</span> <span class="token builtin">Student</span> <span class="token punctuation">:</span> <span class="token builtin">Comparable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> score<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>score<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score        <span class="token keyword">self</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">,</span> rhs<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>score <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>score<span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>score <span class="token operator">==</span> rhs<span class="token punctuation">.</span>score <span class="token operator">&amp;&amp;</span> lhs<span class="token punctuation">.</span>age <span class="token operator">></span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">></span> <span class="token punctuation">(</span>lhs<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">,</span> rhs<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>score <span class="token operator">></span> rhs<span class="token punctuation">.</span>score<span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>score <span class="token operator">==</span> rhs<span class="token punctuation">.</span>score <span class="token operator">&amp;&amp;</span> lhs<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">,</span> rhs<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>        <span class="token operator">!</span><span class="token punctuation">(</span>lhs <span class="token operator">></span> rhs<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">>=</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">,</span> rhs<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>        <span class="token operator">!</span><span class="token punctuation">(</span>lhs <span class="token operator">&lt;</span> rhs<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> stu3 <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span>score<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>stu1 <span class="token operator">></span> stu2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">print</span><span class="token punctuation">(</span>stu1 <span class="token operator">>=</span> stu2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">print</span><span class="token punctuation">(</span>stu1 <span class="token operator">>=</span> stu3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">print</span><span class="token punctuation">(</span>stu1 <span class="token operator">&lt;=</span> stu3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">print</span><span class="token punctuation">(</span>stu2 <span class="token operator">&lt;</span> stu1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">print</span><span class="token punctuation">(</span>stu2 <span class="token operator">&lt;=</span> stu1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="自定义运算符（Custom-Operator）"><a href="#自定义运算符（Custom-Operator）" class="headerlink" title="自定义运算符（Custom Operator）"></a>自定义运算符（Custom Operator）</h3><p>可以自定义新的运算符：在全局作用域使用<code>operator</code>进行声明.</p><ul><li><code>prefix operator</code> 前缀运算符</li><li><code>postfix operator</code>后缀运算符</li><li><code>infix operator</code> 中缀运算符 : 优先级组</li></ul><pre class=" language-swift"><code class="language-swift">precedencegroup 优先级组 <span class="token punctuation">{</span>    <span class="token keyword">associativity</span><span class="token punctuation">:</span> 结合性<span class="token punctuation">(</span><span class="token keyword">left</span>\<span class="token keyword">right</span>\<span class="token keyword">none</span><span class="token punctuation">)</span>    higherThan<span class="token punctuation">:</span> 比谁的优先级高    lowerThan<span class="token punctuation">:</span> 比谁的优先级低    assignment<span class="token punctuation">:</span> <span class="token boolean">true</span>  代表在可选链操作中拥有跟赋值运算符一样的优先级<span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">prefix</span> <span class="token keyword">operator</span> <span class="token operator">++</span><span class="token operator">+</span><span class="token keyword">infix</span> <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token operator">-</span> <span class="token punctuation">:</span> <span class="token builtin">PlusMinusPrecedence</span>precedencegroup <span class="token builtin">PlusMinusPrecedence</span> <span class="token punctuation">{</span>    <span class="token keyword">associativity</span><span class="token punctuation">:</span> <span class="token keyword">none</span>    higherThan<span class="token punctuation">:</span> <span class="token builtin">AdditionPrecedence</span>    lowerThan<span class="token punctuation">:</span> <span class="token builtin">MultiplicationPrecedence</span>    assignment<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>Apple文档参考：<br><a href="https://developer.apple.com/documentation/swift/swift_standard_library/operator_declarations" target="_blank" rel="noopener">Operator Declarations-官方文档</a><br><a href="https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380" target="_blank" rel="noopener">Operator Declaration-Swift文档说明</a></p><h3 id="自定义运算符示例"><a href="#自定义运算符示例" class="headerlink" title="自定义运算符示例"></a>自定义运算符示例</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">static</span> <span class="token keyword">prefix</span> <span class="token keyword">func</span> <span class="token operator">++</span><span class="token operator">+</span> <span class="token punctuation">(</span>point<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>        point <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> point<span class="token punctuation">.</span>x <span class="token operator">+</span> point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> point<span class="token punctuation">.</span>y <span class="token operator">+</span> point<span class="token punctuation">.</span>y<span class="token punctuation">)</span>        <span class="token keyword">return</span> point    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">+</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">left</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">right</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">left</span><span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token keyword">right</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">+</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"+-"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">left</span><span class="token operator">?</span><span class="token punctuation">.</span>x <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token keyword">right</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">left</span><span class="token operator">?</span><span class="token punctuation">.</span>y <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token keyword">right</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> point<span class="token punctuation">:</span> <span class="token builtin">Point</span><span class="token punctuation">}</span><span class="token keyword">var</span> person<span class="token punctuation">:</span> <span class="token builtin">Person</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span>person<span class="token operator">?</span><span class="token punctuation">.</span>point <span class="token operator">+</span><span class="token operator">-</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 16-泛型</title>
      <link href="/2020/06/05/Swift5-1-16-%E6%B3%9B%E5%9E%8B/"/>
      <url>/2020/06/05/Swift5-1-16-%E6%B3%9B%E5%9E%8B/</url>
      <content type="html"><![CDATA[<blockquote><p>泛型（Generics）</p></blockquote><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><p>泛型可以将类型参数化，提高代码复用率，减少代码量</p><ul><li>T代表 不确定类型参数</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> swapValues<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> a<span class="token punctuation">:</span> <span class="token keyword">inout</span> T<span class="token punctuation">,</span> <span class="token number">_</span> b<span class="token punctuation">:</span> <span class="token keyword">inout</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> i1 <span class="token operator">=</span> <span class="token number">10</span>  <span class="token keyword">var</span> i2 <span class="token operator">=</span> <span class="token number">20</span><span class="token function">swapValues</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i2<span class="token punctuation">)</span><span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token number">10.0</span>  <span class="token keyword">var</span> d2 <span class="token operator">=</span> <span class="token number">20.0</span><span class="token function">swapValues</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d2<span class="token punctuation">)</span><span class="token keyword">struct</span> <span class="token builtin">Date</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> month <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> day <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">var</span> dd1 <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span>year<span class="token punctuation">:</span> <span class="token number">2011</span><span class="token punctuation">,</span> month<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> day<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">var</span> dd2 <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span>year<span class="token punctuation">:</span> <span class="token number">2012</span><span class="token punctuation">,</span> month<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> day<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token function">swapValues</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dd1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dd2<span class="token punctuation">)</span></code></pre><p>泛型函数赋值给变量</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> test<span class="token operator">&lt;</span><span class="token builtin">T1</span><span class="token punctuation">,</span> <span class="token builtin">T2</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> t1<span class="token punctuation">:</span> <span class="token builtin">T1</span><span class="token punctuation">,</span> <span class="token number">_</span> t2<span class="token punctuation">:</span> <span class="token builtin">T2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> test</code></pre><h3 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span>E<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token number">_</span> element<span class="token punctuation">:</span> E<span class="token punctuation">)</span> <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> E <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> E <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token builtin">last</span><span class="token operator">!</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> stack <span class="token operator">=</span> <span class="token builtin">Stack</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 33</span><span class="token function">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 33</span><span class="token function">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 22</span><span class="token function">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 11</span><span class="token function">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span><span class="token keyword">class</span> <span class="token class-name">SubStack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">:</span> <span class="token builtin">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>注意: 修改结构体数组元素, 需要添加<code>mutating</code></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span>E<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token number">_</span> element<span class="token punctuation">:</span> E<span class="token punctuation">)</span> <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> E <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> E <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token builtin">last</span><span class="token operator">!</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>enum Score&lt;T&gt; {    case point(T)    case grade(String)}let score0 = Score&lt;Int&gt;.point(100)let score1 = Score.point(99)let score2 = Score.point(99.5)let score3 = Score&lt;Int&gt;.grade(&quot;A&quot;)</code></pre><h3 id="关联类型（Associated-Type）"><a href="#关联类型（Associated-Type）" class="headerlink" title="关联类型（Associated Type）"></a>关联类型（Associated Type）</h3><ul><li>关联类型的作用：给协议中用到的类型定义一个占位名称.</li><li>协议中可以拥有多个关联类型.(协议中使用泛型 只能用关联类型)</li></ul><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Stackable</span> <span class="token punctuation">{</span>    associatedtype <span class="token builtin">Element</span> <span class="token comment" spellcheck="true">// 关联类型</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token number">_</span> element<span class="token punctuation">:</span> <span class="token builtin">Element</span><span class="token punctuation">)</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Element</span>    <span class="token keyword">func</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Element</span>    <span class="token keyword">func</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">}</span></code></pre><ul><li><p>类遵守协议, 给关联类型设定真实类型</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">StringStack</span> <span class="token punctuation">:</span> <span class="token builtin">Stackable</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 给关联类型设定真实类型, 也可以省略</span>  <span class="token comment" spellcheck="true">// typealias Element = String</span>  <span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">func</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token number">_</span> element<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token keyword">func</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">String</span> <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token keyword">func</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">String</span> <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token builtin">last</span><span class="token operator">!</span> <span class="token punctuation">}</span>  <span class="token keyword">func</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> ss <span class="token operator">=</span> <span class="token function">StringStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ss<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span>ss<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">)</span></code></pre></li><li><p>类中泛型赋值给协议关联类型</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">:</span> <span class="token builtin">Stackable</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// typealias Element = E</span>  <span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span>E<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">func</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token number">_</span> element<span class="token punctuation">:</span> E<span class="token punctuation">)</span> <span class="token punctuation">{</span>      elements<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">func</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> E <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token keyword">func</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> E <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token builtin">last</span><span class="token operator">!</span> <span class="token punctuation">}</span>  <span class="token keyword">func</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> elements<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="类型约束"><a href="#类型约束" class="headerlink" title="类型约束"></a>类型约束</h3><p>下面类型约束: 要求泛型必须是Person子类型和遵守Runnable协议</p><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Runnable</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">func</span> swapValues<span class="token operator">&lt;</span>T <span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token operator">&amp;</span> <span class="token builtin">Runnable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> a<span class="token punctuation">:</span> <span class="token keyword">inout</span> T<span class="token punctuation">,</span> <span class="token number">_</span> b<span class="token punctuation">:</span> <span class="token keyword">inout</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>协议中关联类型也可以类型约束</li></ul><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Stackable</span> <span class="token punctuation">{</span>    associatedtype <span class="token builtin">Element</span><span class="token punctuation">:</span> <span class="token builtin">Equatable</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E <span class="token punctuation">:</span> <span class="token builtin">Equatable</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token builtin">Stackable</span> <span class="token punctuation">{</span> <span class="token keyword">typealias</span> <span class="token builtin">Element</span> <span class="token operator">=</span> E <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token builtin">equal</span><span class="token operator">&lt;</span><span class="token builtin">S1</span><span class="token punctuation">:</span> <span class="token builtin">Stackable</span><span class="token punctuation">,</span> <span class="token builtin">S2</span><span class="token punctuation">:</span> <span class="token builtin">Stackable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> s1<span class="token punctuation">:</span> <span class="token builtin">S1</span><span class="token punctuation">,</span> <span class="token number">_</span> s2<span class="token punctuation">:</span> <span class="token builtin">S2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span>  <span class="token keyword">where</span> <span class="token builtin">S1</span><span class="token punctuation">.</span><span class="token builtin">Element</span> <span class="token operator">==</span> <span class="token builtin">S2</span><span class="token punctuation">.</span><span class="token builtin">Element</span><span class="token punctuation">,</span> <span class="token builtin">S1</span><span class="token punctuation">.</span><span class="token builtin">Element</span> <span class="token punctuation">:</span> <span class="token builtin">Hashable</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> stack1 <span class="token operator">=</span> <span class="token builtin">Stack</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> stack2 <span class="token operator">=</span> <span class="token builtin">Stack</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// error: requires the types 'Int' and 'String' be equivalent</span><span class="token function">equal</span><span class="token punctuation">(</span>stack1<span class="token punctuation">,</span> stack2<span class="token punctuation">)</span></code></pre><h3 id="协议类型的注意点"><a href="#协议类型的注意点" class="headerlink" title="协议类型的注意点"></a>协议类型的注意点</h3><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Runnable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">:</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">_</span> type<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> type <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> r1 <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">var</span> r2 <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><ul><li>如果协议中有associatedtype, 以下写法会报错.</li></ul><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    associatedtype <span class="token builtin">Speed</span>    <span class="token keyword">var</span> speed<span class="token punctuation">:</span> <span class="token builtin">Speed</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">:</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> speed<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span> <span class="token number">0.0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> speed<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">_</span> type<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> type <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> r1 <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">var</span> r2 <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-7b9288335e3b7497.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-05559c8697d98455.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>因为编译后, 不确定关联类型是什么类型.</li></ul><h4 id="1-泛型解决"><a href="#1-泛型解决" class="headerlink" title="1)泛型解决"></a>1)泛型解决</h4><p>解决方案①：使用泛型</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token keyword">get</span><span class="token operator">&lt;</span>T <span class="token punctuation">:</span> <span class="token builtin">Runnable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> type<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> T <span class="token punctuation">{</span>    <span class="token keyword">if</span> type <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> T    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> T<span class="token punctuation">}</span><span class="token keyword">var</span> r1<span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">var</span> r2<span class="token punctuation">:</span> <span class="token builtin">Car</span> <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h4 id="2-不透明类型（Opaque-Type）"><a href="#2-不透明类型（Opaque-Type）" class="headerlink" title="2)不透明类型（Opaque Type）"></a>2)不透明类型（Opaque Type）</h4><p>解决方案②：使用some关键字声明一个不透明类型</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">_</span> type<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> some <span class="token builtin">Runnable</span> <span class="token punctuation">{</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">var</span> r1 <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">var</span> r2 <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>some限制只能返回一种类型<br><img src="https://upload-images.jianshu.io/upload_images/126164-db283f9be1ff138c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p><strong>应用</strong>: 想返回遵守某个协议对象,  不希望外部知道对象类型, 外部使用对象时只想暴露协议接口调用,  可以用不透明类型.</p><ul><li>some除了用在返回值类型上，一般还可以用在属性类型上</li></ul><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Runnable</span> <span class="token punctuation">{</span> associatedtype <span class="token builtin">Speed</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span> <span class="token keyword">typealias</span> <span class="token builtin">Speed</span> <span class="token operator">=</span> <span class="token builtin">Double</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> pet<span class="token punctuation">:</span> some <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="可选项的本质"><a href="#可选项的本质" class="headerlink" title="可选项的本质"></a>可选项的本质</h3><ul><li>可选项的本质是enum类型</li></ul><p>1)可选项在.h中定义</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token builtin">Optional</span><span class="token operator">&lt;</span><span class="token builtin">Wrapped</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token builtin">ExpressibleByNilLiteral</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token keyword">none</span>    <span class="token keyword">case</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token builtin">Wrapped</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token number">_</span> some<span class="token punctuation">:</span> <span class="token builtin">Wrapped</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>2)以下可选项赋值等效</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> age0<span class="token punctuation">:</span> <span class="token builtin">Optional</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token builtin">Optional</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">var</span> age1<span class="token punctuation">:</span> <span class="token builtin">Optional</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">var</span> age2 <span class="token operator">=</span> <span class="token builtin">Optional</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">var</span> age3 <span class="token operator">=</span> <span class="token function">Optional</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>age <span class="token operator">=</span> <span class="token constant">nil</span>age3 <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">none</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">var</span> age0 <span class="token operator">=</span> <span class="token builtin">Optional</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token keyword">none</span><span class="token keyword">var</span> age1<span class="token punctuation">:</span> <span class="token builtin">Optional</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">none</span></code></pre><p>3)可选项混写</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">none</span>age <span class="token operator">=</span> <span class="token number">10</span>age <span class="token operator">=</span> <span class="token punctuation">.</span>someage <span class="token operator">=</span> <span class="token constant">nil</span></code></pre><p>4)可选类型可用于swich</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">switch</span> age <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token keyword">let</span> v<span class="token operator">?</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">//如果可选类型age 有值, 会解包赋值给v</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"some"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token constant">nil</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">//如果可选类型age为 nil </span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">switch</span> age <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"some"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token keyword">none</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>等价于</p><pre><code>if let v = age {    print(&quot;some&quot;, v)} else {    print(&quot;none&quot;)}</code></pre><h3 id="多重可选项的本质"><a href="#多重可选项的本质" class="headerlink" title="多重可选项的本质"></a>多重可选项的本质</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age_<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span><span class="token operator">?</span> <span class="token operator">=</span> age_age <span class="token operator">=</span> <span class="token constant">nil</span></code></pre><p>等价于</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age0 <span class="token operator">=</span> <span class="token builtin">Optional</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token builtin">Optional</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>age0 <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">none</span><span class="token keyword">var</span> age1<span class="token punctuation">:</span> <span class="token builtin">Optional</span><span class="token operator">&lt;</span><span class="token builtin">Optional</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>age1 <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">none</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> age0<span class="token punctuation">:</span> <span class="token builtin">Optional</span><span class="token operator">&lt;</span><span class="token builtin">Optional</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token number">10</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 15-错误处理</title>
      <link href="/2020/06/05/Swift5-1-15-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2020/06/05/Swift5-1-15-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote><p>错误处理也就是异常处理</p></blockquote><h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><p>开发过程常见的错误</p><ul><li>语法错误（编译报错）</li><li>逻辑错误</li><li>运行时错误（可能会导致闪退，一般也叫做异常）<br>……</li></ul><h3 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h3><p>1)Swift中可以通过<code>Error协议</code>自定义运行时的错误信息</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">SomeError</span> <span class="token punctuation">:</span> <span class="token builtin">Error</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">illegalArg</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">outOfBounds</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> outOfMemory<span class="token punctuation">}</span></code></pre><p>2)函数内部通过throw抛出自定义Error，可能会抛出Error的函数必须加上throws声明</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">_</span> num1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> num2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> num2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token builtin">SomeError</span><span class="token punctuation">.</span><span class="token function">illegalArg</span><span class="token punctuation">(</span><span class="token string">"0不能作为除数"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">}</span></code></pre><p>3)需要使用try调用可能会抛出Error的函数</p><pre><code>var result = try divide(20, 10)</code></pre><h3 id="do-catch"><a href="#do-catch" class="headerlink" title="do-catch"></a>do-catch</h3><p>可以使用do-catch捕捉Error</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">try</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token keyword">let</span> <span class="token builtin">SomeError</span><span class="token punctuation">.</span><span class="token function">illegalArg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"参数异常:"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token keyword">let</span> <span class="token builtin">SomeError</span><span class="token punctuation">.</span><span class="token function">outOfBounds</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"下标越界:"</span><span class="token punctuation">,</span> <span class="token string">"size=<span class="token interpolation"><span class="token delimiter variable">\(</span>size<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">,</span> <span class="token string">"index=<span class="token interpolation"><span class="token delimiter variable">\(</span>index<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token builtin">SomeError</span><span class="token punctuation">.</span>outOfMemory <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"内存溢出"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"其他错误"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// 参数异常: 0不能作为除数</span><span class="token comment" spellcheck="true">// 4</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token keyword">let</span> error <span class="token punctuation">{</span>    <span class="token keyword">switch</span> error <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token builtin">SomeError</span><span class="token punctuation">.</span><span class="token function">illegalArg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"参数错误："</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"其他错误"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>抛出Error后，try下一句直到作用域结束的代码都将停止运行</li></ul><h3 id="处理Error"><a href="#处理Error" class="headerlink" title="处理Error"></a>处理Error</h3><p><strong>处理Error的2种方式:</strong><br>①    通过do-catch捕捉Error<br>②    不捕捉Error，在当前函数增加throws声明，Error将自动抛给上层函数</p><ul><li>如果最顶层函数（main函数）依然没有捕捉Error，那么程序将终止</li></ul><p>1)Error将自动抛给上层函数:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">try</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">// Fatal error: Error raised at top level</span></code></pre><p>2)error 转化为SomeError,  通过do-catch捕捉</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">try</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token keyword">let</span> error <span class="token keyword">as</span> <span class="token builtin">SomeError</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// illegalArg("0不能作为除数")</span><span class="token comment" spellcheck="true">// 4</span></code></pre><p>3)只要是SomeError就捕捉</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">try</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token keyword">is</span> <span class="token builtin">SomeError</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SomeError"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="try-、try"><a href="#try-、try" class="headerlink" title="try?、try!"></a>try?、try!</h3><p>可以使用<code>try?</code>、<code>try!</code>调用可能会抛出Error的函数，这样就不用去处理Error</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> result1 <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Optional(2),Int?</span>    <span class="token keyword">var</span> result2 <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// nil</span>    <span class="token keyword">var</span> result3 <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2, Int</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>a、b是等价的</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">var</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    b <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span> b <span class="token operator">=</span> <span class="token constant">nil</span> <span class="token punctuation">}</span></code></pre><h3 id="rethrows"><a href="#rethrows" class="headerlink" title="rethrows"></a>rethrows</h3><p><code>rethrows</code>表明：函数本身不会抛出错误，但调用闭包参数抛出错误，那么它会将错误向上抛</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token number">_</span> fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> num1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> num2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">rethrows</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">try</span> <span class="token function">fn</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Fatal error: Error raised at top level</span><span class="token keyword">try</span> <span class="token function">exec</span><span class="token punctuation">(</span>divide<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p><code>defer</code>语句：用来定义以任何方式（抛错误、return等）离开代码块前必须要执行的代码</p><ul><li>defer语句将延迟至当前作用域结束之前执行</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">open</span> <span class="token punctuation">(</span><span class="token number">_</span> filename<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">_</span> file<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">processFile</span><span class="token punctuation">(</span><span class="token number">_</span> filename<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用file</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">try</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//close 将会在这里调用</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token function">processFile</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// open</span><span class="token comment" spellcheck="true">// close</span><span class="token comment" spellcheck="true">// Fatal error: Error raised at top level</span></code></pre><ul><li>defer语句的执行顺序与定义顺序相反</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"fn1"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"fn2"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token punctuation">{</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">defer</span> <span class="token punctuation">{</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// fn2</span><span class="token comment" spellcheck="true">// fn1</span></code></pre><h3 id="assert（断言）"><a href="#assert（断言）" class="headerlink" title="assert（断言）"></a>assert（断言）</h3><ul><li>很多编程语言都有断言机制：不符合指定条件就抛出运行时错误，常用于调试（Debug）阶段的条件判断.</li><li>默认情况下，Swift的断言只会在Debug模式下生效，Release模式下会忽略</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token function">assert</span><span class="token punctuation">(</span>v2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"除数不能为0"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//条件成立 继续往下走. 不成立抛出运行时错误</span>    <span class="token keyword">return</span> v1 <span class="token operator">/</span> v2<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>增加Swift Flags修改断言的默认行为</p><ul><li>-assert-config Release：强制关闭断言</li><li>-assert-config Debug：强制开启断言</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-0d48f3cc7c9b14cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="fatalError"><a href="#fatalError" class="headerlink" title="fatalError"></a>fatalError</h3><ul><li>如果遇到严重问题，希望结束程序运行时，可以直接使用fatalError函数抛出错误（这是无法通过<code>do-catch</code>捕捉的错误）</li><li>使用了fatalError函数，就不需要再写<code>return</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">_</span> num<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> num <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string">"num不能小于0"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>在某些不得不实现、但不希望别人调用的方法，可以考虑内部使用<code>fatalError</code>函数</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span> <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string">"don't call Student.init"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>score<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span>score<span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>可以使用 do 实现局部作用域</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> dog1 <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dog1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span>    dog1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> dog2 <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dog2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span>    dog2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 14-协议</title>
      <link href="/2020/06/04/Swift5-1-14-%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/06/04/Swift5-1-14-%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h3 id="协议（Protocol）"><a href="#协议（Protocol）" class="headerlink" title="协议（Protocol）"></a>协议（Protocol）</h3><p>1)协议可以用来定义方法、属性、下标的声明，协议可以被枚举、结构体、类遵守（多个协议之间用逗号隔开）</p><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Test1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>protocol <span class="token builtin">Test2</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>protocol <span class="token builtin">Test3</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">:</span> <span class="token builtin">Test1</span><span class="token punctuation">,</span> <span class="token builtin">Test2</span><span class="token punctuation">,</span> <span class="token builtin">Test3</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>2)协议中定义方法时不能有默认参数值<br>默认情况下，协议中定义的内容必须全部都实现<br>也有办法办到只实现部分内容，以后会讲到</p><h3 id="协议中的属性"><a href="#协议中的属性" class="headerlink" title="协议中的属性"></a>协议中的属性</h3><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> x <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> y <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">:</span> <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">func</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Person draw"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> index <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">:</span> <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Person draw"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> index <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>协议中定义属性时必须用<code>var</code>关键字.</li><li>实现协议时的属性权限要不小于协议中定义的属性权限.<br>协议定义<code>get</code>、<code>set</code>，用var存储属性或<code>get</code>、<code>set</code>计算属性去实现<br>协议定义<code>get</code>，用任何属性都可以实现</li></ul><h3 id="static、class"><a href="#static、class" class="headerlink" title="static、class"></a>static、class</h3><p>为了保证通用，协议中必须用<code>static</code>定义类型方法、类型属性、类型下标</p><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person1</span> <span class="token punctuation">:</span> <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">func</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Person1 draw"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person2</span> <span class="token punctuation">:</span> <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Person2 draw"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="mutating"><a href="#mutating" class="headerlink" title="mutating"></a>mutating</h3><p>只有将协议中的实例方法标记为<code>mutating</code></p><ul><li>才允许结构体、枚举的具体实现修改自身内存</li><li>类在实现方法时不用加mutating，枚举、结构体才需要加mutating</li></ul><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Size</span> <span class="token punctuation">:</span> <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> width<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">func</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        width <span class="token operator">=</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">:</span> <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><ul><li>协议中还可以定义初始化器init</li><li>非final类实现时必须加上required</li></ul><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">:</span> <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Size</span> <span class="token punctuation">:</span> <span class="token builtin">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>如果从协议实现的初始化器，刚好是重写了父类的指定初始化器</li><li>那么这个初始化必须同时加<code>required</code>、<code>override</code></li></ul><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Livable</span> <span class="token punctuation">{</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token builtin">Person</span><span class="token punctuation">,</span> <span class="token builtin">Livable</span> <span class="token punctuation">{</span>    <span class="token keyword">required</span> <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="init、init-、init"><a href="#init、init-、init" class="headerlink" title="init、init?、init!"></a>init、init?、init!</h3><ul><li>协议中定义的init?、init!，可以用init、init?、init!去实现</li><li>协议中定义的init，可以用init、init!去实现</li></ul><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Livable</span> <span class="token punctuation">{</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">init</span><span class="token operator">!</span><span class="token punctuation">(</span>no<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">:</span> <span class="token builtin">Livable</span> <span class="token punctuation">{</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// required init!() {}</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// required init!(age: Int) {}</span>    <span class="token comment" spellcheck="true">// required init(age: Int) {}</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token operator">!</span><span class="token punctuation">(</span>no<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// required init?(no: Int) {}</span>    <span class="token comment" spellcheck="true">// required init(no: Int) {}</span><span class="token punctuation">}</span></code></pre><h3 id="协议的继承"><a href="#协议的继承" class="headerlink" title="协议的继承"></a>协议的继承</h3><p>一个协议可以继承其他协议</p><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>protocol <span class="token builtin">Livable</span> <span class="token punctuation">:</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">:</span> <span class="token builtin">Livable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="协议组合"><a href="#协议组合" class="headerlink" title="协议组合"></a>协议组合</h3><p>协议组合，可以包含1个类类型（最多1个）</p><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Livable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>protocol <span class="token builtin">Runnable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接收Person或者其子类的实例</span><span class="token keyword">func</span> <span class="token function">fn0</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token builtin">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接收遵守Livable协议的实例</span><span class="token keyword">func</span> <span class="token function">fn1</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token builtin">Livable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接收同时遵守Livable、Runnable协议的实例</span><span class="token keyword">func</span> <span class="token function">fn2</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token builtin">Livable</span> <span class="token operator">&amp;</span> <span class="token builtin">Runnable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接收同时遵守Livable、Runnable协议、并且是Person或者其子类的实例</span><span class="token keyword">func</span> <span class="token function">fn3</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token operator">&amp;</span> <span class="token builtin">Livable</span> <span class="token operator">&amp;</span> <span class="token builtin">Runnable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">typealias</span> <span class="token builtin">RealPerson</span> <span class="token operator">=</span> <span class="token builtin">Person</span> <span class="token operator">&amp;</span> <span class="token builtin">Livable</span> <span class="token operator">&amp;</span> <span class="token builtin">Runnable</span><span class="token comment" spellcheck="true">// 接收同时遵守Livable、Runnable协议、并且是Person或者其子类的实例</span><span class="token keyword">func</span> <span class="token function">fn4</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token builtin">RealPerson</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="CaseIterable协议"><a href="#CaseIterable协议" class="headerlink" title="CaseIterable协议"></a>CaseIterable协议</h3><p>让<code>枚举</code>遵守CaseIterable协议，可以实现遍历枚举值</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Season</span> <span class="token punctuation">:</span> <span class="token builtin">CaseIterable</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> spring<span class="token punctuation">,</span> summer<span class="token punctuation">,</span> autumn<span class="token punctuation">,</span> winter<span class="token punctuation">}</span><span class="token keyword">let</span> seasons <span class="token operator">=</span> <span class="token builtin">Season</span><span class="token punctuation">.</span>allCases<span class="token function">print</span><span class="token punctuation">(</span>seasons<span class="token punctuation">.</span><span class="token builtin">count</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span><span class="token keyword">for</span> season <span class="token keyword">in</span> seasons <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>season<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// spring summer autumn winter</span></code></pre><h3 id="CustomStringConvertible协议"><a href="#CustomStringConvertible协议" class="headerlink" title="CustomStringConvertible协议"></a>CustomStringConvertible协议</h3><p>遵守CustomStringConvertible、    CustomDebugStringConvertible协议，都可以自定义实例的打印字符串</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">:</span> <span class="token builtin">CustomStringConvertible</span><span class="token punctuation">,</span> <span class="token builtin">CustomDebugStringConvertible</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span> <span class="token string">"person_<span class="token interpolation"><span class="token delimiter variable">\(</span>age<span class="token delimiter variable">)</span></span>"</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> debugDescription<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span> <span class="token string">"debug_person_<span class="token interpolation"><span class="token delimiter variable">\(</span>age<span class="token delimiter variable">)</span></span>"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// person_0</span><span class="token function">debugPrint</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// debug_person_0</span></code></pre><ul><li><code>print</code>调用的是CustomStringConvertible协议的<code>description</code></li><li><code>debugPrint</code> 、<code>po</code>调用的是CustomDebugStringConvertible协议的<code>debugDescription</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-c5dcad762ab0af47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="Any、AnyObject"><a href="#Any、AnyObject" class="headerlink" title="Any、AnyObject"></a>Any、AnyObject</h3><p>Swift提供了2种特殊的类型：<code>Any</code>、<code>AnyObject</code></p><ul><li>Any：可以代表任意类型（枚举、结构体、类，也包括函数类型）</li><li>AnyObject：可以代表任意<code>类</code>类型（在协议后面写上: AnyObject代表只有类能遵守这个协议）</li><li>在协议后面写上: class也代表只有类能遵守这个协议</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> stu<span class="token punctuation">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> <span class="token number">10</span>stu <span class="token operator">=</span> <span class="token string">"Jack"</span>stu <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建1个能存放任意类型的数组</span><span class="token comment" spellcheck="true">// var data = Array&lt;Any>()  也等价于下面写法</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="is、as-、as-、as"><a href="#is、as-、as-、as" class="headerlink" title="is、as?、as!、as"></a>is、as?、as!、as</h3><p><code>is</code>用来判断是否为某种类型，<code>as</code>用来做强制类型转换</p><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Runnable</span> <span class="token punctuation">{</span> <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token builtin">Person</span><span class="token punctuation">,</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Student run"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Student study"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> stu<span class="token punctuation">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token function">print</span><span class="token punctuation">(</span>stu <span class="token keyword">is</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>stu <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token function">print</span><span class="token punctuation">(</span>stu <span class="token keyword">is</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>stu <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>stu <span class="token keyword">is</span> <span class="token builtin">Person</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">print</span><span class="token punctuation">(</span>stu <span class="token keyword">is</span> <span class="token builtin">Student</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">print</span><span class="token punctuation">(</span>stu <span class="token keyword">is</span> <span class="token builtin">Runnable</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> stu<span class="token punctuation">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> <span class="token function">10</span><span class="token punctuation">(</span>stu <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">Student</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 没有调用study</span>stu <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stu <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">Student</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Student study</span><span class="token punctuation">(</span>stu <span class="token keyword">as</span><span class="token operator">!</span> <span class="token builtin">Student</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Student study</span><span class="token punctuation">(</span>stu <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">Runnable</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Student run</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">Any</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">as</span> <span class="token builtin">Double</span><span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10.0</span></code></pre><h3 id="X-self、X-Type、AnyClass"><a href="#X-self、X-Type、AnyClass" class="headerlink" title="X.self、X.Type、AnyClass"></a>X.self、X.Type、AnyClass</h3><p>X代指类</p><ul><li>X.self是一个元类型（metadata）的指针，metadata存放着类型相关信息</li><li>X.self属于X.Type类型</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> perType<span class="token punctuation">:</span> <span class="token builtin">Person</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token operator">=</span> <span class="token builtin">Person</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token keyword">var</span> stuType<span class="token punctuation">:</span> <span class="token builtin">Student</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token operator">=</span> <span class="token builtin">Student</span><span class="token punctuation">.</span><span class="token keyword">self</span>perType <span class="token operator">=</span> <span class="token builtin">Student</span><span class="token punctuation">.</span><span class="token keyword">self</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> anyType<span class="token punctuation">:</span> <span class="token builtin">AnyObject</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token operator">=</span> <span class="token builtin">Person</span><span class="token punctuation">.</span><span class="token keyword">self</span>anyType <span class="token operator">=</span> <span class="token builtin">Student</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token keyword">public</span> <span class="token keyword">typealias</span> <span class="token builtin">AnyClass</span> <span class="token operator">=</span> <span class="token builtin">AnyObject</span><span class="token punctuation">.</span><span class="token keyword">Type</span><span class="token keyword">var</span> anyType2<span class="token punctuation">:</span> <span class="token builtin">AnyClass</span> <span class="token operator">=</span> <span class="token builtin">Person</span><span class="token punctuation">.</span><span class="token keyword">self</span>anyType2 <span class="token operator">=</span> <span class="token builtin">Student</span><span class="token punctuation">.</span><span class="token keyword">self</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> per <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> perType <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> per<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Person.self</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Person</span><span class="token punctuation">.</span><span class="token keyword">self</span> <span class="token operator">==</span> <span class="token function">type</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> per<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>以下四种初始化效果一样:</p><pre><code>class Person {    static var age : Int = 0    static func run() {}}Person.age = 11Person.run()Person.self.age = 22Person.self.run()// 四种初始化效果一样:var p0 = Person() // init()var p1 = Person.self() // init()var p2 = Person.init() // init()var p3 = Person.self.init() // init()var pType = Person.self//var pType2 = Person   //❌编译错误</code></pre><ul><li>如果想访问类属性,或者类方法, 可以通过类名(Person), 或者Person.self访问.</li><li>如果想要获取元类型,只能通过<code>类名.self</code>(Person.self)方式获取</li></ul><ul><li><code>AnyClass</code> 实质就是 <code>AnyObject.Type</code>, 如果要求传入AnyClass, 就是传入任何类的元类类型(Person.self)</li></ul><pre><code>func test(_ cls:AnyClass) {}test(Person.self)</code></pre><h3 id="元类型的应用"><a href="#元类型的应用" class="headerlink" title="元类型的应用"></a>元类型的应用</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> <span class="token builtin">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> <span class="token builtin">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Pig</span> <span class="token punctuation">:</span> <span class="token builtin">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token number">_</span> clses<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Animal</span><span class="token punctuation">.</span><span class="token keyword">Type</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token builtin">Animal</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">Animal</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> cls <span class="token keyword">in</span> clses <span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">Cat</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token builtin">Dog</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token builtin">Pig</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token builtin">Foundation</span>  <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> no<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">class_getInstanceSize</span><span class="token punctuation">(</span><span class="token builtin">Student</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 32</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">class_getSuperclass</span><span class="token punctuation">(</span><span class="token builtin">Student</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Person</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">class_getSuperclass</span><span class="token punctuation">(</span><span class="token builtin">Person</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Swift._SwiftObject</span></code></pre><p>从结果可以看得出来，Swift还有个隐藏的基类：Swift._SwiftObject<br>可以参考<a href="https://github.com/apple/swift/blob/master/stdlib/public/runtime/SwiftObject.h" target="_blank" rel="noopener">Swift源码 34行</a></p><h3 id="Self"><a href="#Self" class="headerlink" title="Self"></a>Self</h3><ul><li>Self代表当前类型,  self代表当前实例对象</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> <span class="token builtin">count</span> <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token builtin">count</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Self一般用作<code>返回值类型</code>，限定返回值跟方法调用者必须是同一类型（也可以作为参数类型）</p><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">Self</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">:</span> <span class="token builtin">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">Self</span> <span class="token punctuation">{</span> <span class="token function">type</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Person  print(p.test())</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Student  print(stu.test())</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 13-可选链</title>
      <link href="/2020/06/04/Swift5-1-13-%E5%8F%AF%E9%80%89%E9%93%BE/"/>
      <url>/2020/06/04/Swift5-1-13-%E5%8F%AF%E9%80%89%E9%93%BE/</url>
      <content type="html"><![CDATA[<blockquote><p>可选链（Optional Chaining）</p></blockquote><h3 id="可选项包装"><a href="#可选项包装" class="headerlink" title="可选项包装"></a>可选项包装</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> price <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> weight <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">var</span> dog<span class="token punctuation">:</span> <span class="token builtin">Dog</span> <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> car<span class="token punctuation">:</span> <span class="token builtin">Car</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token number">18</span> <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Person eat"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> index <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person<span class="token punctuation">:</span> <span class="token builtin">Person</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> age1 <span class="token operator">=</span> person<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Int</span><span class="token keyword">var</span> age2 <span class="token operator">=</span> person<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Int?</span><span class="token keyword">var</span> name <span class="token operator">=</span> person<span class="token operator">?</span><span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// String?</span><span class="token keyword">var</span> index <span class="token operator">=</span> person<span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// Int?</span><span class="token keyword">func</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">String</span> <span class="token punctuation">{</span> <span class="token string">"jack"</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果person是nil，不会调用getName()</span>person<span class="token operator">?</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>如果可选项为nil，调用方法、下标、属性失败，结果为nil</li><li>如果可选项不为nil，调用方法、下标、属性成功，结果会被包装成可选项</li><li>如果结果本来就是可选项，不会进行再次包装</li></ul><pre><code>if let _ = person?.eat() { // ()?    print(&quot;eat调用成功&quot;)} else {    print(&quot;eat调用失败&quot;)}</code></pre><pre><code>var dog = person?.dog // Dog?var weight = person?.dog.weight // Int?var price = person?.car?.price // Int?</code></pre><p>总结:<br>多个?可以链接在一起<br>如果链中任何一个节点是nil，那么整个链就会调用失败</p><h3 id="可选链"><a href="#可选链" class="headerlink" title="可选链"></a>可选链</h3><pre><code>var scores = [&quot;Jack&quot;: [86, 82, 84], &quot;Rose&quot;: [79, 94, 81]]scores[&quot;Jack&quot;]?[0] = 100scores[&quot;Rose&quot;]?[2] += 10scores[&quot;Kate&quot;]?[0] = 88</code></pre><pre><code>var num1: Int? = 5num1? = 10 // Optional(10)var num2: Int? = nilnum2? = 10 // nil</code></pre><pre><code>var dict: [String : (Int, Int) -&gt; Int] = [    &quot;sum&quot; : (+),    &quot;difference&quot; : (-)]var result = dict[&quot;sum&quot;]?(10, 20) // Optional(30), Int?</code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 12-初始化</title>
      <link href="/2020/06/04/Swift5-1-12-%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2020/06/04/Swift5-1-12-%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="初始化器"><a href="#初始化器" class="headerlink" title="初始化器"></a>初始化器</h3><p><strong>1)类、结构体、枚举都可以定义初始化器</strong></p><p><strong>类</strong>有2种初始化器：指定初始化器（designated initializer）、便捷初始化器（convenience initializer）</p><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 指定初始化器</span><span class="token keyword">init</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>    statements<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 便捷初始化器</span><span class="token keyword">convenience</span> <span class="token keyword">init</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>    statements<span class="token punctuation">}</span></code></pre><ul><li>每个类至少有一个指定初始化器，指定初始化器是类的主要初始化器</li><li>默认初始化器总是类的指定初始化器</li><li>类偏向于少量指定初始化器，一个类通常只有一个指定初始化器</li></ul><p><strong>2)初始化器的相互调用规则</strong></p><ul><li>指定初始化器 必须从它的<code>直系父类</code>调用指定初始化器</li><li>便捷初始化器 必须从<code>相同的类里</code>调用另一个初始化器</li><li>便捷初始化器 <code>最终必须调用</code>一个指定初始化器</li></ul><h3 id="初始化器的相互调用"><a href="#初始化器的相互调用" class="headerlink" title="初始化器的相互调用"></a>初始化器的相互调用</h3><p>Superclass: 父类<br>Subclass:    子类<br>Convenience : 便捷初始化器<br>Designated:     指定初始化器</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-ac2e8b3474b33278.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-5e29728bad4da46c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>这一套规则保证了: 使用任意初始化器，都可以完整地初始化实例</li></ul><h3 id="两段式初始化"><a href="#两段式初始化" class="headerlink" title="两段式初始化"></a>两段式初始化</h3><p>Swift在编码安全方面是煞费苦心，为了保证初始化过程的安全，设定了<code>两段式初始化</code>、<code>安全检查</code></p><p><strong>两段式初始化:</strong></p><ul><li><p>第1阶段：初始化所有存储属性<br>① 外层调用指定\便捷初始化器<br>② 分配内存给实例，但未初始化<br>③ 指定初始化器确保当前类定义的存储属性都初始化<br>④ 指定初始化器调用父类的初始化器，不断向上调用，形成初始化器链</p></li><li><p>第2阶段：设置新的存储属性值<br>① 从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例<br>② 初始化器现在能够使用<code>self</code>（访问、修改它的属性，调用它的实例方法等等）<br>③ 最终，链中任何便捷初始化器都有机会定制实例以及使用<code>self</code></p></li></ul><h3 id="安全检查"><a href="#安全检查" class="headerlink" title="安全检查"></a>安全检查</h3><ul><li>指定初始化器必须保证在调用父类初始化器之前，其所在类定义的所有存储属性都要初始化完成</li><li>指定初始化器必须先调用父类初始化器，然后才能为继承的属性设置新值</li><li>便捷初始化器必须先调用同类中的其它初始化器，然后再为任意属性设置新值</li><li>初始化器在第1阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用self</li><li>直到第1阶段结束，实例才算完全合法</li></ul><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><ul><li><p>当重写父类的指定初始化器时，必须加上<code>override</code>（即使子类的实现是便捷初始化器）</p></li><li><p>如果子类写了一个匹配父类便捷初始化器的初始化器，不用加上<code>override</code>.<br>因为父类的便捷初始化器永远不会通过子类直接调用，因此，严格来说，子类无法重写父类的便捷初始化器.</p></li></ul><h3 id="自动继承"><a href="#自动继承" class="headerlink" title="自动继承"></a>自动继承</h3><ul><li>① 如果子类没有自定义任何指定初始化器，它会自动继承父类所有的指定初始化器</li><li>② 如果子类提供了父类所有指定初始化器的实现（要么通过方式①继承，要么重写）.<br>子类自动继承所有的父类便捷初始化器</li><li>③ 就算子类添加了更多的便捷初始化器，这些规则仍然适用</li><li>④ 子类以便捷初始化器的形式重写父类的指定初始化器，也可以作为满足规则②的一部分</li></ul><h3 id="required"><a href="#required" class="headerlink" title="required"></a>required</h3><ul><li>用<code>required</code>修饰指定初始化器，表明其所有子类都必须实现该初始化器（通过继承或者重写实现）</li><li>如果子类重写了<code>required</code>初始化器，也必须加上<code>required</code>，不用加<code>override</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="属性观察器"><a href="#属性观察器" class="headerlink" title="属性观察器"></a>属性观察器</h3><ul><li>父类的属性在它自己的初始化器中赋值不会触发属性观察器，但在子类的初始化器中赋值会触发属性观察器</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">willSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"willSet"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">didSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"didSet"</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> age<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// willSet 1</span><span class="token comment" spellcheck="true">// didSet 0 1</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="可失败初始化器"><a href="#可失败初始化器" class="headerlink" title="可失败初始化器"></a>可失败初始化器</h3><ul><li>类、结构体、枚举都可以使用<code>init?</code>定义<code>可失败初始化器</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span>    <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> name<span class="token punctuation">.</span><span class="token builtin">isEmpty</span>    <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token constant">nil</span>        <span class="token punctuation">}</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>之前接触过的可失败初始化器</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token number">_</span> description<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token keyword">enum</span> <span class="token builtin">Answer</span> <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> wrong<span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">}</span><span class="token keyword">var</span> an <span class="token operator">=</span> <span class="token function">Answer</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><ul><li>不允许同时定义参数标签、参数个数、参数类型相同的可失败初始化器和非可失败初始化器</li><li>可以用<code>init!</code>定义隐式解包的可失败初始化器</li><li>可失败初始化器可以调用非可失败初始化器，非可失败初始化器调用可失败初始化器需要进行解包</li><li>如果初始化器调用一个可失败初始化器导致初始化失败，那么整个初始化过程都失败，并且之后的代码都停止执行</li><li>可以用一个非可失败初始化器重写一个可失败初始化器，但反过来是不行的</li></ul><h3 id="反初始化器（deinit）"><a href="#反初始化器（deinit）" class="headerlink" title="反初始化器（deinit）"></a>反初始化器（deinit）</h3><ul><li><code>deinit</code>叫做反初始化器，类似于C++的析构函数、OC中的dealloc方法<br>当类的实例对象被释放内存时，就会调用实例对象的<code>deinit</code>方法</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">deinit</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Person对象销毁了"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>deinit不接受任何参数，不能写小括号，不能自行调用</li><li>父类的deinit能被子类继承</li><li>子类的deinit实现执行完毕后会调用父类的deinit</li></ul>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 11-继承</title>
      <link href="/2020/06/03/Swift5-1-11-%E7%BB%A7%E6%89%BF/"/>
      <url>/2020/06/03/Swift5-1-11-%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<h3 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h3><ul><li>值类型（枚举、结构体）不支持继承，只有类支持继承</li><li>没有父类的类，称为：基类<br>Swift并<code>没有</code>像OC、Java那样的规定：任何类最终都要继承自某个基类</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-185b2a235623124b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>子类可以重写父类的<code>下标</code>、<code>方法</code>、<code>属性</code>，重写必须加上<code>override</code>关键字</p><h3 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">0</span>   <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> <span class="token builtin">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> weight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ErHa</span> <span class="token punctuation">:</span> <span class="token builtin">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> iq <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true">//32</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Mems</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>ofRef<span class="token punctuation">:</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 0x00000001000073e0 0x0000000000000002 0x000000000000000a 0x0000000000000000 */</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Mems</span><span class="token punctuation">.</span><span class="token function">memStr</span><span class="token punctuation">(</span>ofRef<span class="token punctuation">:</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span>d<span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true">//32</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Mems</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>ofRef<span class="token punctuation">:</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 0x0000000100007490 0x0000000000000002 0x000000000000000a 0x0000000000000014*/</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Mems</span><span class="token punctuation">.</span><span class="token function">memStr</span><span class="token punctuation">(</span>ofRef<span class="token punctuation">:</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token function">ErHa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span>e<span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">20</span>e<span class="token punctuation">.</span>iq <span class="token operator">=</span> <span class="token number">30</span><span class="token comment" spellcheck="true">//48</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Mems</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>ofRef<span class="token punctuation">:</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 0x0000000100007560 0x0000000000000002 0x000000000000000a 0x0000000000000014 0x000000000000001e 0x0000000000000000*/</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Mems</span><span class="token punctuation">.</span><span class="token function">memStr</span><span class="token punctuation">(</span>ofRef<span class="token punctuation">:</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="重写实例方法、下标"><a href="#重写实例方法、下标" class="headerlink" title="重写实例方法、下标"></a>重写实例方法、下标</h3><p>在实例方法、下标前加关键字<code>override</code>，可以重写父类实例方法、下标</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Animal speak"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> anim<span class="token punctuation">:</span> <span class="token builtin">Animal</span>anim <span class="token operator">=</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Animal speak</span>anim<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 6</span><span class="token function">print</span><span class="token punctuation">(</span>anim<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> <span class="token builtin">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Cat speak"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>anim <span class="token operator">=</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Animal speak</span><span class="token comment" spellcheck="true">// Cat speak</span>anim<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 7</span><span class="token function">print</span><span class="token punctuation">(</span>anim<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="重写类型方法、下标"><a href="#重写类型方法、下标" class="headerlink" title="重写类型方法、下标"></a>重写类型方法、下标</h3><ul><li>被class修饰的类型方法、下标，<code>允许</code>被子类重写</li><li>被static修饰的类型方法、下标，<code>不允许</code>被子类重写</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">func</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Animal speak"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Animal speak</span><span class="token builtin">Animal</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 6</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Animal</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> <span class="token builtin">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">class</span> <span class="token class-name">func</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Cat speak"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">class</span> <span class="token class-name">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Animal speak</span><span class="token comment" spellcheck="true">// Cat speak</span><span class="token builtin">Cat</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 7</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Cat</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="重写属性"><a href="#重写属性" class="headerlink" title="重写属性"></a>重写属性</h3><ul><li>子类可以将父类的属性（存储、计算）重写为<code>计算属性</code></li><li>子类不可以将父类属性重写为<code>存储属性</code></li><li>只能重写var属性，不能重写let属性</li><li>重写时，属性名、类型要一致</li></ul><ul><li>子类重写后的属性权限 不能小于 父类属性的权限.</li><li>如果父类属性是只读的，那么子类重写后的属性可以是只读的、也可以是可读写的.</li><li>如果父类属性是可读写的，那么子类重写后的属性也必须是可读写的.</li></ul><h3 id="重写实例属性"><a href="#重写实例属性" class="headerlink" title="重写实例属性"></a>重写实例属性</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> diameter<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Circle setDiameter"</span><span class="token punctuation">)</span>            radius <span class="token operator">=</span> newValue <span class="token operator">/</span> <span class="token number">2</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Circle getDiameter"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> radius <span class="token operator">*</span> <span class="token number">2</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> circle<span class="token punctuation">:</span> <span class="token builtin">Circle</span>circle <span class="token operator">=</span> <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>circle<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">6</span><span class="token function">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>diameter<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Circle getDiameter</span><span class="token comment" spellcheck="true">// 12</span>circle<span class="token punctuation">.</span>diameter <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment" spellcheck="true">// Circle setDiameter</span><span class="token function">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>radius<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 10</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">SubCircle</span> <span class="token punctuation">:</span> <span class="token builtin">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle setRadius"</span><span class="token punctuation">)</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> newValue <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> newValue <span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle getRadius"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>radius        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">var</span> diameter<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle setDiameter"</span><span class="token punctuation">)</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>diameter <span class="token operator">=</span> newValue <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> newValue <span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle getDiameter"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>diameter        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>circle <span class="token operator">=</span> <span class="token function">SubCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// SubCircle setRadius</span>circle<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">6</span><span class="token comment" spellcheck="true">// SubCircle getDiameter</span><span class="token comment" spellcheck="true">// Circle getDiameter</span><span class="token comment" spellcheck="true">// SubCircle getRadius</span><span class="token comment" spellcheck="true">// 12</span><span class="token function">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>diameter<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// SubCircle setDiameter</span><span class="token comment" spellcheck="true">// Circle setDiameter</span><span class="token comment" spellcheck="true">// SubCircle setRadius</span>circle<span class="token punctuation">.</span>diameter <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true">// SubCircle getRadius</span><span class="token comment" spellcheck="true">// 10</span><span class="token function">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>radius<span class="token punctuation">)</span></code></pre><h3 id="重写类型属性"><a href="#重写类型属性" class="headerlink" title="重写类型属性"></a>重写类型属性</h3><ul><li>被class修饰的<code>计算类型属性</code>，<code>可以</code>被子类重写. class修饰的<code>存储属性</code>不可以被重写.</li><li>被static修饰的<code>类型属性（存储、计算）</code>，<code>不可以</code>被子类重写</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">class</span> <span class="token class-name">var</span> diameter<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Circle setDiameter"</span><span class="token punctuation">)</span>            radius <span class="token operator">=</span> newValue <span class="token operator">/</span> <span class="token number">2</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Circle getDiameter"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> radius <span class="token operator">*</span> <span class="token number">2</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">SubCircle</span> <span class="token punctuation">:</span> <span class="token builtin">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">static</span> <span class="token keyword">var</span> diameter<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle setDiameter"</span><span class="token punctuation">)</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>diameter <span class="token operator">=</span> newValue <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> newValue <span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle getDiameter"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>diameter        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="属性观察器"><a href="#属性观察器" class="headerlink" title="属性观察器"></a>属性观察器</h3><ul><li>可以在子类中为父类属性（除了只读计算属性、let属性）增加属性观察器.</li></ul><p>1)子类给父类存储属性增加属性观察器</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SubCircle</span> <span class="token punctuation">:</span> <span class="token builtin">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">willSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle willSetRadius"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">didSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle didSetRadius"</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> radius<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> circle <span class="token operator">=</span> <span class="token function">SubCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// SubCircle willSetRadius 10</span><span class="token comment" spellcheck="true">// SubCircle didSetRadius 1 10</span>circle<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">10</span></code></pre><p>2)父类的存储属性有属性观察器的, 子类为父类增加属性观察器</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">willSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Circle willSetRadius"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">didSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Circle didSetRadius"</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> radius<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SubCircle</span> <span class="token punctuation">:</span> <span class="token builtin">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">willSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle willSetRadius"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">didSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle didSetRadius"</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> radius<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> circle <span class="token operator">=</span> <span class="token function">SubCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// SubCircle willSetRadius 10</span><span class="token comment" spellcheck="true">// Circle willSetRadius 10</span><span class="token comment" spellcheck="true">// Circle didSetRadius 1 10</span><span class="token comment" spellcheck="true">// SubCircle didSetRadius 1 10</span>circle<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">10</span></code></pre><p>3)父类有计算属性, 子类为父类<code>计算属性</code>增加属性观察器</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Circle setRadius"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Circle getRadius"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">20</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SubCircle</span> <span class="token punctuation">:</span> <span class="token builtin">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">willSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle willSetRadius"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">didSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SubCircle didSetRadius"</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> radius<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> circle <span class="token operator">=</span> <span class="token function">SubCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Circle getRadius</span><span class="token comment" spellcheck="true">// SubCircle willSetRadius 10</span><span class="token comment" spellcheck="true">// Circle setRadius 10</span><span class="token comment" spellcheck="true">// Circle getRadius</span><span class="token comment" spellcheck="true">// SubCircle didSetRadius 20 20</span>circle<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">10</span></code></pre><p>4)无论父类是类计算属性还是实例计算属性, 子类都可以为父类增加属性观察器</p><pre><code>class Circle {    class var radius: Int {        set {            print(&quot;Circle setRadius&quot;, newValue)        }        get {            print(&quot;Circle getRadius&quot;)            return 20        }    }}class SubCircle : Circle {    override static var radius: Int {        willSet {            print(&quot;SubCircle willSetRadius&quot;, newValue)        }        didSet {            print(&quot;SubCircle didSetRadius&quot;, oldValue, radius)        }    }}// Circle getRadius// SubCircle willSetRadius 10// Circle setRadius 10// Circle getRadius// SubCircle didSetRadius 20 20SubCircle.radius = 10</code></pre><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul><li>被final修饰的方法、下标、属性，禁止被重写</li><li>被final修饰的类，禁止被继承</li></ul><h3 id="多态实现原理"><a href="#多态实现原理" class="headerlink" title="多态实现原理"></a>多态实现原理</h3><p>1&gt;OC: Runtime<br>2&gt;C++: 虚表(虚函数表)<br>3&gt;Swift中 多态的实现原理 类似C++ 虚表</p>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 10-下标</title>
      <link href="/2020/06/03/Swift5-1-10-%E4%B8%8B%E6%A0%87/"/>
      <url>/2020/06/03/Swift5-1-10-%E4%B8%8B%E6%A0%87/</url>
      <content type="html"><![CDATA[<h3 id="下标（subscript）"><a href="#下标（subscript）" class="headerlink" title="下标（subscript）"></a>下标（subscript）</h3><ul><li>使用<code>subscript</code>可以给任意类型（枚举、结构体、类）增加下标功能，有些地方也翻译为：下标脚本</li><li><code>subscript</code>的语法类似于实例方法、计算属性，本质就是方法（函数）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                x <span class="token operator">=</span> newValue            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>                y <span class="token operator">=</span> newValue            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> x            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> y            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11.1</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22.2</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 11.1</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 22.2</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 11.1</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 22.2</span></code></pre><ul><li>subscript中定义的返回值类型决定了</li><li>get方法的返回值类型</li><li>set方法中newValue的类型</li></ul><ul><li>subscript可以接受多个参数，并且类型任意</li></ul><h3 id="下标的细节"><a href="#下标的细节" class="headerlink" title="下标的细节"></a>下标的细节</h3><ul><li><code>subscript</code>可以没有<code>set</code>方法，但必须要有<code>get</code>方法</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> x            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> y            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>如果只有get方法，可以省略get</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> x        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> y        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>可以设置参数标签<br>如果添加参数标签,使用时一定要带参数标签.</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> x        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> y        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">22.2</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 22.2</span></code></pre><ul><li>下标可以是类型方法</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Sum</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">subscript</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Sum</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span></code></pre><h3 id="结构体、类作为返回值对比"><a href="#结构体、类作为返回值对比" class="headerlink" title="结构体、类作为返回值对比"></a>结构体、类作为返回值对比</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PointManager</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> point <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PointManager</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span> point <span class="token operator">=</span> newValue <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> point <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> pm <span class="token operator">=</span> <span class="token function">PointManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">11</span>  <span class="token comment" spellcheck="true">//本质:  pm[0] = Point(x: 11, y:pm[0].y)</span>pm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">22</span>  <span class="token comment" spellcheck="true">//本质:  pm[0] = Point(x: pm[0].x , y:22)</span><span class="token comment" spellcheck="true">// Point(x: 11, y: 22)  </span><span class="token function">print</span><span class="token punctuation">(</span>pm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Point(x: 11, y: 22)</span><span class="token function">print</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>point<span class="token punctuation">)</span></code></pre><ul><li><p>当结构体类型作为下标返回值, 如果下标返回实例想访问成员.<br>需要有set方法.</p></li><li><p>当类类型作为下标返回值,  如果下标返回实例想访问成员.<br>不需要加set方法, 一样可以访问成员变量. </p></li></ul><h3 id="接收多个参数的下标"><a href="#接收多个参数的下标" class="headerlink" title="接收多个参数的下标"></a>接收多个参数的下标</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Grid</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>row<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> column<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            <span class="token keyword">guard</span> row <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> row <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> column <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> column <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            data<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">=</span> newValue        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            <span class="token keyword">guard</span> row <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> row <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> column <span class="token operator">>=</span> <span class="token number">0</span>  <span class="token operator">&amp;&amp;</span> column <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> data<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> grid <span class="token operator">=</span> <span class="token function">Grid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">77</span>grid<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88</span>grid<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token function">print</span><span class="token punctuation">(</span>grid<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [[0, 77, 2], [3, 4, 88], [99, 7, 8]]</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 9-方法</title>
      <link href="/2020/06/03/Swift5-1-9-%E6%96%B9%E6%B3%95/"/>
      <url>/2020/06/03/Swift5-1-9-%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="方法（Method）"><a href="#方法（Method）" class="headerlink" title="方法（Method）"></a>方法（Method）</h3><p>枚举、结构体、类都可以定义实例方法、类型方法</p><ul><li>实例方法（Instance Method）：通过实例对象调用</li><li>类型方法（Type Method）：通过类型调用，用<code>static</code>或者<code>class</code>关键字定义</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> cout <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin">Car</span><span class="token punctuation">.</span>cout <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> cout <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> c0 <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Car</span><span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p><strong>self</strong></p><ul><li>在实例方法中代表实例对象</li><li>在类型方法中代表类型</li></ul><ul><li>在类型方法static func getCount中</li><li>cout等价于self.cout、Car.self.cout、Car.cout</li></ul><h3 id="mutating"><a href="#mutating" class="headerlink" title="mutating"></a>mutating</h3><ul><li>结构体和枚举是值类型，默认情况下，值类型的属性不能被自身的实例方法修改</li><li>在<code>func</code>关键字前加<code>mutating</code>可以允许这种修改行为</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">moveBy</span><span class="token punctuation">(</span>deltaX<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> deltaY<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">+</span><span class="token operator">=</span> deltaX        y <span class="token operator">+</span><span class="token operator">=</span> deltaY        <span class="token comment" spellcheck="true">// self = Point(x: x + deltaX, y: y + deltaY)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">StateSwitch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> low<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> high      <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>low<span class="token punctuation">:</span>            <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">.</span>middle        <span class="token keyword">case</span> <span class="token punctuation">.</span>middle<span class="token punctuation">:</span>            <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">.</span>high        <span class="token keyword">case</span> <span class="token punctuation">.</span>high<span class="token punctuation">:</span>            <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">.</span>low        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="discardableResult"><a href="#discardableResult" class="headerlink" title="@discardableResult"></a>@discardableResult</h3><p>在func前面加个<code>@discardableResult</code>，可以消除：函数调用后返回值未被使用的警告⚠</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0.0</span>    @discardableResult <span class="token keyword">mutating</span>    <span class="token keyword">func</span> <span class="token function">moveX</span><span class="token punctuation">(</span>deltaX<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>        x <span class="token operator">+</span><span class="token operator">=</span> deltaX        <span class="token keyword">return</span> x    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">moveX</span><span class="token punctuation">(</span>deltaX<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span></code></pre><pre><code>@discardableResult  func get() -&gt; Int {    return 10}get()</code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 8-属性</title>
      <link href="/2020/06/02/Swift5-1-8-%E5%B1%9E%E6%80%A7/"/>
      <url>/2020/06/02/Swift5-1-8-%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>Swift中跟实例相关的属性可以分为2大类</p><h4 id="存储属性（Stored-Property）"><a href="#存储属性（Stored-Property）" class="headerlink" title="存储属性（Stored Property）"></a>存储属性（Stored Property）</h4><ul><li>类似于成员变量这个概念</li><li>存储在实例的内存中</li><li>结构体、类可以定义存储属性</li><li>枚举<code>不可以</code>定义存储属性</li></ul><h4 id="计算属性（Computed-Property）"><a href="#计算属性（Computed-Property）" class="headerlink" title="计算属性（Computed Property）"></a>计算属性（Computed Property）</h4><ul><li>本质就是方法（函数）</li><li>不占用实例的内存</li><li>枚举、结构体、类都可以定义计算属性</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Circle</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 存储属性</span>    <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Double</span>    <span class="token comment" spellcheck="true">// 计算属性</span>    <span class="token keyword">var</span> diameter<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            radius <span class="token operator">=</span> newValue <span class="token operator">/</span> <span class="token number">2</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            radius <span class="token operator">*</span> <span class="token number">2</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> circle <span class="token operator">=</span> <span class="token function">Circle</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>radius<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5.0</span><span class="token function">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>diameter<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10.0</span>circle<span class="token punctuation">.</span>diameter <span class="token operator">=</span> <span class="token number">12</span><span class="token function">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>radius<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6.0</span><span class="token function">print</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>diameter<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 12.0</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span><span class="token builtin">Circle</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token builtin">stride</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 8</span></code></pre><h3 id="存储属性"><a href="#存储属性" class="headerlink" title="存储属性"></a>存储属性</h3><p>关于存储属性，Swift有个明确的规定:</p><ul><li>在创建类 或 结构体的实例时，必须为所有的存储属性设置一个合适的初始值</li><li>可以在初始化器里为存储属性设置一个初始值</li><li>可以分配一个默认的属性值作为属性定义的一部分</li></ul><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul><li><code>set</code>传入的新值默认叫做newValue，也可以自定义</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Double</span>    <span class="token keyword">var</span> diameter<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newDiameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            radius <span class="token operator">=</span> newDiameter <span class="token operator">/</span> <span class="token number">2</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            radius <span class="token operator">*</span> <span class="token number">2</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>只读计算属性：只有<code>get</code>，没有<code>set</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Double</span>    <span class="token keyword">var</span> diameter<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            radius <span class="token operator">*</span> <span class="token number">2</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token builtin">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Double</span>    <span class="token keyword">var</span> diameter<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span> radius <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义计算属性只能用<code>var</code>，不能用<code>let</code></li><li>let代表常量：值是一成不变的</li><li>计算属性的值是可能发生变化的（即使是只读计算属性）</li></ul><h3 id="枚举rawValue原理"><a href="#枚举rawValue原理" class="headerlink" title="枚举rawValue原理"></a>枚举rawValue原理</h3><p>枚举原始值rawValue的本质是：只读计算属性</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">TestEnum</span> <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> test1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> test2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> test3 <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">var</span> rawValue<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>test1<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">10</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>test2<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">11</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>test3<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">12</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">TestEnum</span><span class="token punctuation">.</span>test3<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 12</span></code></pre><h3 id="延迟存储属性（Lazy-Stored-Property）"><a href="#延迟存储属性（Lazy-Stored-Property）" class="headerlink" title="延迟存储属性（Lazy Stored Property）"></a>延迟存储属性（Lazy Stored Property）</h3><p>使用lazy可以定义一个延迟存储属性，在第一次用到属性的时候才会进行初始化</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Car init!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Car is running!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">lazy</span> <span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Person init!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">goOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        car<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">goOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p> 输出:</p><pre><code>Person init!------Car init!Car is running!</code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">PhotoView</span> <span class="token punctuation">{</span>    <span class="token keyword">lazy</span> <span class="token keyword">var</span> image<span class="token punctuation">:</span> <span class="token builtin">Image</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/xx.png"</span>        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">Data</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">Image</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>lazy属性必须是<code>var</code>，不能是<code>let</code></li><li><code>let</code>必须在实例的初始化方法完成之前就拥有值</li></ul><ul><li>如果多条线程同时第一次访问<code>lazy</code>属性</li><li>无法保证属性只被初始化1次, 不是线程安全的.</li></ul><p><strong>延迟存储属性注意点:</strong></p><ul><li>当结构体包含一个延迟存储属性时，只有<code>var</code>才能访问延迟存储属性</li><li>因为延迟属性初始化时需要改变结构体的内存</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-1fac9162acbf4a07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="属性观察器（Property-Observer）"><a href="#属性观察器（Property-Observer）" class="headerlink" title="属性观察器（Property Observer）"></a>属性观察器（Property Observer）</h3><p>可以为非<code>lazy</code>的<code>var</code>存储属性设置属性观察器</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Circle</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> radius<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>        <span class="token keyword">willSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"willSet"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">didSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"didSet"</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> radius<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">1.0</span>          <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Circle init!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Circle init!</span><span class="token keyword">var</span> circle <span class="token operator">=</span> <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// willSet 10.5</span><span class="token comment" spellcheck="true">// didSet 1.0 10.5</span>circle<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">10.5</span><span class="token comment" spellcheck="true">// 10.5  print(circle.radius)</span></code></pre><ul><li><code>willSet</code>会传递新值，默认叫newValue</li><li><code>didSet</code>会传递旧值，默认叫oldValue</li><li>在初始化器中设置属性值不会触发<code>willSet</code>和<code>didSet</code></li><li>在属性定义时设置初始值也不会触发<code>willSet</code>和<code>didSet</code></li></ul><h3 id="全局变量、局部变量"><a href="#全局变量、局部变量" class="headerlink" title="全局变量、局部变量"></a>全局变量、局部变量</h3><p>属性观察器、计算属性的功能，同样可以应用在全局变量、局部变量身上</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> num<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">10</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"setNum"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>num <span class="token operator">=</span> <span class="token number">11</span> <span class="token comment" spellcheck="true">// setNum 11</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">{</span>        <span class="token keyword">willSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"willSet"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">didSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"didSet"</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> age<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    age <span class="token operator">=</span> <span class="token number">11</span>    <span class="token comment" spellcheck="true">// willSet 11</span>    <span class="token comment" spellcheck="true">// didSet 10 11</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="inout的再次研究"><a href="#inout的再次研究" class="headerlink" title="inout的再次研究"></a>inout的再次研究</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> width<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> side<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">willSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"willSetSide"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">didSet</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"didSetSide"</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> side<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> girth<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            width <span class="token operator">=</span> newValue <span class="token operator">/</span> side            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"setGirth"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"getGirth"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> width <span class="token operator">*</span> side        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"width=<span class="token interpolation"><span class="token delimiter variable">\(</span>width<span class="token delimiter variable">)</span></span>, side=<span class="token interpolation"><span class="token delimiter variable">\(</span>side<span class="token delimiter variable">)</span></span>, girth=<span class="token interpolation"><span class="token delimiter variable">\(</span>girth<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">_</span> num<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">Shape</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> side<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">.</span>width<span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">.</span>side<span class="token punctuation">)</span>  s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">.</span>girth<span class="token punctuation">)</span>  s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>打印:</p><pre><code>getGirthwidth=20, side=4, girth=80----------willSetSide 20didSetSide 4 20getGirthwidth=20, side=20, girth=400----------getGirthsetGirth 20getGirthwidth=1, side=20, girth=20</code></pre><h3 id="inout的本质总结"><a href="#inout的本质总结" class="headerlink" title="inout的本质总结"></a>inout的本质总结</h3><p>1)如果实参有物理内存地址，且没有设置属性观察器<br>直接将实参的内存地址传入函数（实参进行引用传递）</p><p>2)如果实参是<code>计算属性</code> 或者 设置了<code>属性观察器</code><br>采取了<code>Copy In Copy Out</code>的做法</p><ul><li>调用该函数时，先复制实参的值，产生副本<code>【get】</code></li><li>将副本的内存地址传入函数（副本进行引用传递），在函数内部可以修改副本的值</li><li>函数返回后，再将副本的值覆盖实参的值<code>【set】</code></li></ul><p><strong>总结：</strong> inout的本质就是引用传递（地址传递）</p><h3 id="类型属性（Type-Property）"><a href="#类型属性（Type-Property）" class="headerlink" title="类型属性（Type Property）"></a>类型属性（Type Property）</h3><p>严格来说，属性可以分为:<br>1)<strong>实例属性</strong>（Instance Property）：只能通过实例去访问</p><ul><li>存储实例属性（Stored Instance Property）：存储在实例的内存中，每个实例都有1份</li><li>计算实例属性（Computed Instance Property）</li></ul><p>2)<strong>类型属性</strong>（Type Property）：只能通过类型去访问</p><ul><li>存储类型属性（Stored Type Property）：整个程序运行过程中，就只有1份内存（类似于全局变量）</li><li>计算类型属性（Computed Type Property）</li></ul><ul><li>可以通过<code>static</code>定义类型属性</li><li>如果是类，也可以用关键字 <code>class</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> <span class="token builtin">count</span><span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin">Car</span><span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> c3 <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Car</span><span class="token punctuation">.</span><span class="token builtin">count</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><h3 id="类型属性细节"><a href="#类型属性细节" class="headerlink" title="类型属性细节"></a>类型属性细节</h3><ul><li>不同于<code>存储实例属性</code>，你必须给<code>存储类型属性</code>设定初始值</li><li>因为类型没有像实例那样的init初始化器来初始化存储属性</li></ul><ul><li><code>存储类型属性</code>默认就是<code>lazy</code>，会在第一次使用的时候才初始化<br>就算被多个线程同时访问，保证只会初始化一次</li><li><code>存储类型属性</code>可以是let</li></ul><ul><li>枚举类型也可以定义类型属性（存储类型属性、计算类型属性）</li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileManager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">let</span> shared <span class="token operator">=</span> <span class="token function">FileManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileManager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">let</span> shared <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ....</span>        <span class="token comment" spellcheck="true">// ....</span>        <span class="token keyword">return</span> <span class="token function">FileManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 7-闭包</title>
      <link href="/2020/06/02/Swift5-1-7-%E9%97%AD%E5%8C%85/"/>
      <url>/2020/06/02/Swift5-1-7-%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<h3 id="闭包表达式（Closure-Expression）"><a href="#闭包表达式（Closure-Expression）" class="headerlink" title="闭包表达式（Closure Expression）"></a>闭包表达式（Closure Expression）</h3><p>在Swift中，可以通过func定义一个函数，也可以通过闭包表达式定义一个函数</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> v1 <span class="token operator">+</span> v2 <span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token keyword">in</span>    <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token punctuation">{</span>    <span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token keyword">in</span>    <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><p>闭包格式:</p><pre class=" language-swift"><code class="language-swift"><span class="token punctuation">{</span>    <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> 返回值类型 <span class="token keyword">in</span>    函数体代码<span class="token punctuation">}</span></code></pre><p>注意:闭包调用传值,不用写标签. 比如上面的v1, v2</p><h3 id="闭包表达式的简写"><a href="#闭包表达式的简写" class="headerlink" title="闭包表达式的简写"></a>闭包表达式的简写</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">exec</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>闭包调用:</p><pre class=" language-swift"><code class="language-swift"><span class="token function">exec</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token keyword">in</span>    <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>1)闭包可以省略参数类型</p><pre class=" language-swift"><code class="language-swift"><span class="token function">exec</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> <span class="token punctuation">{</span>    v1<span class="token punctuation">,</span> v2 <span class="token keyword">in</span> <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>2)闭包还可以省略return</p><pre class=" language-swift"><code class="language-swift"><span class="token function">exec</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> <span class="token punctuation">{</span>    v1<span class="token punctuation">,</span> v2 <span class="token keyword">in</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>3)闭包还可以省略in<br><code>$0</code>代表最前边的参数, <code>$1</code>代表第二个参数</p><pre class=" language-swift"><code class="language-swift"><span class="token function">exec</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> $<span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>4)闭包还可以直接用加号,代表两个参数相加</p><pre class=" language-swift"><code class="language-swift"><span class="token function">exec</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> <span class="token operator">+</span><span class="token punctuation">)</span></code></pre><h3 id="尾随闭包"><a href="#尾随闭包" class="headerlink" title="尾随闭包"></a>尾随闭包</h3><ul><li>如果将一个很长的闭包表达式作为函数的最后一个实参，使用尾随闭包可以增强函数的可读性.</li><li>尾随闭包是一个被书写在函数调用括号外面（后面）的闭包表达式</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">exec</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">exec</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token number">0</span> <span class="token operator">+</span> $<span class="token number">1</span><span class="token punctuation">}</span></code></pre><p>如果闭包表达式是函数的唯一实参，而且使用了尾随闭包的语法，那就不需要在函数名后边写<code>圆括号</code></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">exec</span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">exec</span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> $<span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> $<span class="token number">1</span> <span class="token punctuation">}</span>exec <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> $<span class="token number">1</span> <span class="token punctuation">}</span></code></pre><h3 id="示例-–-数组的排序"><a href="#示例-–-数组的排序" class="headerlink" title="示例 – 数组的排序"></a>示例 – 数组的排序</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">sort</span><span class="token punctuation">(</span>by areInIncreasingOrder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Element</span><span class="token punctuation">,</span> <span class="token builtin">Element</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">/// 返回true: i1排在i2前面</span><span class="token comment" spellcheck="true">/// 返回false: i1排在i2后面</span><span class="token keyword">func</span> <span class="token function">cmp</span><span class="token punctuation">(</span>i1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> i2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 大的排在前面</span>    <span class="token keyword">return</span> i1 <span class="token operator">></span> i2<span class="token punctuation">}</span><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> cmp<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [68, 45, 18, 11, 6, 5, 2]</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>i1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> i2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token keyword">in</span>    <span class="token keyword">return</span> i1 <span class="token operator">&lt;</span> i2<span class="token punctuation">}</span><span class="token punctuation">)</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">{</span> i1<span class="token punctuation">,</span> i2 <span class="token keyword">in</span> <span class="token keyword">return</span> i1 <span class="token operator">&lt;</span> i2 <span class="token punctuation">}</span><span class="token punctuation">)</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">{</span> i1<span class="token punctuation">,</span> i2 <span class="token keyword">in</span> i1 <span class="token operator">&lt;</span> i2 <span class="token punctuation">}</span><span class="token punctuation">)</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">&lt;</span> $<span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token punctuation">)</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">&lt;</span> $<span class="token number">1</span> <span class="token punctuation">}</span>nums<span class="token punctuation">.</span><span class="token builtin">sort</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">&lt;</span> $<span class="token number">1</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// [2, 5, 6, 11, 18, 45, 68]</span></code></pre><h3 id="忽略参数"><a href="#忽略参数" class="headerlink" title="忽略参数"></a>忽略参数</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">exec</span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exec <span class="token punctuation">{</span> <span class="token number">_</span><span class="token punctuation">,</span><span class="token number">_</span> <span class="token keyword">in</span> <span class="token number">10</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><h3 id="闭包（Closure）"><a href="#闭包（Closure）" class="headerlink" title="闭包（Closure）"></a>闭包（Closure）</h3><p>网上有各种关于闭包的定义，个人觉得比较严谨的定义是:</p><ul><li>一个函数和它所捕获的变量\常量环境组合起来，称为 <code>闭包</code></li><li>一般指定义在函数内部的函数</li><li>一般它捕获的是外层函数的局部变量\常量</li></ul><pre><code>typealias Fn = (Int) -&gt; Intfunc getFn() -&gt; Fn {    var num = 0    func plus(_ i: Int) -&gt; Int {        num += i        return num    }    return plus} // 返回的plus和num形成了闭包</code></pre><pre><code>func getFn() -&gt; Fn {    var num = 0    return {        num += $0        return num    }}</code></pre><pre><code>var fn1 = getFn()var fn2 = getFn()fn1(1) // 1fn2(2) // 2fn1(3) // 4fn2(4) // 6fn1(5) // 9fn2(6) // 12</code></pre><p>思考：如果num是全局变量呢？</p><p><strong>可以把闭包想象成是一个类的实例对象</strong></p><ul><li>内存在堆空间</li><li>捕获的局部变量\常量就是对象的成员（存储属性）</li><li>组成闭包的函数就是类内部定义的方法</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Closure</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">func</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        num <span class="token operator">+</span><span class="token operator">=</span> i        <span class="token keyword">return</span> num    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> cs1 <span class="token operator">=</span> <span class="token function">Closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> cs2 <span class="token operator">=</span> <span class="token function">Closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cs1<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>cs2<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span>cs1<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span>cs2<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span>cs1<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9</span>cs2<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 12</span></code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li>闭包捕获变量num1 num2, 共享堆内存空间</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">typealias</span> <span class="token builtin">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">getFns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Fn</span><span class="token punctuation">,</span> <span class="token builtin">Fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">func</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num1 <span class="token operator">+</span><span class="token operator">=</span> i        num2 <span class="token operator">+</span><span class="token operator">=</span> i <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span>  num2<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num1 <span class="token operator">-</span><span class="token operator">=</span> i        num2 <span class="token operator">-</span><span class="token operator">=</span> i <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>plus<span class="token punctuation">,</span>  minus<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getFns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (5, 10)</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (1, 2)</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (4, 8)</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (2, 4)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Closure</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">func</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num1 <span class="token operator">+</span><span class="token operator">=</span> i        num2 <span class="token operator">+</span><span class="token operator">=</span> i <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num1 <span class="token operator">-</span><span class="token operator">=</span> i        num2 <span class="token operator">-</span><span class="token operator">=</span> i <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> cs <span class="token operator">=</span> <span class="token function">Closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cs<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (5, 10)</span>cs<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (1, 2)</span>cs<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (4, 8)</span>cs<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (2, 4)</span></code></pre><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> functions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span> <span class="token punctuation">{</span>    functions<span class="token punctuation">.</span>append <span class="token punctuation">{</span> i <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> f <span class="token keyword">in</span> functions <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// 3</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Closure</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> clses<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Closure</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span> <span class="token punctuation">{</span>    clses<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">Closure</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> cls <span class="token keyword">in</span> clses <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果返回值是函数类型，那么参数的修饰要保持统一</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">_</span> num<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">plus</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        v <span class="token operator">+</span><span class="token operator">=</span> num    <span class="token punctuation">}</span>    <span class="token keyword">return</span> plus<span class="token punctuation">}</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><h3 id="自动闭包"><a href="#自动闭包" class="headerlink" title="自动闭包"></a>自动闭包</h3><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 如果第1个数大于0，返回第一个数。否则返回第2个数</span><span class="token keyword">func</span> <span class="token function">getFirstPositive</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> v1 <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> v1 <span class="token punctuation">:</span> v2<span class="token punctuation">}</span><span class="token function">getFirstPositive</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span><span class="token function">getFirstPositive</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span><span class="token function">getFirstPositive</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -4</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 改成函数类型的参数，可以让v2延迟加载</span><span class="token keyword">func</span> <span class="token function">getFirstPositive</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> v1 <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> v1 <span class="token punctuation">:</span> <span class="token function">v2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">getFirstPositive</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">20</span> <span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">getFirstPositive</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> @<span class="token function">autoclosure</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> v1 <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> v1 <span class="token punctuation">:</span> <span class="token function">v2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">getFirstPositive</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><ul><li>@autoclosure 会自动将 20 封装成闭包 { 20 }</li><li>@autoclosure 只支持 () -&gt; T 格式的参数</li><li>@autoclosure 并非只支持最后1个参数</li><li>空合并运算符 ?? 使用了 @autoclosure 技术</li><li>有@autoclosure、无@autoclosure，构成了函数重载</li></ul><ul><li>为了避免与期望冲突，使用了<code>@autoclosure</code>的地方最好明确注释清楚：这个值会被推迟执行</li></ul>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 6-结构体和类</title>
      <link href="/2020/06/01/Swift5-1-6-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%B1%BB/"/>
      <url>/2020/06/01/Swift5-1-6-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>在 Swift 标准库中，绝大多数的公开类型都是结构体，而枚举和类只占很小一部分<br>比如<code>Bool</code>、<code>Int</code>、<code>Double</code>、 <code>String</code>、<code>Array</code>、<code>Dictionary</code>等常见类型都是结构体</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Date</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> year<span class="token punctuation">:</span> <span class="token builtin">Int</span>   <span class="token keyword">var</span> month<span class="token punctuation">:</span> <span class="token builtin">Int</span>   <span class="token keyword">var</span> day<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">}</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span>year<span class="token punctuation">:</span> <span class="token number">2019</span><span class="token punctuation">,</span> month<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> day<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">)</span></code></pre><ul><li>所有的结构体都有一个编译器自动生成的初始化器（initializer，初始化方法、构造器、构造方法）</li><li>最后一行调用的，可以传入所有成员值，用以初始化所有成员（存储属性，Stored Property）</li></ul><h3 id="结构体的初始化器"><a href="#结构体的初始化器" class="headerlink" title="结构体的初始化器"></a>结构体的初始化器</h3><p>编译器会根据情况，可能会为结构体生成多个初始化器，宗旨是：保证所有成员都有初始值</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-ef97be040eda04e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始化错误1"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-52582bd369cbb59c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始化错误2"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-654926cdbb959f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始化错误3"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-990890f350764d4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成员都有初始值"></p><p><strong>思考：下面代码能编译通过么？</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>y<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">var</span> p4 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>可选项都有个默认值nil, 因此可以编译通过</p><h3 id="自定义初始化器"><a href="#自定义初始化器" class="headerlink" title="自定义初始化器"></a>自定义初始化器</h3><p>一旦在定义结构体时自定义了初始化器，编译器就不会再帮它自动生成其他初始化器</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-4738ed9450ca19f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="窥探初始化器的本质"><a href="#窥探初始化器的本质" class="headerlink" title="窥探初始化器的本质"></a>窥探初始化器的本质</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>等效于:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">0</span>        y <span class="token operator">=</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="结构体内存结构"><a href="#结构体内存结构" class="headerlink" title="结构体内存结构"></a>结构体内存结构</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> origin<span class="token punctuation">:</span> <span class="token builtin">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span><span class="token builtin">Point</span><span class="token operator">></span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 17</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span><span class="token builtin">Point</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token builtin">stride</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 24</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span><span class="token builtin">Point</span><span class="token operator">></span><span class="token punctuation">.</span>alignment<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 8</span></code></pre><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类的定义和结构体类似，但编译器并没有为类自动生成可以传入成员值的初始化器.</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-672c5fafd3fa84e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译器不会为类自动生成初始化器"></p><p>和结构体比较:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">let</span> p4 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>y<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><ul><li>如果定义类没有给成员初始化值, 编译器不会生成无参的初始化器.</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-723c518d29857c69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="类的初始化器"><a href="#类的初始化器" class="headerlink" title="类的初始化器"></a>类的初始化器</h3><ul><li>如果类的所有成员都在定义的时候指定了初始值，编译器会为类生成无参的初始化器</li><li>成员的初始化是在这个初始化器中完成的</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> y <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上面代码等价于下面:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> y <span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">10</span>        y <span class="token operator">=</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="结构体与类的本质区别"><a href="#结构体与类的本质区别" class="headerlink" title="结构体与类的本质区别"></a>结构体与类的本质区别</h3><ul><li>结构体是值类型（枚举也是值类型），类是引用类型（指针类型）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Size</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> width <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> height <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> size <span class="token operator">=</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-b0e61771a7fe16ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><ul><li>值类型赋值给<code>var</code>、<code>let</code>或者给函数传参，是直接将所有内容拷贝一份</li><li>类似于对文件进行copy、paste操作，产生了全新的文件副本。属于<code>深拷贝</code>（deep copy）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">}</span></code></pre><pre><code>p2.x = 11p2.y = 22</code></pre><p>请问p1.x和p1.y是多少？ 10 20</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-461ba9676e7efbf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="值类型的赋值操作"><a href="#值类型的赋值操作" class="headerlink" title="值类型的赋值操作"></a>值类型的赋值操作</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> s1s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"_Rose"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Jack</span><span class="token function">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Jack_Rose</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">var</span> a2 <span class="token operator">=</span> a1a2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token function">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[2,2,3]</span><span class="token function">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"max"</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"min"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">var</span> d2 <span class="token operator">=</span> d1d1<span class="token punctuation">[</span><span class="token string">"other"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span>d2<span class="token punctuation">[</span><span class="token string">"max"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["other": 7, "max": 10, "min": 2]</span><span class="token function">print</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["max": 12, "min": 2]</span></code></pre><ul><li>在Swift标准库中，为了提升性能，<code>String</code>、<code>Array</code>、<code>Dictionary</code>、<code>Set</code>采取了Copy On Write的技术</li><li>比如仅当有“写”操作时，才会真正执行拷贝操作</li><li>对于标准库值类型的赋值操作，Swift 能确保最佳性能，所有没必要为了保证最佳性能来避免赋值</li><li>建议：不需要修改的，尽量定义成let</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-30b7eba403408cc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ul><li>引用赋值给<code>var</code>、<code>let</code>或者给函数传参，是将内存地址拷贝一份</li><li>类似于制作一个文件的替身（快捷方式、链接），指向的是同一个文件。属于<code>浅拷贝</code>（shallow copy）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Size</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> width<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> height<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width        <span class="token keyword">self</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token function">Size</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">}</span>s2<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">11</span>s2<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">22</span></code></pre><p>请问s1.width和s1.height是多少？</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-1e9d5bacc2c0af15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="对象的堆空间申请过程"><a href="#对象的堆空间申请过程" class="headerlink" title="对象的堆空间申请过程"></a>对象的堆空间申请过程</h3><p>在Swift中，创建类的实例对象，要向堆空间申请内存，大概流程如下:</p><pre><code>Class.allocating_init()libswiftCore.dylib：_swift_allocObject_libswiftCore.dylib：swift_slowAlloclibsystem_malloc.dylib：malloc</code></pre><ul><li>在Mac、iOS中的<code>malloc</code>函数分配的内存大小总是16的倍数</li><li>通过class_getInstanceSize可以得知：类的对象至少需要占用多少内存</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Point</span>    <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">11</span>    <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">class_getInstanceSize</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 40</span><span class="token function">class_getInstanceSize</span><span class="token punctuation">(</span><span class="token builtin">Point</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 40</span></code></pre><h3 id="引用类型的赋值操作"><a href="#引用类型的赋值操作" class="headerlink" title="引用类型的赋值操作"></a>引用类型的赋值操作</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Size</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> width<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> height<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width        <span class="token keyword">self</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token function">Size</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> <span class="token function">Size</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-c08df63276f99dec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="值类型、引用类型的let"><a href="#值类型、引用类型的let" class="headerlink" title="值类型、引用类型的let"></a>值类型、引用类型的let</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Size</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> width<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> height<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width        <span class="token keyword">self</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-9e120e9d0f7e4d71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>理解:</p><ul><li>let修饰的p, p内存16个字节不能修改</li><li>let修饰的s, s内存8个字节不能修改,指向内存地址不变. <code>s.width</code>和<code>s.height</code>修改的是堆里边内存</li></ul><p><strong>总结:</strong><br>值类型和引用类型为常量时, 值类型和引用类型内存地址不能修改,不能指向其他内存.但引用类型可以修改其堆内存存储的成员变量值.</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-95ea502e7ed82eb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>理解:<br>let声明值类型的字符串str, 说明常量str的内存是不能修改的,所以后边不能拼接字符串.<br>let声明值数组arr, 说明常量arr的内存是不能修改的,所以后边不能拼接,也不能修改某个元素的值.</p><h3 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Poker</span> <span class="token punctuation">{</span>    <span class="token keyword">enum</span> <span class="token builtin">Suit</span> <span class="token punctuation">:</span> <span class="token builtin">Character</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> spades <span class="token operator">=</span> <span class="token string">"♠"</span><span class="token punctuation">,</span> hearts <span class="token operator">=</span> <span class="token string">"♥"</span><span class="token punctuation">,</span> diamonds <span class="token operator">=</span> <span class="token string">"♦"</span><span class="token punctuation">,</span> clubs <span class="token operator">=</span> <span class="token string">"♣"</span><span class="token punctuation">}</span>    <span class="token keyword">enum</span> <span class="token builtin">Rank</span> <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> two <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> three<span class="token punctuation">,</span> four<span class="token punctuation">,</span> five<span class="token punctuation">,</span> six<span class="token punctuation">,</span> seven<span class="token punctuation">,</span> eight<span class="token punctuation">,</span> nine<span class="token punctuation">,</span> ten        <span class="token keyword">case</span> jack<span class="token punctuation">,</span> queen<span class="token punctuation">,</span> king<span class="token punctuation">,</span> ace    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Poker</span><span class="token punctuation">.</span><span class="token builtin">Suit</span><span class="token punctuation">.</span>hearts<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span><span class="token keyword">var</span> suit <span class="token operator">=</span> <span class="token builtin">Poker</span><span class="token punctuation">.</span><span class="token builtin">Suit</span><span class="token punctuation">.</span>spadessuit <span class="token operator">=</span> <span class="token punctuation">.</span>diamonds<span class="token keyword">var</span> rank <span class="token operator">=</span> <span class="token builtin">Poker</span><span class="token punctuation">.</span><span class="token builtin">Rank</span><span class="token punctuation">.</span>fiverank <span class="token operator">=</span> <span class="token punctuation">.</span>king</code></pre><h3 id="枚举、结构体、类都可以定义方法"><a href="#枚举、结构体、类都可以定义方法" class="headerlink" title="枚举、结构体、类都可以定义方法"></a>枚举、结构体、类都可以定义方法</h3><p>一般把定义在枚举、结构体、类内部的函数，叫做方法</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Size</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> width <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> height <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">func</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"width=<span class="token interpolation"><span class="token delimiter variable">\(</span>width<span class="token delimiter variable">)</span></span>, height=<span class="token interpolation"><span class="token delimiter variable">\(</span>height<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// width=10, height=10</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">func</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x=<span class="token interpolation"><span class="token delimiter variable">\(</span>x<span class="token delimiter variable">)</span></span>, y=<span class="token interpolation"><span class="token delimiter variable">\(</span>y<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// x=10, y=10</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">PokerFace</span> <span class="token punctuation">:</span> <span class="token builtin">Character</span> <span class="token punctuation">{</span><span class="token keyword">case</span> spades <span class="token operator">=</span> <span class="token string">"♠"</span><span class="token punctuation">,</span> hearts <span class="token operator">=</span> <span class="token string">"♥"</span><span class="token punctuation">,</span> diamonds <span class="token operator">=</span> <span class="token string">"♦"</span><span class="token punctuation">,</span> clubs <span class="token operator">=</span> <span class="token string">"♣"</span>    <span class="token keyword">func</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"face is <span class="token interpolation"><span class="token delimiter variable">\(</span>rawValue<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> pf <span class="token operator">=</span> <span class="token builtin">PokerFace</span><span class="token punctuation">.</span>heartspf<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// face is ♥</span></code></pre><p>方法占用对象的内存么？</p><ul><li>不占用</li><li>方法的本质就是函数</li><li>方法、函数都存放在代码段</li></ul><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p>思考以下结构体、类对象的内存结构是怎样的？</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> b1<span class="token punctuation">:</span> <span class="token builtin">Bool</span>    <span class="token keyword">var</span> b2<span class="token punctuation">:</span> <span class="token builtin">Bool</span>    <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> b1<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> b2<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">Size</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> width<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> b1<span class="token punctuation">:</span> <span class="token builtin">Bool</span>    <span class="token keyword">var</span> b2<span class="token punctuation">:</span> <span class="token builtin">Bool</span>    <span class="token keyword">var</span> height<span class="token punctuation">:</span> <span class="token builtin">Int</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> b1<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">,</span> b2<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width        <span class="token keyword">self</span><span class="token punctuation">.</span>b1 <span class="token operator">=</span> b1        <span class="token keyword">self</span><span class="token punctuation">.</span>b2 <span class="token operator">=</span> b2        <span class="token keyword">self</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">Size</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> b1<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> b2<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 5-可选项</title>
      <link href="/2020/06/01/Swift5-1-5-%E5%8F%AF%E9%80%89%E9%A1%B9/"/>
      <url>/2020/06/01/Swift5-1-5-%E5%8F%AF%E9%80%89%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h3 id="可选项（Optional）"><a href="#可选项（Optional）" class="headerlink" title="可选项（Optional）"></a>可选项（Optional）</h3><ul><li>可选项，一般也叫<code>可选类型</code>，它允许将值设置为<code>nil</code></li><li>在类型名称后面加个<code>问号 ?</code> 来定义一个可选项</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">"Jack"</span>name <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token comment" spellcheck="true">//默认就是nil</span>age <span class="token operator">=</span> <span class="token number">10</span>age <span class="token operator">=</span> <span class="token constant">nil</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">]</span><span class="token keyword">func</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">_</span> index<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> array<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">nil</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Optional(15)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// nil</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// nil</span></code></pre><h3 id="强制解包（Forced-Unwrapping）"><a href="#强制解包（Forced-Unwrapping）" class="headerlink" title="强制解包（Forced Unwrapping）"></a>强制解包（Forced Unwrapping）</h3><p>可选项本质: 可选项是对其他类型的一层包装，可以将它理解为一个盒子</p><ul><li>如果为<code>nil</code>，那么它是个空盒子</li><li>如果不为<code>nil</code>，那么盒子里装的是：被包装类型的数据</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token comment" spellcheck="true">// 默认就是nil</span>age <span class="token operator">=</span> <span class="token number">10</span>age <span class="token operator">=</span> <span class="token constant">nil</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-8460313cf9f79059.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>如果要从可选项中取出被包装的数据（将盒子里装的东西取出来），需要使用<code>感叹号 !</code> 进行强制解包</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">let</span> ageInt<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> age<span class="token operator">!</span>ageInt <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span></code></pre><ul><li>如果对值为<code>nil</code>的可选项（空盒子）进行强制解包，将会产生运行时错误</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span>  age<span class="token operator">!</span><span class="token comment" spellcheck="true">//Fatal error: Unexpectedly found nil while unwrapping an Optional value</span></code></pre><h3 id="判断可选项是否包含值"><a href="#判断可选项是否包含值" class="headerlink" title="判断可选项是否包含值"></a>判断可选项是否包含值</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> number <span class="token operator">!=</span> <span class="token constant">nil</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"字符串转换整数成功：<span class="token interpolation"><span class="token delimiter variable">\(</span>number<span class="token operator">!</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"字符串转换整数失败"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 字符串转换整数成功：123</span></code></pre><h3 id="可选项绑定（Optional-Binding）"><a href="#可选项绑定（Optional-Binding）" class="headerlink" title="可选项绑定（Optional Binding）"></a>可选项绑定（Optional Binding）</h3><ul><li>可以使用<code>可选项绑定</code>来判断可选项是否包含值</li><li>如果包含就自动解包，把值赋给一个临时的常量(<code>let</code>)或者变量(<code>var</code>)，并返回<code>true</code>，否则返回<code>false</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">if</span> <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"字符串转换整数成功：<span class="token interpolation"><span class="token delimiter variable">\(</span>number<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// number是强制解包之后的Int值</span>    <span class="token comment" spellcheck="true">// number作用域仅限于这个大括号</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"字符串转换整数失败"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 字符串转换整数成功：123</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Season</span> <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> spring <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> summer<span class="token punctuation">,</span> autumn<span class="token punctuation">,</span> winter<span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token keyword">let</span> season <span class="token operator">=</span> <span class="token function">Season</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> season <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>spring<span class="token punctuation">:</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"the season is spring"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"the season is other"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"no such season"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// no such season</span></code></pre><h3 id="等价写法"><a href="#等价写法" class="headerlink" title="等价写法"></a>等价写法</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token builtin">first</span> <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"42"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token builtin">first</span> <span class="token operator">&lt;</span> second <span class="token operator">&amp;&amp;</span> second <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token builtin">first</span><span class="token delimiter variable">)</span></span> &lt; <span class="token interpolation"><span class="token delimiter variable">\(</span>second<span class="token delimiter variable">)</span></span> &lt; 100"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 4 &lt; 42 &lt; 100</span></code></pre><p>注意: 同一个if中, 可选项绑定要和其他语句以逗号隔开</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token builtin">first</span> <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"42"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token builtin">first</span> <span class="token operator">&lt;</span> second <span class="token operator">&amp;&amp;</span> second <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>second<span class="token delimiter variable">)</span></span> &lt; <span class="token interpolation"><span class="token delimiter variable">\(</span>second<span class="token delimiter variable">)</span></span> &lt; 100"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 4 &lt; 42 &lt; 100</span></code></pre><h3 id="while循环中使用可选项绑定"><a href="#while循环中使用可选项绑定" class="headerlink" title="while循环中使用可选项绑定"></a>while循环中使用可选项绑定</h3><ul><li>遍历数组，将遇到的正数都加起来，如果遇到负数或者非数字，停止遍历</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"-20"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">]</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>    sum <span class="token operator">+</span><span class="token operator">=</span> num    index <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span></code></pre><h3 id="空合并运算符-（Nil-Coalescing-Operator）"><a href="#空合并运算符-（Nil-Coalescing-Operator）" class="headerlink" title="空合并运算符 ??（Nil-Coalescing Operator）"></a>空合并运算符 ??（Nil-Coalescing Operator）</h3><pre><code>public func ?? &lt;T&gt;(optional: T?, defaultValue: @autoclosure () throws -&gt; T?) rethrows -&gt; T?public func ?? &lt;T&gt;(optional: T?, defaultValue: @autoclosure () throws -&gt; T) rethrows -&gt; T</code></pre><p><strong>a ?? b </strong></p><ul><li>a 是可选项</li><li>b 是可选项 或者 不是可选项</li><li>b 跟 a 的存储类型必须相同</li><li>如果 a 不为nil，就返回 a</li><li>如果 a 为nil，就返回 b</li><li>如果 b 不是可选项，返回 a 时会自动解包</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> b <span class="token comment" spellcheck="true">//c是Int? , Optional(1)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> b <span class="token comment" spellcheck="true">//c是Int? , Optional(2)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> b <span class="token comment" spellcheck="true">//c是Int? , nil</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> b  <span class="token comment" spellcheck="true">//c是Int , 1</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> b  <span class="token comment" spellcheck="true">//c是Int , 2</span></code></pre><p>上段代码等价于下面代码:</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">//如果不使用??运算符</span><span class="token keyword">let</span> c <span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token keyword">if</span> <span class="token keyword">let</span> tmp <span class="token operator">=</span> a <span class="token punctuation">{</span>    c <span class="token operator">=</span> tmp<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>    c <span class="token operator">=</span> b<span class="token punctuation">}</span></code></pre><h3 id="多个-一起使用"><a href="#多个-一起使用" class="headerlink" title="多个 ?? 一起使用"></a>多个 ?? 一起使用</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> b <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">3</span>  <span class="token comment" spellcheck="true">//c是Int , 1</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> b <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">3</span>  <span class="token comment" spellcheck="true">//c是Int , 2</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> b <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">3</span>  <span class="token comment" spellcheck="true">//c是Int , 3</span></code></pre><h3 id="跟if-let配合使用"><a href="#跟if-let配合使用" class="headerlink" title="??跟if let配合使用"></a>??跟if let配合使用</h3><ul><li>下面类似于if a != nil || b != nil</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">if</span> <span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> b <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>下面类似于if a != nil &amp;&amp; b != nil</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">if</span> <span class="token keyword">let</span> c <span class="token operator">=</span> a<span class="token punctuation">,</span> <span class="token keyword">let</span> d <span class="token operator">=</span> b <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="if语句实现登陆"><a href="#if语句实现登陆" class="headerlink" title="if语句实现登陆"></a>if语句实现登陆</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token number">_</span> info<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">String</span> <span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> username<span class="token punctuation">:</span> <span class="token builtin">String</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> tmp <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        username <span class="token operator">=</span> tmp    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入用户名"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> password<span class="token punctuation">:</span> <span class="token builtin">String</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> tmp <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        password <span class="token operator">=</span> tmp    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// if username ....</span>    <span class="token comment" spellcheck="true">// if password ....</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"用户名：<span class="token interpolation"><span class="token delimiter variable">\(</span>username<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">,</span> <span class="token string">"密码：<span class="token interpolation"><span class="token delimiter variable">\(</span>password<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">,</span> <span class="token string">"登陆ing"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"username"</span> <span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"password"</span> <span class="token punctuation">:</span> <span class="token string">"123456"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用户名：jack 密码：123456 登陆ing</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"password"</span> <span class="token punctuation">:</span> <span class="token string">"123456"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 请输入密码</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"username"</span> <span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 请输入用户名</span></code></pre><h3 id="guard语句"><a href="#guard语句" class="headerlink" title="guard语句"></a>guard语句</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">guard</span> 条 件 <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something....</span>    退出当前作用域    <span class="token comment" spellcheck="true">// return、break、continue、throw error</span><span class="token punctuation">}</span></code></pre><p><strong>guard语句用法:</strong><br>1)当<code>guard</code>语句的条件为<code>false</code>时，就会执行大括号里面的代码<br>2)当<code>guard</code>语句的条件为<code>true</code>时，就会跳过<code>guard</code>语句<br>3)<code>guard</code>语句特别适合用来“提前退出”</p><ul><li>当使用<code>guard</code>语句进行可选项绑定时，绑定的常量(<code>let</code>)、变量(<code>var</code>)也能在外层作用域中使用</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token number">_</span> info<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">String</span> <span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">guard</span> <span class="token keyword">let</span> username <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入用户名"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">guard</span> <span class="token keyword">let</span> password <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// if username ....</span>    <span class="token comment" spellcheck="true">// if password ....</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"用户名：<span class="token interpolation"><span class="token delimiter variable">\(</span>username<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">,</span> <span class="token string">"密码：<span class="token interpolation"><span class="token delimiter variable">\(</span>password<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">,</span> <span class="token string">"登陆ing"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="隐式解包（Implicitly-Unwrapped-Optional）"><a href="#隐式解包（Implicitly-Unwrapped-Optional）" class="headerlink" title="隐式解包（Implicitly Unwrapped Optional）"></a>隐式解包（Implicitly Unwrapped Optional）</h3><ul><li>在某些情况下，可选项一旦被设定值之后，就会一直拥有值</li><li>在这种情况下，可以去掉检查，也不必每次访问的时候都进行解包，因为它能确定每次访问的时候都有值</li><li>可以在类型后面加个感叹号 ! 定义一个隐式解包的可选项</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> num1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">!</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">let</span> num2<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> num1<span class="token keyword">if</span> num1 <span class="token operator">!=</span> <span class="token constant">nil</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 16</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token keyword">let</span> num3 <span class="token operator">=</span> num1 <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>注意:如果可选项空值, 隐式解包会报错!</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> num1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">!</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token comment" spellcheck="true">// Fatal error: Unexpectedly found nil while implicitly unwrapping an Optional value</span><span class="token keyword">let</span> num2<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> num1</code></pre><p>隐式绑定场景: 希望给当前变量传入具体值,开发中尽量不要用!</p><h3 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h3><p>可选项在字符串插值或者直接打印时，编译器会发出警告</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">10</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"My age is <span class="token interpolation"><span class="token delimiter variable">\(</span>age<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// My age is Optional(10)</span></code></pre><p>至少有3种方法消除警告</p><pre class=" language-swift"><code class="language-swift"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"My age is <span class="token interpolation"><span class="token delimiter variable">\(</span>age<span class="token operator">!</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// My age is 10</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"My age is <span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token function">String</span><span class="token punctuation">(</span>describing<span class="token punctuation">:</span> age<span class="token punctuation">)</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// My age is Optional(10)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"My age is <span class="token interpolation"><span class="token delimiter variable">\(</span>age <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">0</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// My age is 10</span></code></pre><h3 id="多重可选项"><a href="#多重可选项" class="headerlink" title="多重可选项"></a>多重可选项</h3><h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1:"></a>实例1:</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> num1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">10</span>   <span class="token comment" spellcheck="true">//包装Int类型的可选类型</span><span class="token keyword">var</span> num2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span><span class="token operator">?</span> <span class="token operator">=</span> num1  <span class="token comment" spellcheck="true">// 包装一个可选类型的可选类型</span><span class="token keyword">var</span> num3<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token function">print</span><span class="token punctuation">(</span>num2 <span class="token operator">==</span> num3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><ul><li>可以使用lldb指令 <code>frame variable –R</code> 或者 <code>fr v –R</code> 查看区别</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-0f5def0e3c64d185.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2:"></a>实例2:</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> num1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token keyword">var</span> num2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span><span class="token operator">?</span> <span class="token operator">=</span> num1<span class="token keyword">var</span> num3<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token function">print</span><span class="token punctuation">(</span>num2 <span class="token operator">==</span> num3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">//num2 和num3类型相同, 值不同</span><span class="token function">print</span><span class="token punctuation">(</span>num1 <span class="token operator">==</span> num3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false  </span><span class="token comment" spellcheck="true">// num1和num3类型不同</span><span class="token punctuation">(</span>num2 <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true">// 2</span><span class="token punctuation">(</span>num3 <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true">// 1</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-00d3f55a7beadf59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 4-枚举</title>
      <link href="/2020/05/31/Swift5-1-4-%E6%9E%9A%E4%B8%BE/"/>
      <url>/2020/05/31/Swift5-1-4-%E6%9E%9A%E4%B8%BE/</url>
      <content type="html"><![CDATA[<h3 id="枚举的基本用法"><a href="#枚举的基本用法" class="headerlink" title="枚举的基本用法"></a>枚举的基本用法</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Direction</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> north    <span class="token keyword">case</span> south    <span class="token keyword">case</span> east    <span class="token keyword">case</span> west<span class="token punctuation">}</span></code></pre><ul><li>等价于上边代码</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Direction</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> north<span class="token punctuation">,</span> south<span class="token punctuation">,</span> east<span class="token punctuation">,</span> west<span class="token punctuation">}</span><span class="token keyword">var</span> dir <span class="token operator">=</span> <span class="token builtin">Direction</span><span class="token punctuation">.</span>westdir <span class="token operator">=</span> <span class="token builtin">Direction</span><span class="token punctuation">.</span>eastdir <span class="token operator">=</span> <span class="token punctuation">.</span>north<span class="token function">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// north</span><span class="token keyword">switch</span> dir <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token punctuation">.</span>north<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"north"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">.</span>south<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"south"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">.</span>east<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"east"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">.</span>west<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"west"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="关联值（Associated-Values）"><a href="#关联值（Associated-Values）" class="headerlink" title="关联值（Associated Values）"></a>关联值（Associated Values）</h3><ul><li>有时将<code>枚举的成员值</code>跟<code>其他类型的值</code>关联存储在一起，会非常有用</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Score</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">points</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">grade</span><span class="token punctuation">(</span><span class="token builtin">Character</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token builtin">Score</span><span class="token punctuation">.</span><span class="token function">points</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span>score <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">grade</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token keyword">switch</span> score <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">points</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"points"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">grade</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"grade"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// grade A</span></code></pre><ul><li>必要时let也可以改为var</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Date</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">digit</span><span class="token punctuation">(</span>year<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> month<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> day<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token builtin">Date</span><span class="token punctuation">.</span><span class="token function">digit</span><span class="token punctuation">(</span>year<span class="token punctuation">:</span> <span class="token number">2011</span><span class="token punctuation">,</span> month<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> day<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>date <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"2011-09-10"</span><span class="token punctuation">)</span><span class="token keyword">switch</span> date <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">digit</span><span class="token punctuation">(</span><span class="token keyword">let</span> year<span class="token punctuation">,</span> <span class="token keyword">let</span> month<span class="token punctuation">,</span> <span class="token keyword">let</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2011-09-10</span></code></pre><h3 id="关联值举例"><a href="#关联值举例" class="headerlink" title="关联值举例"></a>关联值举例</h3><p><img src="https://upload-images.jianshu.io/upload_images/126164-b61b3d2fcb57ac01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-e5fbdc26ca881d0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Password</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">gesture</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> pwd <span class="token operator">=</span> <span class="token builtin">Password</span><span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>pwd <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span><span class="token string">"12369"</span><span class="token punctuation">)</span><span class="token keyword">switch</span> pwd <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">,</span> n4<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"number is "</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">,</span> n4<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"gesture is"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// gesture is 12369</span></code></pre><h3 id="原始值（Raw-Values）"><a href="#原始值（Raw-Values）" class="headerlink" title="原始值（Raw Values）"></a>原始值（Raw Values）</h3><ul><li>枚举成员可以使用<code>相同类型</code>的默认值预先对应，这个默认值叫做：原始值</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">PokerSuit</span> <span class="token punctuation">:</span> <span class="token builtin">Character</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> spade <span class="token operator">=</span> <span class="token string">"♠"</span>    <span class="token keyword">case</span> heart <span class="token operator">=</span> <span class="token string">"♥"</span>    <span class="token keyword">case</span> diamond <span class="token operator">=</span> <span class="token string">"♦"</span>    <span class="token keyword">case</span> club <span class="token operator">=</span> <span class="token string">"♣"</span><span class="token punctuation">}</span><span class="token keyword">var</span> suit <span class="token operator">=</span> <span class="token builtin">PokerSuit</span><span class="token punctuation">.</span>spade  <span class="token function">print</span><span class="token punctuation">(</span>suit<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// spade</span><span class="token function">print</span><span class="token punctuation">(</span>suit<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ♠</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">PokerSuit</span><span class="token punctuation">.</span>club<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ♣</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Grade</span> <span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> perfect <span class="token operator">=</span> <span class="token string">"A"</span>    <span class="token keyword">case</span> great <span class="token operator">=</span> <span class="token string">"B"</span>    <span class="token keyword">case</span> good <span class="token operator">=</span> <span class="token string">"C"</span>    <span class="token keyword">case</span> bad <span class="token operator">=</span> <span class="token string">"D"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Grade</span><span class="token punctuation">.</span>perfect<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// A</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Grade</span><span class="token punctuation">.</span>great<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// B</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Grade</span><span class="token punctuation">.</span>good<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// C</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Grade</span><span class="token punctuation">.</span>bad<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// D</span></code></pre><ul><li>注意：原始值不占用枚举变量的内存</li></ul><p><strong>关联值与原始值区别</strong>:<br>如果枚举变量是关联值,可以传入具体值进行关联, 传入的值会放在枚举变量内存里面 . 如果枚举类型后有冒号这种叫原始值, 原始值每个成员一开始就绑定死关联好的, 原始值不占用枚举变量的内存.</p><h3 id="隐式原始值（Implicitly-Assigned-Raw-Values）"><a href="#隐式原始值（Implicitly-Assigned-Raw-Values）" class="headerlink" title="隐式原始值（Implicitly Assigned Raw Values）"></a>隐式原始值（Implicitly Assigned Raw Values）</h3><ul><li>如果枚举的原始值类型是<code>Int</code>、<code>String</code>，Swift会自动分配原始值</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Direction</span> <span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> north <span class="token operator">=</span> <span class="token string">"north"</span>    <span class="token keyword">case</span> south <span class="token operator">=</span> <span class="token string">"south"</span>    <span class="token keyword">case</span> east <span class="token operator">=</span> <span class="token string">"east"</span>    <span class="token keyword">case</span> west <span class="token operator">=</span> <span class="token string">"west"</span><span class="token punctuation">}</span></code></pre><ul><li>等价于</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Direction</span> <span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> north<span class="token punctuation">,</span> south<span class="token punctuation">,</span> east<span class="token punctuation">,</span> west<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Direction</span><span class="token punctuation">.</span>north<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// north</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Direction</span><span class="token punctuation">.</span>north<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// north</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Season</span> <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> spring<span class="token punctuation">,</span> summer<span class="token punctuation">,</span> autumn<span class="token punctuation">,</span> winter<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Season</span><span class="token punctuation">.</span>spring<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//0</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Season</span><span class="token punctuation">.</span>summer<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Season</span><span class="token punctuation">.</span>autumn<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Season</span><span class="token punctuation">.</span>winter<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Season</span> <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> spring <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> summer<span class="token punctuation">,</span> autumn <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> winter<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Season</span><span class="token punctuation">.</span>spring<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Season</span><span class="token punctuation">.</span>summer<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Season</span><span class="token punctuation">.</span>autumn<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Season</span><span class="token punctuation">.</span>winter<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h3 id="递归枚举（Recursive-Enumeration）"><a href="#递归枚举（Recursive-Enumeration）" class="headerlink" title="递归枚举（Recursive Enumeration）"></a>递归枚举（Recursive Enumeration）</h3><p>递归枚举前需要加关键字<code>indirect</code></p><pre class=" language-swift"><code class="language-swift">indirect <span class="token keyword">enum</span> <span class="token builtin">ArithExpr</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token builtin">ArithExpr</span><span class="token punctuation">,</span> <span class="token builtin">ArithExpr</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">difference</span><span class="token punctuation">(</span><span class="token builtin">ArithExpr</span><span class="token punctuation">,</span> <span class="token builtin">ArithExpr</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">ArithExpr</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    indirect <span class="token keyword">case</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token builtin">ArithExpr</span><span class="token punctuation">,</span> <span class="token builtin">ArithExpr</span><span class="token punctuation">)</span>    indirect <span class="token keyword">case</span> <span class="token function">difference</span><span class="token punctuation">(</span><span class="token builtin">ArithExpr</span><span class="token punctuation">,</span> <span class="token builtin">ArithExpr</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> five <span class="token operator">=</span> <span class="token builtin">ArithExpr</span><span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">let</span> four <span class="token operator">=</span> <span class="token builtin">ArithExpr</span><span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">let</span> two <span class="token operator">=</span> <span class="token builtin">ArithExpr</span><span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token builtin">ArithExpr</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>five<span class="token punctuation">,</span> four<span class="token punctuation">)</span><span class="token keyword">let</span> difference <span class="token operator">=</span> <span class="token builtin">ArithExpr</span><span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> two<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">_</span> expr<span class="token punctuation">:</span> <span class="token builtin">ArithExpr</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> expr <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> value    <span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">right</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">right</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">calculate</span><span class="token punctuation">(</span>difference<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//7</span></code></pre><h3 id="MemoryLayout"><a href="#MemoryLayout" class="headerlink" title="MemoryLayout"></a>MemoryLayout</h3><p>可以使用<code>MemoryLayout</code>获取数据类型占用的内存大小</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Password</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> other<span class="token punctuation">}</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span><span class="token builtin">Password</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token builtin">stride</span> <span class="token comment" spellcheck="true">// 40, 分配占用的空间大小</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span><span class="token builtin">Password</span><span class="token operator">></span><span class="token punctuation">.</span>size <span class="token comment" spellcheck="true">// 33, 实际用到的空间大小</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span><span class="token builtin">Password</span><span class="token operator">></span><span class="token punctuation">.</span>alignment <span class="token comment" spellcheck="true">// 8, 对齐参数</span><span class="token keyword">var</span> pwd <span class="token operator">=</span> <span class="token builtin">Password</span><span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>pwd <span class="token operator">=</span> <span class="token punctuation">.</span>other<span class="token builtin">MemoryLayout</span><span class="token punctuation">.</span><span class="token function">stride</span><span class="token punctuation">(</span>ofValue<span class="token punctuation">:</span> pwd<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 40</span><span class="token builtin">MemoryLayout</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>ofValue<span class="token punctuation">:</span> pwd<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 33</span><span class="token builtin">MemoryLayout</span><span class="token punctuation">.</span><span class="token function">alignment</span><span class="token punctuation">(</span>ofValue<span class="token punctuation">:</span> pwd<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 8</span></code></pre><h3 id="思考下面枚举变量的内存布局"><a href="#思考下面枚举变量的内存布局" class="headerlink" title="思考下面枚举变量的内存布局?"></a>思考下面枚举变量的内存布局?</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">TestEnum</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> test1<span class="token punctuation">,</span> test2<span class="token punctuation">,</span> test3<span class="token punctuation">}</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token builtin">TestEnum</span><span class="token punctuation">.</span>test1t <span class="token operator">=</span> <span class="token punctuation">.</span>test2t <span class="token operator">=</span> <span class="token punctuation">.</span>test3</code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">TestEnum</span> <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> test1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> test2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> test3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token builtin">TestEnum</span><span class="token punctuation">.</span>test1t <span class="token operator">=</span> <span class="token punctuation">.</span>test2t <span class="token operator">=</span> <span class="token punctuation">.</span>test3</code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">TestEnum</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> test<span class="token punctuation">}</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token builtin">TestEnum</span><span class="token punctuation">.</span>test</code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">TestEnum</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token builtin">TestEnum</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">TestEnum</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token builtin">Bool</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> test5<span class="token punctuation">}</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token builtin">TestEnum</span><span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">test3</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">test4</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token punctuation">.</span>test5</code></pre><ul><li>它们的switch语句底层又是如何实现的？</li></ul><h3 id="进一步观察下面枚举的内存布局"><a href="#进一步观察下面枚举的内存布局" class="headerlink" title="进一步观察下面枚举的内存布局"></a>进一步观察下面枚举的内存布局</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">TestEnum</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> test0    <span class="token keyword">case</span> test1    <span class="token keyword">case</span> test2    <span class="token keyword">case</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Bool</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">TestEnum</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> test0    <span class="token keyword">case</span> test1    <span class="token keyword">case</span> test2    <span class="token keyword">case</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Bool</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">TestEnum</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> test0    <span class="token keyword">case</span> test1    <span class="token keyword">case</span> test2    <span class="token keyword">case</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Bool</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 3-函数</title>
      <link href="/2020/05/31/Swift5-1-3-%E5%87%BD%E6%95%B0/"/>
      <url>/2020/05/31/Swift5-1-3-%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><ul><li>形参默认是let，也只能是let</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">3.14</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span>    <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><ul><li>无返回值</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>返回值（）实质是空元组</li></ul><h3 id="隐式返回（Implicit-Return）"><a href="#隐式返回（Implicit-Return）" class="headerlink" title="隐式返回（Implicit Return）"></a>隐式返回（Implicit Return）</h3><ul><li>如果整个函数体是一个单一表达式，那么函数会隐式返回这个表达式，可以省略<code>return</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span></code></pre><h3 id="返回元组：实现多返回值"><a href="#返回元组：实现多返回值" class="headerlink" title="返回元组：实现多返回值"></a>返回元组：实现多返回值</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">calculate</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>sum<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> difference<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> average<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> v1 <span class="token operator">+</span> v2    <span class="token keyword">return</span> <span class="token punctuation">(</span>sum<span class="token punctuation">,</span> v1 <span class="token operator">-</span> v2<span class="token punctuation">,</span> sum <span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>sum <span class="token comment" spellcheck="true">// 30</span>result<span class="token punctuation">.</span>difference <span class="token comment" spellcheck="true">// 10</span>result<span class="token punctuation">.</span>average <span class="token comment" spellcheck="true">// 15</span></code></pre><h3 id="函数的文档注释"><a href="#函数的文档注释" class="headerlink" title="函数的文档注释"></a>函数的文档注释</h3><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//函数的文档注释</span><span class="token comment" spellcheck="true">/// 求和【概述】</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// 将2个整数相加【更详细的描述】</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// - Parameter v1: 第1个整数</span><span class="token comment" spellcheck="true">/// - Parameter v2: 第2个整数</span><span class="token comment" spellcheck="true">/// - Returns: 2个整数的和</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// - Note:传入2个整数即可【批注】</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span></code></pre><p>参考: <a href="https://swift.org/documentation/api-design-guidelines/" target="_blank" rel="noopener">https://swift.org/documentation/api-design-guidelines/</a></p><h3 id="参数标签（Argument-Label）"><a href="#参数标签（Argument-Label）" class="headerlink" title="参数标签（Argument Label）"></a>参数标签（Argument Label）</h3><ul><li>可以修改参数标签</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//time 用在函数体中， at用在函数调用</span><span class="token keyword">func</span> <span class="token function">goToWork</span><span class="token punctuation">(</span>at time<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"this time is <span class="token interpolation"><span class="token delimiter variable">\(</span>time<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">goToWork</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token string">"08:00"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// this time is 08:00</span></code></pre><ul><li>可以使用下划线 _ 省略参数标签</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><h3 id="默认参数值（Default-Parameter-Value）"><a href="#默认参数值（Default-Parameter-Value）" class="headerlink" title="默认参数值（Default Parameter Value）"></a>默认参数值（Default Parameter Value）</h3><ul><li>参数可以有默认值</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">check</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"nobody"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> job<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"name=<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span>, age=<span class="token interpolation"><span class="token delimiter variable">\(</span>age<span class="token delimiter variable">)</span></span>, job=<span class="token interpolation"><span class="token delimiter variable">\(</span>job<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">check</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> job<span class="token punctuation">:</span> <span class="token string">"Doctor"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name=Jack, age=20, job=Doctor</span><span class="token function">check</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"Rose"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name=Rose, age=18, job=none</span><span class="token function">check</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> job<span class="token punctuation">:</span> <span class="token string">"Batman"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name=nobody, age=10, job=Batman</span><span class="token function">check</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name=nobody, age=15, job=none</span></code></pre><ul><li>C++的默认参数值有个限制：必须<code>从右往左</code>设置。由于Swift拥有参数标签，因此并没有此类限制</li><li>但是在省略参数标签时，需要特别注意，避免出错</li></ul><ul><li>这里的middle不可以省略参数标签</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">_</span> <span class="token builtin">first</span><span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> middle<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> <span class="token builtin">last</span><span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span>middle<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><h3 id="可变参数（Variadic-Parameter）"><a href="#可变参数（Variadic-Parameter）" class="headerlink" title="可变参数（Variadic Parameter）"></a>可变参数（Variadic Parameter）</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">_</span> numbers<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers <span class="token punctuation">{</span>        total <span class="token operator">+</span><span class="token operator">=</span> number    <span class="token punctuation">}</span>    <span class="token keyword">return</span> total<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 100</span></code></pre><ul><li>一个函数<code>最多只能有1个</code>可变参数</li><li>紧跟在可变参数后面的参数不能省略参数标签</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 参数string不能省略标签</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">_</span> numbers<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> string<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token number">_</span> other<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> string<span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"Rose"</span><span class="token punctuation">)</span></code></pre><h3 id="Swift自带的print函数"><a href="#Swift自带的print函数" class="headerlink" title="Swift自带的print函数"></a>Swift自带的print函数</h3><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">/// - Parameters:</span><span class="token comment" spellcheck="true">///   - items: Zero or more items to print.</span><span class="token comment" spellcheck="true">///   - separator: A string to print between each item. The default is a single</span><span class="token comment" spellcheck="true">///     space (`" "`).</span><span class="token comment" spellcheck="true">///   - terminator: The string to print after all items have been printed. The</span><span class="token comment" spellcheck="true">///     default is a newline (`"\n"`).</span><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">_</span> items<span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> separator<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">,</span> terminator<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1 2 3 4 5</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> separator<span class="token punctuation">:</span> <span class="token string">"_"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1_2_3_4_5</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"My name is Jake."</span><span class="token punctuation">,</span> terminator<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"My age is 18."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// My name is Jake.My age is 18.</span></code></pre><h3 id="输入输出参数（In-Out-Parameter）"><a href="#输入输出参数（In-Out-Parameter）" class="headerlink" title="输入输出参数（In-Out Parameter）"></a>输入输出参数（In-Out Parameter）</h3><ul><li>可以用<code>inout</code>定义一个输入输出参数：可以在函数内部修改外部实参的值</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">swapValues</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> tmp <span class="token operator">=</span> v1    v1 <span class="token operator">=</span> v2    v2 <span class="token operator">=</span> tmp<span class="token punctuation">}</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token function">swapValues</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num2<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">swapValues</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2 <span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v2<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>可变参数不能标记为<code>inout</code></li><li><code>inout</code>参数不能有默认值</li><li><code>inout</code>参数只能传入可以被多次赋值的</li></ul><ul><li>上边所示代码中<code>inout</code>参数的本质是地址传递（引用传递）</li><li>如果传递给<code>inout</code>参数是计算属性, 有监听器的属性等内容, 其本质并非引用传递,在[属性]章节在做详细讲解</li></ul><h3 id="函数重载（Function-Overload）"><a href="#函数重载（Function-Overload）" class="headerlink" title="函数重载（Function Overload）"></a>函数重载（Function Overload）</h3><p>规则:</p><ul><li>函数名相同</li><li>参数个数不同 || 参数类型不同 || 参数标签不同</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v3<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> v2 <span class="token operator">+</span> v3<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 参数个数不同</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>    <span class="token function">Double</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">+</span> v2<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 参数类型不同</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> <span class="token function">Double</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 参数类型不同</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 参数标签不同</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    a <span class="token operator">+</span> b<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 参数标签不同</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span><span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> v3<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 60</span><span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20.0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30.0</span><span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30.0</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span></code></pre><h3 id="函数重载注意点"><a href="#函数重载注意点" class="headerlink" title="函数重载注意点"></a>函数重载注意点</h3><ul><li>返回值类型与函数重载无关</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-4c7831c84b993703.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>默认参数值和函数重载一起使用产生二义性时，编译器并不会报错（在C++中会报错）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span>    <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v3<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> v2 <span class="token operator">+</span> v3<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 会调用sum(v1: Int, v2: Int)</span><span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><ul><li>可变参数、省略参数标签、函数重载一起使用产生二义性时，编译器有可能会报错</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">_</span> v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">_</span> numbers<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers <span class="token punctuation">{</span>        total <span class="token operator">+</span><span class="token operator">=</span> number    <span class="token punctuation">}</span>    <span class="token keyword">return</span> total<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// error: ambiguous use of 'sum'</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><h3 id="内联函数（Inline-Function）"><a href="#内联函数（Inline-Function）" class="headerlink" title="内联函数（Inline Function）"></a>内联函数（Inline Function）</h3><p>如果开启了编译器优化（Release模式默认会开启优化），编译器会自动将某些函数变成内联函数</p><ul><li>将函数调用展开成函数体</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-faae22034fa60a20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>哪些函数不会被自动内联？</strong></p><ul><li>函数体比较长</li><li>包含递归调用</li><li>包含动态派发</li></ul><h3 id="inline"><a href="#inline" class="headerlink" title="@inline"></a>@inline</h3><ul><li>永远不会被内联（即使开启了编译器优化）</li></ul><pre class=" language-swift"><code class="language-swift">@<span class="token function">inline</span><span class="token punctuation">(</span>never<span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>开启编译器优化后，即使代码很长，也会被内联（递归调用函数、动态派发的函数除外）</li></ul><pre class=" language-swift"><code class="language-swift">@<span class="token function">inline</span><span class="token punctuation">(</span> always<span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>在Release模式下，编译器已经开启优化，会自动决定哪些函数需要内联，因此没必要使用<code>@inline</code></li></ul><h3 id="函数类型（Function-Type）"><a href="#函数类型（Function-Type）" class="headerlink" title="函数类型（Function Type）"></a>函数类型（Function Type）</h3><p>每一个函数都是有类型的，函数类型由<code>形式参数类型</code>、<code>返回值类型</code>组成</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// () -> Void 或者 () -> ()</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">{</span>    a <span class="token operator">+</span> b<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//(Int, Int) -> Int</span><span class="token comment" spellcheck="true">// 定义变量</span><span class="token keyword">var</span> fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token operator">=</span> sum<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5，调用时不需要参数标签</span></code></pre><h3 id="函数类型作为函数参数"><a href="#函数类型作为函数参数" class="headerlink" title="函数类型作为函数参数"></a>函数类型作为函数参数</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">+</span> v2<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">difference</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">-</span> v2<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printResult</span><span class="token punctuation">(</span><span class="token number">_</span> mathFn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> a<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> b<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Result: <span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token function">mathFn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">printResult</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Result: 7</span><span class="token function">printResult</span><span class="token punctuation">(</span>difference<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Result: 3</span></code></pre><h3 id="函数类型作为函数返回值"><a href="#函数类型作为函数返回值" class="headerlink" title="函数类型作为函数返回值"></a>函数类型作为函数返回值</h3><ul><li>返回值是函数类型的函数，叫做<code>高阶函数</code>（Higher-Order Function）</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token number">_</span> input<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    input <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">previous</span><span class="token punctuation">(</span><span class="token number">_</span> input<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    input <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token number">_</span> forward<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    forward <span class="token operator">?</span> next <span class="token punctuation">:</span> previous<span class="token punctuation">}</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h3 id="typealias"><a href="#typealias" class="headerlink" title="typealias"></a>typealias</h3><ul><li><code>typealias</code>用来给类型起别名</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">typealias</span> <span class="token builtin">Byte</span> <span class="token operator">=</span> <span class="token builtin">Int8</span><span class="token keyword">typealias</span> <span class="token builtin">Short</span> <span class="token operator">=</span> <span class="token builtin">Int16</span><span class="token keyword">typealias</span> <span class="token builtin">Long</span> <span class="token operator">=</span> <span class="token builtin">Int64</span></code></pre><ul><li>给元组起别名</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">typealias</span> <span class="token builtin">Date</span> <span class="token operator">=</span> <span class="token punctuation">(</span>year<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> month<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> day<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">_</span> date<span class="token punctuation">:</span> <span class="token builtin">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2011</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>给函数类型起别名</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">typealias</span> <span class="token builtin">IntFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token keyword">func</span> <span class="token function">difference</span><span class="token punctuation">(</span>v1<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    v1 <span class="token operator">-</span> v2<span class="token punctuation">}</span><span class="token keyword">let</span> fn<span class="token punctuation">:</span> <span class="token builtin">IntFn</span> <span class="token operator">=</span> difference<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span><span class="token keyword">func</span> <span class="token function">setFn</span><span class="token punctuation">(</span><span class="token number">_</span> fn<span class="token punctuation">:</span> <span class="token builtin">IntFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">setFn</span><span class="token punctuation">(</span>difference<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">getFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">IntFn</span> <span class="token punctuation">{</span> difference <span class="token punctuation">}</span></code></pre><ul><li>按照Swift标准库的定义，Void就是空元组()</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">typealias</span> <span class="token builtin">Void</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="嵌套函数（Nested-Function）"><a href="#嵌套函数（Nested-Function）" class="headerlink" title="嵌套函数（Nested Function）"></a>嵌套函数（Nested Function）</h3><ul><li>将函数定义在函数内部</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token number">_</span> forward<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">func</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token number">_</span> input<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        input <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">previous</span><span class="token punctuation">(</span><span class="token number">_</span> input<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        input <span class="token operator">-</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> forward <span class="token operator">?</span> next <span class="token punctuation">:</span> previous<span class="token punctuation">}</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 2-流程控制</title>
      <link href="/2020/05/30/Swift5-1-2-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2020/05/30/Swift5-1-2-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="一、if-else-语句"><a href="#一、if-else-语句" class="headerlink" title="一、if-else 语句"></a>一、if-else 语句</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">22</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Get married"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Being a adult"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">7</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Go to school"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Just a child"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><code>if</code>后面的条件可以省略小括号</li><li>条件后面的大括号不可以省略</li></ul><ul><li><code>if</code>后面的条件只能是Bool类型<br><img src="https://upload-images.jianshu.io/upload_images/126164-aecef950507e0562.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt=""></li></ul><h3 id="二、while循环语句"><a href="#二、while循环语句" class="headerlink" title="二、while循环语句"></a>二、while循环语句</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">while</span> num <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"num is <span class="token interpolation"><span class="token delimiter variable">\(</span>num<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>    num <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 打印5次</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">repeat</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"num is <span class="token interpolation"><span class="token delimiter variable">\(</span>num<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">while</span> num <span class="token operator">></span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">//打印1次</span><span class="token comment" spellcheck="true">// num is -1</span></code></pre><ul><li><code>repeat-while</code> 相当于C语言中的<code>do-while</code></li><li>这里不用num– ,因为从swift3开始,去除自增(++) 、 自减(–) 运算符</li></ul><h3 id="三、for循环语句"><a href="#三、for循环语句" class="headerlink" title="三、for循环语句"></a>三、for循环语句</h3><h4 id="1-区间运算符-a…b-代表-a-lt-取值-lt-b"><a href="#1-区间运算符-a…b-代表-a-lt-取值-lt-b" class="headerlink" title="1)区间运算符: a…b  代表  a &lt;= 取值 &lt;= b"></a>1)区间运算符: a…b  代表  a &lt;= 取值 &lt;= b</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Anna"</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token string">"Brian"</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//Anna Alex Brian Jack</span></code></pre><ul><li>常量存储遍历范围</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Anna"</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token string">"Brian"</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">]</span><span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span>  <span class="token comment" spellcheck="true">//CloseRang&lt;Int></span><span class="token keyword">for</span> i <span class="token keyword">in</span> range <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//Alex Brian Jack</span></code></pre><ul><li>常量和变量定义取值范围</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>b <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Alex Brian</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Alex Brian Jack</span></code></pre><ul><li>i 默认就是let , 有需要时可以声明为var</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">for</span> <span class="token keyword">var</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span> <span class="token punctuation">{</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 6 7 8</span></code></pre><ul><li>循环中用不到 i 可以用_省略</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">for</span> <span class="token number">_</span> <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"for"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//打印3次</span></code></pre><h4 id="2-半开区间运算符-a…b-a-lt-取值-lt-b"><a href="#2-半开区间运算符-a…b-a-lt-取值-lt-b" class="headerlink" title="2)半开区间运算符: a…b , a &lt;= 取值 &lt; b"></a>2)半开区间运算符: a…b , a &lt;= 取值 &lt; b</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 1 2 3 4</span></code></pre><h4 id="3-for-区间运算符用在数组上"><a href="#3-for-区间运算符用在数组上" class="headerlink" title="3) for -区间运算符用在数组上"></a>3) for -区间运算符用在数组上</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Anna"</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token string">"Brian"</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">]</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//Anna Alex Brian Jack</span></code></pre><ul><li>单侧区间: 让区间朝同一个方向尽可能的远</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Brian Jack</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Brian Jack</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Anna Alex Brian</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Anna Alex</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">5</span>range<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>range<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//ture</span>range<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//ture</span></code></pre><h4 id="4-区间类型"><a href="#4-区间类型" class="headerlink" title="4) 区间类型"></a>4) 区间类型</h4><ul><li>闭区间类型 <code>ClosedRange&lt;Int&gt;</code></li><li>半开半闭区间类型 <code>Range&lt;Int&gt;</code></li><li>单侧区间类型 <code>PartialRangeThrough&lt;Int&gt;</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> range1 <span class="token punctuation">:</span> <span class="token builtin">ClosedRange</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span> <span class="token keyword">let</span> range2 <span class="token punctuation">:</span> <span class="token builtin">Range</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">3</span><span class="token keyword">let</span> range3 <span class="token punctuation">:</span> <span class="token builtin">PartialRangeThrough</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">5</span></code></pre><ul><li>字符、字符串也能使用区间运算符, 但默认不能用在<code>for-in</code>中</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> stringRange1 <span class="token operator">=</span> <span class="token string">"cc"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">"ff"</span> <span class="token comment" spellcheck="true">// ClosedRange&lt;String></span>stringRange1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"cb"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>stringRange1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"dz"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>stringRange1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"fg"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span class="token keyword">let</span> stringRange2 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">"f"</span>stringRange2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>stringRange2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span></code></pre><ul><li>\0到~囊过了所有可能要用到的ASCII字符</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> characterRange<span class="token punctuation">:</span><span class="token builtin">ClosedRange</span><span class="token operator">&lt;</span><span class="token builtin">Character</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token string">"\0"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">"~"</span>characterRange<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"G"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span></code></pre><h4 id="5-带间隔的区间值"><a href="#5-带间隔的区间值" class="headerlink" title="5) 带间隔的区间值"></a>5) 带间隔的区间值</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> hours <span class="token operator">=</span> <span class="token number">11</span><span class="token keyword">let</span> hourInterval <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">//tickMark 的取值: 从4开始, 累加2, 不超过11</span><span class="token keyword">for</span> tickMark <span class="token keyword">in</span> <span class="token function">stride</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> hours<span class="token punctuation">,</span> by<span class="token punctuation">:</span> hourInterval<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>tickMark<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 4 6 8 10</span></code></pre><h3 id="四、Switch语句"><a href="#四、Switch语句" class="headerlink" title="四、Switch语句"></a>四、Switch语句</h3><h4 id="1-常规用法"><a href="#1-常规用法" class="headerlink" title="1)常规用法"></a>1)常规用法</h4><ul><li><code>case</code>、<code>default</code>后面不能写大括号</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">switch</span> number <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"number is 2"</span><span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"number is other"</span><span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// number is 1</span></code></pre><ul><li>默认可以不写<code>break</code>,并不会贯穿到后面的条件</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">switch</span> number <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"number is 2"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"number is other"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// number is 1</span></code></pre><h4 id="2-fallthrough"><a href="#2-fallthrough" class="headerlink" title="2) fallthrough"></a>2) fallthrough</h4><ul><li>使用<code>fallthrough</code>可以实现贯穿效果</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">switch</span> number <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"number is 1"</span><span class="token punctuation">)</span>    <span class="token keyword">fallthrough</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"number is 2"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"number is other"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// number is 1</span><span class="token comment" spellcheck="true">// number is 2</span></code></pre><h4 id="3-switch注意点"><a href="#3-switch注意点" class="headerlink" title="3) switch注意点"></a>3) switch注意点</h4><ul><li>switch 必须要保证能处理所有情况</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-255702b26b009af8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt=""></p><ul><li><code>case</code> 、<code>default</code>要后面至少要有一条语句</li><li>如果不想做任何事, 加个<code>break</code>即可</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">switch</span> number <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"number is 1"</span><span class="token punctuation">)</span>    <span class="token keyword">fallthrough</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"number is 2"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">}</span></code></pre><ul><li>如果能保证已处理所有情况, 也可以不必使用<code>default</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Answer</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token keyword">right</span><span class="token punctuation">,</span> wrong<span class="token punctuation">}</span><span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token builtin">Answer</span><span class="token punctuation">.</span><span class="token keyword">right</span><span class="token keyword">switch</span> answer <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token builtin">Answer</span><span class="token punctuation">.</span><span class="token keyword">right</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>由于已确定answer是Answer类型, 因此可以省略Answer</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">Answer</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token keyword">right</span><span class="token punctuation">,</span> wrong<span class="token punctuation">}</span><span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token builtin">Answer</span><span class="token punctuation">.</span><span class="token keyword">right</span><span class="token keyword">switch</span> answer <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token keyword">right</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">.</span>wrong<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="4-复合条件"><a href="#4-复合条件" class="headerlink" title="4)复合条件"></a>4)复合条件</h4><p><code>switch</code>也支持<code>Character</code>  <code>String</code> 类型</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token keyword">switch</span> string <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"Jack"</span><span class="token punctuation">:</span>    <span class="token keyword">fallthrough</span><span class="token keyword">case</span> <span class="token string">"Rose"</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Right person"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//Right person</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">switch</span> string <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"Rose"</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Right person"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//Right person</span></code></pre><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> character <span class="token punctuation">:</span> <span class="token builtin">Character</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token keyword">switch</span> character <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The letter A"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Not the letter a"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//The letter A</span></code></pre><h4 id="5-区间匹配-元组匹配"><a href="#5-区间匹配-元组匹配" class="headerlink" title="5) 区间匹配 元组匹配"></a>5) 区间匹配 元组匹配</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> <span class="token builtin">count</span> <span class="token operator">=</span> <span class="token number">62</span><span class="token keyword">switch</span> <span class="token builtin">count</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"none"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a few"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">12</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"several"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"dozens of"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">100</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hundreds of"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"many"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// dozens of</span></code></pre><ul><li>可以使用<code>下划线</code>或略某个值</li><li>关于<code>case</code>匹配问题, 属于模式匹配(Pattern Matching)的范畴, 以后会再次详细展开讲解</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">switch</span> point <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"the origin"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">_</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"on the x-axis"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">_</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"on the y-axis"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2</span> <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"inside the box"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"outside of the box"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//inside the box</span></code></pre><h4 id="6-值绑定"><a href="#6-值绑定" class="headerlink" title="6) 值绑定"></a>6) 值绑定</h4><ul><li>必要时<code>let</code> 也可以改为<code>var</code></li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">switch</span> point <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"on the x-axis with an x value of <span class="token interpolation"><span class="token delimiter variable">\(</span>x<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword">let</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"on the y-axis with an y value of <span class="token interpolation"><span class="token delimiter variable">\(</span>y<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">let</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"somewhere else at (<span class="token interpolation"><span class="token delimiter variable">\(</span>x<span class="token delimiter variable">)</span></span>, <span class="token interpolation"><span class="token delimiter variable">\(</span>y<span class="token delimiter variable">)</span></span>)"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// on the x-axis with an x value of 2</span></code></pre><h3 id="五、where语句"><a href="#五、where语句" class="headerlink" title="五、where语句"></a>五、where语句</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">switch</span> point <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">where</span> x <span class="token operator">==</span> y<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"on the line x == y"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">where</span> x <span class="token operator">==</span> <span class="token operator">-</span>y<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"on the line x == -y"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"(<span class="token interpolation"><span class="token delimiter variable">\(</span>x<span class="token delimiter variable">)</span></span>, <span class="token interpolation"><span class="token delimiter variable">\(</span>y<span class="token delimiter variable">)</span></span>) is just some arbitrary point"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// on the line x == -y</span></code></pre><ul><li>将所有正数加起来</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> num <span class="token keyword">in</span> numbers <span class="token keyword">where</span> num <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//使用where过滤num</span>    sum <span class="token operator">+</span><span class="token operator">=</span> num<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//60</span></code></pre><h3 id="六、标签语句"><a href="#六、标签语句" class="headerlink" title="六、标签语句"></a>六、标签语句</h3><pre class=" language-swift"><code class="language-swift">outer<span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span> outer        <span class="token punctuation">}</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span> outer        <span class="token punctuation">}</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i == <span class="token interpolation"><span class="token delimiter variable">\(</span>i<span class="token delimiter variable">)</span></span>, k == <span class="token interpolation"><span class="token delimiter variable">\(</span>k<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Swift5.1] 1-基本数据类型</title>
      <link href="/2020/05/30/Swift5-1-1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/05/30/Swift5-1-1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/apple/swift" target="_blank" rel="noopener">Swift开源库</a></p><h3 id="print-函数"><a href="#print-函数" class="headerlink" title="print 函数"></a>print 函数</h3><ul><li>不用编写main函数, Swift将全局范围内的首句可执行代码作为程序入口.</li><li>一句代码尾部可以省略分号 , 多句代码写到同一行时必须用分号( ; )隔开</li><li><p>用<code>var</code>定义变量, <code>let</code>定义常量, 编译器能自动推断出变量\常量的类型</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">+</span> bc <span class="token operator">+</span> <span class="token operator">=</span> <span class="token number">3</span></code></pre></li><li><p>拼接打印</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello World! - <span class="token interpolation"><span class="token delimiter variable">\(</span>a<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//打印   Hello World! - 10</span></code></pre></li></ul><h3 id="Playground-快捷键"><a href="#Playground-快捷键" class="headerlink" title="Playground 快捷键"></a>Playground 快捷键</h3><ul><li>Playground可以快速预览代码效果, 是学习语法的好帮手</li><li>Command + Shift + Enter: 运行整个Playground</li><li>Shift + Enter 运行截止到某一行代码</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 单行注释</span><span class="token comment" spellcheck="true">/* 多行注释*/</span><span class="token comment" spellcheck="true">/* a /* 多行注释嵌套 */</span> b<span class="token operator">*</span><span class="token operator">/</span></code></pre><ul><li>注释支持markup语法, 类似markload</li><li>开启markup渲染效果: Editor -&gt; Show Rendered Markup</li><li>注意: Markup 只在Playground</li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>常量只能赋值一次</li><li>常量的值不要求在<code>编译时期</code>确定, 但使用之前必须赋值1次</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">let</span> age2 <span class="token punctuation">:</span> <span class="token builtin">Int</span>age2 <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">func</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> age3 <span class="token operator">=</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>常量, 变量在初始化前, 都不能使用</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> age <span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token keyword">var</span> height <span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token function">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//错误提示: Constant 'age' used before being initialized</span><span class="token function">print</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//错误提示: Variable 'height' used before being initialized</span></code></pre><ul><li>定义常量时，需要明确类型</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> ageage <span class="token operator">=</span> <span class="token number">18</span>          <span class="token comment" spellcheck="true">//错误提示 Found an unexpected second identifier in constant declaration; is there an accidental break?</span></code></pre><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>标识符(比如常量名、变量名、 函数名)几乎可以使用任何字符</li><li>标识符不能以数字开头, 不能包含空白字符、 制表符、 箭头灯特殊字符</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> 🐱🍉<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"888"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>🐱🍉<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> 🥛 <span class="token operator">=</span> <span class="token string">"milk"</span><span class="token keyword">var</span> 🍺 <span class="token operator">=</span> <span class="token string">"bear"</span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="https://upload-images.jianshu.io/upload_images/126164-1ff3f5d97ed5414a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据类型.png"></p><ul><li>整数类型: Int8、Int16、Int32、Int64、UInt8、UInt16、UInt32、UInt64</li><li>在32bit平台，Int等价于Int32; 在64bit平台，Int等价于Int64</li><li>整数的最值：UInt8.max、Int16.min</li><li>一般情况下，都是直接使用Int即可</li></ul><ul><li>浮点类型：Float, 32位，精度只有6位； Double, 64位，精度至少15位</li></ul><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><ul><li>布尔</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//取反是false</span></code></pre><ul><li>字符串</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">"你好"</span></code></pre><ul><li>字符(可存储ASCII字符、Unicode字符)</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> character<span class="token punctuation">:</span> <span class="token builtin">Character</span> <span class="token operator">=</span> <span class="token string">"🍎"</span></code></pre><ul><li>整数</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> intDecimal <span class="token operator">=</span> <span class="token number">18</span> <span class="token comment" spellcheck="true">//十进制</span><span class="token keyword">let</span> intBinary <span class="token operator">=</span> <span class="token number">0b10001</span> <span class="token comment" spellcheck="true">//二进制</span><span class="token keyword">let</span> intOctal <span class="token operator">=</span> <span class="token number">0o33</span>   <span class="token comment" spellcheck="true">//八进制</span><span class="token keyword">let</span> intHexadecimal <span class="token operator">=</span> <span class="token number">0x13</span> <span class="token comment" spellcheck="true">//十六进制</span></code></pre><p>整数和浮点数可以添加额外的零或者添加下划线来增强可读性</p><pre class=" language-swift"><code class="language-swift"><span class="token number">100_1000</span>、<span class="token number">1_000_000.000_000_1</span>、<span class="token number">000123.456</span></code></pre><ul><li>浮点数</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> doubleDecimal <span class="token operator">=</span> <span class="token number">123.0</span> <span class="token comment" spellcheck="true">//十进制，等价于1.23e2,  0.0123等价于1.23e-2</span><span class="token keyword">let</span> doubleHexadecimal1 <span class="token operator">=</span> 0xFp2 <span class="token comment" spellcheck="true">//十六进制，意味着15*2^2, 相当于十进制60.0</span><span class="token keyword">let</span> doubleHexadecimal2 <span class="token operator">=</span> 0xFp<span class="token operator">-</span><span class="token number">2</span> <span class="token comment" spellcheck="true">//十六进制，意味着15*2^-2, 相当于十进制3.75</span></code></pre><p>以下表示12.3456<br>十进制：12.3456    1.23456e1<br>十六进制：0xC.3p0</p><ul><li>数组</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code></pre><ul><li>字典</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> dictionary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"height"</span> <span class="token punctuation">:</span> <span class="token number">177</span><span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token number">130</span><span class="token punctuation">]</span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>整数转换</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> int1<span class="token punctuation">:</span> <span class="token builtin">UInt16</span> <span class="token operator">=</span> <span class="token number">2_000</span><span class="token keyword">let</span> int2<span class="token punctuation">:</span> <span class="token builtin">UInt8</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> int3 <span class="token operator">=</span> int1 <span class="token operator">+</span> <span class="token function">UInt16</span><span class="token punctuation">(</span>int2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//2001</span></code></pre><ul><li>整数 浮点数转换</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> int <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">let</span> double <span class="token operator">=</span> <span class="token number">0.14157</span><span class="token keyword">let</span> pi <span class="token operator">=</span> <span class="token function">Double</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token operator">+</span> double   <span class="token comment" spellcheck="true">//3.14157</span><span class="token keyword">let</span> intPi <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//3</span></code></pre><ul><li>字面量可以直接相加, 以为数字字面量本身没有明确的类型</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0.14159</span>  <span class="token comment" spellcheck="true">//3.14159</span></code></pre><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//通过下标访问元组元素</span><span class="token keyword">let</span> http404Error <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">"Not Found"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The status code is <span class="token interpolation"><span class="token delimiter variable">\(</span>http40Error<span class="token punctuation">.</span><span class="token number">0</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//The status code is 404</span><span class="token comment" spellcheck="true">//将http404Error中元素, 一一对应给新元组元素</span><span class="token keyword">let</span> <span class="token punctuation">(</span>statusCode<span class="token punctuation">,</span> statusMessage<span class="token punctuation">)</span> <span class="token operator">=</span> http404Error<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The status code is <span class="token interpolation"><span class="token delimiter variable">\(</span>statusCode<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// The status code is 404</span><span class="token comment" spellcheck="true">// _代表第二个参数不接收</span><span class="token keyword">let</span> <span class="token punctuation">(</span>justTheStatusCode<span class="token punctuation">,</span> <span class="token number">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> http404Error<span class="token comment" spellcheck="true">//以标签形式初始化元组, 可以通过标签访问元素</span><span class="token keyword">let</span> http200Status <span class="token operator">=</span> <span class="token punctuation">(</span>statusCode<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The status code is <span class="token interpolation"><span class="token delimiter variable">\(</span>http200Status<span class="token punctuation">.</span>statusCode<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//The status code is 200</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift5.1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第12章 第三方框架相关面试问题</title>
      <link href="/2020/05/29/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC12%E7%AB%A0-%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/29/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC12%E7%AB%A0-%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>注意：本文主讲第三方框架相关面试问题，包括AFNetworking、SDWebImageView、Reactive Cocoa、AsyncDisplayKit。</p><h3 id="一、AFNetworking"><a href="#一、AFNetworking" class="headerlink" title="一、AFNetworking"></a>一、AFNetworking</h3><h4 id="1、AFN框架图"><a href="#1、AFN框架图" class="headerlink" title="1、AFN框架图"></a>1、AFN框架图</h4><p>问题:AFNetworking整体框架是怎样的?</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-941cf9d21bc17faf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AFN框架图"></p><ul><li>会话层:NSURLSession</li><li>网络监听模块:监听网络变化 进行逻辑处理</li><li>网络安全模块: </li><li>请求序列化</li><li>响应序列化</li><li>UIKit集成模块</li></ul><h4 id="2、AFN主要类关系图"><a href="#2、AFN主要类关系图" class="headerlink" title="2、AFN主要类关系图"></a>2、AFN主要类关系图</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-a973eb440a855199.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AFN主要类关系图"></p><p><strong>AFURLSessionManager 功能</strong></p><ul><li>创建和管理NSURLSession、NSURLSessionTask</li><li>实现NSURLSessionDelegate等协议的代理方法  .<br>用来处理网络请求过程中重定向, 核心的网络响应数据处理.</li><li>引入AFSecurityPolicy保证请求安全.<br>比如发送https请求时, 会涉及证书校验, 公钥验证等</li><li>引入AFNetworkReachabilityManager监控网络状态</li></ul><p>发送一个GET方式的HTTP请求</p><h3 id="二、SDWebImageView"><a href="#二、SDWebImageView" class="headerlink" title="二、SDWebImageView"></a>二、SDWebImageView</h3><ul><li>异步下载图片并且支持缓存的框架</li></ul><h4 id="框架简图"><a href="#框架简图" class="headerlink" title="框架简图"></a>框架简图</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-8c9600ba15e715af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SDWebImage架构图"></p><ul><li>UIImageView+ WebCache : </li><li>SDWebImageManager : 核心工作类</li><li>SDImageCache : 图片缓存: 磁盘缓存处理 + 内存缓存处理</li><li>SDWebImageDownloader: 图片下载器</li></ul><h4 id="加载图片流程"><a href="#加载图片流程" class="headerlink" title="加载图片流程"></a>加载图片流程</h4><p>1.首先根据相应图片请求URL所对应的key, 查找内存缓存, 如果找到返回给调用方<br>2.如果没有查找到,查找磁盘缓存,如果找到返回给调用方<br>3.如果磁盘缓存没有查找到,就进行相应的网络下载</p><h3 id="三、Reactive-Cocoa"><a href="#三、Reactive-Cocoa" class="headerlink" title="三、Reactive Cocoa"></a>三、Reactive Cocoa</h3><p>函数响应式编程框架</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>RAC首先是一个函数响应式编程的第三方库</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-03f1dba3dece3854.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="信号核心类"></p><p><strong>1)信号</strong><br>RAC中的核心类RACSignal ,RACSignal继承自RACStream<br>RACSignal主要有4个子类:</p><ul><li>RACDynamicSignal:</li><li>RACReturnSignal:</li><li>RACEmptySignal</li><li><p>RACErrorSignal</p></li><li><p>信号代表一连串的状态,这么一个类的封装. </p></li><li>在状态改变是,对应的订阅者<code>RACSubScriber</code>就会收到通知执行相应的命令</li></ul><p>RAC使用<code>类簇模式</code>, 抽象工厂模式. 返回的对象都是同一个对象, 实际上通过不同方法创建出来的具体对象也不同. </p><p><strong>2)订阅</strong><br>RACSubScriber<br>问题:怎样实现订阅?<br><img src="https://upload-images.jianshu.io/upload_images/126164-bb7a1607af22b666.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="订阅信号逻辑"></p><p>问题:订阅内部执行原理?</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-e9f967a73fd16d1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="订阅内部原理"></p><ul><li>产生RACSubScriber类后, 内部持有一个block类型的成员变量didSubscribe,  调用RACSubScriber 的sendNext方法时实际调用内部保存的block</li></ul><pre><code>{  [RACSignal return:@3];  [RACSignal subScribedNext:^(id x){      NSLog(@&quot;%@&quot;, x);   }]}</code></pre><h3 id="四、AsyncDisplayKit"><a href="#四、AsyncDisplayKit" class="headerlink" title="四、AsyncDisplayKit"></a>四、AsyncDisplayKit</h3><ul><li><p>提升iOS界面渲染性能的一个框架</p><h4 id="1、ASDK处理问题"><a href="#1、ASDK处理问题" class="headerlink" title="1、ASDK处理问题"></a>1、ASDK处理问题</h4><p>问题: AsyncDisplayKit主要处理什么问题?<br><img src="https://upload-images.jianshu.io/upload_images/126164-49757768e1a10afb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ASDK主要处理问题"></p></li><li><p>主要通过减轻主线程压力, 将更多的事情尽量挪到子线程去做.主要分3方面:<br>1&gt; Layout 解决布局的耗时运算: 文本宽高计算和视图布局计算.<br>实际上将文本计算和布局计算由主线程迁移到子线程,来减少主线程的工作消耗, 腾挪出更多时间响应用户交互.<br>2&gt; Rendering 渲染: 文本渲染 , 图片解码和图形绘制.<br>3&gt; UIKit Objects: 对象创建 对象调整 对象销毁</p></li></ul><h4 id="2、ASDK基本原理"><a href="#2、ASDK基本原理" class="headerlink" title="2、ASDK基本原理"></a>2、ASDK基本原理</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-5dd0330df9f2e120.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ASDK基本原理"></p><p>基本原理: </p><ul><li>针对ASNode的修改和提交, 会对其进行封装并提交到一个全局容器中</li><li>ASDK也在RunLoop中注册一个Observer</li><li>当RunLoop进入休眠前, ASDK执行该loop内提交的所有任务</li></ul><h3 id="第三方框架面试总结"><a href="#第三方框架面试总结" class="headerlink" title="第三方框架面试总结:"></a>第三方框架面试总结:</h3><p>问题:AFNetworking的整体结构是怎样的?</p><p>问题:SDWebImage是怎样加载图片的?<br>(图片加载流程)</p><p>问题:RAC的信号订阅是什么意思?<br>答:信号一连串状态的抽象, 订阅信号通过RACSubScriber实现, RACSubScriber内部持有一个block类型的成员变量didSubscribe,  调用RACSubScriber 的sendNext方法时实际调用内部保存的block,</p><p>问题:ASDK实现原理是怎样的?<br>答: 封装ASNode节点, 对于视图属性设置都转化为ASNode的设置,这部分可以放在后台线程中执行,RunLoop将要休眠前,接收一个通知提前全局容器对应的ASNode,一次性设置给UIView.</p><h3 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h3><p>1.系统的UI事件传递机制是怎样的?</p><p>2.KVO的实现原理是怎样的?</p><p>3.简答说说消息传递机制的消息转发流出</p><p>4.当一个obj废弃的时候, 指向它的weak指针为何会自动置为nil?</p><p>5.请你简单讲下iOS是怎样进行内存管理的?</p><p>6.Block实质是怎样的?使用Block为何容易产生循环引用?</p><p>7.简单说说怎样利用GCD实现高效的多读单写逻辑?</p><p>8.RunLoop为何能左右有事做事,没事休息?</p><p>9.怎样解决DNS劫持?</p><p>10.分别说说什么是桥接模式, 责任链模式?</p><p>11.怎样设计一个图片缓存框架?网络框架?</p><p>12.请编写查找一个字符串中, 第一个只出现一次的字符的算法</p><p>13.AFNetworking大致是怎样实现的?</p>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第11章 算法相关面试问题</title>
      <link href="/2020/05/29/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC11%E7%AB%A0-%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/29/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC11%E7%AB%A0-%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>注意：本文主讲算法相关面试问题，包括字符串反转、链表反转、有序数组合并、Hash算法、查找两个子视图的共同父视图、求无序数组当中的中位数。</p><h3 id="一、字符串反转"><a href="#一、字符串反转" class="headerlink" title="一、字符串反转"></a>一、字符串反转</h3><p>问题:给定字符串”hello, world”, 实现将其反转.输出结果: dlrow,oleh</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-b43437a2df845602.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字符串反转"></p><p>答: </p><pre><code>void char_reverse(char* cha) {    // 指向第一个字符    char* begin = cha;    // 指向最后一个字符    char* end = cha + strlen(cha) - 1;    while (begin &lt; end) {        // 交换前后两个字符,同时移动指针        char temp = *begin;        *(begin++) = *end;        *(end--) = temp;    }}//1.字符串反转char ch[] = &quot;hello,world&quot;;char_reverse(ch);printf(&quot;reverse result is %s \n&quot;, ch);//打印 reverse result is dlrow,olleh</code></pre><h3 id="二、链表反转"><a href="#二、链表反转" class="headerlink" title="二、链表反转"></a>二、链表反转</h3><p>链表头插法思想<br><img src="https://upload-images.jianshu.io/upload_images/126164-ca29da7142022835.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="链表反转"></p><p><strong>ReverseList.h</strong></p><pre><code>//ReverseList.h// 定义一个链表struct Node {    int data;    struct Node *next;};@interface ReverseList : NSObject// 链表反转struct Node* reverseList(struct Node *head);// 构造一个链表struct Node* constructList(void);// 打印链表中的数据void printList(struct Node *head);@end</code></pre><p><strong>ReverseList.m</strong></p><pre><code>//ReverseList.m@implementation ReverseListstruct Node* reverseList(struct Node *head) {    // 定义遍历指针，初始化为头结点    struct Node *p = head;    // 反转后的链表头部    struct Node *newH = NULL;    // 遍历链表    while (p != NULL) {        // 记录下一个结点        struct Node *temp = p-&gt;next;        // 当前结点的next指向新链表头部        p-&gt;next = newH;        // 更改新链表头部为当前结点        newH = p;        // 移动p指针        p = temp;    }    // 返回反转后的链表头结点    return newH;}struct Node* constructList(void) {    // 头结点定义    struct Node *head = NULL;    // 记录当前尾结点    struct Node *cur = NULL;    for (int i = 1; i &lt; 5; i++) {        struct Node *node = malloc(sizeof(struct Node));        node-&gt;data = i;        // 头结点为空，新结点即为头结点        if (head == NULL) {            head = node;        }        // 当前结点的next为新结点        else{            cur-&gt;next = node;        }        // 设置当前结点为新结点        cur = node;    }    return head;}void printList(struct Node *head){    struct Node* temp = head;    while (temp != NULL) {        printf(&quot;node is %d \n&quot;, temp-&gt;data);        temp = temp-&gt;next;    }}@end</code></pre><p><strong>执行调用</strong></p><pre><code>//单链表反转struct Node* head = constructList();printList(head);printf(&quot;-----------\n&quot;);struct Node* newHead = reverseList(head);printList(newHead); </code></pre><h3 id="三、有序数组合并"><a href="#三、有序数组合并" class="headerlink" title="三、有序数组合并"></a>三、有序数组合并</h3><p><img src="https://upload-images.jianshu.io/upload_images/126164-022a4ae9963ad9a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有序数组合并"></p><pre><code>// 将有序数组a和b的值合并到一个数组result当中，且仍然保持有序void mergeList(int a[], int aLen, int b[], int bLen, int result[]) {    int p = 0; // 遍历数组a的指针    int q = 0; // 遍历数组b的指针    int i = 0; // 记录当前存储位置    // 任一数组没有到达边界则进行遍历    while (p &lt; aLen &amp;&amp; q &lt; bLen) {        // 如果a数组对应位置的值小于b数组对应位置的值        if (a[p] &lt;= b[q]) {            // 存储a数组的值            result[i] = a[p];            // 移动a数组的遍历指针            p++;        }else{            // 存储b数组的值            result[i] = b[q];            // 移动b数组的遍历指针            q++;        }        // 指向合并结果的下一个存储位置        i++;    }    // 如果a数组有剩余    while (p &lt; aLen) {        // 将a数组剩余部分拼接到合并结果的后面        result[i] = a[p++];        i++;    }    // 如果b数组有剩余    while (q &lt; bLen) {        // 将b数组剩余部分拼接到合并结果的后面        result[i] = b[q++];        i++;    }}</code></pre><p><strong>执行调用</strong></p><pre><code>int a[5] = {1,4,6,7,9};int b[8] = {2,3,5,6,8,10,11,12};//用于存储归并结果int result[13];//归并操作mergeList(a, 5, b, 8, result);//打印归并结果printf(&quot;merge result is &quot;);for (int i = 0; i &lt; 13; i++) {      printf(&quot;%d &quot;, result[i]);}//输出 merge result is 1 2 3 4 5 6 6 7 8 9 10 11 12 </code></pre><h3 id="四、Hash算法"><a href="#四、Hash算法" class="headerlink" title="四、Hash算法"></a>四、Hash算法</h3><p>问题:在一个字符串中找到第一个只出现一次的字符<br>如:输入”abaccdeff” , 则输出b</p><p>算法思想:</p><ul><li>字符(char)是一个长度为8的数据类型,因此总共有可能256中可能.</li><li>每个字母根据其ASCII码值作为数组的下标对应数组的一个数字.</li><li>数组中存储的是每个字符出现的次数.</li></ul><p>哈希表<br>例: 给定值是字母a, 对应ASCII值是97, 数组索引下标为97.<br>哈希函数: 建立字母或字符到它所存储位置index的一个映射关系. f(key)<br>存储和查找都通过该函数, 有效提高查找效率.<br>f(char) =&gt; index</p><pre><code>//查找第一个只出现一次的字符char findFirstChar(char* cha) {    char result = &#39;\0&#39;;    // 定义一个数组 用来存储各个字母出现次数    int array[256];    // 对数组进行初始化操作    for (int i=0; i&lt;256; i++) {        array[i] =0;    }    // 定义一个指针 指向当前字符串头部    char* p = cha;    // 遍历每个字符    while (*p != &#39;\0&#39;) {        // 在字母对应存储位置 进行出现次数+1操作        array[*(p++)]++;    }    // 将P指针重新指向字符串头部    p = cha;    // 遍历每个字母的出现次数    while (*p != &#39;\0&#39;) {        // 遇到第一个出现次数为1的字符，打印结果        if (array[*p] == 1) {            result = *p;            break;        }        // 反之继续向后遍历        p++;    }    return result;}</code></pre><p><strong>执行结果</strong></p><pre><code>char cha[] = &quot;abaccdeff&quot;;char fc = findFirstChar(cha);printf(&quot;this char is %c \n&quot;, fc);//输出this char is b</code></pre><h3 id="五、查找两个子视图的共同父视图"><a href="#五、查找两个子视图的共同父视图" class="headerlink" title="五、查找两个子视图的共同父视图"></a>五、查找两个子视图的共同父视图</h3><p><strong>倒序比较找到第一个不一样的</strong></p><pre><code>- (NSArray &lt;UIView *&gt; *)findCommonSuperView:(UIView *)viewOne other:(UIView *)viewOther {    NSMutableArray *result = [NSMutableArray array];    // 查找第一个视图的所有父视图    NSArray *arrayOne = [self findSuperViews:viewOne];    // 查找第二个视图的所有父视图    NSArray *arrayOther = [self findSuperViews:viewOther];    int i = 0;    // 越界限制条件    while (i &lt; MIN((int)arrayOne.count, (int)arrayOther.count)) {        // 倒序方式获取各个视图的父视图        UIView *superOne = [arrayOne objectAtIndex:arrayOne.count - i - 1];        UIView *superOther = [arrayOther objectAtIndex:arrayOther.count - i - 1];        // 比较如果相等 则为共同父视图        if (superOne == superOther) {            [result addObject:superOne];            i++;        }        // 如果不相等，则结束遍历        else{            break;        }    }    return result;}- (NSArray &lt;UIView *&gt; *)findSuperViews:(UIView *)view {    // 初始化为第一父视图    UIView *temp = view.superview;    // 保存结果的数组    NSMutableArray *result = [NSMutableArray array];    while (temp) {        [result addObject:temp];        // 顺着superview指针一直向上查找        temp = temp.superview;    }    return result;}</code></pre><h3 id="六、求无序数组当中的中位数"><a href="#六、求无序数组当中的中位数" class="headerlink" title="六、求无序数组当中的中位数"></a>六、求无序数组当中的中位数</h3><p>方案:</p><ul><li>1&gt;排序算法+中位数</li><li>2&gt;利用快排思想(分治思想)</li></ul><h4 id="排序算法-中位数"><a href="#排序算法-中位数" class="headerlink" title="排序算法+中位数"></a>排序算法+中位数</h4><ul><li>排序算法: 冒泡排序, 快速排序, 堆排序…</li><li>中位数:<br>当n为奇数时, (n+1)/2 ;<br>当n为偶数时, (n/2 + (n/2 + 1)) / 2 ;</li></ul><h4 id="快排思想"><a href="#快排思想" class="headerlink" title="快排思想"></a>快排思想</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-eae8c97a50f43fbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="快排思想 "></p><p><strong>快排思想: 选取关键字, 高低交替扫描</strong></p><p>任意挑一个元素, 以该元素为支点, 划分集合为两部分.<br>如果左侧集合长度恰为 (n- 1)/2, 那么支点恰为中位数.<br>如果左侧长度恰 &lt;  (n- 1)/2, 那么中位点在右侧; 反之, 中位数在左侧.<br>进入相应的一侧继续寻找中位点</p><pre><code>int findMedian(int a[], int aLen) {    int low = 0;    int high = aLen - 1;    int mid = (aLen - 1) / 2;    int div = PartSort(a, low, high);    while (div != mid){        if (mid &lt; div){            //左半区间找            div = PartSort(a, low, div - 1);        }        else{            //右半区间找            div = PartSort(a, div + 1, high);        }    }    //找到了    return a[mid];}int PartSort(int a[], int start, int end) {    int low = start;    int high = end;    //选取关键字    int key = a[end];    while (low &lt; high) {        //左边找比key大的值        while (low &lt; high &amp;&amp; a[low] &lt;= key){            ++low;        }        //右边找比key小的值        while (low &lt; high &amp;&amp; a[high] &gt;= key){            --high;        }        if (low &lt; high){            //找到之后交换左右的值            int temp = a[low];            a[low] = a[high];            a[high] = temp;        }    }    int temp = a[high];    a[high] = a[end];    a[end] = temp;    return low;}</code></pre><p><strong>执行调用</strong></p><pre><code>int list[9] = {12,3,10,8,6,7,11,13,9};// 3 6 7 8 9 10 11 12 13//             ^int median = findMedian(list, 9);printf(&quot;the median is %d \n&quot;, median);// the median is 9 </code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第10章 架构框架相关面试问题</title>
      <link href="/2020/05/26/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC10%E7%AB%A0-%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/26/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC10%E7%AB%A0-%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>注意：本文主讲架构框架相关面试问题，包括图片缓存、阅读时长统计、复杂页面结构、客户端整体架构。</p><p>问题: 架构框架解决什么问题?<br>答: </p><ul><li>引入架构框架为了实现<code>模块化</code>, 将各功能按模块进行划分</li><li><code>分层</code></li><li><code>解耦</code></li><li><code>降低代码重合度</code></li></ul><h3 id="一、图片缓存"><a href="#一、图片缓存" class="headerlink" title="一、图片缓存"></a>一、图片缓存</h3><h4 id="1、图片缓存"><a href="#1、图片缓存" class="headerlink" title="1、图片缓存"></a>1、图片缓存</h4><p>问题:怎样设计一个图片缓存框架?</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-7c216c6023d26267.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片缓存框架"></p><ul><li>首先有Manager模块, 用以协调和调度框架内部各个模块</li><li>内存管理模块. 比如: 涉及图片缓存 就需要模拟计算机组成原理涉及到的多级缓存思想运用</li><li>图片磁盘缓存处理模块.</li><li>网络模块. 本地没有图片支持通过网络下载图片<br>以上构成基本图片框架,如果图片压缩, 保存图片需要解压缩的话,需要以下模块</li><li>codeManager 解码相关管理者.</li><li>图片解码模块.</li><li>图片压缩/解压缩模块.</li></ul><h4 id="2、图片读写"><a href="#2、图片读写" class="headerlink" title="2、图片读写"></a>2、图片读写</h4><h4 id="问题-图片通过什么方式进行读写-过程是怎样的"><a href="#问题-图片通过什么方式进行读写-过程是怎样的" class="headerlink" title="问题:图片通过什么方式进行读写,过程是怎样的?"></a>问题:图片通过什么方式进行读写,过程是怎样的?</h4><p>答:</p><ul><li>以图片URL的单向Hash值作为Key, 存储到图片对应框架中</li><li>图片读取按照多级缓存读取图片,提交查找效率</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-3b3bfc755582b9a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片读取流程"></p><h4 id="3、内存设计"><a href="#3、内存设计" class="headerlink" title="3、内存设计"></a>3、内存设计</h4><h4 id="问题-内存的设计上需要考虑哪些问题"><a href="#问题-内存的设计上需要考虑哪些问题" class="headerlink" title="问题:内存的设计上需要考虑哪些问题?"></a>问题:内存的设计上需要考虑哪些问题?</h4><p>答: </p><ul><li>存储的Size.  (内存存储空间大小)</li><li>淘汰策略. (有size限制, 后边再有新图片,需要有淘汰策略)</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-c47f702d574faaff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="存储size实现"></p><p><strong>存储Size</strong><br>需要考虑图片大小本身,以及不同图片大小的使用频率高低问题.<br>通过队列方式存取图片.</p><p><strong>淘汰策略:考虑两种方案</strong></p><ul><li>以队列先进先出的方式淘汰</li><li>模拟计算机中LRU(Least Recently Used 最近最少使用)算法. (如30分钟之内是否使用过)</li></ul><p>具体淘汰策略:<br>1&gt;定时检查.<br>2&gt;提高检查触发频率: 每次进行读写时  前后台切换时.<br>注意开销问题</p><p>补充: LRU算法是核心思想是：如果一个数据在最近一段时间都没有被用到，那么它在将来被使用到的可能性也很小。故当缓存空间已满的情况下，我们需要淘汰掉最久没有被访问到的数据。理想的LRU算法读写是时间复杂度应该都为O(1)。</p><h4 id="4、磁盘设计"><a href="#4、磁盘设计" class="headerlink" title="4、磁盘设计"></a>4、磁盘设计</h4><p>问题:磁盘设计需要考虑哪些问题?</p><ul><li>存储方式</li><li>大小限制(如100MB)</li><li>淘汰策略(如某一图片存储时间距今已超过7天)</li></ul><h4 id="5、网络设计"><a href="#5、网络设计" class="headerlink" title="5、网络设计"></a>5、网络设计</h4><p>问题:网络部分的设计需要考虑哪些问题?</p><ul><li>图片请求最大并发量 (比如同一时间最大请求数量,限定在10张或者20张)</li><li>请求超时策略 (比如超时,可以采取重试机制再去请求图片, 2次再失败先不请求这张图片)</li><li>请求优先级 (比如下载或者缓存的图片是否当前用户最紧急使用, 如果是请求优先级高些)</li></ul><h4 id="6、图片解码"><a href="#6、图片解码" class="headerlink" title="6、图片解码"></a>6、图片解码</h4><p>问题:对于不同格式图片,解码采用什么方式来做?</p><ul><li>应用<code>策略模式</code>对不同图片格式进行解码</li></ul><p>问题:在哪个阶段做图片解码处理?</p><ul><li>磁盘读取后 (从磁盘读取是未解码,放到内存中最好解码完成, 因为系统在显示图片前会在主线程进行图片解码操作,减少主线程压力)</li><li>网络请求返回后</li></ul><h4 id="7、线程处理"><a href="#7、线程处理" class="headerlink" title="7、线程处理"></a>7、线程处理</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-070dfa48c9314acd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="二、阅读时长统计"><a href="#二、阅读时长统计" class="headerlink" title="二、阅读时长统计"></a>二、阅读时长统计</h3><h4 id="1、框架设计"><a href="#1、框架设计" class="headerlink" title="1、框架设计"></a>1、框架设计</h4><p>问题:怎样设计一个时长统计框架?</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-ba5ffbc506e0fdb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="阅读时长框架"></p><p>1)记录器: 对每一条时长统计数据进行记录</p><ul><li>页面式记录器 :<br>常见场景:记录用户读取或者访问页面时长,一般从页面push开始作为阅读时长开始节点, pop后代表记录结束)</li><li>流式页面记录器 :<br>比如浏览微博flow流以及腾讯新闻, 头条新闻,这种新闻的阅读记录, 每条定义为流式记录器</li><li>自定义式记录器 :<br>比如实际业务开发,有不同业务场景,微博, 腾讯新闻横滑式新闻条目的播放,由业务方控制具体控制开始结束的逻辑</li></ul><p>2)记录管理者: 管理通过记录器记录的时长统计数据</p><ul><li>记录缓存 : </li><li>磁盘存储 : 用来维护和处理异常场景,可能到时内存缓存丢失问题</li><li>上传器 : 用来将本地所记录下来的时长数据上传给server端</li></ul><h4 id="2、记录的缓存-amp-存储"><a href="#2、记录的缓存-amp-存储" class="headerlink" title="2、记录的缓存&amp;存储"></a>2、记录的缓存&amp;存储</h4><p>1)问题: 为何要有不同类型记录器,你的考虑是什么?<br>答: 基于不同分类场景提供的关于记录的封装, 适配</p><p>2)问题:记录的数据会由于某种原因丢失, 你是怎样处理的?<br>(考察降低丢失率, 不是每条都不丢失)</p><ul><li>定时写磁盘<br>比如每满50条,进行磁盘写入</li><li>限定内存缓存条数(如10条), 超过该条数, 即写磁盘</li></ul><h4 id="3、记录上传器"><a href="#3、记录上传器" class="headerlink" title="3、记录上传器"></a>3、记录上传器</h4><p>问题: 关于延时上传的具体场景有哪些?</p><ul><li>前后台切换</li><li>从无网到有网的变化</li><li>通用的轻量接口捎带<br>如果以企业级实践方式落地, 建议使用前两种是最优的, 最后有耦合在里边.</li></ul><p>问题: 长传时机是怎样把控的?<br>答: </p><ul><li>立刻上传</li><li>延时上传</li><li>定时上传</li></ul><h3 id="三、复杂页面结构"><a href="#三、复杂页面结构" class="headerlink" title="三、复杂页面结构"></a>三、复杂页面结构</h3><ul><li>MVVM框架思想</li><li>ReactNative的数据流思想</li><li>系统UIView更新机制的思想</li><li>FaceBook的开源框架AsyncDisplayKit关于预排版的设计思想</li></ul><h4 id="1、MVVM"><a href="#1、MVVM" class="headerlink" title="1、MVVM"></a>1、MVVM</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-84965a6bf8b08960.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MVVM"></p><h4 id="2、ReactNative的数据流思想"><a href="#2、ReactNative的数据流思想" class="headerlink" title="2、ReactNative的数据流思想"></a>2、ReactNative的数据流思想</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-50c72b315de3b312.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RN数据流思想"></p><p>任何一个子孙节点是没有权利做自己的变化更新的, 它必须要把自己变化更新的消息传递给根节点, 由根节点自顶向下方式询问哪些需要更新.由主动行为变为被动行为.</p><h3 id="四、客户端整体架构"><a href="#四、客户端整体架构" class="headerlink" title="四、客户端整体架构"></a>四、客户端整体架构</h3><p>问题:你所在公司客户端整体架构是怎样的?如果让你设计,怎样设计客户端的整体架构?</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-99a1fe8749f69f5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="客户端整体架构"></p><ul><li><p>独立App的通用层<br>比如通用层中可以有时长统计框架, 崩溃统计, 网络的第三方库. 这一层架构放到任何一个App中都可以起到底层支撑作用, 独立于APP</p></li><li><p>通用业务层:<br>针对当前公司有某些通用的基础组件, 比如自定义布景控件, 特殊UIImageView的封装. 这些是和当前公司业务有关的, 对于整体App来说各个业务线对于通用控件都有需求,把这些内容沉降到通用业务层.</p></li><li><p>中间层: 协调解耦作用<br>为了实现业务A 业务B 业务C 业务D的解耦</p></li><li><p>各个业务代码</p></li></ul><p>问题:业务之间的解耦通信方式</p><ul><li>OpenURL</li><li>依赖注入</li></ul><p>中间层做业务A和业务C解耦, 业务C通过注入方式将自己注入到中间层, 业务A去中间层获取所依赖的方法或者成员变量.<br>例如: 中间层实现策略: 某一个业务方通过一个protocal注册到对应中间层中, 同时实现中间层代理方法返回给中间层一个具体实例对象. 业务A使用时, 可以通过事先和业务C商量的协议,从中间层中根据某一方法获取遵从某一协议的实例, 然后在业务A中把实例当做完全遵从协议透明对象来使用.</p><h3 id="五、架构框架面试总结"><a href="#五、架构框架面试总结" class="headerlink" title="五、架构框架面试总结"></a>五、架构框架面试总结</h3>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第9章 设计模式相关面试问题</title>
      <link href="/2020/05/26/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC9%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/26/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC9%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>注意：本文主讲设计模式相关面试问题，包括 常用六大设计原则、责任链、桥接、适配器、单例、命令。</p><h3 id="一、六大设计原则"><a href="#一、六大设计原则" class="headerlink" title="一、六大设计原则"></a>一、六大设计原则</h3><ul><li>单一职责原则</li><li>依赖倒置原则</li><li>开闭原则</li><li>里氏替换原则</li><li>接口隔离原则</li><li>迪米特法则</li></ul><h4 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1)单一职责原则"></a>1)单一职责原则</h4><ul><li>一个类只做一件事</li></ul><p>比如: UIView 和 CALayer关系, UIView只负责事件传递和事件响应,CALayer专门负责动画以及视图的展示</p><h4 id="2-依赖倒置原则"><a href="#2-依赖倒置原则" class="headerlink" title="2)依赖倒置原则"></a>2)依赖倒置原则</h4><ul><li>抽象接口不依赖于具体实现, 具体实现可以依赖于抽象接口</li></ul><p>比如定义一些处理数据访问,增删改查接口方法时,所有上层的业务调用都应该依赖于定义的抽象接口. 至于接口内部具体实现是用数据库,还是用文件,以及用plist, userdefault, 对上层业务来说是感知不到的, 这就体现了通过抽象接口反转依赖.对于上层业务只依赖于接口定义,比如增删改查,对于内部采用哪种存储方案,上层业务是不关注的.也没必要把具体存储方案暴露给使用方.</p><h4 id="3-开闭原则"><a href="#3-开闭原则" class="headerlink" title="3)开闭原则"></a>3)开闭原则</h4><ul><li>对修改关闭, 对扩展开放</li></ul><p>比如:定义一个类考虑后期扩展性和灵活性. 前期针对一个需求,要考虑多个版本的迭代需求. 对类的成员变量定义尽量谨慎,避免后面频繁修改这个类.类的数据结构定义后,后面就是根据需求提供接口问题, 包括子类继承.</p><h4 id="4-里氏替换原则"><a href="#4-里氏替换原则" class="headerlink" title="4)里氏替换原则"></a>4)里氏替换原则</h4><ul><li>父类可以被子类无缝替换, 且原有功能不受任何影响</li></ul><p>比如: KVO机制</p><h4 id="5-接口隔离原则"><a href="#5-接口隔离原则" class="headerlink" title="5)接口隔离原则"></a>5)接口隔离原则</h4><ul><li>使用多个专门的协议,而不是一个庞大臃肿的协议</li><li>协议中方法应当尽量少</li></ul><p>比如: UITableViewDelegate专门处理TableView回调代理事件<br>UITableViewDateSource专门用于获取TableView数据源</p><h4 id="6-迪米特法则"><a href="#6-迪米特法则" class="headerlink" title="6)迪米特法则"></a>6)迪米特法则</h4><ul><li>一个对象对其他对象有尽可能少的了解</li><li>高内聚,低耦合</li></ul><p>因为模块和模块之间, 要想解除耦合,体现出编码规范让对象尽量少的知道其他对象都有什么,包括成员变量,属性以及它的方法.</p><h3 id="二、责任链"><a href="#二、责任链" class="headerlink" title="二、责任链"></a>二、责任链</h3><p>责任链模式可以解决任务的依赖关系问题.</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-d2af1f8d4c951d63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="责任链类构成"></p><p>举例:<br>一个对象中有一个属性叫nextResponder, 该属性与当前对象属于同一个类, 当当前对象不能执行某个方法时, 就调用他的nextResponder来执行同样的方法, 将任务传递下去.<br>使用这种方式时, 当任务的依赖顺序发生改变时, 只需要调整其nextResponder的指向即可调整他的响应链顺序.<br>我们还可以根据后端给出的响应来动态调整响应链顺序, 系统中使用责任链的设计模式处理了UI事件的传递机制</p><h3 id="三、桥接"><a href="#三、桥接" class="headerlink" title="三、桥接"></a>三、桥接</h3><p><img src="https://upload-images.jianshu.io/upload_images/126164-45b465f8b33b3df1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="桥接 类构成"></p><p>使用者持有抽象的基类ClassA, ClassA持有抽象的基类B, 调用时, 根据需要将A1/A2/A3赋值给调用者原先持有的属性, 在将B1/B2/B3根据需求赋值给ClassA, 这样我们可以自由组合调用者和其内部的实际调用, 而作为桥梁的ClassA与ClassB本身不关心他们的实际调用.</p><p>问题:怎样理解桥接设计模式?(简单语言描述桥接模式是什么?)<br>桥接模式可以解决 列表和多套数据耦合的问题.</p><h3 id="四、适配器"><a href="#四、适配器" class="headerlink" title="四、适配器"></a>四、适配器</h3><p>一个现有类需要适应变化的问题<br>适配器分为: <code>对象适配器</code>   类适配器. </p><p><img src="https://upload-images.jianshu.io/upload_images/126164-3a549d9a7e027394.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对象适配器 类构成"></p><p>当我们有个一个年代久远的基类, 我们不便对其添加对象和方法时, 我们就可以为其添加<code>适配器</code>, 使一个类持有该基类, 在调用这个基类的前后我们可以插入自己的代码, 来适配新的需求. 这也就是做了一次简单的封装.</p><pre><code>- (void)request{  //适配逻辑  [被适配对象 某方法] //适配逻辑}</code></pre><h3 id="五、单例模式"><a href="#五、单例模式" class="headerlink" title="五、单例模式"></a>五、单例模式</h3><ol><li>在单例方法中创建实例使用</li></ol><pre><code>[[super allocWithZone:Null] init];</code></pre><ol start="2"><li>重写自身的allocWithZone方法在其内部调用单例方法保证创建永远是一个单例</li><li>遵守Copy协议, 重写copyWithZone方法, 返回self, 令其不能被copy</li></ol><h3 id="六、命令模式"><a href="#六、命令模式" class="headerlink" title="六、命令模式"></a>六、命令模式</h3><p>问题:命令模式主要表达的是什么?我们一般用命令模式干什么?</p><ul><li>命令模式用来做 <code>行为参数化</code></li><li>命令模式用来 <code>减低代码重合度</code></li></ul><p>我们可以将一些事件拆分开来, 事件的执行及其回调上下文等封装成commend对象, 调用commend的管理者封装为Manager单例对象, 以此来减少代码的分散, 调用时被转换成, 生成命令, 中央管理器执行命令的命令模式. 这和NSUrlSession使用的task模式类似, 创建task, 执行task的感觉</p><h3 id="设计模式面试总结："><a href="#设计模式面试总结：" class="headerlink" title="设计模式面试总结："></a>设计模式面试总结：</h3><ol><li><p>你都知道哪些设计原则, 请谈谈你的理解?<br>答: 单一职责原则, 依赖倒置原则, 开闭原则, 里氏替换原则, 接口隔离原则, 迪米特法则.</p></li><li><p>能否用一幅图简单的表示桥接模式的主体结构?</p></li><li><p>UI事件的传递机制是怎样实现的?你对其中运用到的设计模式是怎样理解的?<br>答:<br>UI视图角度回答<br>设计模式角度回答 -&gt; 责任链模式.</p></li><li><p>手写单例实现<br>重写allcoWithZone/copyWithZone方法, 使用[super allocWithZone:]创建单例</p></li></ol><pre><code>+ (id)sharedInstance {    // 静态局部变量    static Mooc *instance = nil;    // 通过dispatch_once方式 确保instance在多线程环境下只被创建一次    static dispatch_once_t onceToken;    dispatch_once(&amp;onceToken, ^{        // 创建实例        instance = [[super allocWithZone:NULL] init];    });    return instance;}// 重写方法【必不可少】+ (id)allocWithZone:(struct _NSZone *)zone{    return [self sharedInstance];}// 重写方法【必不可少】- (id)copyWithZone:(nullable NSZone *)zone{    return self;}</code></pre>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第8章 网络相关面试问题</title>
      <link href="/2020/05/25/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC8%E7%AB%A0-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/25/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC8%E7%AB%A0-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>注意：本文主讲网络相关面试问题，包括HTTP协议、HTTPS协议与网络安全、TCP/UDP区别、DNS解析。</p><h3 id="一、HTTP协议（超文本传输协议）"><a href="#一、HTTP协议（超文本传输协议）" class="headerlink" title="一、HTTP协议（超文本传输协议）"></a>一、HTTP协议（超文本传输协议）</h3><p><strong>HTTP协议主要包含内容:</strong><br>请求/响应报文、连接建立流程、HTTP特点。</p><h4 id="1、请求-响应报文"><a href="#1、请求-响应报文" class="headerlink" title="1、请求/响应报文"></a>1、请求/响应报文</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-f8330a4b8eb3d379.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="请求报文格式"></p><p>请求报文格式:<br>请求方法  +请求URL +协议版本+请求首子段键值对 +报文主体（一般在请求中是没有报文主体的）</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-29eed0aee3bbc091.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="响应报文格式"><br>响应报文格式:<br>协议版本 +状态吗 +响应首字段 +响应报文主体</p><p>1)、http的请求方式都有哪些？<br>GET、POST、HEAD、PUT、DELETE、OPTIONS</p><p>(2)、GET和POST方式的区别?<br>初级工程师回答<br>1&gt;、GET请求参数以？分割拼接到URL后面，POST请求参数在Body里面。<br>2&gt;、GET参数长度限制2048个字符，POST一般没有该限制。<br>3&gt;、GET请求不安全，POST请求比较安全。</p><p>高级工程师回答，从语义的角度回答（标准答案）<br>(语义:指的协议的定义规范. 语法:具体实现手段或者路径)</p><ul><li>GET：获取资源。安全的、幂等的、可缓存的。</li><li><p>POST：处理资源。非安全的、非幂等的、不可缓存的。</p></li><li><p>安全性：不应该引起Server端的任何状态变化。常见安全性的请求方式  ：get、head、options</p></li><li>幂等性：同一个请求方法执行多次和执行一次的效果完全相同。常见幂等性的请求方式 ：get、put、delete</li><li>可缓存性：请求是否可以被缓存。（代理服务器可以做缓存，多次请求时可能是获取的缓存）。常见可缓存性的请求方式：get、head</li></ul><p>(3)、你都了解哪些状态码，他们的含义是什么？<br>1xx：<br>2xx：响应成功（200）<br>3xx：网络重定向（301、302）<br>4xx：客户端发起请求出错，服务器没有相应（401、404）<br>5xx：服务器出错(502 503)</p><h4 id="2、连接建立流程"><a href="#2、连接建立流程" class="headerlink" title="2、连接建立流程"></a>2、连接建立流程</h4><ul><li>三次握手、四次挥手<br><img src="https://upload-images.jianshu.io/upload_images/126164-38204568f9700295.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li></ul><h4 id="3、HTTP的特点：无连接、无状态。"><a href="#3、HTTP的特点：无连接、无状态。" class="headerlink" title="3、HTTP的特点：无连接、无状态。"></a>3、HTTP的特点：无连接、无状态。</h4><h5 id="1-、无连接-指的是http的连接有建立和释放连接的过程。"><a href="#1-、无连接-指的是http的连接有建立和释放连接的过程。" class="headerlink" title="(1)、无连接: 指的是http的连接有建立和释放连接的过程。"></a>(1)、无连接: 指的是http的连接有建立和释放连接的过程。</h5><p>解决方案：HTTP的持久连接。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-e831dc5841fdadb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>1&gt;、持久连接头部字段：<br>Connection：keep-alive (允许持久连接)<br>time：20 （持久连接连接时长）<br>max:10 （该http连接最多可以发生多少次请求）</p><p>2&gt;、怎样判断一个请求是否结束？<br>Content-length ：1024 （响应头）<br>chunked，最后会有一个空的chunked，server会给客户端返回多次响应，根据判断响应报文的头部字段chunked是否为空，为空则表示没有后续了。</p><h5 id="2-、无状态-多次发送http请求-如果是同一个用户对于server端是不知道是同一个用户的。"><a href="#2-、无状态-多次发送http请求-如果是同一个用户对于server端是不知道是同一个用户的。" class="headerlink" title="(2)、无状态: 多次发送http请求,如果是同一个用户对于server端是不知道是同一个用户的。"></a>(2)、无状态: 多次发送http请求,如果是同一个用户对于server端是不知道是同一个用户的。</h5><p>解决方案：cookie、session。</p><p>问题: Charles抓包原理是咋样的？<br>利用HTTP中间人攻击漏洞实现的。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-28ca6db74d89e36b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="二、HTTPS协议与网络安全"><a href="#二、HTTPS协议与网络安全" class="headerlink" title="二、HTTPS协议与网络安全"></a>二、HTTPS协议与网络安全</h3><h4 id="1、HTTPS和HTTP有怎样的区别？"><a href="#1、HTTPS和HTTP有怎样的区别？" class="headerlink" title="1、HTTPS和HTTP有怎样的区别？"></a>1、HTTPS和HTTP有怎样的区别？</h4><p>HTTPS = HTTP+SSL/TLS。HTTPS是安全版的HTTP， 是由一个SSL/TLS，插在传输层之上，应用层之下的协议来保证的。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-d13e2d2aec641b4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="https协议栈"></p><h4 id="2、HTTPS连接建立流程："><a href="#2、HTTPS连接建立流程：" class="headerlink" title="2、HTTPS连接建立流程："></a>2、HTTPS连接建立流程：</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-1f8fbef61877a63b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="https连接建立流程"></p><p>HTTPS连接过程大致可分为八步:</p><ul><li>1、客户端访问HTTPS连接。</li></ul><p>客户端会把安全协议版本号、客户端支持的加密算法列表、随机数C发给服务端。</p><ul><li>2、服务端发送证书给客户端</li></ul><p>服务端接收密钥算法配件后，会和自己支持的加密算法列表进行比对，如果不符合，则断开连接。否则，服务端会在该算法列表中，选择一种对称算法（如AES）、一种公钥算法（如具有特定秘钥长度的RSA）和一种MAC算法发给客户端。</p><p>服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。<br>在发送加密算法的同时还会把数字证书和随机数S发送给客户端</p><ul><li>3、客户端验证server证书</li></ul><p>会对server公钥进行检查，验证其合法性，如果发现发现公钥有问题，那么HTTPS传输就无法继续。</p><ul><li>4、客户端组装会话秘钥</li></ul><p>如果公钥合格，那么客户端会用服务器公钥来生成一个前主秘钥(Pre-Master Secret，PMS)，并通过该前主秘钥和随机数C、S来组装成会话秘钥</p><ul><li>5、客户端将前主秘钥加密发送给服务端</li></ul><p>是通过服务端的公钥来对前主秘钥进行非对称加密，发送给服务端</p><ul><li>6、服务端通过私钥解密得到前主秘钥</li></ul><p>服务端接收到加密信息后，用私钥解密得到主秘钥。</p><ul><li>7、服务端组装会话秘钥</li></ul><p>服务端通过前主秘钥和随机数C、S来组装会话秘钥。<br>至此，服务端和客户端都已经知道了用于此次会话的主秘钥。</p><ul><li>8、数据传输</li></ul><p>客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。</p><p>同理，服务端收到客户端发送来的密文，用服务端密钥对其进行对称解密，得到客户端发送的数据。</p><p>(1)、会话秘钥：<br>会话秘钥 = random S + random C + 预主秘钥</p><p>(2)、https都使用了哪些加密手段？为什么?<br>1&gt;、连接建立过程使用<code>非对称加密</code>，非对称加密很<code>耗时</code>的。<br>2&gt;、后续通讯过程使用<code>对称加密</code>。</p><p>(3)、对称加密(AES)：</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-259c39f44c0bb106.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对称加密"></p><p>(4)、非对称加密(RSA)：</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-4d072f1a95572058.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="非对称加密"></p><h3 id="三、TCP-UDP区别"><a href="#三、TCP-UDP区别" class="headerlink" title="三、TCP/UDP区别"></a>三、TCP/UDP区别</h3><h4 id="1、UDP-用户数据报协议"><a href="#1、UDP-用户数据报协议" class="headerlink" title="1、UDP(用户数据报协议)"></a>1、UDP(用户数据报协议)</h4><p>特点：无连接；尽最大努力交付（不保证可靠传输）；面向报文（既不合并，也不拆分）。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-5cc3ae9f8f3bf500.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>功能：复用、分用；差错检测。<br><img src="https://upload-images.jianshu.io/upload_images/126164-6415c9c69ba22b0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="复用分用"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-8624373e5151349a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="差错检测"></p><h4 id="2、TCP-传输控制协议"><a href="#2、TCP-传输控制协议" class="headerlink" title="2、TCP(传输控制协议)"></a>2、TCP(传输控制协议)</h4><p>特点：面向连接；可靠传输；面向字节流；流量控制；拥塞控制。</p><h5 id="1-、面向连接"><a href="#1-、面向连接" class="headerlink" title="(1)、面向连接"></a>(1)、面向连接</h5><p>数据传输开始之前, 需要建立连接。<br>三次握手<br>数据传输结束之后, 需要释放连接。<br>四次挥手</p><p>问题:TCP三次握手为什么不是两次?为什么要进行三次握手<br>答:<br>三次握手原因（不是两次握手原因）：当客户端发送连接报文时，当出现网络超时时，会启动超时重发策略，服务端同时也会返回超时重发的报文，当客户端收到的报文是超时重发的，会取消和服务端创建连接，只保证会创建一个TCP连接。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-28a4ebf5c23fd668.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-b9cdb97ccf6e1e4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h5 id="2-、可靠传输"><a href="#2-、可靠传输" class="headerlink" title="(2)、可靠传输"></a>(2)、可靠传输</h5><p>如何保证可靠传输：保证我们的报文 -&gt;无差错、不丢失、不重复、按序到达<br>如何实现可靠传输：通过停止等待协议实现。<br>停止等待协议四方面: 无差错情况、超时重发、确认丢失、确认迟到。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-fd8a4bf011779236.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无差错情况"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-27e898fc3f9775c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="超时重传"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-fd89f7e7b5d4e4ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="确认丢失"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-7a0d3e782a7bb920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="确认迟到"></p><h5 id="3-、面向字节流"><a href="#3-、面向字节流" class="headerlink" title="(3)、面向字节流"></a>(3)、面向字节流</h5><p><img src="https://upload-images.jianshu.io/upload_images/126164-6d5278e222b608d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="面向字节流"></p><ul><li>每次发送多少个字节是由TCP控制的</li><li>不管发送方一次性提交给TCP的缓冲是多大的数据, 对于TCP本身来说它会根据实际情况来划分, 并不是发送方发送了10个字节,就把10个字节一次性发给接收方,可能会把10字节拆分成3个字节和7个字节分两次发送给接收方,这个就是面向字节流概念. </li><li>可以和UDP面向报文特点比较</li></ul><h5 id="4-、流量控制"><a href="#4-、流量控制" class="headerlink" title="(4)、流量控制"></a>(4)、流量控制</h5><p><img src="https://upload-images.jianshu.io/upload_images/126164-624b52eaa3d21e99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流量控制"></p><ul><li>滑动窗口协议: 发送方定义为客户端, 接收方为server端. 当发送数据, 如果接收方接收缓存没那么大,<code>接收窗口</code>很小,此时<code>发送方窗口</code>很大,会以更快速率往接收方发送数据,需要由<code>接收窗口</code>通过TCP报文首部字段中更改窗口值,调整发送方发送速率.</li></ul><h5 id="5-、拥塞控制"><a href="#5-、拥塞控制" class="headerlink" title="(5)、拥塞控制"></a>(5)、拥塞控制</h5><p>慢开始、拥塞避免(策略)；<br>快恢复、快重传(策略)。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-cb3d19bafeea07d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拥塞控制"><br>横轴:交互次数或者轮询次数   纵轴:窗口值大小</p><p>问题:请简单描述TCP慢启动特点?<br>答:考察TCP慢开始、拥塞避免策略</p><p>问题:什么是TCP? TCP的理解是怎样?<br>答:根据TCP五大特点回答.</p><h3 id="四、DNS解析"><a href="#四、DNS解析" class="headerlink" title="四、DNS解析"></a>四、DNS解析</h3><h4 id="1、了解DNS解析"><a href="#1、了解DNS解析" class="headerlink" title="1、了解DNS解析"></a>1、了解DNS解析</h4><p>问题:是否了解DND解析?DNS解析是怎样的过程?</p><p>DNS解析: 域名到IP地址的映射，DNS解析请求采用<code>UDP数据报</code>，且<code>明文解析</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-d485f8d2b609da87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2、DNS解析查询方式"><a href="#2、DNS解析查询方式" class="headerlink" title="2、DNS解析查询方式"></a>2、DNS解析查询方式</h4><p>(1)、递归查询</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-9428c0d36e58e81e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="递归查询"></p><p>(2)、迭代查询</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-334490bd9f6d24fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="迭代查询"></p><h4 id="3、DNS解析存在哪些常见的问题？"><a href="#3、DNS解析存在哪些常见的问题？" class="headerlink" title="3、DNS解析存在哪些常见的问题？"></a>3、DNS解析存在哪些常见的问题？</h4><ul><li>DNS劫持问题</li><li>DNS解析转发问题</li></ul><h5 id="1-、DNS劫持问题"><a href="#1-、DNS劫持问题" class="headerlink" title="(1)、DNS劫持问题"></a>(1)、DNS劫持问题</h5><p><img src="https://upload-images.jianshu.io/upload_images/126164-729192d91d4f880c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DNS劫持"></p><p>问题: DNS劫持与HTTP的关系是咋样的？<br>答: 没有关系。<br>(1)、DNS解析发生在HTTP建立连接之前；<br>(2)、DNS解析请求使用UDP数据报，端口号53。</p><h5 id="2-、DNS解析转发问题"><a href="#2-、DNS解析转发问题" class="headerlink" title="(2)、DNS解析转发问题"></a>(2)、DNS解析转发问题</h5><p><img src="https://upload-images.jianshu.io/upload_images/126164-6631090e31a1f5fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DNS解析转发"></p><p>问题: 怎样解决DNS劫持？<br>答: 两种解决方案: httpDNS 和长连接</p><p>1&gt;、httpDNS<br>DNS解析实质上 ,使用DNS协议向DNS服务器<code>53端口</code>进行请求 –&gt;<br>使用httpDNS ,实质上使用HTTP协议向DNS服务器<code>80端口</code>进行请求,<br>不产生正常的DNS解析了,也就不涉及到DNS劫持问题.</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-9ba9287280cd8fad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="httpDNS解决DNS劫持问题流程"></p><p>2&gt;、长连接<br><img src="https://upload-images.jianshu.io/upload_images/126164-3facde5f0d0e72c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/450" alt="长连接解决DNS劫持问题"></p><ul><li>长连server理解为代理服务器.</li><li>客户端和长连server可以建立TCP的长连通道.(客户端发送http请求,可以通过长连通道把http请求传给长连server.)</li><li>长连server通过内网专线进行内网的DNS的解析,这样就规避了公网DNS解析问题.</li></ul><h3 id="五、Session-Cookie"><a href="#五、Session-Cookie" class="headerlink" title="五、Session/Cookie"></a>五、Session/Cookie</h3><ul><li>Session/Cookie 是对HTTP协议无状态特点的补偿.</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-e93614181c6b32e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="1-gt-、Cookie"><a href="#1-gt-、Cookie" class="headerlink" title="1&gt;、Cookie"></a>1&gt;、Cookie</h4><p>问题:什么是Cookie?<br>Cookie主要用来记录用户状态, 区分用户; <code>状态保存在客户端</code>.</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-056524edb367faf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>1、怎样设置Cookie？<br>(1)、 客户端发送的Cookie在http请求报文的Cookie首部字段中；<br>(2)、 服务器端设置http响应报文的Set-Cookie首部字段, 向客户端传递Cookie内容。</p><p>2、怎样修改Cookie？<br>(1)、新Cookie覆盖旧Cookie。<br>(2)、覆盖规则：请求头部字段 name、path、domain等需要与原Cookie一致。</p><p>3、怎样删除Cookie？<br>(1)、新Cookie覆盖旧Cookie。<br>(2)、覆盖规则：name、path、domain等需要与原Cookie一致。<br>(3)、设置Cookie的<code>expires=过去的一个时间点</code>，或者<code>maxAge=0</code>。</p><p>4、怎样保证Cookie的安全？<br>(1)、对Cookie进行加密处理。(会有脚本攻击获取Cookie)<br>(2)、只在HTTPS上携带Cookie。<br>(3)、设置Cookie为httpOnly，防止跨站脚本攻击。</p><h4 id="2-gt-、Session"><a href="#2-gt-、Session" class="headerlink" title="2&gt;、Session"></a>2&gt;、Session</h4><p>Session也是用来记录用户状态，区分用户的；<code>状态存放在服务器端</code>。<br>Session和Cookie的关系是怎样的？Session需要依赖于Cookie机制。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-90b343008d182b0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Session工作流程"></p><h3 id="六、网络相关面试问题总结："><a href="#六、网络相关面试问题总结：" class="headerlink" title="六、网络相关面试问题总结："></a>六、网络相关面试问题总结：</h3><p>1、HTTP中的get和post方式有什么区别？<br>答: 见上文</p><p>2、HTTPS连接建立的流程是咋样的？<br>答: </p><p>3、TCP和UDP有什么区别？<br>答:(可以从特点和功能回答)<br>TCP：面向连接；可靠传输；面向字节流；流量控制；拥塞控制。<br>UDP：复用、分用；差错检测 基本的传输功能。 无连接；尽最大努力交付（不保证可靠传输）；面向报文（既不合并，也不拆分）。</p><p>4、请简述TCP的慢开始过程？<br>答: TCP慢开始、拥塞避免策略回答</p><p>5、客户端怎样避免DNS劫持？<br>答: 两种解决方案: httpDNS 和长连接</p>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第7章 RunLoop相关面试问题</title>
      <link href="/2020/05/25/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC7%E7%AB%A0-RunLoop%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/25/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC7%E7%AB%A0-RunLoop%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote><p>本文主讲RunLoop相关面试问题，包括RunLoop概念、数据结构、事件循环机制、RunLoop与NSTimer、RunLoop与多线程。</p></blockquote><h3 id="一、RunLoop概念"><a href="#一、RunLoop概念" class="headerlink" title="一、RunLoop概念"></a>一、RunLoop概念</h3><h4 id="1、-问题-什么是RunLoop"><a href="#1、-问题-什么是RunLoop" class="headerlink" title="1、 问题:什么是RunLoop?"></a>1、 问题:什么是RunLoop?</h4><p>答:RunLoop是通过<code>内部维护</code>的事件循环来对<code>事件/消息进行管理</code>的一个对象。<br>1、没有消息需要处理时，休眠以避免资源占有。<br>2、有消息需要处理时，立刻被唤醒。</p><h4 id="2、EventLoop"><a href="#2、EventLoop" class="headerlink" title="2、EventLoop"></a>2、EventLoop</h4><p>没有消息需要被处理时, 系统会将当前线程所有权转化为<code>内核态</code>, 当有消息需要处理时, 系统会将当前线程的状态切换回<code>用户态</code>.<br>所以RunLoop的循环并不是一个单纯的死循环, 而是通过状态切换, 达到没有消息时休眠, 有消息时唤醒的这样一个事件循环机制.</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-d6ea92beb6fa5859.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="EventLoop"></p><h5 id="在没有消息处理时，休眠以避免资源占用，它的状态切换是怎么样的"><a href="#在没有消息处理时，休眠以避免资源占用，它的状态切换是怎么样的" class="headerlink" title="在没有消息处理时，休眠以避免资源占用，它的状态切换是怎么样的?"></a>在没有消息处理时，休眠以避免资源占用，它的状态切换是怎么样的?</h5><ul><li><p>没有消息处理 是从<code>用户态</code>通过系统调用进入<code>内核态</code>.<br>也就是当没有消息要处理时，进程或者说线程会进入一个休眠状态，而休眠状态的一个过渡相当于是把当前线程的控制权转移给了<code>内核态</code></p></li><li><p>当有消息需要处理时就会被立刻唤醒<br>实际上就是由<code>内核态</code>到<code>用户态</code>的一个状态切换</p></li></ul><h5 id="用户态和内核态的介绍："><a href="#用户态和内核态的介绍：" class="headerlink" title="用户态和内核态的介绍："></a>用户态和内核态的介绍：</h5><ul><li>应用程序一般都是运行在<code>用户态</code>上面，也就是用户进程包括开发所使用的绝大多数的 API 都是针对于用户层面的.</li><li>而当发生了系统调用，需要使用一些关于操作系统，以及一些底层内核相关的一些指令或者 API 的话，就触发了系统调用，而有些系统调用就会发生状态空间的切换，这种切换空间或者说之所以区分<code>用户态</code>和<code>内核态</code>实际上是对·计算机的一些资源调度·，包括资源管理进行一个统一或者说一致性的操作，这样的话就可以合理的安排资源调度，包括可以避免一些特殊的异常</li><li>比如说在内核态往往有一些线性指令，中断，包括一些开机关机的一些操作，如果说每一个用户进程可以假想是一个 app，每一个 app 都可以促使当前用户手机关机或者说中断，这种场景是无法想象的，所以要有一个用户态到内核态上面的一个区分，同时内核态里面的一些内容可以对用户态当中的一些线程进行调度和管理包括进程间的一些通信</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-292007f1fa1eb6ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h5 id="问题-main函数为什么能保证一直运行状态不退出"><a href="#问题-main函数为什么能保证一直运行状态不退出" class="headerlink" title="问题:main函数为什么能保证一直运行状态不退出?"></a>问题:main函数为什么能保证一直运行状态不退出?</h5><p>答:</p><ul><li>在main函数中调用UIApplicationMain()函数, 这个函数内部会启动一个主线程的RunLoop</li><li>RunLoop是对事件循环的维护机制, 可以不断的接收消息，比如说点击屏幕的事件，滑动列表，及处理网络请求的返回，那么接收消息之后对这个事件进行处理，处理完之后就会再进行等待, 通过用户态到内核态的切换, 从而避免资源占用, 让当前线程处于休眠状态.</li><li>注意:等待 != 死循环 ，RunLoop的循环通过状态切换, 达到没有消息时休眠,用户态切换到内核态,有消息时唤醒,内核态切换到用户态的这样一个事件循环机制</li></ul><h5 id="什么是事件循环，事件循环的机制是怎样的？"><a href="#什么是事件循环，事件循环的机制是怎样的？" class="headerlink" title="什么是事件循环，事件循环的机制是怎样的？"></a>什么是事件循环，事件循环的机制是怎样的？</h5><ul><li>维护的事件循环可以用来不断的处理消息或者说事件，对他们进行管理</li><li>同时当没有消息需要管理时用从用户态切换到内核态，由此可以用来进行当前线程的休眠，然后避免资源占用</li><li>同时当有消息需要处理时，会发生从内核态到用户态的切换，然后当前的用户线程会被唤醒</li><li>所以状态的切换才是 RunLoop 的关键点</li></ul><h3 id="二、RunLoop的数据结构"><a href="#二、RunLoop的数据结构" class="headerlink" title="二、RunLoop的数据结构"></a>二、RunLoop的数据结构</h3><p><a href="http://opensource.apple.com/tarballs/CF/CF-855.17.tar.gz" target="_blank" rel="noopener">RunLoop开源代码地址</a><br>在 OC 中实际提供了两个 RunLoop 的。<br>一个是 NSRunLoop，一个是 CFRunLoop。<br>NSRunLoop 是对 CFRunLoop 的封装，提供了一些面向对象的 API。<br>NSRunLoop 是位于 Foundation 当中的，CFRunLoop 位于 CoreFoundation 当中的。</p><p>RunLoop 的数据结构主要有三个：</p><ul><li>CFRunLoop</li><li>CFRunLoopMode</li><li>Source/Timer/Observer</li></ul><p>####1、CFRunLoop</p><ul><li><p>CFRunLoop数据结构 由五部分组成: pthread 、currentMode、modes、commonModes、commonModeItems<br><img src="https://upload-images.jianshu.io/upload_images/126164-83444fdff9ced225.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CFRunLoop数据结构"></p><pre><code>//源码struct __CFRunLoop {  CFMutableSetRef _commonModes;     // Set  CFMutableSetRef _commonModeItems; // Set  CFRunLoopModeRef _currentMode;    // Current Runloop Mode  CFMutableSetRef _modes;           // Set  ...};</code></pre></li><li><p>(1)、pthread：一一对应(RunLoop和线程的关系)</p></li><li>(2)、currentMode：CFRunLoopMode</li><li>(3)、modes：NSMutableSet&lt;CFRunLoopMode*&gt;</li><li>(4)、commonModes：NSMutableSet&lt;NSString*&gt;<pre><code>1&gt;、commonMode不是实际存在的一种Mode。2&gt;、是同步Source/Timer/Observer到多个Mode中的一种技术方案。</code></pre></li><li>(5)、commonModeItems：包含Observer、Timer、Source</li></ul><h4 id="2、CFRunLoopMode数据结构"><a href="#2、CFRunLoopMode数据结构" class="headerlink" title="2、CFRunLoopMode数据结构"></a>2、CFRunLoopMode数据结构</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-fab6921abd9ab7d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CFRunLoopMode数据结构"></p><pre><code>//源码struct __CFRunLoopMode {    CFStringRef _name;            // Mode Name, 例如 @&quot;kCFRunLoopDefaultMode&quot;    CFMutableSetRef _sources0;    // Set    CFMutableSetRef _sources1;    // Set    CFMutableArrayRef _observers; // Array    CFMutableArrayRef _timers;    // Array    ...};</code></pre><ul><li>name:  对应某一个runloopMode名称(如 NSDefaultRunLoopMode)</li><li>sources0: MutableSet 集合类型数据结构</li><li>sources1: MutableSet 集合类型数据结构</li><li>observers: MutableArray</li><li>timers:  MutableArray </li></ul><h4 id="3、Source-Timer-Observer"><a href="#3、Source-Timer-Observer" class="headerlink" title="3、Source/Timer/Observer"></a>3、Source/Timer/Observer</h4><ul><li>在 CF 框架当中官方名称叫 CFRunLoopSource ，有两种 source0 和 source1<br>唤醒线程就是从内核态切换到用户态<h5 id="1-gt-、CFRunLoopSource"><a href="#1-gt-、CFRunLoopSource" class="headerlink" title="1&gt;、CFRunLoopSource"></a>1&gt;、CFRunLoopSource</h5>source0：需要手动唤醒线程。<br>source1：具备唤醒线程的能力。</li></ul><p>source0:  非系统事件.<br>只包含了一个回调（函数指针），它并不能主动触发事件。使用时，你需要先调用 CFRunLoopSourceSignal(source)，将这个 Source 标记为待处理，然后手动调用 CFRunLoopWakeUp(runloop) 来唤醒 RunLoop，让其处理这个事件。</p><p>source1 ： 系统事件<br>包含了一个 mach_port和一个回调（函数指针），被用于通过内核和其他线程相互发送消息。这种 Source 能主动唤醒 RunLoop 的线程</p><h5 id="2-gt-、CFRunLoopTimer"><a href="#2-gt-、CFRunLoopTimer" class="headerlink" title="2&gt;、CFRunLoopTimer"></a>2&gt;、CFRunLoopTimer</h5><p>基于事件的定时器，和NSTimer是toll-free bridged的。和平时所使用的 NSTimer 是具备免费桥转换的</p><h5 id="3-gt-、CFRunLoopObserver"><a href="#3-gt-、CFRunLoopObserver" class="headerlink" title="3&gt;、CFRunLoopObserver"></a>3&gt;、CFRunLoopObserver</h5><p>某个observer可以监听runloop的状态变化，并作出一定反应。</p><p>观测时间点</p><ul><li>KCFRunLoopEntry (RunLoop入口时机)</li><li>KCFRunLoopBeforeTimers (通知观察者RunLoop将要对timer一些相关事件进行处理)</li><li>KCFRunLoopBeforeSources (将要对处理一些sources事件)</li><li>KCFRunLoopBeforeWaiting (通知观察者RunLoop将要进入休眠状态, 即将要发用户态到内核态切换)</li><li>KCFRunLoopAfterWaiting (内核态到用户态切换不久)</li><li>KCFRunLoopExit (RunLoop退出通知)</li></ul><p>可以通过注册一些 Observer 来实现对 RunLoop 的一些相关时间点的监测或者观察。</p><h4 id="4、各个数据结构之间关系"><a href="#4、各个数据结构之间关系" class="headerlink" title="4、各个数据结构之间关系"></a>4、各个数据结构之间关系</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-7307b9d19dfe930a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据结构之间关系"><br>问题:RunLoop 和Mode以及 Mode和其对应的 Source ,Timer , Observer 有什么关系?<br>答: </p><ul><li>一个runLoop可以有多个mode, 一对多关系</li><li>mode 和Source, Timer, Observer 是一对多的关系<br>可以看到, 一个RunLoop可以有多个Mode, 而每个Mode中又可以存放多个不同的事件, 我们在切换Mode时, 其他Mode的事件将不会被响应.</li></ul><h4 id="5、RunLoop的Mode"><a href="#5、RunLoop的Mode" class="headerlink" title="5、RunLoop的Mode"></a>5、RunLoop的Mode</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-ef18ec3d8cba314f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>Runloop Mode 实际上是 Source，Timer 和 Observer 的集合，不同的 Mode 把不同组的 Source，Timer 和 Observer 隔绝开来。Runloop 在某个时刻只能跑在一个 Mode 下，处理这一个 Mode 当中的 Source，Timer 和 Observer。</p><p>苹果文档中提到的 Mode 有五个，分别是：</p><ul><li>NSDefaultRunLoopMode：默认的mode，正常情况下都是在这个mode</li><li>NSConnectionReplyMode</li><li>NSModalPanelRunLoopMode</li><li>NSEventTrackingRunLoopMode：使用这个Mode去跟踪来自用户交互的事件（比如UITableView上下滑动）</li><li>NSRunLoopCommonModes</li></ul><p>iOS 中公开暴露出来的只有 <code>NSDefaultRunLoopMode</code> 和 <code>NSRunLoopCommonModes</code>。 NSRunLoopCommonModes 实际上是一个 Mode 的集合，默认包括 NSDefaultRunLoopMode 和 NSEventTrackingRunLoopMode。</p><p>问题:RunLoop为什么会有多个mode?<br>答：</p><h4 id="6、CommonModes的特殊性"><a href="#6、CommonModes的特殊性" class="headerlink" title="6、CommonModes的特殊性"></a>6、CommonModes的特殊性</h4><p>NSRunLoopCommonModes<br>(问题:CommonModes是否使用过, 你对CommonModes事怎样理解?)</p><ul><li>CommonModes<code>不是实际存在</code>的一种Mode</li><li>是同步Source/Timer/Observer到多个Mode中的<code>一种技术方案</code></li></ul><p>在 OC 当中经常会通过 NSRunLoopCommonModes 字符串常量来表达 CommonMode。</p><ul><li>CommonModes实现：一个 Mode 可以将自己标记为”Common”属性（通过将其 ModeName 添加到 RunLoop 的 “commonModes” 中）。每当 RunLoop 的内容发生变化时，RunLoop 都会自动将 _commonModeItems 里的 Source/Observer/Timer 同步到具有 “Common” 标记的所有Mode里。</li></ul><h3 id="三、RunLoop事件循环机制的实现"><a href="#三、RunLoop事件循环机制的实现" class="headerlink" title="三、RunLoop事件循环机制的实现"></a>三、RunLoop事件循环机制的实现</h3><p>在开发过程中调用的 NSRunLoop 的 run 系列的相关方法以及 CFRunLoop 的相关的 run 方法最终都会调用到 CFRunLoopRun() 函数</p><p><img src="//upload-images.jianshu.io/upload_images/6751716-aab2f6686479c01a.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt=""></p><h4 id="1-事件循环的整体逻辑："><a href="#1-事件循环的整体逻辑：" class="headerlink" title="1 事件循环的整体逻辑："></a>1 事件循环的整体逻辑：</h4><p>1）在 RunLoop 启动之后首先会发出一条通知来告诉观察者当前 RunLoop 即将启动<br>2）之后 RunLoop 将要处理 Timer/Sources0 事件，发出通知<br>3）进入正式 Sources0 的处理<br>4）如果有 Sources1 需要处理，这个时候会用过一条 goto 语句来进行代码逻辑的跳转，来处理唤醒时收到的消息<br>5）如果没有 Source1要处理，此时线程将要休眠，同时也会发送通知给 Observe，然后就发生了用户带到内核态的切换<br>6）线程正式进入休眠，等待唤醒<br>7）之后线程被唤醒，也要发送一个通知，通知观察着说当前线程被唤醒了，然后处理唤醒时受到的消息，之后又会回到第二步</p><h4 id="2-当处于休眠的runloop，可以通过哪些方式唤醒"><a href="#2-当处于休眠的runloop，可以通过哪些方式唤醒" class="headerlink" title="2 当处于休眠的runloop，可以通过哪些方式唤醒?"></a>2 当处于休眠的runloop，可以通过哪些方式唤醒?</h4><p>答: </p><ul><li>通过 Sources1 进行当前 RunLoop 的唤醒</li><li>Timer 事件的回调</li><li>外部手动的唤醒</li></ul><h4 id="3-App-从启动到退出，这个过程当中系统都发生了什么？"><a href="#3-App-从启动到退出，这个过程当中系统都发生了什么？" class="headerlink" title="3 App 从启动到退出，这个过程当中系统都发生了什么？"></a>3 App 从启动到退出，这个过程当中系统都发生了什么？</h4><p>答：</p><ul><li>调用了 main 函数之后，在 main 函数中会调用 UIApplicationMain 函数，在这个函数内部会启动一个主线程的 RunLoop，然后经过一系列的处理最终主线程的 RunLoop 处于休眠状态，</li><li>如果说此时点击一个屏幕，会产生一个 Responder ，然后基于 Responder 最终会转成 Sources1，可以把主线程唤醒，运行然后处理，</li><li>之后当把程序杀死的时候 RunLoop 就会退出，这个时候就会发出一个通知即将退出 RunLoop ，RunLoop 退出之后线程也就销毁掉了。</li></ul><h4 id="4-RunLoop的核心"><a href="#4-RunLoop的核心" class="headerlink" title="4 RunLoop的核心"></a>4 RunLoop的核心</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-5474cc5627c2b788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>main 函数经过一系列的处理之后，内部最终会调用一个系统函数 mach_msg() ,于是就发生了一个系统调用，经过系统调用当前用户线程就把控制权转交核心态，然后 mach_msg() 在一定条件下会返回给调用方，触发返回的逻辑就是唤醒线程的逻辑，比如收到了一个 Sources1 或者 Timer 事件的回调，包括外部手动唤醒，就可以触发核心态到用户态的切换，那么当前app的主线程循环就会被唤醒，这就是 RunLoop 的核心</p><h3 id="四、RunLoop与NSTimer"><a href="#四、RunLoop与NSTimer" class="headerlink" title="四、RunLoop与NSTimer"></a>四、RunLoop与NSTimer</h3><p><strong>问题:滑动TableView的时候，我们的定时器还会生效吗？</strong><br>答: </p><ul><li><p>Runloop Mode 实际上是 Source，Timer 和 Observer 的集合，不同的 Mode 把不同组的 Source，Timer 和 Observer 隔绝开来。Runloop 在某个时刻只能跑在一个 Mode 下，处理这一个 Mode 当中的 Source，Timer 和 Observer。</p></li><li><p>滑动TableView的时候Mode发生切换，从KCFRunLoopDefaultMode切换到UITrackingRunLoopMode. (当把Source/Timer/Observer 添加到某个Mode上, 如果当前runloop运行在另一个mode上, 对应Source/Timer/Observer是没有办法进行后续处理和回调.)</p></li><li><p>解决: 通过函数CFRunLoopAddTimer() 将timer添加到commonMode上.</p></li><li>CommonMode<code>不是实际存在</code>的一种Mode, 只是将一些mode打上common标记, 然后可以把某个事件源(如Timer)同步到多个mode中.<pre><code>void CFRunLoopAddTimer(runloop, timer, commonMode)`</code></pre></li></ul><h3 id="五、RunLoop与多线程"><a href="#五、RunLoop与多线程" class="headerlink" title="五、RunLoop与多线程"></a>五、RunLoop与多线程</h3><h4 id="1、怎样实现一个常驻线程"><a href="#1、怎样实现一个常驻线程" class="headerlink" title="1、怎样实现一个常驻线程?"></a>1、怎样实现一个常驻线程?</h4><p>(1)、为当前线程开启一个RunLoop。<br>(2)、向该RunLoop中添加一个Port/Source等维持RunLoop的事件循环。<br>(3)、启动该RunLoop。</p><p>实现一个常驻线程的基本步骤：</p><ul><li>1)为当前线程开启一个 RunLoop ：NSRunLoop *runLoop = [NSRunLoop currentRunLoop];，因为获取当前 RunLoop 这个方法本身会查找如果当前线程没有 RunLoop 的话，会在系统的内部创建</li><li>2)如果线程没有资源或者事件源要处理的话，默认情况下是不能维持事件循环的就会直接退出了，所以需要给他添加一个 Port/Source 来维持他的时间循环机制</li><li>3)然后再调用 RunLoop 的 run 方法就可以实现一个常驻线程</li></ul><h4 id="2、RunLoop和线程关系"><a href="#2、RunLoop和线程关系" class="headerlink" title="2、RunLoop和线程关系"></a>2、RunLoop和线程关系</h4><p>(1)、runloop与线程是一一对应的，一个runloop对应一个核心的线程，为什么说是核心的，是因为runloop是可以嵌套的，但是核心的只能有一个，他们的关系保存在一个全局的字典里。<br>(2)、runloop是来管理线程的，当线程的runloop被开启后，线程会在执行完任务后进入休眠状态，有了任务就会被唤醒去执行任务。<br>(3)、runloop在第一次获取时被创建，在线程结束时被销毁。<br>(4)、对于主线程来说，runloop在程序一启动就默认创建好了。<br>(5)、对于子线程来说，runloop是懒加载的，只有当我们使用的时候才会创建。</p><pre><code>    dispatch_queue_t queue = dispatch_queue_create(&quot;com.codeTao.testQueue&quot;, DISPATCH_QUEUE_SERIAL);    dispatch_async(queue, ^{        [self performSelector:@selector(timerAction) withObject:nil afterDelay:1];        [[NSRunLoop currentRunLoop] run];    });</code></pre><p>(6)、子线程中使用定时器，需将定时器添加至RunLoop中，确保子线程的runloop被创建，不然定时器不会回调。</p><pre><code>  dispatch_queue_t queue = dispatch_queue_create(&quot;com.codeTao.testQueue&quot;, DISPATCH_QUEUE_SERIAL);    dispatch_async(queue, ^{        //此种方式创建的timer已经添加到NSRunloop中了        NSTimer *timer1 =[NSTimer scheduledTimerWithTimeInterval:0 target:self selector:@selector(timerAction) userInfo:nil repeats:YES];        [[NSRunLoop currentRunLoop] run];        //此种方式创建的timer没有添加至runloop中        NSTimer *timer2 = [NSTimer timerWithTimeInterval:1.0f target:self selector:@selector(timerAction) userInfo:nil repeats:YES];        [[NSRunLoop currentRunLoop] addTimer:timer2 forMode:NSDefaultRunLoopMode];        [[NSRunLoop currentRunLoop] run];    });</code></pre><h3 id="六-RunLoop面试总结"><a href="#六-RunLoop面试总结" class="headerlink" title="六 RunLoop面试总结"></a>六 RunLoop面试总结</h3><h4 id="问题-什么是RunLoop-它是怎样做到有事做事-没事休息"><a href="#问题-什么是RunLoop-它是怎样做到有事做事-没事休息" class="headerlink" title="问题:什么是RunLoop? 它是怎样做到有事做事,没事休息?"></a>问题:什么是RunLoop? 它是怎样做到有事做事,没事休息?</h4><p>答: RunLoop是通过<code>内部维护</code>的事件循环来对<code>事件/消息进行管理</code>的一个对象。<br>调用 [CFRunLoop run] 相关方法后, 会调用系统函数mach_msg, 同时发生了用户态向核心态的切换,当前线程处于休眠状态.所有做到有事做事,没事休息</p><h4 id="问题-RunLoop与线程是怎样的关系"><a href="#问题-RunLoop与线程是怎样的关系" class="headerlink" title="问题:RunLoop与线程是怎样的关系?"></a>问题:RunLoop与线程是怎样的关系?</h4><p>答:</p><ul><li>runloop与线程是一一对应的</li><li>一个线程默认是没有runloop的, 需要手动创建</li></ul><h4 id="问题-如何实现一个常驻线程"><a href="#问题-如何实现一个常驻线程" class="headerlink" title="问题:如何实现一个常驻线程?"></a>问题:如何实现一个常驻线程?</h4><p>答:三个步骤:<br>(1)、创建一个线程对应的RunLoop。<br>(2)、向该RunLoop中添加一个Port/Source/Timer/Observer等维持RunLoop的事件循环。<br>(3)、启动该RunLoop 。调用CFRunLoop run方法<br>注意:运行的模式和添加模式必须是同一个,否则外部使用while循环会导致死循环</p><h4 id="问题-怎样保证子线程数据回来更新UI的时候不打断用户的滑动操作"><a href="#问题-怎样保证子线程数据回来更新UI的时候不打断用户的滑动操作" class="headerlink" title="问题:怎样保证子线程数据回来更新UI的时候不打断用户的滑动操作?"></a>问题:怎样保证子线程数据回来更新UI的时候不打断用户的滑动操作?</h4><p>答: </p><ul><li>用户进行滑动过程中,当前RunLoop运行在<code>UITrackingRunLoopMode下</code></li><li>我们一般在子线程中进行网络请求,  所以可以将子线程抛给主线程数据并进行UI更新的逻辑封装起来提交到<code>主线程</code>的NSDefaultRunLoopMode下.</li><li>这样抛回来的任务,当用户滑动时处于UITrackingRunLoopMode下就不会执行任务. 当手停止滑动操作后, 当前线程mode切换到<code>NSDefaultRunLoopMode</code>下,再处理子线程上抛给主线程的任务,这样就不会打断用户滑动操作.</li></ul><h4 id="问题：我们可以监听-RunLoop-哪些时间点？"><a href="#问题：我们可以监听-RunLoop-哪些时间点？" class="headerlink" title="问题：我们可以监听 RunLoop 哪些时间点？"></a>问题：我们可以监听 RunLoop 哪些时间点？</h4><p>答：</p><ul><li><code>KCFRunLoopEntry</code>RunLoop 的入口时机，当 RunLoop 准备启动的时候系统会给我们一个回调通知，这个通知掉 CFRunLoopEntry</li><li><code>KCFRunLoopBeforeTimers</code>代表的含义：通知观察者 RunLoop 将要对 Timer 一些相关事件进行处理了</li><li><code>KCFRunLoopBeforeSources</code>代表将要处理一些 Source 事件</li><li><code>KCFRunLoopBeforeWaiting</code>通知对应观察者，当前 RunLoop 将要进入休眠状态，这个通知或者说观测点是非常重要的一个观测点，在 RunLoop 发送这个通知的时候，即将要发生用户态到内核态的切换</li><li><code>KCFRunLoopAfterWaiting</code>这也是一个重要的观测点，这个通知发出的时机恰好是从内核态切换到用户态之后的不久之间</li><li><code>KCFRunLoopExit</code>代表 RunLoop 退出的通知</li></ul><hr><p><strong>问题:什么时候使用Runloop?</strong><br>当需要和该线程进行交互的时候才会使用Runloop</p><p><strong>问题: Runloop和线程是什么关系？</strong><br>答:</p><ul><li>每条线程都有唯一的一个与之对应的RunLoop对象，其关系是保存在一个全局的 Dictionary 里；</li><li>主线程的RunLoop已经自动创建，子线程的RunLoop需要手动创建；</li><li>RunLoop在第一次获取时创建，在线程结束时销毁</li></ul><p><strong>问题:Runloop的mode作用是什么？</strong><br>答:<br>指定事件在运行循环中的优先级的，<br>线程的运行需要不同的模式，去响应各种不同的事件，去处理不同情境模式。(比如可以优化tableview的时候可以设置UITrackingRunLoopMode下不进行一些操作，比如设置图片等。)</p><p><strong>问题: 以<code>+scheduledTimerWithTimeInterval:</code>的方式触发的<code>timer</code>，在滑动页面上的列表时，<code>timer</code>会暂停回调， 为什么？</strong><br>答:<br>滑动scrollView时，主线程的RunLoop会切换到<code>UITrackingRunLoopMode</code>这个Mode，执行的也是<code>UITrackingRunLoopMode</code>下的任务（Mode中的item），而timer是添加在<code>NSDefaultRunLoopMode</code>下的，所以timer任务并不会执行，只有当<code>UITrackingRunLoopMode</code>的任务执行完毕，runloop切换到<code>NSDefaultRunLoopMode</code>后，才会继续执行timer。</p><p><strong>问题: 如何解决在滑动页面上的列表时，timer会暂停回调？</strong><br>答:<br>将<code>Timer</code>放到<code>NSRunLoopCommonModes</code>中执行即可</p><pre><code>[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];[[NSRunLoop currentRunLoop] run];</code></pre><p><strong>问题: NSTimer使用时需要注意什么？</strong><br>答:</p><ul><li>注意timer添加到runloop时应该设置为什么mode</li><li>注意timer在不需要时，一定要调用invalidate方法使定时器失效，否则得不到释放</li></ul><p><strong>问题: RunLoop 有哪些应用？</strong><br>答: 常驻内存、AutoreleasePool 自动释放池</p><p><strong>问题: AutoreleasePool 和 RunLoop 有什么联系？</strong><br>答:<br>iOS应用启动后会注册两个 Observer 管理和维护 AutoreleasePool。应用程序刚刚启动时默认注册了很多个Observer，其中有两个Observer的 callout 都是 _ wrapRunLoopWithAutoreleasePoolHandler，这两个是和自动释放池相关的两个监听。</p><ul><li><p>第一个 Observer 会监听 RunLoop 的进入，它会回调objc_autoreleasePoolPush() 向当前的 AutoreleasePoolPage 增加一个哨兵对象标志创建自动释放池。这个 Observer 的 order 是 -2147483647 优先级最高，确保发生在所有回调操作之前。</p></li><li><p>第二个 Observer 会监听 RunLoop 的进入休眠和即将退出 RunLoop 两种状态，在即将进入休眠时会调用 objc_autoreleasePoolPop() 和 objc_autoreleasePoolPush() 根据情况从最新加入的对象一直往前清理直到遇到哨兵对象。而在即将退出 RunLoop 时会调用objc_autoreleasePoolPop() 释放自动自动释放池内对象。这个Observer 的 order 是 2147483647 ，优先级最低，确保发生在所有回调操作之后。</p></li></ul><p><strong>问题:NSRunLoop 和 CFRunLoopRef 区别?</strong><br>答: CFRunLoopRef 基于C 线程安全，NSRunLoop 基于 CFRunLoopRef 面向对象的API 是不安全的</p>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第6章 多线程相关面试问题</title>
      <link href="/2020/05/24/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC6%E7%AB%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/24/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC6%E7%AB%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote><p>本文主讲多线程相关面试问题：包括GCD、NSOperation、NSThread、多线程与锁。</p></blockquote><h3 id="一、GCD"><a href="#一、GCD" class="headerlink" title="一、GCD"></a>一、GCD</h3><ul><li>同步/异步 和串行/并发</li><li>dispatch_barrier_async 异步栅栏调用</li><li>dispatch_group</li></ul><p>01 异步函数+并发队列：开启多条线程，并发执行任务<br>02 异步函数+串行队列：开启一条线程，串行执行任务<br>03 同步函数+并发队列：不开线程，串行执行任务<br>04 同步函数+串行队列：不开线程，串行执行任务<br>05 异步函数+主队列：不开线程，在主线程中串行执行任务<br>06 同步函数+主队列：不开线程，串行执行任务（注意死锁发生）<br>注意同步函数和异步函数在执行顺序上面的差异</p><h4 id="1、同步-异步-和-串行-并发"><a href="#1、同步-异步-和-串行-并发" class="headerlink" title="1、同步/异步 和 串行/并发"></a>1、同步/异步 和 串行/并发</h4><p>同步/异步 和 串行/并发</p><pre><code>+ 同步分配任务到串行队列 dispatch_sync(serial_queue,{//任务});    + 异步分配任务到串行队列dispatch_async(serial_queue,{//任务});      + 同步分配任务到并发队列dispatch_sync(concurrent_queue,{//任务}); + 异步分配任务到并发队列dispatch_async(concurrent_queue,{//任务});</code></pre><h5 id="1-、同步串行-dispatch-sync-serial-queue-任务"><a href="#1-、同步串行-dispatch-sync-serial-queue-任务" class="headerlink" title="(1)、同步串行 dispatch_sync(serial_queue , ^{ //任务 });"></a>(1)、同步串行 dispatch_sync(serial_queue , ^{ //任务 });</h5><h6 id="同步主线程"><a href="#同步主线程" class="headerlink" title="同步主线程"></a>同步主线程</h6><pre><code>//同步主线程 死锁- (void)viewDidLoad {     dispatch_sync(dispatch_get_main_queue(), ^{        [self doSomething];    });}</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-d8a0f6a02141c772.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="死锁原因"></p><p>结果：造成死锁 队列引起的循环等待.<br>在主队列中提交了viewDidLoad，然后又提交了block。因此在执行viewDidLoad过程中，需要调用block，block完成之后，viewDidLoad才能继续往下执行，而block因为队列先进先出的性质必须要等viewDidLoad执行结果才能调用,导致相互等待情况,从而死锁.</p><h6 id="同步串行"><a href="#同步串行" class="headerlink" title="同步串行"></a>同步串行</h6><pre><code>- (void)viewDidLoad {     dispatch_sync(serialQueue, ^{        [self doSomething];    });}</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-5ee0933781f5bdb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="同步串行分析"></p><blockquote><p>结果：顺序执行 都在主线程，不开辟新线程</p></blockquote><h5 id="2-、同步并发-dispatch-sync-concurrent-queue-任务"><a href="#2-、同步并发-dispatch-sync-concurrent-queue-任务" class="headerlink" title="(2)、同步并发 dispatch_sync(concurrent_queue , ^{ //任务 });"></a>(2)、同步并发 dispatch_sync(concurrent_queue , ^{ //任务 });</h5><pre><code>- (void)viewDidLoad {  NSLog(@&quot;1&quot;);  dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{        NSLog(@&quot;2&quot;);        dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{            NSLog(@&quot;3&quot;);        });        NSLog(@&quot;4&quot;);    });    NSLog(@&quot;5&quot;);}</code></pre><p>答案:12345 </p><ul><li><p>顺序执行 都在主线程 不开辟新线程<br>ps：如果2 3 都是添加到同一串行队列 就会造成死锁 23循环等待</p></li><li><p>只要同步方式提交任务,无论串行还是并发都是在当前线程执行</p></li><li>dispatch_sync() 在当前主线程执行</li></ul><h5 id="3-、异步串行-dispatch-async-serial-queue-任务"><a href="#3-、异步串行-dispatch-async-serial-queue-任务" class="headerlink" title="(3)、异步串行 dispatch_async(serial_queue , ^{ //任务 });"></a>(3)、异步串行 dispatch_async(serial_queue , ^{ //任务 });</h5><p>异步主队列</p><pre><code>- (void)viewDidLoad {     dispatch_async(dispatch_get_main_queue(), ^{        [self doSomething];    });}</code></pre><ul><li>顺序执行，都在主线程，不开辟新线程</li></ul><h5 id="4-、异步并发-dispatch-async-concurrent-queue-任务"><a href="#4-、异步并发-dispatch-async-concurrent-queue-任务" class="headerlink" title="(4)、异步并发 dispatch_async(concurrent_queue , ^{ //任务 });"></a>(4)、异步并发 dispatch_async(concurrent_queue , ^{ //任务 });</h5><pre><code>//腾讯面试题:- (void)viewDidLoad {    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{        NSLog(@&quot;1&quot;);        [self performSelector:@selector(printLog) withObject:nil afterDelay:0];        NSLog(@&quot;3&quot;);    });}- (void)printLog{ NSLog(@&quot;2&quot;); }</code></pre><ul><li>输出: 13</li><li>该题涉及知识点较多：GCD、线程的Runloop、performSeletor内部实现</li><li>异步分派到全局队列中，GCD底层所分派的线程默认是不开启对应runloop的，而performSeletor：即使是延迟0秒，也是需要提交任务到runloop的逻辑，所以performSeletor方法会失效的</li><li>performSeletor:方法要想有效执行, 必须是方法调用所属线程是有runloop的,没有就会失效</li></ul><h4 id="2、dispatch-barrier-async"><a href="#2、dispatch-barrier-async" class="headerlink" title="2、dispatch_barrier_async()"></a>2、dispatch_barrier_async()</h4><p>多读单写方案：dispatch_barrier_async(concurrent_queue , ^{ //写操作 });</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-9703c88055fa03a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多读单写方案"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-866eb29595a88164.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多读单写实现"></p><p>问题:怎么利用GCD实现多读单写？或者说想要实现多读单写，怎么去实现？<br>答:</p><ul><li>读者与读者并发（读操作添加到并发队列同步访问）</li><li>读者与写者、写者与写者互斥 （写操作通过dispatch_barrier_async+ 异步栅栏添加到并发队列中）</li></ul><pre><code>@interface UserCenter(){    // 定义一个并发队列    dispatch_queue_t concurrent_queue;    // 用户数据中心, 可能多个线程需要数据访问    NSMutableDictionary *userCenterDic;}@end// 多读单写模型@implementation UserCenter- (id)init{    self = [super init];    if (self) {        // 通过宏定义 DISPATCH_QUEUE_CONCURRENT 创建一个并发队列        concurrent_queue = dispatch_queue_create(&quot;read_write_queue&quot;, DISPATCH_QUEUE_CONCURRENT);        // 创建数据容器        userCenterDic = [NSMutableDictionary dictionary];    }    return self;}- (id)objectForKey:(NSString *)key {    __block id obj;    // 同步读取指定数据    dispatch_sync(concurrent_queue, ^{        obj = [userCenterDic objectForKey:key];    });    return obj;}- (void)setObject:(id)obj forKey:(NSString *)key {    // 异步栅栏调用设置数据    dispatch_barrier_async(concurrent_queue, ^{        [userCenterDic setObject:obj forKey:key];    });}@end</code></pre><h4 id="3、dispatch-group-async"><a href="#3、dispatch-group-async" class="headerlink" title="3、dispatch_group_async()"></a>3、dispatch_group_async()</h4><p>问题:<br>使用GCD实现：A、B、C三个任务并发，完成后执行任务D？<br>答: 所有异步任务添加到并发队列中，然后使用dispatch_group_notify函数，来监听前面多个的任务是否完成，如果完成, 就会调用dispatch_group_notify中的block<br>(参考代码实例)</p><h3 id="二、NSOperation"><a href="#二、NSOperation" class="headerlink" title="二、NSOperation"></a>二、NSOperation</h3><p>需要和NSOperationQueue配合使用来实现多线程方案。<br>1、特点：添加任务依赖、任务执行状态监控、最大并发数。<br>2、任务执行状态控制：isReady、isExecuting、isFinished、isCancelled。</p><p>3、状态监控</p><ul><li>如果只重写<code>main</code>方法，底层控制变更任务执行完成状态，以及任务退出。</li><li>如果重写<code>start</code>方法，需自行控制任务状态。</li></ul><p>4、系统是怎样移除一个isFinished=YES的NSOperation的？<br>答:通过KVO的方式，通知对应的NSOprationQueue达到对NSOperation对象进行移除。</p><h3 id="三、NSThread"><a href="#三、NSThread" class="headerlink" title="三、NSThread"></a>三、NSThread</h3><p>考查面试题:<br>1&gt; 如何NSThread结合runloop实现常驻线程<br>2&gt; NSThread 的 内部实现机制, start方法实现逻辑流程<br>(结合 gnustep-base-1.24.9 源码分析)</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-4e1d23172345d187.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NSThread启动流程"></p><p>问题: NSThread启动流程？<br>答: start() ——&gt;创建pthread线程——&gt;main()——&gt;[target performSelector:selector]——&gt;exit()</p><p>问题: 如何通过runloop和NSThread实现一个常驻线程？<br>从下一章runloop中寻找答案</p><p>问题: NSThread执行原理是怎样的?<br>答: 实际内部创建一个pthread线程 ,当main()函数或者指定的target 的selector方法执行结束后,系统会为我们进行线程的退出管理操作. 如果需要维护一个常驻线程,需要NSThread所对应的selector方法中维护runloop事件循环。</p><h3 id="四、多线程与锁"><a href="#四、多线程与锁" class="headerlink" title="四、多线程与锁"></a>四、多线程与锁</h3><h4 id="iOS中有哪些锁？"><a href="#iOS中有哪些锁？" class="headerlink" title="iOS中有哪些锁？"></a>iOS中有哪些锁？</h4><ul><li>@synchronized</li><li>atomic</li><li>OSSpinLock</li><li>NSRecursiveLock</li><li>NSLock</li><li>dispatch_semaphore_t</li></ul><h4 id="1、-synchronized的使用场景"><a href="#1、-synchronized的使用场景" class="headerlink" title="1、 @synchronized的使用场景"></a>1、 @synchronized的使用场景</h4><p>一般在创建单例的时候使用，保证在多线程环境下创建的对象是唯一的</p><h4 id="2、atomic"><a href="#2、atomic" class="headerlink" title="2、atomic"></a>2、atomic</h4><ul><li>修饰属性的关键字</li><li>对被修饰的对象进行原子操作（不负责使用，只负责赋值）<pre><code>@property(atomic)NSMutableArray *array;self.array = [NSMutableArray array];  //array赋值操作,能保证线程安全[self.array addObject:obj];  // array使用, 不能保证线程安全,需要额外做线程安全保护</code></pre></li></ul><h4 id="3、OSSpinLock自旋锁"><a href="#3、OSSpinLock自旋锁" class="headerlink" title="3、OSSpinLock自旋锁"></a>3、OSSpinLock自旋锁</h4><ul><li><code>循环等待</code>询问，不释放当前资源</li><li>用于轻量级数据访问，简单的int值+1/-1操作</li></ul><p>没有具体用过,但是可以通过分析runtime源码来学习系统关于OSSpinLock自旋锁的使用情况.</p><h4 id="4、-NSLock"><a href="#4、-NSLock" class="headerlink" title="4、 NSLock"></a>4、 NSLock</h4><ul><li>一般用于解决细粒度的线程同步问题, 来保证各个线程互斥,进入自己的临界区.</li></ul><pre><code>- (void)methodA {  [lock lock];  [self methodB];  [lock unlock];}- (void)methodB {  [lock lock];  //操作逻辑  [lock unlock];}</code></pre><ul><li>该写法重入的原因 会导致死锁!</li><li>解决: 通过NSRecursiveLock递归所可以解决<h4 id="5、NSRecursiveLock-递归锁"><a href="#5、NSRecursiveLock-递归锁" class="headerlink" title="5、NSRecursiveLock 递归锁"></a>5、NSRecursiveLock 递归锁</h4></li><li>NSRecursiveLock 递归锁特性: 可以重入<br><code>`</code></li></ul><ul><li>(void)methodA {<br>[recursiveLock lock];<br>[self methodB];<br>[recursiveLock unlock];<br>}</li><li>(void)methodB {<br>[recursiveLock lock];<br>//操作逻辑<br>[recursiveLock unlock];<br>}<br><code>`</code></li></ul><h4 id="6、dispatch-semaphore-t-信号量"><a href="#6、dispatch-semaphore-t-信号量" class="headerlink" title="6、dispatch_semaphore_t 信号量"></a>6、dispatch_semaphore_t 信号量</h4><ul><li><p>dispatch_semaphore_t 信号量 也是用来实现线程同步, 包括对共享资源互斥访问的信号量机制,类似于计算机专业的记录型信号量</p></li><li><p>创建信号量 dispatch_semaphore_create(1)</p><pre><code>//dispatch_semaphore_create内部实现 实例化一个结构体struct semaphore{int value;  // 信号量的值List&lt;thread&gt;; // 线程的进程控制表pcd 或者一些其他线程的一个唯一标识所维护的一个线程列表}</code></pre></li><li><p>dispatch_semaphore_wait(semaphore,DISPATCH_TIME_FOREVER)<br>信号量-1，阻塞是一个主动行为</p><pre><code>//dispatch_semaphore_wait() 实现逻辑{S.value = S.value - 1;if S.value &lt; 0 then Block(S.List); //阻塞是一个主动行为}</code></pre></li><li>dispatch_semaphore_signal(semaphore)  信号量+1，唤醒是一个被动行为<pre><code>//dispatch_semaphore_signal()实现逻辑{S.value = S.value + 1;if S.value &lt;= 0 then wakeup(S.List); //唤醒是一个被动行为}</code></pre></li></ul><h3 id="五-多线程相关面试问题"><a href="#五-多线程相关面试问题" class="headerlink" title="五 多线程相关面试问题"></a>五 多线程相关面试问题</h3><p>1、怎样用GCD实现多读单写？<br>答: dispatch_barrier_async()的使用.</p><ul><li>读者与读者并发（读操作添加到并发队列同步访问）</li><li>读者与写者、写者与写者互斥 （写操作通过dispatch_barrier_async+ 异步栅栏添加到并发队列中）</li></ul><p>2、iOS系统为我们提供的几种多线程技术各自的特点是怎么样的？<br>答案：GCD、NSOperation、NSThread。</p><ul><li>GCD 用来实现简单的线程同步，包括子线程的分派，包括实现多读单写场景的解决</li><li>NSOperation及NSOperationQueue  比如AFNetworking、SDWebImage都会涉及到NSOpration,由于它的特点是方便我们对任务的状态进行控制，包括可以控制添加依赖、移除依赖</li><li>NSThread 一般用它来实现一个常驻线程</li></ul><p>3、NSOperation对象在Finished之后是咋样从queue当中移除掉的？<br>答: NSOperation对象在Finished之后, 通过KVO的方式，通知对应的NSOprationQueue达到对NSOperation对象进行移除。</p><p>4、你都用过哪些锁？结合实际谈谈你是怎样使用的？<br>答:</p>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第5章 Block相关面试问题</title>
      <link href="/2020/05/24/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC5%E7%AB%A0-Block%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/24/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC5%E7%AB%A0-Block%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote><p>本文主讲Block相关面试问题，包括Block介绍、截获变量、__block修饰符、Block的内存管理、Block的循环引用。</p></blockquote><h3 id="一、Block介绍"><a href="#一、Block介绍" class="headerlink" title="一、Block介绍"></a>一、Block介绍</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h4><p>Block是将<code>函数</code>及其<code>执行上下文</code>封装起来的<code>对象</code>。</p><h4 id="Block本质"><a href="#Block本质" class="headerlink" title="Block本质:"></a>Block本质:</h4><p>源码解析:使用 <code>clang -rewrite-objc file.m</code> 查看编译之后的文件内容。</p><h4 id="Block调用"><a href="#Block调用" class="headerlink" title="Block调用:"></a>Block调用:</h4><p>Block调用就是函数的调用。</p><h3 id="二、截获变量。"><a href="#二、截获变量。" class="headerlink" title="二、截获变量。"></a>二、截获变量。</h3><h4 id="被截获变量类型"><a href="#被截获变量类型" class="headerlink" title="被截获变量类型"></a>被截获变量类型</h4><p>被截获变量类型: 包括局部变量(基本数据类型和对象类型)、静态局部变量、全部变量、静态全部变量。</p><p>问题:关于Block截获变量的特性，是否有理解？<br>答: 对不同的数据类型，截获方式各有不同<br>1.对于<code>基本数据类型</code>的<code>局部变量</code>截获其值<br>2.对于<code>对象</code>类型的局部变量<code>连同所有权修饰符</code>一起截获<br>3.以<code>指针方式</code>截获静态局部变量<br>4.<code>不截获</code>全局变量、静态全局变量</p><p>源码解析:使用 <code>clang -rewrite-objc -fobjc-arc file.m</code> 查看编译之后的文件内容。</p><pre><code>//面试题    int multiplier = 6;    int(^Block)(int) = ^int(int num){        return num*multiplier;    };    multiplier = 4;    NSLog(@&quot;result is %d&quot;,Block(2)); //输出结果 --&gt;result is 12</code></pre><h3 id="三、-block修饰符"><a href="#三、-block修饰符" class="headerlink" title="三、__block修饰符"></a>三、__block修饰符</h3><p>一般情况下，对被截获变量进行<code>赋值</code>操作需添加<code>__block修饰符</code>。<br>注意：赋值不等于使用。</p><h4 id="笔试题的坑"><a href="#笔试题的坑" class="headerlink" title="笔试题的坑:"></a>笔试题的坑:</h4><pre><code>    NSMutableArray *array =[NSMutableArray array];    void(^Block)(void) = ^{        [array addObject:@&quot;123&quot;];    };    Block();  //该array为使用，只有赋值操作才需要__block 。    NSMutableArray *array2 =nil;    void(^Block2)(void) = ^{        array2 = [NSMutableArray array];    };    Block2(); //该block为赋值，存在问题，会编译报错，需要用__block修饰被截获变量array2。</code></pre><h4 id="问题-在什么场景下使用-block修饰符呢？"><a href="#问题-在什么场景下使用-block修饰符呢？" class="headerlink" title="问题:在什么场景下使用__block修饰符呢？"></a>问题:在什么场景下使用__block修饰符呢？</h4><ul><li>对截获变量进行赋值操作需要添加__block修饰符<strong>（赋值 != 使用）</strong></li><li>对局部变量（基本数据类型和对象类型）进行赋值需要__block修饰符</li><li>对静态局部变量、全局变量、静态全局变量不需要__block修饰符</li></ul><h4 id="block-面试题"><a href="#block-面试题" class="headerlink" title="__block 面试题"></a>__block 面试题</h4><pre><code>{    __block int multiplier = 6;    int(^Block)(int) = ^int(int num){        return num*multiplier;    };    multiplier = 4;    NSLog(@&quot;result is %d&quot;,Block(2));  //输出结果 --&gt;result is 8}</code></pre><h4 id="问题-block修饰符起到了什么作用？block的机制是什么？"><a href="#问题-block修饰符起到了什么作用？block的机制是什么？" class="headerlink" title="问题:block修饰符起到了什么作用？block的机制是什么？"></a>问题:<strong>block修饰符起到了什么作用？</strong>block的机制是什么？</h4><p>答: __block修饰变量变成了对象</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-61660b692db8064e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-5cbaa11b1f12dfba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="栈上的__block变量"></p><p>栈上的<strong>block变量的</strong>forwarding指针是指向其自身的</p><h3 id="四、Block的内存管理"><a href="#四、Block的内存管理" class="headerlink" title="四、Block的内存管理"></a>四、Block的内存管理</h3><h4 id="1、Block类型"><a href="#1、Block类型" class="headerlink" title="1、Block类型"></a>1、Block类型</h4><p>Block类型：NSGlobalBlock、NSStackBlock、NSMallocBlock。</p><pre><code>impl.isa = &amp;_NSConcreteStackBlock;</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-b46675e7cc38a286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2、Block的copy操作"><a href="#2、Block的copy操作" class="headerlink" title="2、Block的copy操作"></a>2、Block的copy操作</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-55162d0325ed5d91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>问题: 三种类型的block进行copy有什么效果?<br>答:</p><ul><li>对于数据区的block进行copy操作，什么也不做</li><li>对于栈区的block进行copy操作，在堆区产生block</li><li>对于堆区的block进行copy操作，会增加引用计数</li></ul><h4 id="3、生命周期"><a href="#3、生命周期" class="headerlink" title="3、生命周期"></a>3、生命周期</h4><p><strong>栈上Block的销毁</strong><br><img src="https://upload-images.jianshu.io/upload_images/126164-e08b0719b3c46c5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="栈上Block销毁"></p><ul><li>对于栈区的block，变量作用域结束，随之销毁</li></ul><p><strong>栈上Block的copy</strong><br><img src="https://upload-images.jianshu.io/upload_images/126164-55b4151535bc1ded.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="栈上Block的copy"></p><p>问题:如果对栈上block进行copy 操作后, MRC环境下,是否会引起内存泄漏?<br>答: 会引起内存泄漏. 栈上block在变量作用域结束后会销毁, 堆上block没有其他成员变量指向它, 这和alloc 出一个对象最后没有release效果是一样的, 会引起内存泄漏. </p><p><strong>栈上__block变量的copy</strong><br><img src="https://upload-images.jianshu.io/upload_images/126164-6d19292f3c61b545.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="栈上__block变量copy"></p><ul><li>如果对<code>栈上的__block变量</code>没有进行<code>copy</code>操作, <code>__forwarding指针</code>指向其自身, 同样上边一行代码,修改的是<code>栈上的__block变量</code></li><li>对<code>栈上的__block变量</code>进行<code>copy</code>操作后, 实际在堆上面也会产生一个<strong>block变量,内容完全一样,但是是两块不同内存控件.` 栈上</strong>block变量<code>的__forwarding指针指向是</code>堆上的<strong>block变量<code>,</code>堆上</strong>block变量`的__forwarding指针指向其自身.</li></ul><p>所以在对multiplier 整型值进行改变时 ,使用是转换出来的都是同一行代码 .</p><p>面试题:</p><pre><code>{  __block int multiplier = 10;  _blk = ^int(int num){      return num * multiplier;  }  multiplier = 6;  [self excuteBlock];}- (void)excuteBlock{  int result = _blk(4);  NSLog(@&quot;result is %d&quot;, result);  // result is 24}</code></pre><h4 id="4、-forwarding存在的意义"><a href="#4、-forwarding存在的意义" class="headerlink" title="4、__forwarding存在的意义"></a>4、__forwarding存在的意义</h4><ul><li>不管在任何内存位置，都可以顺利的访问同一个__block变量</li></ul><h3 id="五、Block的循环引用"><a href="#五、Block的循环引用" class="headerlink" title="五、Block的循环引用"></a>五、Block的循环引用</h3><p>Block循环引用（为什么会产生循环引用）在下图中，有什么问题？如何解决？</p><pre><code>//_strBlk _array 都为当前对象的成员变量// _array 由strong修饰, _strBlk 由copy 修饰{    _array = [NSMutableArray arrayWithObject:@&quot;block&quot;];    _strBlk = ^NSString* (NSString *num){        return [NSString stringWithFormat:@&quot;helloc_%@&quot;, _array[0]];    };    _strBlk(@&quot;hello&quot;);}//产生自循环循环引用</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-6b64fd64b91c242e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码循环引用分析"></p><h4 id="产生自循环引用"><a href="#产生自循环引用" class="headerlink" title="产生自循环引用 :"></a>产生自循环引用 :</h4><p>因为当前对象通过copy声明block，而在当前block中又使用到了当前对象的成员变量，因为会连带属性关键字一起截获，因为array是通过strong修饰，因此block中有一个strong类型的指针指向当前对象，产生循环引用</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>避免循环引用——在当前栈中用<strong>weak修饰的weakArray指针指向原对象的_array,在block中使用weakArray（因为截获的是一个</strong>weak类型）</p><pre><code>//解决{    _array = [NSMutableArray arrayWithObject:@&quot;block&quot;];    __weak NSArray *weakArray = _array;    _strBlk = ^NSString* (NSString *num){        return [NSString stringWithFormat:@&quot;helloc_%@&quot;, weakArray[0]];    };    _strBlk(@&quot;hello&quot;);}</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-34b68d5baeee44de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>问题:block外部 为什么通过<strong>weak属性关键字修饰对象,就可以避免循环引用?<br>答:由于block截获变量是对象类型,会连同其所有权修饰符一起截获,在block外部定义变量是</strong>weak所有权修饰符,在block所产生结构体中所持有的变量也是__weak的</p><p>问题: （__block造成的循环引用）在下代码中，有什么问题？如何解决？</p><pre><code>{    __block MCBlock *blockSelf = self;    _blk = ^int(int num){        //var = 2        return num * blockSelf.var;    };    _blk(3);}</code></pre><p>答: </p><p><img src="https://upload-images.jianshu.io/upload_images/126164-6b26b5c0fa7fdbf9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ARC下循环引用"></p><ul><li>在MRC中，不会产生循环引用</li><li>在ARC中，产生循环引用，引起内存泄漏</li></ul><p>解决:</p><pre><code>{    __block MCBlock *blockSelf = self;    _blk = ^int(int num){        //var = 2        int result = num * blockSelf.var        blockSelf = nil;        return result;    };    _blk(3);}</code></pre><h3 id="Block面试总结"><a href="#Block面试总结" class="headerlink" title="Block面试总结"></a>Block面试总结</h3><p>问题: 什么是block？<br>答:Block是将<code>函数</code>及其<code>执行上下文</code>封装起来的<code>对象</code>。</p><p>问题: 为什么Block会产生循环引用？<br>答:<br>1&gt;如果当前Block对当前对象的某一成员变量进行截获, block会对成员变量有强引用, 当前对象又对当前block有一个copy强引用, 就产生自循环引用问题.<br>可以通过声明对象的成员变量为 __weak 变量,来进行循环引用消除. </p><p>(因为当前对象通过copy声明block，而在当前block中又使用到了当前对象的成员变量，因为会连带属性关键字一起截获，如果成员变量使用strong修饰，因此block中有一个strong类型的指针指向当前对象，产生自循环引用.)</p><p>2&gt;如果定义__block说明符 ,在ARC中 会产生循环引用, 在MRC中不会产生循环引用.<br>可以在ARC中采取断环的方式解决循环引用,但是有个弊端,如果block 如果一直没有调用, 循环引用是没有办法消除的.</p><p>问题:怎样理解Block截获变量的特性？<br>答:(被截获类型的分类回答)<br>答: 对不同的数据类型，截获方式各有不同<br>1.对于基本数据类型的局部变量对其值进行截获<br>2.对于对象类型的局部变量连同所有权修饰符一起截获<br>3.对于静态局部变量以指针方式截获<br>4.对于全局变量、静态全局变量不截获.</p><p>问题: 你都遇见过哪些循环引用？你又是咋样解决的<br>答:<br>NSTimer循环引用.</p><p>Block循环引用:2方面<br>1&gt;block所捕获变量也是当前对象的成员变量, block 也是当前对象的成员变量,就会造成自循环引用. 采用避免循环引用方式, 加<strong>weak所有权修饰符,来避免循环引用.<br>2&gt;</strong>block也会造成循环引用, 在ARC中 会产生循环引用, 在MRC中不会产生循环引用.<br>可以在ARC中采取断环的方式解决循环引用,但是有个弊端,如果block 如果一直没有调用, 循环引用是没有办法消除的.</p><hr><hr><p>1、相互循环引用</p><pre><code>typedef void(^Block)(NSString*);@interface ClassA(){    int age;}@property(nonatomic,strong)Block block;@property(nonatomic,strong)NSString *temp;@end@implementation ClassA- (void)viewDidLoad {    [super viewDidLoad];    self.block = ^(NSString * content) {        self.temp = content;        self-&gt;age = 15;    };}-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event{    self.block(@&quot;赵四&quot;);}</code></pre><p>(1)、如上代码，self持有block，而堆上的block又会持有self，所以会导致循环引用，这个例子非常好，因为xcode都能检测出来，报出警告：[capturing self strongly in this block is likely to lead to a retain cycle]，当然大部分循环引用的情况xcode是不会报警告的。<br>(2)、这时Block对象虽然捕获了weakSelf，延长了weakSelf这个局部变量的生命周期，但weakSelf是附有__weak修饰符的变量，它并不会持有对象，一旦它指向的对象被废弃了，它将自动被赋值为nil。在多线程情况下，可能weakSelf指向的对象会在Block执行前被废弃，这样可能顶多就是返回nil，但在有些情况下（譬如在Block中有移除KVO的观察者的逻辑，在执行到该逻辑前self就释放了）就会导致crash。这时可以在Block内部（第一句）再持有一次weakSelf指向的对象，保证在执行Block期间该对象不会被废弃，这就是所谓的 weak-strong。</p><p>解决这种循环引用的常用方式如下</p><pre><code>typedef void(^Block)(NSString*);@interface ClassA(){    int age;}@property(nonatomic,strong)Block block;@property(nonatomic,strong)NSString *temp;@end@implementation ClassA- (void)viewDidLoad {    [super viewDidLoad];    __weak typeof(self) weakSelf = self;    self.block = ^(NSString * content) {        __strong typeof(weakSelf)strongSelf = weakSelf;        strongSelf.temp = content;        strongSelf-&gt;age = 15;    };}-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event{    self.block(@&quot;赵四&quot;);}</code></pre><p>2、多循环引用</p><pre><code>typedef void(^Block)(NSString*);@interface ClassB : UIViewController@property(nonatomic,strong)Block block;</code></pre><pre><code>#import &quot;ClassA.h&quot;#import &quot;ClassB.h&quot;@interface ClassA()@property(nonatomic,strong)ClassB *classB;@property(nonatomic,strong)NSString *temp;@end@implementation ClassA- (void)viewDidLoad {    [super viewDidLoad];    self.classB = [[ClassB alloc]init];    self.classB.block = ^(NSString *content) {        self.temp = content;    };}-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event{    self.classB.block(@&quot;赵四&quot;);}@end</code></pre><p>如上代码，ClassA持有ClassB，ClassB持有block，而堆上的block又会持有ClassA，所以会导致循环引用。</p>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第4章 内存管理相关面试问题</title>
      <link href="/2020/05/23/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC4%E7%AB%A0-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/23/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC4%E7%AB%A0-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote><p>本文主讲内存管理相关面试问题，包括内存布局、内存管理方案、数据结构、ARC&amp;MRC、引用计数管理、弱引用管理、自动释放池、循环引用。</p></blockquote><h3 id="一、内存布局"><a href="#一、内存布局" class="headerlink" title="一、内存布局"></a>一、内存布局</h3><p><img src="https://upload-images.jianshu.io/upload_images/126164-4aabeea80bdbbe80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>1、stack(栈区)：方法调用。<br>2、heap(堆区)：通过alloc等分配的对象。<br>3、bss：未初始化的全局变量等。<br>4、Data：已初始化的全局变量等。<br>5、text：程序代码。</p><h3 id="二、内存管理方案"><a href="#二、内存管理方案" class="headerlink" title="二、内存管理方案"></a>二、内存管理方案</h3><p>问题:iOS操作系统是怎样对内存进行管理的?(iOS会根据不同场景会采取不同内存方案)</p><p>1、TaggedPoint(小对象)。 如NSNumber，DSData类型。<br>2、<code>NONPOINTER_ISA</code>(非指针型的isa)。 在arm64位架构下使用的一种方案，这种方案主要是高效利用64位架构下isa指针的剩余内存空间。<br>3、<code>散列表</code>(散列表是复杂的数据结构,其中包含引用计数表、弱引用表)。 在32位架构下使用以及64位架构下isa指针存放不下的场景下使用，也就是我们常说的信引用计数表</p><h4 id="1-NONPOINTER-ISA"><a href="#1-NONPOINTER-ISA" class="headerlink" title="1.NONPOINTER_ISA"></a>1.NONPOINTER_ISA</h4><p>NONPOINTER_ISA 64个比特位分析:</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-2c9fc16cfa8e5593.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="NONPOINTER_ISA_1"></p><ul><li>indexed(1位): 0 代表纯isa指针,内容代表当前对象的类对象的地址 . 1代表isa指针不仅存储类对象的地址, 还有内存管理数据也就是<code>NONPOINTER_ISA</code>(非指针型的isa).</li><li>has_assoc(2位):表示当前对象是否有关联对象, 0 没有, 1有.</li><li>has_cxx_dtor(3位): 当前对象是否有使用C++语言相关内容.当前对象是否使用ARC管理内存</li><li>shiftcls(4~37位): 共33位比特位 表示当前对象类对象的指针地址.</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-f0519fcf88455f11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="NONPOINTER_ISA_2"></p><ul><li>magic(38~43位): </li><li>weakly_referenced(44位): 标识当前对象是否有弱引用指针</li><li>deallocating(45位): 当前对象是否正在进行dealloc操作</li><li>has_sidetable_rc(46位): 当前isa指针中所存储引用计数达到上限, 需要外挂一个sidetable数据结构用来存储相关的引用内容,也就是<code>散列表</code></li><li>extra_rc(47~64位): 额外的引用计数, 当引用计数在很小值范围就会存储在isa指针中.</li></ul><h4 id="2-散列表方式"><a href="#2-散列表方式" class="headerlink" title="2.散列表方式"></a>2.散列表方式</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-3691fd0f131e8613.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SideTables()结构"></p><p>SideTables()（非嵌入式系统中包含64个SideTable），实际是一个哈希表，通过对象的指针找到对应的引用计数表或弱引用表，在哪一个SideTable中</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-f82005a03b4363ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SideTable结构"></p><p>SideTable结构<br>包含自旋锁 引用计数表 弱引用表</p><p><strong>问题:为什么不是一个SideTable？</strong><br>存在效率问题，如果多个对象在对同一张表进行引用计数时，就会等待前一个对象操作结束才能操作。引用分离锁的方案，可以提高访问效率。</p><p><strong>问题:怎样实现快速分流？</strong>（哈希查找的过程）</p><ul><li>SideTables的本质是一张<code>Hash表</code>。</li><li>根据对象的地址，通过一个均匀散列函数的计算就可以得到数组下标索引值。</li></ul><p><strong>Hash查找过程</strong><br>例: 给定值是对象内存地址,目标值是数组下标索引。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-daf61e2b8d037658.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hash查找"></p><p>f(ptr) = (uintptr_t)ptr% array.count</p><h3 id="三、散列表中数据结构"><a href="#三、散列表中数据结构" class="headerlink" title="三、散列表中数据结构"></a>三、散列表中数据结构</h3><p>1)自旋锁（Spinlock_t）</p><ul><li>是一种忙等的锁（当前锁已被其他线程获取，当前线程就会不断的探测这个锁是否被释放,如果释放自己第一时间获取锁）</li><li>适用于轻量访问。 例如引用计数+1、-1操作</li></ul><p>补充:信号量 如果获取不到锁,自己会等待休眠,等他其他线程释放锁时,唤醒当前线程.</p><p>2)引用计数表（RefcountMap）<br>ptr ——&gt; DisguisedPtr(obj) ——&gt;size_t<br>提高查找效率，插入和获取都是通过同一个哈希算法，避免了数组遍历</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-2e77307a5c365b9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RefcountMap"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-2b1662dd495fd8b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="size_t数据结构"></p><p>3)弱引用表（weal_table_t）<br>ptr ——&gt; Hash函数——&gt;value</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-05661186696016fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="四、ARC-amp-MRC"><a href="#四、ARC-amp-MRC" class="headerlink" title="四、ARC&amp;MRC"></a>四、ARC&amp;MRC</h3><p>1、MRC：手动引用计数。alloc、retain、release、retainCount、autorelease、dealloc。<br>2、ARC：自动引用计数。<br>(1)、ARC是LLVM（编译器）和RunTime协作的结果。<br>(2)、ARC中禁止手动调用retain/release/retainCount/dealloc。<br>(3)、ARC中新增weak、strong属性关键字。</p><h3 id="五、引用计数管理"><a href="#五、引用计数管理" class="headerlink" title="五、引用计数管理"></a>五、引用计数管理</h3><p>实现原理分析，包括alloc、retain、release、retainCount、dealloc。</p><h4 id="1、alloc实现"><a href="#1、alloc实现" class="headerlink" title="1、alloc实现"></a>1、alloc实现</h4><p>经过一系列调用，最终调用的C函数calloc，此时并没有设置引用计数为1（但是通过retainCount得知是1，在后面会讲到）</p><h4 id="2、retain实现"><a href="#2、retain实现" class="headerlink" title="2、retain实现"></a>2、retain实现</h4><p>经过两次Hash查找，找到对应的引用计数值，然后进行+1的操作</p><pre><code>SideTable&amp; table = SideTables()[this];size_t&amp; refcntStorage = table.refcnts[this];refcntStorage += SIDE_TABLE_RC_ONE;</code></pre><h4 id="3、release实现"><a href="#3、release实现" class="headerlink" title="3、release实现"></a>3、release实现</h4><p>经过两次Hash查找，找到对应的引用计数值，然后进行-1的操作</p><pre><code>SideTable&amp; table = SideTables()[this];RefcountMap::iterator it = table.refcnts.find(this);it -&gt;second -=  SIDE_TABLE_RC_ONE;</code></pre><h4 id="4、retainCount实现"><a href="#4、retainCount实现" class="headerlink" title="4、retainCount实现"></a>4、retainCount实现</h4><p>经过两次Hash查找，找到对应的引用计数值，然后与1相加（因此刚alloc的对象，在对应的引用计数表中实际是没有这个映射的）</p><pre><code>SideTable&amp; table = SideTables()[this];size_t refcnt_result = 1;RefcountMap::iterator it = table.refcnts.find(this);refcnt_result += it-&gt;secont &gt;&gt;  SIDE_TABLE_RC_SHIFT;</code></pre><h4 id="5、dealloc实现"><a href="#5、dealloc实现" class="headerlink" title="5、dealloc实现"></a>5、dealloc实现</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-4a72106b2639b240.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dealloc实现"></p><p><strong>判断对象时候可以释放的条件</strong>（五个条件缺一不可）</p><ul><li>没有使用nonpointer_isa</li><li>没有weak指针指向</li><li>没有有关联对象</li><li>没有使用ARC或者涉及C++</li><li>当前对象的引用计数没有通过SideTable中的引用计数表来存储的</li></ul><h5 id="object-dispose-实现"><a href="#object-dispose-实现" class="headerlink" title="object_dispose() 实现"></a>object_dispose() 实现</h5><p><img src="https://upload-images.jianshu.io/upload_images/126164-35f00d8231e95892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="object_diapose内部实现"></p><h5 id="objc-destructInstance-实现"><a href="#objc-destructInstance-实现" class="headerlink" title="objc_destructInstance()实现"></a>objc_destructInstance()实现</h5><p><img src="//upload-images.jianshu.io/upload_images/6751716-da913de399e6c4c0.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="objc_destructInstance内部实现"></p><h5 id="clearDeallocating-实现"><a href="#clearDeallocating-实现" class="headerlink" title="clearDeallocating()实现"></a>clearDeallocating()实现</h5><p><img src="https://upload-images.jianshu.io/upload_images/126164-4e432ad3bbb40026.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="clearDeallocating内部实现"></p><h3 id="六、弱引用管理"><a href="#六、弱引用管理" class="headerlink" title="六、弱引用管理"></a>六、弱引用管理</h3><p><img src="https://upload-images.jianshu.io/upload_images/126164-36beeb1dd88bb8ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="weak对象编译"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-adcccd382fb086c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="objc_initWeak调用栈"></p><p>问题:如何添加weak变量的?(系统是怎样把一个weak变量添加到弱引用表中?)<br>答:对象指针在经过编译器的编译之后调用objc_initweak()，然后storeweak()方法，经过一系列的函数调用栈，最终在weak_register_no_lock()进行弱引用变量的添加，(具体添加位置是)通过hash算法位置查找，如果已经存在当前对象对应的弱引用数组，则直接加进去，如果没有则创建新个新的弱引用数组，然后把第0个位置存放新的weak指针,后面的都初始化nil或者0。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-02b961689b3dd9b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="系统如何实现将废弃的weak指针置为nil"></p><p>问题: 系统如何实现将废弃对象的weak指针置为nil?<br>答:当对象被dealloc废弃之后，dealloc内部实现中会调用弱引用清除的相关函数(<code>weak_clear_no_lock()</code>)。然后在函数实现中，根据当前对象指针，哈希查找弱引用表，把当前对象对应的弱引用都拿出来是一个数组，然后遍历这个数组中所有的弱引用指针置分别置为nil。</p><h3 id="七、自动释放池"><a href="#七、自动释放池" class="headerlink" title="七、自动释放池"></a>七、自动释放池</h3><h4 id="1-自动释放池数据结构"><a href="#1-自动释放池数据结构" class="headerlink" title="1 自动释放池数据结构"></a>1 自动释放池数据结构</h4><p>编译器会将<code>@autoreleasepool{}</code>改写为:<br><img src="https://upload-images.jianshu.io/upload_images/126164-a636a668ad152378.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre><code>void *ctx = objc_autoreleasePoolPush();{}中的代码objc_autoreleasePoolPop(ctx);</code></pre><p>下面对上面的主要函数进行一个简单的说明: </p><h5 id="1-objc-autoreleasePoolPush内部实现"><a href="#1-objc-autoreleasePoolPush内部实现" class="headerlink" title="1)objc_autoreleasePoolPush内部实现"></a>1)objc_autoreleasePoolPush内部实现</h5><p><img src="https://upload-images.jianshu.io/upload_images/126164-4ba027935c35f9d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="objc_autoreleasePoolPush内部实现"></p><h5 id="2-objc-autoreleasePoolPop内部实现"><a href="#2-objc-autoreleasePoolPop内部实现" class="headerlink" title="2)objc_autoreleasePoolPop内部实现"></a>2)objc_autoreleasePoolPop内部实现</h5><p><img src="https://upload-images.jianshu.io/upload_images/126164-7fa8eb046456fad0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="objc_autoreleasePoolPop内部实现"></p><p>实际<code>objc_autoreleasePoolPop</code>函数在内部做了pop操作，批量将autoreleasepool中的所有的对象都会做一次release操作.</p><p>下面对上面的主要函数进行一个简单的说明:</p><h5 id="3-AutoreleasePool的结构"><a href="#3-AutoreleasePool的结构" class="headerlink" title="3)AutoreleasePool的结构"></a>3)AutoreleasePool的结构</h5><ul><li>是以栈为结点通过双向链表的形式组合而成</li><li>是和线程一一对应的</li></ul><p>问题:AutoreleasePool的实现结构是怎么样的？(什么是自动释放池?实现原理)<br>答:<br>AutoreleasePool是以<code>栈</code>为结点，通过<code>双向链表</code>的形式组合而成的数据结构。 AutoreleasePool是和<code>线程</code>一一对应的。</p><h4 id="2-双向链表"><a href="#2-双向链表" class="headerlink" title="2 双向链表"></a>2 双向链表</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-265b481a2319f918.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="双向链表数据结构"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-ab3c215d0fa34111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="栈数据结构"></p><h5 id="AutoreleasePoolPage"><a href="#AutoreleasePoolPage" class="headerlink" title="AutoreleasePoolPage"></a>AutoreleasePoolPage</h5><p><img src="https://upload-images.jianshu.io/upload_images/126164-6e64dc84ff3eff99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AutoreleasePoolPage数据结构"></p><p> <strong>1)AutoreleasePoolPage::push实现流程</strong>（释放池多层嵌套）</p><ul><li>插入哨兵对象</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-4071be004294f6b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AutoreleasePoolPage push实现流程"></p><p><strong>2)AutoreleasePoolPage::pop实现流程</strong>（与push相反）</p><ul><li>根据传入的哨兵对象找到对应的位置</li><li>给上次push操作之后添加的对象依次发送release消息</li><li>回退next指针到正确的位置</li></ul><h5 id="obj-autorelease-的实现（对象加入自动释放池）"><a href="#obj-autorelease-的实现（对象加入自动释放池）" class="headerlink" title="[obj autorelease]的实现（对象加入自动释放池）"></a>[obj autorelease]的实现（对象加入自动释放池）</h5><p>先判断当前next指针是否指向栈顶，如果没有指向栈顶直接将对象加入到next指针位置,结束流程；如果next已经位于栈顶，则增加一个栈结点到链表上，在新的栈添加对象,结束流程</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-9839600c904973af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="obj autorelease实现"></p><p>问题: array是什么时候释放的呢? </p><pre><code>- (void)viewDidLoad {    [super viewDidLoad];    NSMutableArray *arrar =[NSMutableArray array];    NSLog(@&quot;%@&quot;,arrar);}</code></pre><p>答：在当次runloop将要结束的时候调用AutoreleasePoolPage:pop(),对array对象执行release操作</p><p>问题:AutoreleasePool为何可以嵌套使用？<br>答: 多次插入哨兵对象，也就是对一个新的<code>autoreleasePool</code>的创建，如果当前栈没有满，则不需要创建新的page,如果满了，新增一个栈节点</p><p>问题: AutoreleasePool的使用场景？<br>答: 在for循环中，alloc图片数据等内存消耗较大的场景手动插入autoreleasePool，每一次for循环都进行一次内存的释放，降低内存消耗</p><h3 id="八、循环引用"><a href="#八、循环引用" class="headerlink" title="八、循环引用"></a>八、循环引用</h3><h4 id="1、三种循环引用：自循环引用、相互循环引用、多循环引用。"><a href="#1、三种循环引用：自循环引用、相互循环引用、多循环引用。" class="headerlink" title="1、三种循环引用：自循环引用、相互循环引用、多循环引用。"></a>1、三种循环引用：自循环引用、相互循环引用、多循环引用。</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-cac7b279a59698ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自循环引用"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-b83fab54a14afbd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="相互循环引用"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-f19452acea3069cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多循环引用"></p><h4 id="2、如何破除循环引用？"><a href="#2、如何破除循环引用？" class="headerlink" title="2、如何破除循环引用？"></a>2、如何破除循环引用？</h4><p>1) 避免产生循环引用 (如使用代理两个对象,一个是强引用,一个是弱引用)<br>2) 在合适的时机手动断环</p><h4 id="3、-常见的循环引用场景："><a href="#3、-常见的循环引用场景：" class="headerlink" title="3、 常见的循环引用场景："></a>3、 常见的循环引用场景：</h4><p>代理（delegate）、block 、 NSTimer 、大环引用</p><h4 id="4、具体的解决方案都有哪些？"><a href="#4、具体的解决方案都有哪些？" class="headerlink" title="4、具体的解决方案都有哪些？"></a>4、具体的解决方案都有哪些？</h4><ul><li>__weak</li><li>__block</li><li>__unsafe_unretained(与weak等效)</li></ul><p><strong>block破解  (**</strong>block在ARC和MRC条件下的区别?**)</p><ul><li><code>MRC</code>下，__block修饰对象不会增加其引用计数，<code>避免</code>了循环引用</li><li><code>ARC</code>下，__block修饰对象会被强引用，<code>无法避免</code>循环引用，<code>需手动解环</code></li></ul><p><strong>__unsafe_unretained破解</strong></p><ul><li>修饰对象不会增加其引用计数，<code>避免</code>了循环引用。</li><li>如果被修饰对象在某一时机被释放，会产生<code>悬空指针</code>。</li></ul><p><strong>循环引用的示例？</strong>（平时开发时是否有遇到循环引用，又是怎么解决的？）</p><ul><li>Block使用示例（在后面block讲解时）</li><li>NSTimer 的循环引用问题</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-fc4e1198c2235d36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NSTimer循环引用"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-420511b870a8cbc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NSTimer循环引用解决"></p><pre><code>//NSTimer+WeakTimer.h@interface NSTimer (WeakTimer)+ (NSTimer *)scheduledWeakTimerWithTimeInterval:(NSTimeInterval)interval                                         target:(id)aTarget                                       selector:(SEL)aSelector                                       userInfo:(id)userInfo                                        repeats:(BOOL)repeats;@end</code></pre><pre><code>//NSTimer+WeakTimer.m@interface TimerWeakObject : NSObject@property (nonatomic, weak) id target;@property (nonatomic, assign) SEL selector;@property (nonatomic, weak) NSTimer *timer;- (void)fire:(NSTimer *)timer;@end@implementation TimerWeakObject- (void)fire:(NSTimer *)timer {    if (self.target) {        if ([self.target respondsToSelector:self.selector]) {            [self.target performSelector:self.selector withObject:timer.userInfo];        }    }else{        [self.timer invalidate];    }}@end@implementation NSTimer (WeakTimer)+ (NSTimer *)scheduledWeakTimerWithTimeInterval:(NSTimeInterval)interval                                         target:(id)aTarget                                       selector:(SEL)aSelector                                       userInfo:(id)userInfo                                        repeats:(BOOL)repeats {    TimerWeakObject *object = [[TimerWeakObject alloc] init];    object.target = aTarget;    object.selector = aSelector;    object.timer = [NSTimer scheduledTimerWithTimeInterval:interval target:object selector:@selector(fire:) userInfo:userInfo repeats:repeats];    return object.timer;}@end</code></pre><h3 id="内存管理面试总结"><a href="#内存管理面试总结" class="headerlink" title="内存管理面试总结:"></a>内存管理面试总结:</h3><p>问题:什么是ARC?<br>答:自动引用计数。ARC是由LLVM（编译器）和RunTime共同协作来为我们实现自动引用计数的管理。</p><p>问题:为什么weak指针指向的对象在废弃之后会被自动置为nil?<br>答:当对象被废弃之后，dealloc内部实现中会调用清除弱引用的相关函数(<code>weak_clear_no_lock()</code>)。然后在清除弱引用函数实现中，会通过哈希算法查找被废弃对象在弱引用表中位置，来提取它所对应的弱引用指针的列表数组，然后进行for循环遍历, 把所有的弱引用指针置分别置为nil。</p><p>问题:苹果是如何实现AutoreleasePool的?<br>答:AutoreleasePool是以<code>栈</code>为结点，通过<code>双向链表</code>的形式组合而成的数据结构。</p><p>问题:什么是循环引用?你遇到过哪些循环引用,是怎样解决的?<br>答: NSTimer循环引用</p><hr><hr><pre><code>    //__weak修饰，弱应用，对象引用计数不会加1    __weak NSArray *weakArr1;    __weak NSArray *weakArr2;    {        //arr1指向的数组对象没有被注册到autorelease pool        NSArray *arr1 = [[NSArray alloc] initWithObjects:@&quot;123&quot;, nil];        weakArr1 = arr1;        //arr2指向的数组对象已被注册到autorelease pool        NSArray *arr2 = [NSArray arrayWithObjects:@&quot;123&quot;, nil];        weakArr2 = arr2;    }    //局部变量arr1和arr2的作用域结束，    //此时arr1指向的对象不再被强引用，因此被回收；    //而arr2指向的对象仍然在autorelease pool中    NSLog(@&quot;%@&quot;, weakArr1);//输出null    NSLog(@&quot;%@&quot;, weakArr2);//输出arr2，因为此刻arr2在autorelease pool中，不会因为arr2作用域的结束而被回收</code></pre><pre><code>     __weak NSObject *weakObj1;     __weak NSObject *weakObj2;     {         __autoreleasing NSObject *obj1 = [[NSObject alloc] init];         //weakObj1指向的对象已被注册到autorelease pool         weakObj1 = obj1;         __strong NSObject *obj2 = [[NSObject alloc] init];         //weakObj2指向的对象没有被注册到autorelease pool         weakObj2 = obj2;     }     //局部变量obj1和obj2的作用域结束，     //此时weakObj2指向的对象不再被强引用，因此被回收；     //而weakObj1指向的对象仍然在autorelease pool中     NSLog(@&quot;%@&quot;, weakObj1);//输出&lt;NSObject: 0x100206030&gt;，因为此刻weakObj1在autorelease pool中，不会因为obj1作用域的结束而被回收     NSLog(@&quot;%@&quot;, weakObj2);//输出null</code></pre><p>Runloop每次循环都是被一个AutoReleasePool包围着的，具体说每次Runloop循环将要结束的时候会释放当前runloop的内存占用。再创建好一个AutoReleasePool给下一次Runloop循环使用。在该方法中创建的array会加入到当次RunLoop的AutoReleasePool中，array会在当前RunLoop将要结束的时候调用AutoreleasePoolPage:pop()，得到内存释放。</p>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第3章 RunTime相关面试问题</title>
      <link href="/2020/05/23/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC3%E7%AB%A0-RunTime%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/23/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC3%E7%AB%A0-RunTime%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote><p>本文主讲RunTime相关面试问题，包括数据结构、类对象与元类对象、消息传递、方法缓存、消息转发、Method-Swizzling、动态添加方法、动态方法解析。</p></blockquote><h3 id="一-类对象与元类对象"><a href="#一-类对象与元类对象" class="headerlink" title="一.类对象与元类对象"></a>一.类对象与元类对象</h3><h4 id="1-objc-object"><a href="#1-objc-object" class="headerlink" title="1)  objc_object"></a>1)  objc_object</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-91688e6303b95cce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="objc_object结构"></p><p>实际使用所有对象都是id类型, id对象代表就是objc_object结构体.<br>id = objc_object 分为以下几部分:</p><ul><li>isa_t  </li><li>关于isa操作相关(如:获取isa所指向的类对象 或者 通过类对象isa获取它元类对象一些便利方法)</li><li>弱引用相关  (如:标记一个对象是否标记过弱引用指针)</li><li>关联对象相关(如: 这个对象设置关联属性)</li><li>内存管理相关 (如:MRC retain release , ARC @autoreleasepool)</li></ul><h4 id="2-objc-class"><a href="#2-objc-class" class="headerlink" title="2) objc_class"></a>2) objc_class</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-aa6884f318419fc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="objc_class结构"></p><p><code>Class</code> = objc_class<br>objc_class 继承自 objc_object, 所以Class也是一个对象</p><ul><li><code>Class</code> superClass (指向父类对象)</li><li><code>cache_t</code> cache (方法缓存结构, 进行消息传递会使用这个数据结构)</li><li><code>class_data_bits_t</code> bits (类定义的变量 属性和方法都在这个结构中)</li></ul><h4 id="3-isa指针"><a href="#3-isa指针" class="headerlink" title="3) isa指针"></a>3) isa指针</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-029f60d4d6c75efd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="isa_t结构"></p><p>共用体 isa_t  (问题:isa指针是什么含义?)</p><ul><li>在32位或64位架构下，都是32或者64个0或者1的二进制数字 ,isa指针分为指针形isa和非指针形isa</li><li>指针型isa的<code>值</code>代表Class的地址</li><li>非指针型isa的<code>值的部分</code>代表Class的地址</li></ul><h4 id="4-isa指针的指向"><a href="#4-isa指针的指向" class="headerlink" title="4) isa指针的指向"></a>4) isa指针的指向</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-0f35a9a2bd2bde50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="isa指向"></p><ul><li>关于<code>对象</code>，其指向<code>类对象</code></li><li>关于<code>类对象</code>，其指向<code>元类对象</code></li><li><code>元类对象</code>的isa指针都指向根元类对象，而根元类对象对象的isa指针指向根类对象。</li></ul><p>方法调用时,调用实例方法实际上通过isa指针到类对象中进行方法查找.<br>如果调用类方法, 通过类对象isa这种到元类对象中进行方法查找.</p><h4 id="5-cache-t"><a href="#5-cache-t" class="headerlink" title="5) cache_t"></a>5) cache_t</h4><p>cache_t 特点:</p><ul><li>用于<code>快速</code>查找方法执行函数  (提高消息传递速度)</li><li>是可<code>增量扩展</code>的<code>哈希表</code>结构 (提高查找效率)</li><li>是<code>局部性原理</code>的最佳应用 </li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-6d726ca367494bd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cache_t数据结构"></p><p>cache_t 理解为一个数组实现的, 里边存储 bucket_t结构体, bucket_t有两个成员变量. key对应OC中 @selector , IMP理解为无类型函数指针.  调用方法时使用SEL, 通过方法选择器名称来寻找具体实现IMP. </p><h4 id="6-class-data-bits-t"><a href="#6-class-data-bits-t" class="headerlink" title="6)class_data_bits_t"></a>6)class_data_bits_t</h4><ul><li><code>class_data_bits_t</code>主要是对<code>class_rw_t</code>的封装</li><li><code>class_rw_t</code> 代表类相关的<code>读写</code>信息, 对class_ro_t的封装</li><li><code>class_ro_t</code>代表类相关的<code>只读</code>信息</li></ul><h4 id="7-class-rw-t"><a href="#7-class-rw-t" class="headerlink" title="7) class_rw_t"></a>7) class_rw_t</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-83d7cd985ec5901e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="class_rw_t数据结构"></p><p>为一个类添加分类中的协议 属性 方法都在protocols properties methods 这三个结构中.这三个数据结构是一个二维数组(list_array_tt)</p><h4 id="8-class-ro-t"><a href="#8-class-ro-t" class="headerlink" title="8) class_ro_t"></a>8) class_ro_t</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-f17fffe66c9d3806.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="class_ro_t数据结构"></p><p>class_ro_t 中一维数组 ivars protocols properties methodList 存储的原始类定义添加的成员变量 协议 属性和方法列表</p><h3 id="二-runtime整体数据结构"><a href="#二-runtime整体数据结构" class="headerlink" title="二.runtime整体数据结构"></a>二.runtime整体数据结构</h3><h4 id="1-method-t"><a href="#1-method-t" class="headerlink" title="1) method_t"></a>1) method_t</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-0dcb1eb609e4139f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="method_t结构"></p><p>method_t结构体封装了函数四要素，其中名称通过SEL方法选择器表示，返回值和参数则由“Type Encodings”类型的字符串表示，函数体则指代了IMP函数指针。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-610472e04164e9a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="types结构"></p><p>更多关于<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html" target="_blank" rel="noopener">Type Encodings</a></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-c268216bbdadfad0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Type Encodings"></p><h4 id="2-runtime整体数据结构"><a href="#2-runtime整体数据结构" class="headerlink" title="2)runtime整体数据结构"></a>2)runtime整体数据结构</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-13d5109ba7ee9a98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="runtime整体数据结构"></p><h3 id="三-实例对象、类对象、元类对象"><a href="#三-实例对象、类对象、元类对象" class="headerlink" title="三 实例对象、类对象、元类对象"></a>三 实例对象、类对象、元类对象</h3><ul><li><code>类对象</code>存储实例方法列表等信息 的数据结构</li><li><code>元类对象</code>存储类方法列表等信息 的数据结构.</li></ul><p>关于类对象的isa指针指向可以用下图表示：<br><img src="https://upload-images.jianshu.io/upload_images/126164-96a719177e2d13c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实例对象 类对象 元类对象关系.png"></p><ul><li>Root class 是根类,分类父类指向nil, 实际指 NSObject这个类</li><li>左侧部分指实例对象, 也就是objc_object这个数据结构,实例isa指向实例对象的类对象</li><li>右侧部分指元类对象, 任何元类对象isa指针指向根元类对象,根元类对象自身isa指针指向根元类对象.根元类对象superclass指针指向根类对象</li><li>当调用类方法从元类对象方法列表中逐级父类往上查找 , 查找到根元类对象(Root class meta)找不到时, 就会去根类(Root class class)对象中查找同名的实例方法实现.</li></ul><p>问题:类对象和元类对象有什么区别和联系?<br>答: </p><ul><li>实例对象可以通过isa指针找到它的类对象</li><li>类对象存储实例方法列表等信息,类对象可以通过它的isa指针找到它的元类对象,从而可以访问类方法列表等信息.</li><li>类对象和元类对象都是objc_class数据结构,objc_class数据结构由于继承objc_object,所以类对象和元类对象才有isa指针.进而实例对象可以通过isa指针找到对应类对象,访问实例方法列表等信息, 类对象通过isa指针找到元类对象,访问类方法列表等信息.</li></ul><p>问题:如果调用类方法没有对应的实现, 当时有同名的实例方法实现, 这个时候会不会发生崩溃?会不会产生实际调用?<br>答: 由于根元类对象的superclass指针指向了根类对象, 当查找到根元类对象(Root class meta)类方法找不到时, 就会去根类(Root class class)对象中查找同名的实例方法实现,如果找到调用.</p><h3 id="四-消息传递机制"><a href="#四-消息传递机制" class="headerlink" title="四 消息传递机制"></a>四 消息传递机制</h3><h4 id="1-消息传递流程"><a href="#1-消息传递流程" class="headerlink" title="1) 消息传递流程"></a>1) 消息传递流程</h4><p>可以用下图展示消息传递的流程：</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-d302eb60caa9de4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="消息传递流程.png"></p><p>注意：在消息缓存中查找是通过<code>哈希表</code>来快速定位函数指针，而在当前类方法列表中查找时，对于已经排序好的列表使用二分查找，而对于没有排序的列表采用一般遍历查找法。</p><h4 id="2-缓存查找"><a href="#2-缓存查找" class="headerlink" title="2) 缓存查找"></a>2) 缓存查找</h4><p>例 ：给定值是SEL, 目标值是对应的bucket_t中的IMP.<br><img src="https://upload-images.jianshu.io/upload_images/126164-2a28d08deef6f545.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="缓存查找"></p><p>问题:缓存查找具体的是怎样的流程和步骤?<br>答:缓存查找实际上就是从 cache_t中 把对应bucket_t找出来.<br>根据给定的方法选择器,通过一个函数来映射出bucket_t在数组中映射的位置, 实际上就是<code>哈希查找</code>. 哈希查找通过给定的值, 经过哈希函数算法算出的值, 实际为给定值在数组中的索引位置.</p><h4 id="3-当前类中查找"><a href="#3-当前类中查找" class="headerlink" title="3)当前类中查找"></a>3)当前类中查找</h4><ul><li>对于<code>已排序好</code>的列表, 采用<code>二分查找</code>算法查找方法对应执行函数.</li><li>对于<code>没有排序</code>的列表, 采用<code>一般遍历</code>查找方法对应执行函数.</li></ul><h4 id="4-父类逐级查找"><a href="#4-父类逐级查找" class="headerlink" title="4)父类逐级查找"></a>4)父类逐级查找</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-0da53c157b8ab188.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="父类逐渐查找流程"></p><p>问题: 消息传递机制?<br>答:<br>1)缓存是否命中, 当前类方法列表是否命中, 逐级父类方法列表是否命中<br>2)根据三个方面分别讲述具体情况</p><h3 id="五-消息转发流程"><a href="#五-消息转发流程" class="headerlink" title="五 消息转发流程"></a>五 消息转发流程</h3><p><img src="https://upload-images.jianshu.io/upload_images/126164-43ee68cfea943e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="消息转发流程.png"></p><blockquote><p>resolvelnstanceMethod方法中为对象动态添加方法，已达到处理消息未被实现的问题。</p></blockquote><p>当<code>objc_msgSend</code>方法调用找不到响应的函数名称时就会进行消息转发，主要分为3步:<br>1、动态方法解析<br>调用方法+(BOOL)resolveInstanceMethod:(SEL)sel(实例方法动态解析)和+ (BOOL)resolveClassMethod:(SEL)sel(类方法动态解析)。</p><p>2、备援接收者<br>调用方法  - (id)forwardingTargetForSelector:(SEL)aSelector</p><p>3、完全转发<br>调用方法- (void)forwardInvocation:(NSInvocation <em>)anInvocation和- (NSMethodSignature </em>)methodSignatureForSelector:(SEL)aSelector</p><h3 id="六-Method-Swizzling"><a href="#六-Method-Swizzling" class="headerlink" title="六 Method-Swizzling"></a>六 Method-Swizzling</h3><pre><code>+ (void)load{    //获取test方法    Method test = class_getInstanceMethod(self, @selector(test));    //获取otherTest方法    Method otherTest = class_getInstanceMethod(self, @selector(otherTest));    //交换两个方法    method_exchangeImplementations(test, otherTest);}- (void)test{    NSLog(@&quot;test&quot;);}- (void)otherTest{    //实际上是调用test具体实现    [self otherTest];    NSLog(@&quot;otherTest&quot;);}</code></pre><h3 id="七-动态添加方法"><a href="#七-动态添加方法" class="headerlink" title="七 动态添加方法"></a>七 动态添加方法</h3><p>问题:是否使用过performSelector: 方法?<br>答:</p><pre><code>void testImp (void) {    NSLog(@&quot;test invoke&quot;);}+ (BOOL)resolveInstanceMethod:(SEL)sel {    // 如果是test方法 打印日志    if (sel == @selector(test)) {        NSLog(@&quot;resolveInstanceMethod:&quot;);        // 动态添加test方法的实现        class_addMethod(self, @selector(test), testImp, &quot;v@:&quot;);        //解决了实例方法调用 返回YES        return YES;    }else{        // 返回父类的默认调用        return [super resolveInstanceMethod:sel];    }}</code></pre><h3 id="八-动态方法解析"><a href="#八-动态方法解析" class="headerlink" title="八 动态方法解析"></a>八 动态方法解析</h3><p>@dynamic  (问题:是否使用过@dynamic 关键字?)</p><ul><li>动态运行时语言将函数决议推迟到运行时<br>(当把属性标识为@dynamic时, 代表着不需要编译器在编译时为属性生成get方法和set方法的具体实现,而是在运行时具体调用get方法或者set方法时,再去添加具体实现)</li><li>编译时语言在编译期进行函数决议<br>(在编译期就确定了方法函数体是哪个, 具体运行过程中不能修改)</li></ul><h3 id="Runtime面试问题总结"><a href="#Runtime面试问题总结" class="headerlink" title="Runtime面试问题总结"></a>Runtime面试问题总结</h3><p><strong>问题: [obj foo] 和 objc_msgSend()函数之间有什么关系?</strong><br>答: 实际上消息传递, 在编译期处理过程后, [obj foo] 就转变成了objc_magSend(obj, @selector(foo)) , 之后开始runtime消息传递过程</p><p><strong>问题:runtime如何通过Selector找到对应的IMP地址的?</strong><br>答:考察消息传递机制.</p><ul><li>首先查找当前实例所对应类对象的缓存是否有Selector对应缓存的IMP实现, 如果缓存命中了,就把命中缓存函数返回给调用方.</li><li>如果缓存没有命中,根据当前类方法列表查找Selector对应的IMP实现</li><li>如果当前类没有命中, 在根据当前类superclass指针逐级查找父类方法列表,然后查找Selector对应的IMP实现.</li></ul><p><strong>问题:能否向编译后的类中添加实例变量?</strong><br>答:(两个点 编译后的类,还是动态添加的类?)<br>不能.<br>由于runtime是支持在运行时动态添加类, 编译之前创建的类,已经完成了实例变量的布局, runtime数据结构中 class_ro_t 编译后没有办法修改的.</p><p><strong>问题:能否向动态添加的类中添加实例变量?</strong><br>答:可以. 动态添加的类调用注册类方法前,完成实例变量的添加是可以实现的.  </p>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第2章 Objective-C语言特性相关面试问题</title>
      <link href="/2020/05/23/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC2%E7%AB%A0-Objective-C%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/23/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC2%E7%AB%A0-Objective-C%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote><p>本文主讲Objective-C语言特性相关面试问题，包括分类、关联对象、扩展、代理、通知、KVO、 KVC、 属性关键字。</p></blockquote><h3 id="一、分类-Category"><a href="#一、分类-Category" class="headerlink" title="一、分类(Category)"></a>一、分类(Category)</h3><p><strong>什么是分类（category）?</strong><br>Category是一个指向分类的结构体的指针，结构体主要包含分类定义的实例方法以及类方法</p><p>1、你用分类都做了哪些事？<br>(1)、声明私有方法<br>(2)、分解体积庞大的类文件<br>(3)、把Framework的私有方法公开</p><p>2、分类特点<br>(1)、运行时决议（运行时才会添加到宿主类）<br>在编写分类文件之后，并不会立即把分类中添加的内容添加到宿主类中，而是通过runtime把分类中的内容添加到宿主类中<br>(2)、可以为系统类添加分类</p><p>分类有多个的情况下，原有类以及每个分类都有同名的分类方法，最后哪个会生效？<br>答：通过源码分析，取决于编译器，最后一个参与编译的分类会生效。分类方法在runtime分配内存时会插在数组前列，在方法查找过程中，分类添加的方法会”覆盖“宿主类的同名方法(添加在，原方法依然存在)</p><p>3、分类中都可以添加哪些内容？<br>(1)、实例方法<br>(2)、类方法<br>(3)、协议<br>(4)、属性(只会生成set、get方法，不会生成成员变量)<br>可以写@property但并不会在分类中添加实例变量</p><p>分类结构体分析:<br><img src="https://upload-images.jianshu.io/upload_images/126164-42080f4815fb855c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分类结构体"></p><pre><code>//objc-runtime-680版本struct category_t {    const char *name; //分类名    classref_t cls;    //分类所属的类名    //分类中所有给类添加的实例方法的列表    struct method_list_t *instanceMethods;    //分类中所有添加的类方法的列表    struct method_list_t *classMethods;    //分类实现的所有协议的列表    struct protocol_list_t *protocols;    //分类中添加的所有实例属性列表    struct property_list_t *instanceProperties;    // Fields below this point are not always present on disk.    // struct property_list_t *_classProperties;    method_list_t *methodsForMeta(bool isMeta) {        if (isMeta) return classMethods;        else return instanceMethods;    }    property_list_t *propertiesForMeta(bool isMeta) {        if (isMeta) return nil;  //classProperties        else return instanceProperties;    }};</code></pre><p>可以看到，分类结构体中会引用其实例对象，类对象，协议以及实例属性的列表。<br>在加载中，系统会读取镜像加载分类文件并关联到他的宿主类中。</p><p>4、分类加载调用栈<br><img src="https://upload-images.jianshu.io/upload_images/126164-b766700b29b56618.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>加载中，分类的方法会“覆盖”原生类的方法，这里的覆盖并不是真正意义上的覆盖，而是将原类的方法在内存指针中后移，而分类方法会前移。不同分类所添加的同方法名的方法也会根据编译顺序而互相覆盖，最后被编译的分类方法将会“覆盖”掉之前编译的分类。<br>由于编译时，分类所拥有的方法会根据分类的名称对应存储在一个数组中，所以相同的分类名会造成编译时的报错。</p><p>5、源码分析<br>(1)、分类添加的方法可以”覆盖”原类方法。<br>(2)、同名分类方法谁能生效取决于编译顺序。最后被编译的分类最优先会生效<br>(3)、名字相同的分类会引起编译报错。</p><h3 id="二、关联对象"><a href="#二、关联对象" class="headerlink" title="二、关联对象"></a>二、关联对象</h3><p>1、能否给分类添加”成员变量”？<br>可以！可以写@property，原则上是不可以添加成员变量，但并没有在分类中添加实例变量。实际上可以通过关联对象associated object扩展属性。</p><pre><code>//根据指定key 到object对象中获取key相对应的关联值,将关联值作为函数返回值,返回给调用方id objc_getAssociatedObject(id object, const void * key)//将key和value建立映射关系,将对应关系通过policy策略关联到对象object上面, 关联策略是告诉函数value是copy还是assign, retain形式关联到数组对象上void objc_setAssociatedObject(id object, const void * key, id value, objc_AssociationPolicy policy)//移除指定对象的所有的关联对象void objc_removeAssociatedObjects(id object)</code></pre><p>在分类中使用关联对象，可以使分类具有成员变量的效果。</p><p>2、关联对象的本质<br>分类添加的成员变量，添加到成员变量数组里面了吗？<br>(1)、关联对象由<code>AssociationsManger</code>管理，并在<code>AssociationsHashMap</code>存储。<br>(2)、所有对象的关联内容都在同一个全局容器中。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-43cd32e5665b3447.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关联对象本质"></p><p>图说明:<br>1&gt;根据传入value (如 @”Hello”) 和policy 封装成ObjcAssociation结构<br>2&gt; ObjcAssociation 和 key (如 @selector(text) ) 建立映射关系构成 ObjcAssociationMap<br>3&gt; 由object的地址通过DISGUISE函数返回值生成key,<br>和所建立映射结构 ObjcAssociationMap 作为全局容器AssociationHashMap中 object 对应的value ,放到全局容器中</p><p>关联对象保存了需要关联实例的值，和引用规则，并使用键Key来指向关联对象，被关联对象作为key又指向了他自身的关联表。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-3d22400629aad023.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关联对象本质2"></p><p>3、源码分析</p><h3 id="三、扩展"><a href="#三、扩展" class="headerlink" title="三、扩展"></a>三、扩展</h3><p>1、一般用扩展做什么？<br>(1)、声明私有属性<br>(2)、声明私有方法<br>(3)、声明私有成员变量</p><p>2、扩展特点？<br>(1)、编译时决议<br>(2)、只以声明的形式存在，多数情况下寄生于宿主类的.m中。<br>(3)、不能为系统类添加扩展。</p><p>问题： 扩展和类别的区别是什么？<br>从二者的特点来回答</p><h3 id="四、代理-Delegate"><a href="#四、代理-Delegate" class="headerlink" title="四、代理(Delegate)"></a>四、代理(Delegate)</h3><h4 id="1-gt-定义"><a href="#1-gt-定义" class="headerlink" title="1&gt;定义"></a>1&gt;定义</h4><p>1、准确的说是一种软件设计模式。代理设计模式<br>2、iOS当中以@protocol形式体现。<br>3、传递方式一对一。</p><h4 id="2-gt-代理工作流程。"><a href="#2-gt-代理工作流程。" class="headerlink" title="2&gt; 代理工作流程。"></a>2&gt; 代理工作流程。</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-388ca5791baa4dd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="delegate的工作流程"></p><ul><li>委托方要求协议声明需要的属性以及方法</li><li>代理方遵循这个协议，并实现方法，可能返回处理结果</li><li>委托方调用代理方遵从的方法，如有返回结果，接收并处理</li></ul><h4 id="3-gt-代理遇到问题"><a href="#3-gt-代理遇到问题" class="headerlink" title="3&gt;代理遇到问题:"></a>3&gt;代理遇到问题:</h4><p>问题: 代理方和委托方以什么样的关系存在？应该注意什么问题？<br>答: 声明为weak规避循环引用（代理方强持有strong委托方 委托方需要有一个代理方的声明 声明weak）</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-86b80ffec0051c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代理weak声明"></p><h3 id="五、通知-NSNotification"><a href="#五、通知-NSNotification" class="headerlink" title="五、通知(NSNotification)"></a>五、通知(NSNotification)</h3><p>1、通知特点<br>(1)、是使用<code>观察者模式</code>来实现的用于跨层传递消息的机制。<br>(2)、传递方式为一对多。</p><p>问题:通知和代理的区别</p><ul><li>模式区别 代理模式   观察者模式</li><li>传递方式 一对多    一对一</li></ul><p>2、如何实现通知机制？</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-4969f085b3a5a454.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通知实现机制"></p><p>问题:通知的实现机制？<br>发送者 ——&gt;通知中心——&gt;广播给多个观察者</p><p>问题: 怎么实现通知机制<br>猜想：（类似runtime添加属性的方式）可能会由一个管理者管理一个HashMap表，每一个notificationName对应一个存放有多个观察者对象相关信息( 回调方法)的数组</p><h3 id="六、KVO"><a href="#六、KVO" class="headerlink" title="六、KVO"></a>六、KVO</h3><p>1、KVO介绍</p><ul><li>KVO是Key-value observing的缩写。</li><li>KVO是OC对观察者设计模式的又一实现。</li><li>Apple使用了 isa 混写 (isa-swizzling) 来实现KVO。</li></ul><p>这里提到的isa混写模式就是指，注册KVO的时候，系统会动态创建一个被观察对象的子类，然后令被观察对象的isa指针指向该子类，在该子类中重写了setter方法。这样，当原对象属性被修改时（基于KVC的修改），就会调用setter方法，然后通知观察者。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-4d521171a02eebab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="isa-swizzling 实现"></p><p>问题:isa-swizzling 混写技术怎么体现?<br>答: 当调用<code>addObserver:forKeyPath:options:context:</code> 后, 系统会在运行时动态创建类<code>KVONotifying_A</code>, 同时将原来A的指针指向类<code>KVONotifying_A</code> 。</p><p>问题:isa混写是怎么实现KVO的呢？<br>答:当注册一个对象class的观察者的时候，也就是调用下面的方法，系统会在runtime动态创建一个该对象的子类NSKVONotifiying_class(NSKVONotifiying_类名)，并将isa指针指向该派生类，并重写setter方法，负责通知所有的观察对象</p><pre><code>/* options: 有4个值，分别是：NSKeyValueObservingOptionOld 把更改之前的值提供给处理方法 NSKeyValueObservingOptionNew 把更改之后的值提供给处理方法 NSKeyValueObservingOptionInitial 把初始化的值提供给处理方法，一旦注册，立马就会调用一次。通常它会带有新值，而不会带有旧值。 NSKeyValueObservingOptionPrior 分2次调用。在值改变之前和值改变之后。  *///注册一个监听器用于监听指定的key路径[self.person addObserver:self forKeyPath:@&quot;name&quot; options:NSKeyValueObservingOptionNew context:nil];</code></pre><p>键值观察依赖依赖于NSObject的两个方法willChangeValueForKey:和didChangevalueForKey:<br>继而也会调用的下面的方法observeValueForKeyPath</p><pre><code>- (void)observeValueForKeyPath:(NSString *)keyPath                      ofObject:(id)object                        change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change                       context:(void *)contex}</code></pre><p>例如，A类的实例的name属性被B类的实例监听了。这时，OC的runtime机制生成了一个<code>KVONotifying_A</code>的类来替代原来的A类，重写了+ (Class)class方法，返回[A Class]，从而把自己伪装成A类。重写了A类属性name的setter方法加入了NSObject的两个方法:<code>willChangeValueForKey:(值改变之前)</code>和<code>didChangevlueForKey:(值改变之后)</code>。在一个被观察属性发生改变之前，<code>willChangeValueForKey:</code>一定会被调用，这就会记录旧的值。而当改变发生后，<code>didChangeValueForKey:</code>会被调用，继而<code>observeValueForKey:ofObject:change:context:</code>也会被调用。</p><p>2、KVO特点 (什么情况下能使KVO生效呢？)</p><ul><li>使用setter方法改变值，KVO才会生效。</li><li>使用setValue: forKey: 改变值，KVO才会生效。</li><li>成员变量直接修改，需手动添加KVO才会生效。</li></ul><p>3、通过KVC设置value能否促使KVO生效？为什么<br>答:可以，KVC会重写setter方法。<br><code>setValue: forKey:</code>会调用对象的set方法</p><p>4、通过成员变量直接赋值value能否生效？<br>不可以。可以在给成员变量赋值前后手动添加 [self willChangeValueForKey: ] 和 [self didChangeValueForKey: ] 。didChangeValueForKey方法会触发KVO回调。</p><p>如何实现手动KVO？</p><pre><code>- (void)setValue:(id)obj {  [self willChangeValueForKey:@&quot;keyPath&quot;];  [super setValue:obj];  [self didChangeValueForKey:@&quot;keyPath&quot;];}</code></pre><h3 id="七、KVC"><a href="#七、KVC" class="headerlink" title="七、KVC"></a>七、KVC</h3><p>KVC是<code>key-value coding</code>的缩写。</p><pre><code>//获取某个实例key同名或者相似名称的实例变量的值-(id)valueForKey:(NSString *)key//设置某个实例和key同名或者相似名称的实例变量的值-(void)setValue:(id)value forKey:(NSString *)key</code></pre><p>问题: KVC是否会破坏面向对象编程思想？<br>答: 在我们外部知道某个类的私有成员变量名时，可以通过上面两个方法设置/访问，会破坏面向对象编程思想</p><p>1、-(id)valueForKey:(NSString *)key 系统实现流程</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-d8273565cdab4f57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="valueForKey系统实现流程"></p><p>可以看到，系统先判断有没有对应setter getter方法，如果有则直接执行，如果没有则判断有没有对应的实例变量，如果有则执行实例变量的赋值，没有则会抛出异常。</p><p><strong>Accessor Method</strong>  (访问器方法是否存在判断)</p><ul><li><getkey></getkey></li><li><key></key></li><li><iskey></iskey></li></ul><p><strong>Instance var</strong> (实例变量是否存在判断)</p><ul><li>_key</li><li>_isKey</li><li>key</li><li>isKey</li></ul><p>问题: valueForKey的实现逻辑？<br>答: 判断访问器方法，是否存在或相似的方法名( <code>getKey</code>  <code>key</code>  <code>isKey</code> )，存在则返回；不存在再判断实例变量(<code>_key</code> <code>_isKey</code> <code>key</code> <code>isKey</code>)，存在或相似则返回；不存在就调用<code>valueForUndefineKey:</code>然后抛出一个异常</p><p>2、-(void)setValue:(id)value forKey:(NSString *)key 系统实现流程</p><p><img src="//upload-images.jianshu.io/upload_images/6751716-0f67ff3707158b16.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="setValue:forKey: 系统实现流程"></p><p>问题:setValue:forKey:的实现逻辑？<br>答: 判断访问器方法，存在或相似则返回；不存在再判断实例变量，存在或相似则返回；不存在就调用<code>setValue:ForUndefineKey:</code>然后抛出一个异常</p><h3 id="八、属性关键字"><a href="#八、属性关键字" class="headerlink" title="八、属性关键字"></a>八、属性关键字</h3><p>1、读写权限 readonly、<strong>*readwrite</strong>(默认)<br>2、原子性 <strong>atomic</strong>(默认)、nonatomic。<br>atomic只能保证赋值和获取是线程安全(成员属性)，不能保证操作和访问线程安全。例如NSArray，可以保证赋值和获取对象线程安全，不能保证删除和添加对象线程安全。</p><p>3、引用计数<br>(1)、retain/<strong>strong</strong> （都用于修饰对象，retain在 MRC中使用， stong在ARC中使用）。<br>(2)、<strong>assign</strong> /unsafe_unretained (assign 修饰基本数据类型/对象类型， unsafe_unretained ARC基本不用)<br>assign特点:</p><ul><li>修饰基本数据类型，如int、BOOL等。</li><li>修饰对象类型时，不改变其引用计数。</li><li>会产生悬垂指针。<br>(3)、weak<br>weak特点</li><li>不改变被修饰对象的引用计数。</li><li>所指对象在被释放之后会自动置为nil。</li></ul><p><strong>问题:通过atomic修饰是怎么保证线程安全的呢？</strong><br>答: 通过atomic修饰一个数组，对其进行赋值获取，保证线程安全，但是对其进行增加、删除是无法保证线程安全的</p><p><strong>问题: assign和weak有什么区别？</strong><br>答:<br>从二者的特点来说：<br>assign的特点</p><ul><li>可以修饰基本数据类型和对象</li><li>修饰对象类型时，不改变引用计数</li><li>释放时依然指向原对象内存地址，继续访问会产生<code>悬空指针</code>（<code>野指针</code>是只没有被初始化过的指针 区分）</li></ul><p>weak的特点</p><ul><li>只用于修饰对象</li><li>不改变被修饰对象的引用计数</li><li>所指对象再被释放之后会自动置为nil</li></ul><p>(4)、copy<br>问题:浅拷贝和深拷贝有什么区别？<br>答:<br><strong>浅拷贝</strong>：对内存地址的复制，让目标对象指针和源对象指向<code>同一块</code>内存空间<br>浅拷贝特点 :<br>1.浅拷贝会增加被拷贝对象的引用计数<br>2.没有发生新的内存分配<br><strong>深拷贝</strong>：让目标对象指针和源对象指针指向<code>两片</code>内容相同的内存空间（特点:产生内存分配）<br>深拷贝特点:<br>1.深拷贝不会增加被拷贝对象的引用计数<br>2.深拷贝发生新的内存分配,出现两块内存</p><p>深拷贝、浅拷贝区别?</p><ul><li>是否开辟了新的内存空间</li><li>是否影响了引用计数</li></ul><p>2&gt; copy对对象造了什么影响？</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-e14114c7c2ba7663.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>表格总结：</p><ul><li>可变对象的copy和mutableCopy都是深拷贝。</li><li>不可变对象的copy是浅拷贝，mutableCopy是深拷贝。</li><li>copy方法返回的对象都是不可变对象。</li></ul><p>3&gt;、copy面试题</p><pre><code>@property(copy)NSMutableArray *array?答:如果赋值过来的是NSMutableArray, copy之后是NSArray如果赋值过来的是NSArray, copy之后是NSArray</code></pre><h3 id="OC语言特性面试总结"><a href="#OC语言特性面试总结" class="headerlink" title="OC语言特性面试总结:"></a>OC语言特性面试总结:</h3><p>1、MRC下如何重写retain修饰变量的setter方法？</p><pre><code>@property(nonatomic,retain) id obj; - (void)setObj:(id)obj {//判断防止异常处理 防止如果传进来的是非obj对象，就会release掉非obj的对象    if(_obj != obj) {          [_obj release];        _obj = [obj retain];     }}</code></pre><p>2、请简述分类实现原理。<br>答:</p><ul><li>分类实现原理由运行时来决议的</li><li>不同分类中含有同名分类方法,谁最终生效取决于谁最后参与编译,最后参与编译的分类中同名方法会最终生效.</li><li>如果分类中的方法和宿主类方法同名,分类方法会覆盖宿主类同名方法. 覆盖指由于消息传递过程中, 优先查找数组靠前的元素,如果找到同名方法就进行调用,实际宿主类同名方法仍然存在.</li></ul><p>3、KVO的实现原理是咋样的？<br>答:<br>1)KVO是系统关于观察者模式的实现<br>2)KVO运用isa混写技术,系统会动态创建一个被观察对象的子类，然后令被观察对象的isa指针指向该子类，在该子类中重写了setter方法。这样，当原对象属性被修改时（基于KVC的修改），就会调用setter方法，然后通知观察者。</p><p>4、能否为分类添加成员变量？<br>答: 能,  可以通过关联对象associated object来为分类添加成员变量</p>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[iOS面试]第1章 UI视图相关面试问题</title>
      <link href="/2020/05/23/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC1%E7%AB%A0-UI%E8%A7%86%E5%9B%BE%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/23/iOS%E9%9D%A2%E8%AF%95-%E7%AC%AC1%E7%AB%A0-UI%E8%A7%86%E5%9B%BE%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote><p>本文主讲UI相关面试问题，包括UITableView相关、事件传递&amp;视图相应、图像显示原理、卡顿&amp;掉帧、绘制原理&amp;异步绘制、离屏渲染。</p></blockquote><h3 id="一、UITableView相关"><a href="#一、UITableView相关" class="headerlink" title="一、UITableView相关"></a>一、UITableView相关</h3><h4 id="1、重用机制"><a href="#1、重用机制" class="headerlink" title="1、重用机制"></a>1、重用机制</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-50c793b57deac4d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h5 id="为什么要用重用机制？"><a href="#为什么要用重用机制？" class="headerlink" title="为什么要用重用机制？"></a>为什么要用重用机制？</h5><p>当UITableView滚动时，如果不用重用机制，会重复初始化原来已经有初始化过的cell，因此用重用机制会节省性能，避免出现卡顿现象</p><h5 id="重用机制的原理"><a href="#重用机制的原理" class="headerlink" title="重用机制的原理"></a>重用机制的原理</h5><p>重用机制主要用到了一个可变数组visiableCells和一个可变的字典类型reusableTableCells,其中visiableCells用来存储当前UITableView显示的cell，reusableTableCells用来存储已经用’identify’缓存的cell。当UITableView滚动的时候，会先在reusableTableCells中根据identify找是否有有已经缓存的cell，如果有直接用，没有再去初始化。</p><p>代码实例:自定义tableView 字母索引条</p><p>2、数据源同步<br>(1)、数据源同步问题</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-cfe54b6ee7648c0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据源同步问题"></p><p>(2)、数据源同步解决方案<br>1&gt;、并发访问、数据拷贝</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-1fd3cb2ac125c51c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="并发访问"></p><ul><li>并发即多个线程都可以执行同一段时间，不需要相互等待，主线程与用户互动，子线程做所需要的网络数据请求、数据解析及预排版等</li><li>主线程事先拷贝一份数据给子线程做网络请求、数据解析、预排版等，如果主线程有相关操作，记录操作，在子线程完成相关操作后将这条操作，与子线程的数据进行同步，再回到主线程刷新界面</li><li>缺点：需要拷贝大量数据，耗内存</li></ul><p>2&gt;、串行访问</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-f338893d9837813d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="串行访问"></p><ul><li>创建一个GCD串行队列，主线程的操作需要等待子线程操作完成</li><li>缺点：需要等待子线程完成，可能会耗时较长</li></ul><p>3&gt; 比较:<br>两种方案各有利弊<br>串行访问方式: 要求在子线程处理任务特别耗时的时候,我们某一个删除动作可能会有延时.<br>并发访问,数据拷贝方式:要记录数据同步操作,如上边例子需要记录同步删除的动作,需要进行大量的数据源拷贝,对内存的开销是有一定的问题.所以在具体场景中,需要根据实际业务去选择使用哪种方案.</p><h3 id="二、事件传递-amp-视图响应"><a href="#二、事件传递-amp-视图响应" class="headerlink" title="二、事件传递&amp;视图响应"></a>二、事件传递&amp;视图响应</h3><p>1、UIView和CALayer的关系和区别</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-6934ad3b91050a3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UIView和CALayer的关系和区别"></p><p>关系：<br>UIView的内部包含CALayer层。创建UIView时，会自动创建一个CALyer层的对象，通过UIView的layer属性可以访问到。UIView需要显示时，会调用drawRect方法进行绘制，并将所有内容绘制在自己的layer层。也就是CALayer层才有显示功能。<br>区别：<br>UIView负责提供内容，以及负责处理触摸等事件，参与响应链<br>CALayer负责显示内容contents<br>这体现了系统设计的原则:六大职责原则中的 单一原则, 职责上的分工.</p><p>2、事件传递与视图响应链</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-e55f1fb9da208d45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="事件传递"></p><p>问题:点击c2空白区域,系统最终是以怎样方式找到最终视图响应视图是c2呢?(考察系统有关视图)</p><p>事件的分发与传递:<br>1)当iOS程序中发生触摸事件，系统会将事件加入到UIApplication管理的一个任务队列<br>2)UIApplication将处于任务队列最前端的事件向下分发。即UIWindow -&gt;UIView<br>3)UIView首先看自己是否能处理事件，触摸点是否在自己身上。如果能，那么继续寻找子视图。<br>4)遍历子控件，重复以上两步<br>5)如果没有找到，那么自己就是事件处理者<br>6)如果自己不能处理，那么不做任何处理</p><p>其中不接受处理的事件情况如下三种：</p><ul><li>alpha &lt;0.01</li><li>userInteractionEnabled = NO</li><li>hidden ＝ YES.<br>如果父视图不接受事件处理，则子视图也不能接收。事件只要触摸就会产生，关键在于是否有合适的View处理接收事件</li></ul><p>1&gt; 如何寻找最合适的View呢？以下两个方法</p><pre><code>//返回响应事件的视图- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event;//判断点击位置是否在当前视图范围内, 在范围内返回YES- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event;</code></pre><p>这两个方法，第一个方法用于找出事件的响应者，第二个方法用于确定事件触发的位置。</p><p>事件传递给窗口或控件的后，就调用hitTest:withEvent:方法寻找更合适的view,如果子控件是合适的view，则在子控件再调用hitTest:withEvent:直到找到最合适的为止。</p><p>通过这两个方法来做事件的传递和响应过程，如下图：</p><p>2&gt;事件传递流程</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-3844db6c3a6f7b71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="事件传递流程"></p><p><code>hitTest:withEvent:</code>方法内部会进行一个递归调用，对响应者的所有subviews调用hittest，<code>hitTest:withEvent:</code>系统实现如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-d6acb6b14b232232.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="hitTest:withEvent:系统实现.png"></p><p>3&gt;代码实战:方形按钮指定区域接收事件响应</p><p>4&gt;视图响应流程</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-7077803e7e6540c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="视图相应链"></p><p>响应者链的传递方法是事件传递的反方法，如果所有的响应者都不处理，则事件被丢弃</p><p>视图事件响应三个方法:</p><pre><code>- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event;- (void)touchesMoved:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event;- (void)touchesEnded:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event;</code></pre><h3 id="三、图像显示原理"><a href="#三、图像显示原理" class="headerlink" title="三、图像显示原理"></a>三、图像显示原理</h3><p><img src="https://upload-images.jianshu.io/upload_images/126164-69c05ad8d4f125dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图像显示原理"></p><blockquote><p>CPU GPU通过总线连接 通过CPU进行绘图，将位图经由总线在合适的时机给GPU，GPU做位图的涂层渲染和纹理合成，再放到帧缓冲区域(Frame Buffer)中， 由视频控制器根据VSync在帧缓冲区域中提取屏幕显示内容，显示到手机屏幕中</p></blockquote><p>可以看到，CPU处理了UI布局，绘制，以及图片编解码等预处理工作，最后将bitmap位图提交给GPU进行屏幕渲染。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-78a09f3b232a9077.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt=""></p><blockquote><p>1、CPU工作<br>Layout(UI布局、文本计算)； Display(绘制，drawRect方法)；Prepare(图片编解码)； Commit(提交位图)。<br>2、GPU渲染管线(openGL)<br>顶点着色、图元装配、光栅化、片段着色、片段处理。<br>GPU渲染管线五步做完后就会,就会把最终像素点提交到对应的帧缓冲区中,然后由视频控制器在对应的VSync信号到来之前,去帧缓冲区中提取最终要显示的屏幕内容。</p></blockquote><h3 id="四、卡顿-amp-掉帧"><a href="#四、卡顿-amp-掉帧" class="headerlink" title="四、卡顿&amp;掉帧"></a>四、卡顿&amp;掉帧</h3><h4 id="1、原因"><a href="#1、原因" class="headerlink" title="1、原因"></a>1、原因</h4><p><img src="https://upload-images.jianshu.io/upload_images/126164-43bbbadae8a4f2e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>UI卡顿、掉帧的原因:<br>保持流畅的UI交互，屏幕的刷新频率应该保持在60帧，即每16.7ms就会进行一次屏幕刷新，如果此时系统中绘制渲染工作还没有完成，导致VSync信号到来之前CPU和GPU无法完成下一帧画面的合成，则会将显示拖延到下一个刷新点，这样就会造成掉帧从而产生卡顿</p><h4 id="2、滑动优化方案"><a href="#2、滑动优化方案" class="headerlink" title="2、滑动优化方案"></a>2、滑动优化方案</h4><p>(1)、CPU<br>对象创建、调整、销毁 , 放到子线程中做；<br>预排版（布局计算、文本计算）, 放到子线程中做；<br>预渲染（文本等异步绘制，图片编解码等）。<br>(2)、GPU<br>纹理渲染（离屏渲染）；<br>视图混合（视图层级复杂度，GPU需要做每个视图的合成）。<br>(在绘制时减少图层层级，将多个层级绘制到一个层级下，以减少GPU在做视图混合时消耗的时间)</p><h4 id="如何具体优化呢？"><a href="#如何具体优化呢？" class="headerlink" title="如何具体优化呢？"></a>如何具体优化呢？</h4><ul><li>官方在iOS9.0后对UIImageView设置圆角进行优化，但是设置阴影依然会触发离屏渲染</li><li>圆角优化<br>1.使用贝塞尔曲线UIBezierPath和Core Graphics框架画出一个圆角<br>2.使用CAShapeLayer和UIBezierPath设置圆角</li><li>shadow优化<br>通过设置shadowPath来优化性能</li></ul><h4 id="其他优化方案："><a href="#其他优化方案：" class="headerlink" title="其他优化方案："></a>其他优化方案：</h4><ul><li>尽量使用不包含透明（alpha）通道的图片资源</li><li>尽量设置layer的大小值为整形值</li><li>使用一张中间透明图片蒙上去</li><li>如果是本地图:直接让美工把图片切成圆角进行显示</li><li>上传图片进行显示，可以让服务端处理圆角</li><li>利用UIBezierPath（CoreGraphics框架）画出来圆角图片</li></ul><h4 id="Core-Animation工具检测离屏渲染"><a href="#Core-Animation工具检测离屏渲染" class="headerlink" title="Core Animation工具检测离屏渲染"></a>Core Animation工具检测离屏渲染</h4><p>对于离屏渲染的检测，苹果为我们提供了一个测试工具Core Animation。可以在Xcode-&gt;Open Develeper Tools-&gt;Instruments中找到</p><h3 id="五、UIView绘制原理-amp-异步绘制"><a href="#五、UIView绘制原理-amp-异步绘制" class="headerlink" title="五、UIView绘制原理&amp;异步绘制"></a>五、UIView绘制原理&amp;异步绘制</h3><p><img src="https://upload-images.jianshu.io/upload_images/126164-c78f9e6c06b5c2d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UIView绘制原理步骤"></p><p>CALayer会在当前RunLoop结束前调用自身的display方法进行绘制，下图是系统调用CALayer的display方法绘制的流程：</p><p>一、系统绘制流程</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-a07f62e76a9e33a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="系统绘制流程"></p><p>UIView的drawRect方法是一个空方法，他给调用者提供了一个在系统绘制的基础上二次操作的空间。<br>bitmap作为layer的contents属性的值，在被赋值后提交给GPU进行渲染。<br>我们可以在displayLayer方法中进行异步绘制。</p><p>二、异步绘制<br>-[layer.delegate displayLayer:]<br>代理负责生成对应的bitmap<br>设置该bitmap作为layer.contents属性的值</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-c51e691371147e9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="异步绘制实现时序图"></p><h3 id="六、离屏渲染"><a href="#六、离屏渲染" class="headerlink" title="六、离屏渲染"></a>六、离屏渲染</h3><p>1、什么是离屏渲染？</p><ul><li>On-Screen Rendering<br>意为当前屏幕渲染，指的是<code>GPU</code>的渲染操作是在当前用于显示的屏幕缓冲区中进行</li><li>Off-Screen Rendering<br>意为离屏渲染，指的是<code>GPU</code>在当前屏幕缓冲区以外<code>新开辟</code>一个缓冲区进行渲染操作</li></ul><p>通俗讲: 当设置某一些UI视图的图层属性时，如果未被预合成之前不能用于当前屏幕直接显示的时候，就会触发离屏渲染，比如设置圆角属性，一些视图遮罩。而离屏渲染的概念起源于GPU层面，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。</p><p>当屏渲染：指的是GPU的渲染操作是在当前用于显示的屏幕缓存区中进行。</p><p>2、何时会触发？<br>(1)、圆角（layer.masksToBounds = YES 和layer.cornerRadius 同时使用)<br>(2)、图层蒙版 (layer.mask)<br>(3)、阴影  (layer.shadow)<br>(4)、光栅化 ( layer.shouldRasterize=true)<br>(5)、透明度 (layer.allowsGroupOpacity = YES 和 layer.opacity &lt; 1.0)</p><p>由于离屏渲染要创建新的渲染缓冲区，同时还要进行上下文的切换，这会增加GPU的处理时间，可能会造成掉帧</p><p>3、为何要避免离屏渲染？<br>(1)、触发离屏渲染，会增加GPU的工作量，会导致CPU和GPU的工作总耗时超过16.7毫秒，会导致UI的卡顿和掉帧。<br>(2)、创建新的渲染缓冲区，会内存开销。<br>(3)、上下文切换，会导致GPU额外开销。</p><h3 id="UI视图相关面试问题总结："><a href="#UI视图相关面试问题总结：" class="headerlink" title="UI视图相关面试问题总结："></a>UI视图相关面试问题总结：</h3><p>1、系统的UI事件传递机制是咋样的？<br>考察hitTest: 和pointInside: 系统内部实现<br>2、使UITableView滚动更流畅的方案或思路都有哪些？(参考滑动优化方案)<br>从CPU和GPU两方面<br>3、什么是离屏渲染？(参考概念 和为何要避免离屏渲染)<br>离屏渲染的概念起源于GPU层面，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。</p><p>4、UIView和CALayer之间的关系是咋样的？</p>]]></content>
      
      <categories>
          
          <category> iOS笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Carthage安装和使用教程</title>
      <link href="/2018/11/18/Carthage%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2018/11/18/Carthage%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="Carthage简单介绍"><a href="#Carthage简单介绍" class="headerlink" title="Carthage简单介绍"></a>Carthage简单介绍</h3><table><thead><tr><th>主页:</th><th><a href="https://github.com/Carthage/Carthage.git" target="_blank" rel="noopener">https://github.com/Carthage/Carthage.git</a></th></tr></thead><tbody><tr><td>作者:</td><td>Justin Spahr-Summers等</td></tr><tr><td>版本:</td><td>0.31</td></tr><tr><td>目标:</td><td>用最简单的方式来管理Cocoa第三方框架</td></tr><tr><td>性质:</td><td>第三方框架管理工具(类似于cocoapods) Carthage为用户管理第三方框架和依赖，但不会自动修改项目文件和生成配置，把对项目结构和设置的控制权交给用户。</td></tr><tr><td>原理</td><td>自动将第三方框架编程为Dynamic framework(动态库)</td></tr><tr><td>限制</td><td>仅支持iOS8+。它只支持框架，所以不能用来针对iOS8以前的系统版本进行开发</td></tr></tbody></table><h3 id="Carthage的安装和使用"><a href="#Carthage的安装和使用" class="headerlink" title="Carthage的安装和使用"></a>Carthage的安装和使用</h3><ul><li><p>直接下载Carthage.pkg安装包，安装运行<br>  <a href="https://github.com/Carthage/Carthage/releases" target="_blank" rel="noopener">Carthage.pkg下载</a></p></li><li><p>如果使用的XCode为7.0+版本，那么也可以使用下面的方法来安装</p></li></ul><p><strong>1 安装homebrew</strong></p><pre><code>$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></pre><p><strong>2 升级brew</strong></p><pre><code>$ brew update</code></pre><p><strong>3 使用brew来安装</strong></p><pre><code>$ brew install Carthage</code></pre><img src="/2018/11/18/Carthage安装和使用教程/installCarthage.png"><p><strong>4 查看版本</strong></p><pre><code>   $ Carthage version</code></pre><h3 id="Carthage的使用"><a href="#Carthage的使用" class="headerlink" title="Carthage的使用"></a>Carthage的使用</h3><h4 id="先进入到项目所在文件夹"><a href="#先进入到项目所在文件夹" class="headerlink" title="先进入到项目所在文件夹"></a>先进入到项目所在文件夹</h4><pre><code> $ cd 项目路径</code></pre><h4 id="创建一个空的Carthage文件"><a href="#创建一个空的Carthage文件" class="headerlink" title="创建一个空的Carthage文件"></a>创建一个空的Carthage文件</h4><pre><code>$ touch Cartfile</code></pre><h4 id="编辑cartfile文件-例如要安装AFN框架"><a href="#编辑cartfile文件-例如要安装AFN框架" class="headerlink" title="编辑cartfile文件,例如要安装AFN框架"></a>编辑cartfile文件,例如要安装AFN框架</h4><p>GitHub库可在cartfile文件添加以下内容,指定GitHub的关键字:</p><pre><code>github  &quot;AFNetworking/AFNetworking&quot; </code></pre><p>或者填写其他git源,指定git关键词:</p><pre><code>git &quot;https://github.com/AFNetworking/AFNetworking.git&quot;</code></pre><h4 id="保存并关闭cartfile文件，使用cartfile安装框架"><a href="#保存并关闭cartfile文件，使用cartfile安装框架" class="headerlink" title="保存并关闭cartfile文件，使用cartfile安装框架"></a>保存并关闭cartfile文件，使用cartfile安装框架</h4><pre><code>$ Carthage update --platform iOS</code></pre><p>注: 不追加参数会编译出 iOS、OSX、tvos多个framework</p><img src="/2018/11/18/Carthage安装和使用教程/installAFN.png"><p>注2: 如果失败的话，先用Xcode打开你的项目，<code>Product &gt; Scheme &gt; Manage Schemes</code> 在新窗口中，勾选上 Shared，点击 Close。在终端再次执行这个命令</p><img src="/2018/11/18/Carthage安装和使用教程/Shared.png"><h4 id="打开Carthage-查看生成的文件目录"><a href="#打开Carthage-查看生成的文件目录" class="headerlink" title="打开Carthage 查看生成的文件目录"></a>打开Carthage 查看生成的文件目录</h4><pre><code>$ open Carthage</code></pre><ul><li>执行安装依赖命令后的文件夹结构</li></ul><pre><code># 执行文件多出三个文件Cartfile # 存放需要安装的依赖列表Cartfile.resolved # 自动生成的依赖关系文件，需提交到git# 确保提交的项目可以使用完全相同的配置与方式运行启用, 跟踪项目当前所用的依赖版本号Carthage # 自动生成的Carthage目录 (不需要提交到 Git)# 目录下有两个文件夹：Build  Checkouts# Build  存放编译后的文件，包括 iOS/Mac/tvOS/watchOS对应的framework# Checkouts  存放从git拉取的依赖库源文件</code></pre><h4 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h4><p>打开项目，点击<code>Target -&gt; Build Phases -&gt; Link Library with Libraries</code>选择<code>Carthage/Build</code>目录中要导入的framework</p><img src="/2018/11/18/Carthage安装和使用教程/addFramework.png"><h4 id="添加编译的脚本"><a href="#添加编译的脚本" class="headerlink" title="添加编译的脚本"></a>添加编译的脚本</h4><p>（该脚本文件保证在提交归档时会对相关文件和dSYMs进行复制）</p><p>(1)点击Build Phases，点击“+” -&gt;  New Run Script Phase</p><img src="/2018/11/18/Carthage安装和使用教程/NewRunScriptPhase.png"><p>(2)添加添加脚本   <code>/usr/local/bin/Carthage copy-frameworks</code></p><p>(3)添加”Input Files”  <code>$(SRCROOT)/Carthage/Build/iOS/AFNetworking.framework</code></p><img src="/2018/11/18/Carthage安装和使用教程/runScript.png"><h4 id="在项目中使用第三方库"><a href="#在项目中使用第三方库" class="headerlink" title="在项目中使用第三方库"></a>在项目中使用第三方库</h4><p> <code>#import &lt;AFNetworking/AFNetworking.h&gt;</code></p><p><strong>其它：</strong></p><p>卸载Carthage：<code>$ brew uninstall Carthage</code></p><p>更新第三方框架：<br>更新多个框架：修改Cartfile文件，并重新执行 <code>$ carthage update</code><br>更新某个框架：<code>$ carthage update</code> 具体的框架名称</p><pre><code>carthage update  # 修改了Cartfile文件，并重新编译carthage update  Alamofire  # 仅更新Alamofire框架carthage update --platform ios  # 仅编译iOS平台的frameworkcarthage bootstrap    # 从本地库重新编译依赖</code></pre><h3 id="Carthage优缺点"><a href="#Carthage优缺点" class="headerlink" title="Carthage优缺点"></a>Carthage优缺点</h3><p><strong>Carthage的优点</strong><br>​    1）使用了CocoaPods的项目是高度集成的，而Carthage更灵活强调尽可能将任务委托给Xcode和Git。<br>​        CocoaPods在使用中会自动创建和更新workspace、依赖和Pod项目并进行整合;<br>​        Carthage在使用中不需要创建和集成相应的workspace和project,只需要依赖打包好的framework文件即可。<br>​        总结一下，CocoaPods的方法更容易使用，而Carthage更灵活且对项目没有侵入性。<br>​    2）CocoaPods相对来说功能要比Carthage多很多，因此也更复杂,而CocoaPods配置简单项目干净。<br>​    3）CocoaPods有一个中心仓库，而Carthage是去中心化的，没有中心服务器也就避免了可能因中心节点错误而带来的失败，即Carthage每次配置和更新环境，只会去更新具体的库，时间更快。<br>​    4)  Carthage 管理的依赖只需编译一次，项目干净编译时，不会再去重新编译依赖，节省时间<br>​    5) 与 CocoaPods 无缝集成，一个项目能同时拥有 CocoaPods 和 Carthage</p><p> <strong>Carthage的不足</strong></p><ul><li>仅支持 iOS8 +</li><li>它只支持框架，所以不能用来针对 iOS 8 以前的系统版本进行开发</li><li>支持的 Carthage 安装的第三方框架和依赖不如 CocoaPods 丰富</li><li>无法在 Xcode 里定位到第三方库源码</li></ul><h3 id="Carthage的工作过程说明"><a href="#Carthage的工作过程说明" class="headerlink" title="Carthage的工作过程说明"></a>Carthage的工作过程说明</h3><pre><code>① 创建一个Cartfile文件，在该文件中列出您想使用的框架② 运行Carthage,获取并编译Cartfile文件中列出的框架③ 把框架的二进制文件配置到项目中</code></pre><h3 id="关于版本指定"><a href="#关于版本指定" class="headerlink" title="关于版本指定"></a>关于版本指定</h3><p>Carthage 支持以下几种版本指定方法:</p><blockquote><p>= 1.0 代表 “最低 1.0版本”<br>~&gt; 1.0 代表 “表示使用版本1.0以上但是低于2.0的最新版本，如1.5, 1.9”<br>== 1.0 代表 “必须是 1.0 版本”</p></blockquote><p>“some-branch-or-tag-or-commit”指定一个 Git 对象 (任何被 git rev-parse 允许的)<br>如果没有版本要求,任何版本的依赖是允许的。</p><p>版本好的兼容性是根据语语义化版本控制决定的。这意味着任何大于或等于1.5.1版本,但小于2.0,将认为与1.5.1“兼容”。</p><p>Cartfile示例</p><pre><code># Require version 2.3.1 or later 最低2.3.1版本github &quot;ReactiveCocoa/ReactiveCocoa&quot; &gt;= 2.3.1# Require version 1.x   必须1.x版本github &quot;Mantle/Mantle&quot; ~&gt; 1.0    # (大于或等于 1.0 ，小于 2.0)# Require exactly version 0.4.1 必须0.4.1版本github &quot;jspahrsummers/libextobjc&quot; == 0.4.1# Use the latest version  使用最新版本github &quot;jspahrsummers/xcconfigs&quot;# Use the branch  使用git分支github &quot;jspahrsummers/xcconfigs&quot; &quot;branch&quot;# Use a project from GitHub Enterprise  使用一个企业项目，在 &quot;development&quot; 分支github &quot;https://enterprise.local/ghe/desktop/git-error-translations&quot;# Use a project from any arbitrary server, on the &quot;development&quot; branch  使用一个私有项目，在 &quot;development&quot; 分支git &quot;https://enterprise.local/desktop/git-error-translations2.git&quot; &quot;development&quot;# Use a local project   使用一个本地的项目git &quot;file:///directory/to/project&quot; &quot;branch&quot;</code></pre><h3 id="Git-中忽略不需要提交到版本库的文件与文件夹"><a href="#Git-中忽略不需要提交到版本库的文件与文件夹" class="headerlink" title="Git 中忽略不需要提交到版本库的文件与文件夹"></a>Git 中忽略不需要提交到版本库的文件与文件夹</h3><p>修改 .gitignore 文件，增加忽略 Carthage 文件夹就行了：</p><pre><code>#CarthageCarthage</code></pre><h3 id="Carthage的其他命令"><a href="#Carthage的其他命令" class="headerlink" title="Carthage的其他命令"></a>Carthage的其他命令</h3><pre><code> archive           Archives built frameworks into a zip that Carthage can use bootstrap         Check out and build the project&#39;s dependencies build             Build the project&#39;s dependencies checkout          Check out the project&#39;s dependencies copy-frameworks   In a Run Script build phase, copies each framework specified by a SCRIPT_INPUT_FILE environment variable into the built app bundle fetch             Clones or fetches a Git repository ahead of time help              Display general or command-specific help outdated          Check for compatible updates to the project&#39;s dependencies update            Update and rebuild the project&#39;s dependencies version           Display the current version of Carthage</code></pre>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOSTool </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GCD之dispatch_semaphore</title>
      <link href="/2018/11/17/GCD%E4%B9%8Bdispatch-semaphore/"/>
      <url>/2018/11/17/GCD%E4%B9%8Bdispatch-semaphore/</url>
      <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/126164-c159b23a2006988a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="各个lock性能对比.png"></p><h3 id="dispatch-semaphore定义"><a href="#dispatch-semaphore定义" class="headerlink" title="dispatch_semaphore定义"></a>dispatch_semaphore定义</h3><p>1&gt; 信号量：就是一种可用来控制访问资源的数量的标识，设定了一个信号量，在线程访问之前，加上信号量的处理，则可告知系统按照我们指定的信号量数量来执行多个线程。</p><p>其实，这有点类似锁机制了，只不过信号量都是系统帮助我们处理了，我们只需要在执行线程之前，设定一个信号量值，并且在使用时，加上信号量处理方法就行了。</p><p>2&gt; 信号量主要有3个函数，分别是：</p><pre><code>// 创建信号量.该函数接收一个long类型的参数, 返回一个dispatch_semaphore_t类型的信号量，值为传入的参数dispatch_semaphore_t   dispatch_semaphore_create(long value)//等待降低信号量. 接收一个信号和时间值，若信号的信号量为0，则会阻塞当前线程，直到信号量大于0或者经过输入的时间值；若信号量大于0，则会使信号量减1并返回，程序继续住下执行long  dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)// 提高信号量. 使信号量加1并返回long dispatch_semaphore_signal(dispatch_semaphore_t dsema)//dispatch_semaphore_wait() 与 dispatch_semaphore_signal() 成对使用</code></pre><h3 id="dispatch-semaphore-简单使用"><a href="#dispatch-semaphore-简单使用" class="headerlink" title="dispatch_semaphore 简单使用"></a>dispatch_semaphore 简单使用</h3><pre><code>- (void)dispatchSignal{    //crate的value表示，最多几个资源可访问    dispatch_semaphore_t semaphore = dispatch_semaphore_create(2);       dispatch_queue_t quene = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);    //任务1    dispatch_async(quene, ^{        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);        NSLog(@&quot;run task 1&quot;);        sleep(1);        NSLog(@&quot;complete task 1&quot;);        dispatch_semaphore_signal(semaphore);           });&lt;br&gt;    //任务2    dispatch_async(quene, ^{        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);        NSLog(@&quot;run task 2&quot;);        sleep(1);        NSLog(@&quot;complete task 2&quot;);        dispatch_semaphore_signal(semaphore);           });&lt;br&gt;    //任务3    dispatch_async(quene, ^{        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);        NSLog(@&quot;run task 3&quot;);        sleep(1);        NSLog(@&quot;complete task 3&quot;);        dispatch_semaphore_signal(semaphore);           });   }</code></pre><ul><li>执行结果：<img src="/2018/11/17/GCD之dispatch-semaphore/log1.png"></li></ul><p>总结：由于设定的信号值为2，先执行两个线程，等执行完一个，才会继续执行下一个，保证同一时间执行的线程数不超过2。</p><ul><li>这里我们扩展一下，假设我们设定信号值=1</li></ul><pre><code>dispatch_semaphore_create(1)</code></pre><p>那么结果就是：<br> <img src="/2018/11/17/GCD之dispatch-semaphore/log2.png"></p><ul><li>如果设定信号值=3</li></ul><pre><code>dispatch_semaphore_create(3)</code></pre><p>那么结果就是：<br> <img src="/2018/11/17/GCD之dispatch-semaphore/log3.png"></p><p>其实设定为3，就是不限制线程执行了，因为一共才只有3个线程。</p><h3 id="dispatch-semaphore-作用"><a href="#dispatch-semaphore-作用" class="headerlink" title="dispatch_semaphore 作用"></a>dispatch_semaphore 作用</h3><ul><li>dispatch_semaphore有两个主要应用 ：</li></ul><ol><li>保持线程同步</li><li>为线程加锁</li></ol><h4 id="dispatch-semaphore-保持线程同步"><a href="#dispatch-semaphore-保持线程同步" class="headerlink" title="dispatch_semaphore 保持线程同步"></a>dispatch_semaphore 保持线程同步</h4><pre><code>- (void)syncThread{    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);    __block int j = 0;    dispatch_async(queue, ^{        j = 100;        dispatch_semaphore_signal(semaphore);    });    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);    NSLog(@&quot;finish j = %d&quot;, j);}</code></pre><p>结果输出 j ＝ 100；<br>如果注掉dispatch_semaphore_wait这一行，则 j ＝ 0；<br><strong>原理：</strong> 由于是将block异步添加到一个并行队列里面，所以程序在主线程跃过block直接到<code>dispatch_semaphore_wait</code>这一行，因为<code>semaphore</code>信号量为0，时间值为<code>DISPATCH_TIME_FOREVER</code>，所以当前线程会一直阻塞，直到block在子线程执行到<code>dispatch_semaphore_signal</code>，使信号量+1，此时<code>semaphore</code>信号量为1了，所以程序继续往下执行。这就保证了线程间同步了。</p><h4 id="dispatch-semaphore-线程加锁"><a href="#dispatch-semaphore-线程加锁" class="headerlink" title="dispatch_semaphore 线程加锁"></a>dispatch_semaphore 线程加锁</h4><pre><code>- (void)lockThread{    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);    dispatch_semaphore_t semaphore = dispatch_semaphore_create(1);    for (int i = 0; i &lt; 100; i++) {        dispatch_async(queue, ^{            // 相当于加锁            dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);            NSLog(@&quot;i = %d semaphore = %@&quot;, i, semaphore);            // 相当于解锁            dispatch_semaphore_signal(semaphore);        });    }}</code></pre><p><strong>原理：</strong>当线程1执行到<code>dispatch_semaphore_wait</code>这一行时，<code>semaphore</code>的信号量为1，所以使信号量-1变为0，并且线程1继续往下执行；如果当在线程1NSLog这一行代码还没执行完的时候，又有线程2来访问，执行<code>dispatch_semaphore_wait</code>时由于此时信号量为0，且时间为<code>DISPATCH_TIME_FOREVER</code>,所以会一直阻塞线程2（此时线程2处于等待状态），直到线程1执行完NSLog并执行完<code>dispatch_semaphore_signal</code>使信号量为1后，线程2才能解除阻塞继续住下执行。以上可以保证同时只有一个线程执行NSLog这一行代码。</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AppExtension编程指南:扩展基础</title>
      <link href="/2018/11/17/AppExtension%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97-%E6%89%A9%E5%B1%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/11/17/AppExtension%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97-%E6%89%A9%E5%B1%95%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="通过应用扩展提升你的应用"><a href="#通过应用扩展提升你的应用" class="headerlink" title="通过应用扩展提升你的应用"></a>通过应用扩展提升你的应用</h2><p>iOS8/OS X v10.10</p><p>翻译自苹果官方文档 <a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1" target="_blank" rel="noopener">App Extension Programming Guide–App Extensions Essentials</a></p><blockquote><p>重要提示： 该文档是一个开发过程中使用API或技术的预发布文档。Apple提供该文档的目的在于让开发者尽快熟悉新技术和新的编程接口，使得开发者针对苹果品牌设备进行开发。但是该文档会不断的更新，使用该文档提供的技术开发的软件应该基于最终操作系统软件和最终的文档进行测试。要时刻关注该文档的更新，以便了解新的API和技术特性。</p></blockquote><p>当iOS 8.0和OS X v10.10发布后，一个全新的概念出现在我们眼前，那就是<code>应用扩展</code>。顾名思义，应用扩展允许开发者扩展应用的自定义功能和内容，能够让用户在使用其他app时使用该项功能。你可以开发一个应用扩展来执行某些特定的任务，用户使用该扩展后就可以在多个上下文环境中执行该任务。比如说，你提供了一个能让用户把内容分享到社交网站的扩展，用户可以在阅读邮件信息或者上网时通过app扩展来发表评论。或者说，如果你提供了一个能展示当前比赛分数的扩展，那么用户可以把它放在通知中心，这样在他们打开Today view时就能看到最新的比分。你甚至可以开发一个提供自定义键盘的扩展，用户可以用它代替iOS系统自带的键盘。</p><h3 id="APP扩展的类型"><a href="#APP扩展的类型" class="headerlink" title="APP扩展的类型"></a>APP扩展的类型</h3><p>iOS和OS X定义了几种应用扩展的类型，每一种类型的扩展都对应系统中的一块区域，比如分享、通知中心以及键盘等。我们把这些支持扩展的区域称为<code>扩展点</code>。每个扩展点都定义了使用策略并提供了API，你可以用来针对该区域创建扩展。要注意的一点是，当你针某个扩展点开发应用扩展时，该应用扩展的功能必须要符合该扩展点的功能特性。</p><p><strong>table 1-1</strong> 列出了iOS和OS X中的扩展点，并列举了对应扩展点的示例任务。 </p><img src="/2018/11/17/AppExtension编程指南-扩展基础/table1-1.jpg"><p>由于系统定义了扩展特定领域，所以当你在开发应用扩展时，很重要的一点是，你要选择最能匹配你想在app中提供的功能的区域。比如说你要开发一个分享信息的应用扩展，那么你只能选择分享扩展点，而不能使用Today或Action扩展点。</p><blockquote><p>重要提示：你开发的app扩展要精确地匹配Table 1-1中列出的扩展点。你不能开发一个通用的扩展来匹配一个以上的扩展点，</p></blockquote><h3 id="Xcode和App-Store帮助你创建并交付应用扩展"><a href="#Xcode和App-Store帮助你创建并交付应用扩展" class="headerlink" title="Xcode和App Store帮助你创建并交付应用扩展"></a>Xcode和App Store帮助你创建并交付应用扩展</h3><p>应用扩展不同于应用，虽然你需要基于应用去开发应用扩展，但是每个应用扩展都是独立于应用运行的二进制文件。</p><p>当你要创建一个应用扩展时，需要在项目中创建一个新的Target。和其他 Target 一样，扩展 Target 将设置信息和相关文件打包在Products文件下生成一个扩展名为.appex的包。你可以在应用项目中创建多个扩展Target（一个应用程序可以包含一个或多个应用扩展，该应用程序称为主体应用程序）。</p><p>开发一个应用扩展最好的切入点是使用 Xcode 在两个平台上为每个扩展点提供的模板去开发。每个模板包含扩展点的具体实现文件和相关设置，并生成独立的二进制文件添加到应用程序的包中。</p><p>注意：在iOS中，包含扩展的应用必须提供一个扩展之外的功能。而在OS X中没有这个硬性要求，一个包含扩展的应用不要求必须提供一个额外功能。         </p><p>为了将扩展分发给使用者，你需要提交一个包含扩展的应用到App Store。用户只要下载并安装了你的应用，那么同时也自动安装了你的应用扩展。</p><p>当安装了应用扩展之后，用户首先必须要开启他们。通常，用户可以在他们当前任务的上下文环境中启动扩展。比如，如果你的扩展启用了“Today”通知，那用户可以在通知中心编辑“Today ”view 来添加你的扩展。在其他情况中，用户可以使用 iOS 中的“Settings”或者 OS X 中的“System Preferences”来启用和管理扩展。</p><h3 id="用户在不同的情形下体验不同的应用扩展"><a href="#用户在不同的情形下体验不同的应用扩展" class="headerlink" title="用户在不同的情形下体验不同的应用扩展"></a>用户在不同的情形下体验不同的应用扩展</h3><p>虽然每种类型的应用扩展的功能都是不同的，但对大部分扩展来说，它们在用户体验上还是有一些共同点的。如果你准备开发一个应用扩展，有一点很重要，那就是要理解在你选择的扩展点中，用户体验是什么样的。从一个更高角度看，对于所有扩展来说，最佳的用户体验是快速、流畅以及只关注单一任务。</p><p>通常用户通过与系统提供的用户界面进行交互来开启应用扩展。比如说，用户在app中通过激活系统提供的分享按钮来访问 Share 扩展，并从展示的列表中选择扩展。一个应用扩展必须要提供一个图标，以便用户选择和识别，通常情况下，应用扩展的图标与应用程序的图标是相同的。</p><p>虽然大多数的应用程序扩展都提供了一些自定义的UI元素，但一般用户不会看到你的自定义用户界面，除非他们进入到应用程序扩展中。当用户进入应用扩展，你的自定义UI可以让用户知晓他们正进入一个新的上下文环境。由于用户可以把你的扩展和当前应用区别开来，所以他们会欣赏你提供的独特功能。当用户意识到扩展其实是独立运行的实体时，他们也可以确认并移除体验不好或功能不好的扩展。</p><p>为了让用户平滑过渡到你的应用程序扩展，你要斟酌自定义界面与扩展点界面的风格，做一个权衡。比如说，一个很好的方法就是让你的插件看起来像是通知中心中原生的Widget，再比如说照片编辑扩展，你应该创建一个和 iOS 中 Photos 应用风格相协调的用户界面。</p><blockquote><p>注意：即使你的应用程序扩展没有展示自定义UI（不包括图标），但用户仍然知道该扩展不同于当前的应用，因为它们需要采用特定的操作来激活。</p></blockquote><h2 id="了解应用程序扩展的工作原理"><a href="#了解应用程序扩展的工作原理" class="headerlink" title="了解应用程序扩展的工作原理"></a>了解应用程序扩展的工作原理</h2><p>iOS8/OS X v10.10</p><p>应用程序扩展不是一个应用，相反，它是<code>主体应用程序（containing app）</code>中一个单独的包，并能生成单独的二进制文件。与主体应用程序不同，应用扩展实现的是一个特定的、狭义范围内的任务，并且要严格遵循扩展点的协议。</p><h3 id="应用程序扩展的生命周期"><a href="#应用程序扩展的生命周期" class="headerlink" title="应用程序扩展的生命周期"></a>应用程序扩展的生命周期</h3><p>因为一个应用程序扩展不是一个应用，所以它的生命周期和运行环境也不同于应用。一般情况来说，应用程序扩展的生命周期始于用户从某个应用中启动它。允许用户选择某一种扩展来帮助他们执行某项任务的应用，我们称之为扩展的<code>载体应用（host app）</code>。<code>载体应用（host app）</code>定义了激活扩展的上下文环境，并在其发送请求以响应用户操作时开始扩展的生命周期。当应用扩展完成载体应用发送的请求任务后，该扩展的生命周期也随之结束。</p><p>比如说，假定这样一个场景，用户在扩展<code>载体应用（host app）</code>中选中一段文字，点击分享按钮，并从分享列表中选择某一个分享扩展，将选中的内容分享至社交网站。此时，载体应用就会向扩展发送一个包含用户所选文本的请求，启动该扩展，从而去响应用户的请求，即分享所选文本的内容。应用扩展基本的生命周期归纳在下图2-1中。</p> <img src="/2018/11/17/AppExtension编程指南-扩展基础/table2-1.png"><pre><code>                            基本的扩展生命周期</code></pre><p>在图2-1中的第2步中，系统实例化载体应用请求中确定的扩展，并在两者之间建立通信通道。然后扩展在载体应用的上下文场景中显示相关界面，并使用其在载体应用请求中接收到的项目来执行任务（在上述的例子中，扩展接收到的项目是用户选中的文本）</p><p>在图2-1的第3步中，用户在扩展中执行或取消某个任务，或者直接可以忽略该扩展。在对用户的操作做出响应的过程中，扩展会根据载体应用的请求立即开始执行任务，但如果有特殊需要时，扩展也会在系统后台执行任务，这种情况下，载体不会显示扩展相关界面，并且用户返回到其先前在载体应用中的上下文环境。当应用扩展执行完任务后，不管是立刻返回还是延迟返回，但最后其执行结果都会返回给载体应用。</p><p>当扩展开始执行任务之后（或者开始在系统后台执行任务），系统就会终止扩展，比如图2-1中的第4步。</p><h3 id="应用扩展是如何进行通信的"><a href="#应用扩展是如何进行通信的" class="headerlink" title="应用扩展是如何进行通信的"></a>应用扩展是如何进行通信的</h3><p>当应用扩展在运行的时候，它只会直接和<code>载体应用（host app）</code>进行通信，而扩展和<code>主体应用containing app</code>之间不会直接通信。在扩展运行的过程中，<code>主体应用（containing app）</code>甚至都不运行。另外，<code>载体应用（host app）</code>和<code>主体应用（containing app）</code>之间也不会进行通信。图2-2中描述了运行中的<code>应用扩展</code>、<code>载体应用（host app）</code>以及<code>主体应用（containing app）</code>这三者之间的关系。</p><img src="/2018/11/17/AppExtension编程指南-扩展基础/table2-2.png"><pre><code>                        运行中的扩展仅和载体应用进行通信</code></pre><p>当一个扩展需要和主体应用containing app进行通信时，只能在载体应用确定的上下文环境中进行间接通信。比如，一个应用扩展有可能会运行调用它的应用程序。在这个例子中，扩展使用了不能与 containing app 传递消息的API。此外，应用扩展与其 containing app 可以在一个定义为私有的共享容器中访问数据。图2-3描述了扩展和 containing app 之间的间接通信类型。</p><img src="/2018/11/17/AppExtension编程指南-扩展基础/table2-3.png"><pre><code>                    运行中的扩展可以与其containing app进行间接通信</code></pre><p>注意：在底层，系统使用进程间通信来确保应用扩展和扩展载体应用共同来开启无缝结合体验。在你的代码中，你无需考虑这些底层的通信机制，因为你使用的是扩展点和系统提供的高级API。</p><h2 id="创建应用扩展"><a href="#创建应用扩展" class="headerlink" title="创建应用扩展"></a>创建应用扩展</h2><p>iOS8/OS X v10.10</p><p>当你准备好开发一个应用扩展时，可以从选择一个支持你想执行的任务的扩展点开始。然后选择适用于你所选的扩展点的Xcode模板，如果需要的话，可使用自定义代码和自定义用户界面来增强默认文件。最后，在你调试并优化你的应用扩展之后，就可以打包进你的应用程序给用户使用了。</p><h3 id="从选择正确的扩展点开始"><a href="#从选择正确的扩展点开始" class="headerlink" title="从选择正确的扩展点开始"></a>从选择正确的扩展点开始</h3><p>每个扩展点都针对一个定义明确的用户场景，你首先要清楚这个应用能为用户提供什么样的功能，所以要选择一个支持该功能的扩展点。这是非常关键的，因为每个扩展点定义了不同的API，为你提供不同的功能开发，所以如果选错了扩展点，那么很有可能无法实现想要的功能。表1-1列出了iOS和OS X中支持的所有扩展点。</p><p>选定了一个适用于应用扩展的扩展点后，在你的containing app中会有一个新的Target。添加应用扩展Target最简单的方式就是使用Xcode提供的模板，这些模板为扩展点提供了预配置。</p><p>你可以通过菜单选择 <strong>File &gt; New &gt; Target</strong>在你的Xcode工程中添加一个新Target。在左边的侧边栏中，选择iOS或OS X的<strong>Application Extension</strong>选项，然后在右边面板呈现的Xcode 模板中选择你想要创建的应用扩展模板，如下图所示：</p><img src="/2018/11/17/AppExtension编程指南-扩展基础/table3.png"><p>选择好模板，并在工程中添加Target，在自定义扩展代码之前，你可以试着编译并运行一下项目。如果你是基于Xcode提供的模板创建的扩展，那么当编译成功后，就会生成一个扩展名为 <strong>.appex的应用扩展包</strong>。</p><blockquote><p>注意64位的架构：<br>一个应用程序扩展在Architectures设置中必须要包含arm64的架构，否则在上传App Store时会被拒绝。创建完一个应用扩展后，你可以在Xcode的“Standard architectures”设置选项中设置arm64架构。</p></blockquote><p>如果你的包含扩展的应用程序使用了一些嵌入框架，那么你的应用程序也必须要包含arm64架构，否则上传App Store时也会被拒绝。</p><p>关于64位架构开发环境的更多信息，请根据你的target平台参阅64-Bit Transition Guide for Cocoa Touch或者64-Bit Transition Guide for Cocoa。</p><p>在大多数情况下，你可以通过在System Preferences或Settings中启用应用扩展或者授予权限来测试默认的应用扩展，然后可以通过其他应用来访问它。比如你可以在OS X系统中通过Safari中打开一个页面来测试分享扩展，点击分享按钮，然后选择你要测试的扩展即可。</p><h3 id="检查默认的扩展模板"><a href="#检查默认的扩展模板" class="headerlink" title="检查默认的扩展模板"></a>检查默认的扩展模板</h3><p>一般情况下，每个扩展模板都包含一个属性列表文件（就是Info.plist文件），一个View Controller类和一个默认的UI，这些都是扩展点定义的。默认的View Controller类（或principal class）都含有扩展点对应功能的方法，需要我们去实现。</p><p>应用扩展Target的<strong>Info.plist</strong>文件除了识别扩展点外还罗列了应用扩展的详细信息。该文件至少包括<strong>NSExtension</strong>字典以及扩展点指定的其他键值字典。。比如<strong>NSExtensionPointIdentifier</strong>的key值就是扩展点的<code>反向DNS名称</code>，比如com.apple.widget-extension。在应用扩展的NSExtension字典中还有其他的Key和值：</p><p><strong>NSExtensionAttributes</strong>：这是一个描述扩展点具体属性的字典，就像照片编辑扩展中的PHSupportedMediaTypes一样。<br><strong>NSExtensionPrincipalClass</strong>：这是扩展模板创建的主体视图控制器类，比如SharingViewController。当载体应用程序（host app）调用扩展时，扩展点会实例化这个类。<br><strong>NSExtensionMainStoryboard（只适用于iOS）</strong>：扩展默认的Storyboard文件，一般名为MainInterface。</p><p>除了在属性列表中设置以外，扩展模板还可以设置一些默认的功能。每个扩展点可以定义扩展点支持的适用于某个类型任务的功能。比如，一个iOS的Document Provider扩展就包含com.apple.security.application-groups的功能。  </p><p>所有的OS X扩展模板都默认包含应用程序沙箱和com.apple.security.files.user-selected.read-only功能。如果你开发的扩展需要适用网络，或者访问用户的相册，再或者需要访问用户的通讯录，那么你就需要额外定义这些功能。</p><blockquote><p>注意：通常情况下，如果用户允许主应用程序（containing app）访问他们的私有数据，那么主程序里的扩展也同样拥有该权限。</p></blockquote><h3 id="响应“载体程序”（Host-App）的请求"><a href="#响应“载体程序”（Host-App）的请求" class="headerlink" title="响应“载体程序”（Host App）的请求"></a>响应“载体程序”（Host App）的请求</h3><p>正如你在Understand How an Extension Works这篇文档中了解的，当用户在host app选择一个扩展，并使host app向扩展发出请求时，就会打开扩展。说的再详细一点，你的扩展会根据用户的操作接收到请求，帮用户执行任务，然后完成或者关闭请求。比如说，一个分享扩展收到了来自host app的请求，然后该扩展会打开相应视图来响应请求。然后用户在该界面中编辑要分享的内容，用户可以选择发送或者不发送，最后扩展根据用户的行为响应完成还是关闭请求。</p><p>当host app向扩展发出请求时，一般都会指明扩展运行的上下文。对于很多扩展来说，最重要的一部分就是要设置一个工作项，这个工作项就是用户在使用这个扩展时要处理的工作项。比如说，一个分享扩展的上下文可能就包含用户选择的想要分享的一段文字。</p><p>当host app发出一个请求（通常就是调用<code>beginRequestWithExtensionContext:</code>方法），你的扩展就可以用主试图控制器中的 <code>extensionContext</code> 属性来获得上下文，然后使用 <code>NSExtensionContext</code> 类解析上下文并获得工作项。通常，在视图控制器的 loadView 方法中解析上下文并获得工作项，这样在加载完视图后就可以将信息显示在视图界面中了。获取扩展上下文可以使用如下代码：</p><pre><code>NSExtensionContext *myExtensionContext = [self extensionContext]; </code></pre><p>有意思的是内容对象的 inputItems 属性，它包含了应用扩展需要使用的工作项。inputItems 属性包含一个 NSExtensionItem 类型的数组，数组的每一个成员都包含一个可执行的工作项。从上下文中获取工作项可以使用如下代码：</p><pre><code>NSArray *inputItems = [myExtensionContext inputItems]; </code></pre><p>每个 <code>NSExtensionItem</code> 对象都包含若干个描述工作项的属性，比如标题、文本内容、附件信息、用户信息。</p><p>注意 <code>attachments</code> 属性，它包含一个与工作项相关联的媒体数据数组。比如说一个分享请求的工作项，那么 attachments 属性可能就包含用户想要分享网页中的信息。</p><p>当用户工作项处理完后，应用扩展通常会给用户两个选择，完成任务或取消任务。根据用户的选择，扩展会调用 completeRequestReturningItems:expirationHandler:completion: 方法，把工作项返回给 host app，或者会调用 cancelRequestWithError: 方法，返回一个错误代码。</p><p>在iOS中，你的应用程序扩展可能需要更多的时间去处理潜在的需长时间处理的任务，比如说往网上上传内容。这种情况下，你就要使用 <code>NSURLSession</code> 类将该任务转为后台处理的任务。因为转换到后台处理任务需要用一个单独的线程，所以在扩展完成主应用请求并关闭后仍然可以处理。想了解更多关于扩展中NSURLSession类的用法，请参阅：Performing Uploads and Downloads。</p><blockquote><p>重要：虽然你可以设置一个后台URL来上传或下载任务，但是有一些类型的后台任务，比如支持 VoIp 或者在后台播放音乐的任务，是不能通过扩展来实现的。</p></blockquote><blockquote><p>如果你应用扩展的Info.plist文件中含有 UIBackgroundModes 关键字，那么在上传App Store时会被拒绝。（想了解更多关于 UIBackgroundModes 关键字的内容，请参阅 Information Property List Key Reference 中的 UIBackgroundModes）</p></blockquote><h3 id="优化效率和性能"><a href="#优化效率和性能" class="headerlink" title="优化效率和性能"></a>优化效率和性能</h3><p>应用扩展在内存使用优先级上要明显低于当前运行的应用程序。不管是 iOS 还是 OS X，系统都会毫不犹豫地终止扩展，因为用户想返回到host app中的主要目标中。但是也有一些应用扩展的内存使用优先级要高于其他扩展，比如说widgets就要求要高一些，因为它要实时的显示一些信息，因为一般用户更倾向于同时开启多个widgets。</p><p>你的应用扩展并不拥有主循环线程，你要遵循这一规则，以便让扩展在主循环线程中发挥最好的性能。比如说，如果你的应用扩展阻止了主循环线程，那么在用户使用主应用程序的过程中会造成非常糟糕的用户体验效果。<br>我们需要记住的一点是，GPU在系统中是一个共享的资源，所以应用扩展不会得到很高的优先级照顾。比如说，如果你正在玩一个对GPU消耗很高的游戏，那么由于内存压力比较大，它就有可能会选择关闭Today widget。</p><h3 id="设计一个精简的用户界面"><a href="#设计一个精简的用户界面" class="headerlink" title="设计一个精简的用户界面"></a>设计一个精简的用户界面</h3><p>大多数的扩展点都要求你向用户提供一些自定义的界面，它在用户打开你的应用扩展时呈现给用户。通常情况下，应用扩展的界面要尽可能的简约、内敛，并主要关注一个单一任务。为了提高性能和用户体验效果，你要避免与该扩展功能无关的界面出现。</p><p>大多数Xcode 提供的应用扩展模板都包含一个初始界面文件，你可以从这个文件中设计界面开始。</p><p>在用户的惯性思维中，一般他们都是通过应用扩展的图标来辨识扩展功能的。通常情况下，应用扩展的图标和它的主体应用的图标是一致的。使用主体应用的图标作为应用扩展的图标有利于用户去判断这个扩展的来源，也就是说让用户确信这个扩展是来源于他们安装的主体应用。当然也有一些例外。</p><p>在iOS中，自定义的Action扩展的图标使用其主体应用的图标。<br>在OS X中，如果一个扩展的主体程序只是用来安装扩展的封装包，那么该扩展要提供一个单独的图标，否则都会使用主体应用的图标。</p><p>应用扩展要使用一个简短，语义明确的名字，这能让帮助用户把扩展和你的主应用程序联系起来，并且能让他们在系统中更好的管理应用扩展。通过应用扩展 <code>Target</code>的 <code>CFBundleDisplayName</code> 属性来设置它的名称，你可以在<code>Info.plist</code>文件中修改它。如果你没有给 <code>CFBundleDisplayName</code>设置值，也就是没有给扩展设置名称，那么应用扩展会使用其主体应用的名称，也就是<code>CFBundleName</code>属性中的值。</p><p>同时一些应用扩展也需要一个简短的说明。比如说，OS X中的 Widget 扩展就会显示一个简单的描述，这能帮助用户更好的选择他们想要显示在今日通知中的Widget扩展。扩展的描述可以在 <code>InfoPlist.strings</code> 文件的<code>widget.description</code> 属性中设置。</p><h3 id="确保您的iOS-App扩展适用于所有设备"><a href="#确保您的iOS-App扩展适用于所有设备" class="headerlink" title="确保您的iOS App扩展适用于所有设备"></a>确保您的iOS App扩展适用于所有设备</h3><p>您必须确保提交的应用扩展程序是通用的：它必须适用于iPhone，iPod touch和iPad。无论您为包含的应用选择哪个目标设备系列，此要求均适用。Xcode中的应用程序扩展模板已针对通用目标设备系列进行了正确配置。</p><p>要声明您的应用扩展程序是通用的，请使用Xcode中的目标设备系列构建设置，指定“iPhone / iPad”值。</p><p><strong>确保您的应用扩展程序具有通用性</strong></p><ol><li>在keyboard project的Xcode项目导航器中，选择项目文件。<br>如果隐藏了项目编辑器中的project和targets列表，请显示它。为此，请单击project编辑器选项卡栏左侧的按钮。</li><li>在project 和 targets列表的targets组中，选择应用扩展程序的targets。</li><li>在project编辑器中选择Build Settings选项卡。<br>确保选中Basic 和 Combined按钮，以便于您更轻松地找到所需的设置。</li><li>在project编辑器的Deployment group中，查看“Targeted Device Family”设置。对于Debug和Release配置，值应为“iPhone / iPad”。<br>如果您找到不同的值，请将其更正为“iPhone / iPad”。</li></ol><p>在设计和构建应用扩展时 使用Auto Layout和size classes类。测试您的应用扩展程序，以确保其符合您对所有设备大小和方向的预期行为。如“ Simulator User Guide所述，在iOS模拟器中执行此<em>操作</em>，如果可能，还可以在两个方向上对物理设备进行测试。</p><p>请记住，即使您的<code>主体应用(containing app)</code>仅针对iPad设备系列，您所包含的应用扩展程序也会以兼容模式运行显示在的iPhone应用中。</p><blockquote><p>重要<br>要通过App Review，您必须将“iPhone / iPad”（有时称为*<em>universal</em>)*）指定为应用扩展程序的目标设备系列，无论您为<code>主体应用(containing app)</code>选择哪个目标设备系列。</p></blockquote><blockquote><p>在以后的iOS更新中，应用扩展程序仅在扩展程序主体应用本机支持的设备（或设备兼容模式）上运行。例如，在兼容模式下使用iPhone应用程序时，在只有iPad的<code>主体应用(containing app)</code>提供的扩展程序将不可见。为确保获得最佳用户体验，我们建议您的主体应用(containing app)和其应用扩展程序是通用的。</p></blockquote><h3 id="调试，配置和测试你的应用扩展"><a href="#调试，配置和测试你的应用扩展" class="headerlink" title="调试，配置和测试你的应用扩展"></a>调试，配置和测试你的应用扩展</h3><blockquote><p>注意：要确保主体应用中的所有扩展都要使用相同签名方式的代码。<br>Xcode项目中的所有target都必须以相同的方式进行代码签名。例如，在测试期间，您可以使用临时代码签名或使用开发人员证书，但必须对项目中的所有target使用相同的方法。要提交到App Store，请使用您的分发证书来获取所有目标。</p></blockquote><p>使用 Xcode 调试应用扩展和调试其他程序基本是一样的，但唯一点不同的是：你要选择一个能访问扩展的载体应用。当你编译运行应用扩展后，Xcode 会运行载体应用，等待你去使用扩展并触发调试点来调试扩展。你要在 scheme 中要为扩展指定一个载体应用（一个 scheme 封装了 Target 编译的说明）。</p><p>当你在主体应用工程中添加一个应用扩展的Target时，Xcode 就会为应用扩展默认创建一个 scheme。应用扩展的 scheme 可以让你指定在调试时由哪个应用程序来调用你的扩展，也就是指定一个调试时的载体应用。默认情况下，当你编译运行扩展时，会询问你使用哪个载体应用来调用该扩展。</p><p>在你编译运行应用扩展之前，你要确保你的扩展已经选择了一个 scheme。你可以通过 Product &gt; Scheme &gt; MyExtensionName 或者使用 Xcode 菜单栏呼出 scheme 菜单并选择 MyExtensionName 来设置应用扩展的 scheme。</p><blockquote><p>注意：如果你运行主体应用的 scheme 代替应用扩展的 scheme，那么你在编译工程时Xcode会告诉你它正在等待调试应用扩展。</p></blockquote><p>当你编译运行应用扩展时，Xcode会为你列出允许调用该扩展的载体应用程序。当你选择一个载体应用程序并且运行后，调试器就准备开始工作了，并准备好在你打的断点处进行拦截。当你在载体应用程序中使用扩展时，就可以对应用扩展进行Debug调试了。调试应用扩展的方式和使用Xcode调试其他进程一样。</p><p>在OS X中，你在载体应用程序中访问扩展之前，要确保该扩展是允许被使用的。一般情况下，在System Preferences的扩展面板中开启或关闭扩展（你也可以在共享或Action菜单中打开应用扩展面板）。这里要注意一点，在 OS X 中使用 Widget 模拟器调试 Widget扩展时，是不需要对其进行开启操作的。当你要调试键盘扩展时，必须要开启该扩展（你可以通过Settings &gt; General &gt; Keyboard &gt; Keyboards开启键盘扩展）。</p><p>在调试时，Xcode会在OS X中创建一个持续的编译应用扩展的会话。这意味着，如果你要使用OS X系统下的扩展，你需要使用Finder把它从构建处拷贝到类似 Applications folder的地方。</p><blockquote><p>注意：在Xcode的调试控制台日志中，应用扩展的二进制值可能是和 CFBundleIdentifier 属性关联，而不是 CFBundleDisplayName 属性。</p></blockquote><p>由于应用扩展必须具有响应性和高效性，因此当运行应用扩展时，最好在调试导航器中查看<code>调试指标( the debug gauges)</code>。调试指标显示扩展在运行时如何使用CPU，内存和其他系统资源。当你发现类似占用CPU资源出现异常的性能问题时，例如CPU使用率出现异常高峰，您可以使用Instruments来分析您的扩展，并确定需要改进的地方。通过在任何调试仪表报告中单击Instruments中的配置文件，您可以在调试会话期间打开Instruments（要查看调试仪报告，请单击调试区域中的仪表）。想学习了解调试监控器，请查阅Debug Your App；想学习了解Instruments，请查阅Instruments User Guide。</p><blockquote><p>注意：在Xcode中选择 Product &gt; Profile可以直接在Instruments中编译并运行应用扩展。Instruments使用方案的Profile部分中的可执行文件集作为扩展的载体。</p></blockquote><p>如果要使用Xcode提供的测试框架（比如XCTest APIs）测试应用扩展，你需要在主体应用程序中写一些测试用例代码。想了解更多XCTest的知识，请参阅Testing with Xcode。</p><h3 id="分发扩展主体应用程序"><a href="#分发扩展主体应用程序" class="headerlink" title="分发扩展主体应用程序"></a>分发扩展主体应用程序</h3><p>你无法直接将应用扩展上传至App Store，除非它包含在主体应用程序中，并且你不能将应用扩展从一个应用程序中转到另一个应用程序。</p><p>如果想让用户使用你的应用扩展，你必须提交一个主体应用程序到App Store中，并且主体应用程序如要有其他的功能，不能只包含应用扩展。</p><p>如果你想提交 OS X 应用程序扩展，推荐你将主体应用程序提交至App Store，但这也不是唯一的途径。在OS X中，主体应用程序就可以只包含应用扩展，而不需要提供扩展外的其他功能。</p><blockquote><p>注意：如果你不使用App Store来将主体应用程序和OS X 扩展交付给用户，那么在主体应用程序通过审核前，Gatekeeper是不会允许应用扩展生效的。同时，如果你不将主体应用程序上传至App Store，那么该主体应用程序也不能签署你的开发者ID名称，所以用户必须明确从主体应用程序中重载Gatekeeper，才可以让应用扩展生效。</p></blockquote><h2 id="常见问题的处理方案"><a href="#常见问题的处理方案" class="headerlink" title="常见问题的处理方案"></a>常见问题的处理方案</h2><p>当编写自定义代码以执行app扩展任务时，你可能需要处理一些其他多种类型扩展也会出现的情况。在这一章节中，我们将帮助你如何应对和处理这些常见的问题。</p><h3 id="使用内嵌框架共享代码"><a href="#使用内嵌框架共享代码" class="headerlink" title="使用内嵌框架共享代码"></a>使用内嵌框架共享代码</h3><p>你可以创建一个内嵌框架，用于在应用扩展和它的主应用程序（containing app）之间共享代码。比如，你在照片编辑扩展中开发了图片滤镜功能，那么同时该扩展的主应用程序containing app也有这个功能，那么你可以将实现该功能的代码封装成一个框架，并在扩展target和主应用程序target中嵌入这个框架。</p><p>你要确保你创建的内嵌框架不包含应用扩展不能使用的API。这类API一般使用<code>unavailability</code>宏来标记，比如像 <code>NS_EXTENSION_UNAVAILABLE</code>。</p><p>如果你创建的内嵌框架中包含应用扩展不能使用的API，你可将其安全地Link到containing app，它可以正常使用框架中的API，但是不能与应用扩展共享代码（译者注：也就是应用扩展不能使用该框架提供的所有API，继而无法做到代码共享）。如果你上传App Store的应用扩展中有这种框架，或者其他部分使用了不可用的API，那么审核时会被拒绝。</p><p>如果我们要想应用扩展使用内嵌框架，那么首先要配置一下。将target的<code>Require Only App-Extension-Safe API</code>选项设置为<code>Yes</code>。如果你不这样设置，那么Xcode会向你提示警告：<code>linking against dylib not safe for use in application extensions</code>。</p><blockquote><p>重要提示：如果containing app要链接至内嵌框架，那么必须要支持arm64架构，否则在上传App Store时会被拒绝。（如“创建应用扩展”章节中介绍的，所有应用扩展都要支持arm64架构。）</p></blockquote><p>在配置配置Xcode项目时，必须在<code>Copy Files</code>编译阶段选择“Frameworks”作为内嵌框架的目标。</p><blockquote><p>重要提示：我们通常要选择 Frameworks 作为 Copy Files 编译阶段目标。如果你将其设置为 SharedFramework，那么上传App Store时会被拒绝的。</p></blockquote><p>你可以让containing app支持iOS7或更早的版本，但当在iOS8或更新的版本中运行时，要特别注意内嵌框架的安全性。详细内容可以参阅 <a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW3" target="_blank" rel="noopener">Deploying a Containing App to Older Versions of iOS。</a></p><p>有关创建和使用内嵌框架的更多内容，请观看<a href="https://developer.apple.com/videos/wwdc/2014" target="_blank" rel="noopener">WWDC 2014的视频“Building Modern Frameworks”</a>。</p><h3 id="与Containing-App共享数据"><a href="#与Containing-App共享数据" class="headerlink" title="与Containing App共享数据"></a>与Containing App共享数据</h3><p>应用扩展和它的containing app的安全域是有区别的。即便扩展包是嵌套在containing app包中的。默认情况下，应用扩展和containing app是不能直接访问对方的容器的。</p><blockquote><p>BACKGROUND</p><p>要了解容器，阅读  <a href="https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html#//apple_ref/doc/uid/TP40010672-CH2-SW12" target="_blank" rel="noopener">About the iOS File System</a> 中的 <a href="https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010672" target="_blank" rel="noopener">File System Programming Guid</a>.</p></blockquote><p>不过你可以通过数据共享来实现这个愿望。比如，你希望应用扩展和它的containing app共享一个单一的大数据集。比如prerendered assets。</p><p>要实现数据共享，我们要使用Xcode或者开发者门户网站允许应用扩展和它的containing app成为一个应用组，然后在开发者门户网站中注册应用组，并指明在containing app中使用该应用组。关于应用组的知识请查阅 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/AboutEntitlements.html#//apple_ref/doc/uid/TP40011195" target="_blank" rel="noopener">Entitlement Key Reference</a> 文档的 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW19" target="_blank" rel="noopener">Adding an App to an App Group</a> 章节。</p><p>当你设置好应用组后，应用扩展和它的containing app就可以通过 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/index.html#//apple_ref/occ/cl/NSUserDefaults" target="_blank" rel="noopener">NSUserDefaults</a> API共享访问用户的信息。我们可以使用 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/index.html#//apple_ref/occ/instm/NSUserDefaults/initWithSuiteName:" target="_blank" rel="noopener">initWithSuiteName: </a>方法实例化一个 NSUserDefaults 对象，然后传入共享组的标示符。比如一个共享扩展，它或许会更新用户最近经常使用的共享账号，那么我们可以这样来写：</p><pre class=" language-objc"><code class="language-objc">// Create and share access to an NSUserDefaults object. NSUserDefaults *mySharedDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"com.example.domain.MyShareExtension"];     // Use the shared user defaults object to update the user's account. [mySharedDefaults setObject:theAccountName forKey:@"lastAccountName"]; </code></pre><p>下图向我们展示了应用扩展和它的containing app是如何通过共享容器实现数据共享的.</p><p>Figure 4-1应用扩展的容器与其containing app的容器是不同的。</p><img src="/2018/11/17/AppExtension编程指南-扩展基础/table4-1.png"><blockquote><p>重要提示：如果你的应用扩展使用NSURLSession类执行后台的上传下载任务时，你必须要设置一个共享容器，这样扩展和containing app就可以访问到转换传输的数据。后台上传下载的更多知识请参阅 <a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW2" target="_blank" rel="noopener">Performing Uploads and Downloads。</a></p></blockquote><p>如果你设置了共享容器，那么containing app和它包含的允许参与数据分享的扩展就可以对共享容器里的内容进行读写操作了。同时你还必须要对数据的操作进行同步，以避免数据损坏或出错。使用<a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIDocument_Class/index.html#//apple_ref/occ/cl/UIDocument" target="_blank" rel="noopener">UIDocument</a>类、Core Data或者SQLite可以帮你可以让用户通过要求Safari运行JS文件来访问网络内容，并将结果返回到扩展。</p><blockquote><p>版本说明<br>在iOS 8.2及更高版本中，您也可以使用UIDocument该类来协调共享数据访问。<br>在iOS 9及更高版本中，您可以NSFileCoordinator直接使用该类进行共享数据访问，但是如果您这样做，则必须NSFilePresenter在应用扩展转换为后台时删除对象。</p></blockquote><h3 id="访问网页"><a href="#访问网页" class="headerlink" title="访问网页"></a>访问网页</h3><p>在分享扩展（iOS与OS X平台）和Action扩展（iOS平台）中，一般都允许用户使用Safari浏览器访问网页并通过执行JavaScript脚本，并将结果返回到扩展中。你也可以在你的扩展运行之前（适用于两个平台）或执行完任务之后（仅适用于iOS平台）通过JavaScript文件修改网页内容。比如分享扩展，它可以帮助用户分享网页上的内容，或者iOS上的Action扩展可能会显示当前网页的指定翻译内容。</p><p>如果想添加网页访问和操作应用扩展，那么需要遵循下面几个步骤：<br>1.创建一个JavaScript文件，并申明一个全局对象，命名为 <code>ExtensionPreprocessingJS</code>，并为该对象分配一个新的自定义JavaScript类的实例。<br>2.在应用扩展的属性列表文件中添加关键字 <code>NSExtensionJavaScriptPreprocessingFile</code>，给 Safari 浏览器指明使用哪个 JavaScript 文件。<br>3.在<code>NSExtensionActivationRule</code>字典中，将<code>NSExtensionActivationSupportsWebURLWithMaxCount</code> 赋值一个非零的值。（更多关于 NSExtensionActivationRule 字典的知识请参阅 <a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW8" target="_blank" rel="noopener">Declaring Supported Data Types for a Share or Action Extension</a>。）<br>4.当你的应用扩展开始运行时，使用<a href="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSItemProvider_Class/index.html#//apple_ref/occ/cl/NSItemProvider" target="_blank" rel="noopener">NSItemProvider</a>类获得运行JavaScript文件所返回的结果。<br>5.在iOS系统的应用扩展中，如果你希望Safari在扩展执行完任务后更新网页，那么你要向JavaScript文件中传入值。（在这一步中也使用<code>NSItemProvider</code>类。）</p><p>为了告知Safari你的应用扩展中包含一个JavaScript文件，你需要在应用扩展的<code>Info.plist</code>文件中，向<code>NSExtensionAttributes</code>字典添加<code>NSExtensionJavaScriptPreprocessingFile</code>关键字来指明你的JavaScript文件。这个键的值就是你希望当你的应用扩展运行前，Safari要加载的JavaScript文件的名称。比如：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>key<span class="token operator">></span>NSExtensionAttributes<span class="token operator">&lt;</span><span class="token operator">/</span>key<span class="token operator">></span>     <span class="token operator">&lt;</span>dict<span class="token operator">></span>          <span class="token operator">&lt;</span>key<span class="token operator">></span>NSExtensionJavaScriptPreprocessingFile<span class="token operator">&lt;</span><span class="token operator">/</span>key<span class="token operator">></span>          <span class="token operator">&lt;</span>string<span class="token operator">></span>MyJavaScriptFile<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Do not include the <span class="token string">".js"</span> filename extension <span class="token operator">--</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>dict<span class="token operator">></span></code></pre><p>在iOS和OS X平台中，在你自定义的JavaScript类中可以定义一个run()函数，该函数就是Safari加载JavaScript文件的入口。在run()函数中，Safari提供了一个名为completionFunction的参数，你可以使用键值对象的形式将结果传给应用扩展。</p><p>在iOS平台中，你还可以定义一个<code>finalize()</code>函数，当应用扩展在任务结束阶段调用<code>completeRequestReturningItems:expirationHandler:completion:</code>方法时Safari会调用<code>finalize()</code>函数。在该函数中，可以通过向<code>completeRequestReturningItems:expirationHandler:completion:</code>方法传值，来改变网页内容。</p><p>比如，你的iOS应用扩展需要基于一个网页URI启动，并且当它结束运行时改变网页的背景色，那么你需要这样写JavaScript代码：</p><p>清单4-1示例run()和finalize()函数</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> <span class="token builtin">MyExtensionJavaScriptClass</span> <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token builtin">MyExtensionJavaScriptClass</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    run<span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Pass the baseURI of the webpage to the extension.</span>        arguments<span class="token punctuation">.</span><span class="token function">completionFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"baseURI"</span><span class="token punctuation">:</span> document<span class="token punctuation">.</span>baseURI<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Note that the finalize function is only available in iOS.</span>    finalize<span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// arguments contains the value the extension provides in [NSExtensionContext completeRequestReturningItems:completion:].</span>    <span class="token comment" spellcheck="true">// In this example, the extension provides a color as a returning item.</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token string">"bgColor"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The JavaScript file must contain a global object named "ExtensionPreprocessingJS".</span><span class="token keyword">var</span> <span class="token builtin">ExtensionPreprocessingJS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyExtensionJavaScriptClass</span><span class="token punctuation">;</span></code></pre><p>在iOS和OS X平台中，你需要编写代码来处理<code>run()</code>函数返回的值，为获取到字典中的值，我们需要指定<code>kUTTypePropertyList</code>类型作为标示符传入<code>NSItemProvider</code>类的 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSItemProvider_Class/index.html#//apple_ref/occ/instm/NSItemProvider/loadItemForTypeIdentifier:options:completionHandler:" target="_blank" rel="noopener">loadItemForTypeIdentifier:options:completionHandler:</a>方法。在该字典中使用 <code>NSExtensionJavaScriptPreprocessingResultsKey</code>作为key来取值。比如下面例子中我们想要获取将 URI 传入 <code>run()</code>的返回值：</p><pre class=" language-objc"><code class="language-objc">[imageProvider loadItemForTypeIdentifier:kUTTypePropertyList options:nil completionHandler:^(NSDictionary *item, NSError *error) {    NSDictionary *results = (NSDictionary *)item;    NSString *baseURI = [[results objectForKey:NSExtensionJavaScriptPreprocessingResultsKey] objectForKey:@"baseURI"];    }];</code></pre><p><code>finalize()</code> 函数是在当应用扩展执行完任务后传参并调用的，创建一个含有我们需要处理的值的字典，然后用<code>NSItemProvider</code> 的 <code>initWithItem:typeIdentifier:</code>方法来封装该字典。比如当扩展执行完任务后我们想让网页变为红色，我们可以这样写：</p><pre class=" language-objc"><code class="language-objc">NSExtensionItem *extensionItem = [[NSExtensionItem alloc] init];extensionItem.attachments = @[[[NSItemProvider alloc] initWithItem: @{NSExtensionJavaScriptFinalizeArgumentKey: @{@"bgColor":@"red"}} typeIdentifier:(NSString *)kUTTypePropertyList]];[[self extensionContext] completeRequestReturningItems:@[extensionItem] completion:nil];</code></pre><h3 id="执行上传下载任务"><a href="#执行上传下载任务" class="headerlink" title="执行上传下载任务"></a>执行上传下载任务</h3><p>用户一般的操作习惯都倾向于当使用你的应用扩展完成某个任务后，可以将结果立即反馈在使用扩展的应用中。如果一个扩展要处理的任务包含较长时间的上传下载操作时，你要确保当你的应用扩展关闭后能继续完成该任务。为实现这个功能，我们需要使用<a href="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSURLSession_class/index.html#//apple_ref/occ/cl/NSURLSession" target="_blank" rel="noopener">NSURLSession</a>类创建一个URL会话并创建后台的上传下载任务。</p><blockquote><p> 提示：你可以回想一下其他类型的后台任务，比如后台支持VoIP、后台播放音乐，这些是不能用应用扩展去实现的。更多信息请参阅<a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionCreation.html#//apple_ref/doc/uid/TP40014214-CH5-SW3" target="_blank" rel="noopener">Respond to the Host App’s Request。</a></p></blockquote><p>当你的应用扩展准备好上传下载任务后，扩展会完成调用它的应用发出的请求，并在不影响上传下载任务的前提下终止扩展。更多关于扩展处理载体应用请求的知识请参阅<a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionCreation.html#//apple_ref/doc/uid/TP40014214-CH5-SW3" target="_blank" rel="noopener">Respond to the Host App’s Request</a>。在iOS系统中，如果你的应用扩展在执行完后台任务时并没有在运行，那么系统会自动在后台运行扩展的载体应用，并调用<a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/index.html#//apple_ref/occ/intfm/UIApplicationDelegate/application:handleEventsForBackgroundURLSession:completionHandler:" target="_blank" rel="noopener">application:handleEventsForBackgroundURLSession:completionHandler: </a>代理方法。</p><blockquote><p>重要提示：如果你的应用扩展在后台创建了 NSURLSession 任务，那么你必须要设置一个共享容器，以确保扩展和载体应用实现数据共享。我们可以在 NSURLSessionConfiguration 类中使用<a href="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSURLSessionConfiguration_class/index.html#//apple_ref/occ/instp/NSURLSessionConfiguration/sharedContainerIdentifier" target="_blank" rel="noopener">sharedContainerIdentifier</a>属性来指定一个共享容器的标示符，然后我们就可以通过该标示符获取到共享容器。请参阅 <a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW6" target="_blank" rel="noopener">Sharing Data with Your Containing App 文档来设置共享容器。</a></p></blockquote><p>下面的例子展示了如何配置一个URL会话，并创建一个下载任务：</p><pre class=" language-objc"><code class="language-objc">NSURLSession *mySession = [self configureMySession];NSURL *url = [NSURL URLWithString:@"http://www.example.com/LargeFile.zip"];NSURLSessionTask *myTask = [mySession downloadTaskWithURL:url];[myTask resume];- (NSURLSession *) configureMySession {    if (!mySession) {        NSURLSessionConfiguration* config = [NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:@“com.mycompany.myapp.backgroundsession”];// To access the shared container you set up, use the sharedContainerIdentifier property on your configuration object.config.sharedContainerIdentifier = @“com.mycompany.myappgroupidentifier”;        mySession = [NSURLSession sessionWithConfiguration:config delegate:self delegateQueue:nil];    }    return mySession;}</code></pre><p>因为在单位时间内只能由一个进程使用后台会话，所以你需要为载体应用中的所有扩展创建不同的后台会话（每个后台会话都要有一个唯一的标示符）。在这里我们建议当载体应用在后台处理扩展的任务时，只使用一个该扩展创建的后台会话。如果你要执行其他的网络相关的任务，那么就要创建相应的URL会话。</p><p>如果你需要在后台创建URL会话之前完成载体应用的请求，那么要确保创建和使用会话的代码是有效可执行的。当你的扩展调用 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSExtensionContext_Class/index.html#//apple_ref/occ/instm/NSExtensionContext/completeRequestReturningItems:completionHandler:" target="_blank" rel="noopener">completeRequestReturningItems:completionHandler: </a>方法告知主叫应用已经完成相关请求后，系统就可以随时终止你的应用扩展。</p><h3 id="为分享和Action扩展申明支持的数据类型"><a href="#为分享和Action扩展申明支持的数据类型" class="headerlink" title="为分享和Action扩展申明支持的数据类型"></a>为分享和Action扩展申明支持的数据类型</h3><p>在你的分享或Action扩展中，在它们的工作中可能会使用到一些数据，并且这些数据的类型各不相同。为了确保只有当用户在载体应用中选择了你的扩展支持的数据类型时，才会展示你的扩展功能。你需要在扩展的<code>Info.plist</code>属性列表文件中添加 <code>NSExtensionActivationRule</code> 关键字。你也可以使用该关键字指定扩展处理每种类型的最大数目。当你的应用扩展运行时，系统会将<code>NSExtensionActivationRule</code>键的值与扩展项的<code>attachments</code>属性中的信息进行比较。关于 <code>NSExtensionActivationRule</code> 关键字的详细信息可以参阅 <a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/SystemExtensionKeys.html#//apple_ref/doc/uid/TP40014212-SW2" target="_blank" rel="noopener">Action Extension Keys</a>文档中的 <a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009247" target="_blank" rel="noopener">Information Property List Key Reference</a> 章节。</p><p>比如，你可以申明你的分享扩展支持最多处理10张图片，一部影片和一个网站URL。您可以使用以下字典作为该<code>NSExtensionAttributes</code>键的值：</p><pre><code>&lt;key&gt;NSExtensionAttributes&lt;/key&gt;    &lt;dict&gt;        &lt;key&gt;NSExtensionActivationRule&lt;/key&gt;        &lt;dict&gt;            &lt;key&gt;NSExtensionActivationSupportsImageWithMaxCount&lt;/key&gt;            &lt;integer&gt;10&lt;/integer&gt;            &lt;key&gt;NSExtensionActivationSupportsMovieWithMaxCount&lt;/key&gt;            &lt;integer&gt;1&lt;/integer&gt;            &lt;key&gt;NSExtensionActivationSupportsWebURLWithMaxCount&lt;/key&gt;            &lt;integer&gt;1&lt;/integer&gt;        &lt;/dict&gt;    &lt;/dict&gt;              </code></pre><p>如果你想指定不支持的数据类型，那么你可以将该类型的值设置为0，或者在 NSExtensionActivationRule 中不添加该类型即可。</p><blockquote><p>注意：如果你的分享扩展或iOS中的Action扩展需要访问网页，那你必须要确保 NSExtensionActivationSupportsWebURLWithMaxCount 关键字的值不为0（更多关于在应用扩展中通过JavaScript访问网页的内容请参阅<a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ExtensibilityPG/ShareSheet.html#//apple_ref/doc/uid/TP40014214-CH12-SW8" target="_blank" rel="noopener">Accessing a Webpage</a></p></blockquote><p>你也可以使用 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSExtensionItem_Class/index.html#//apple_ref/doc/uid/TP40014375-CH1" target="_blank" rel="noopener">NSExtensionItem</a> 定义的 UTI子 类型以便数据检测器检测文本信息，比如电话号码或通讯地址。</p><p><code>NSExtensionActivationRule</code>字典中的键足以满足大多数应用的过滤需求。如果你需要做更复杂的过滤，比如像 <code>public.url</code> 和 <code>public.image</code> 之间的区别，那么你就得在文本中创建断言语句。如果你要创建一个断言，那么就将<code>NSExtensionActivationRule</code>关键字的值设置为你指定的断言字符串。（在运行时，系统会自动将该字符串编译为 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSPredicate_Class/index.html#//apple_ref/occ/cl/NSPredicate" target="_blank" rel="noopener">NSPredicate 对象</a></p><p>比如，一个应用扩展的附件属性可以指定为PDF文件，可以这样写：</p><pre><code>{extensionItems = ({    attachments = ({        registeredTypeIdentifiers = (            &quot;com.adobe.pdf&quot;,            &quot;public.file-url&quot;        );    });})}</code></pre><p>为了指定你的应用扩展可以处理PDF文件，你可以像这样创建断言字符串：</p><pre><code>SUBQUERY (    extensionItems,    $extensionItem,    SUBQUERY (        $extensionItem.attachments,        $attachment,        ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO &quot;com.adobe.pdf&quot;    ).@count == $extensionItem.attachments.@count).@count == 1</code></pre><p>以下是更复杂的断言语句的示例：</p><pre><code>SUBQUERY (    extensionItems,    $extensionItem,    SUBQUERY (        $extensionItem.attachments,        $attachment,        ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO &quot;org.appextension.action-one&quot; ||        ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO &quot;org.appextension.action-two&quot;    ).@count == $extensionItem.attachments.@count).@count == 1</code></pre><p>此语句遍历一个<code>NSExtensionItem</code>对象数组，其次是遍历<code>attachments</code>每个扩展项中的数组。对于每个附件，谓词评估附件中每个表示的统一类型标识符（UTI）。当附件表示UTI符合两个不同的指定UTI中的任何一个（您在每个<code>UTI-CONFORMS-TO</code>操作员的右侧看到）时，收集该UTI以进行最终比较测试。<code>TRUE</code>如果应用程序扩展名仅提供了一个支持UTI的扩展项附件，则返回最后一行。</p><p>开发过程中，在你创建断言语句之前你可以使用<code>TRUEPREDICATE</code>常量（结果为true）测试你的代码路径。更多断言语句的语法知识请参阅<a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html#//apple_ref/doc/uid/TP40001795" target="_blank" rel="noopener">Predicate Format String Syntax。</a></p><blockquote><p>重要提示：在将你的载体应用上传App Store之前，要确保所有的 TRUEPREDICATE 常量已经替换为指定的断言语句或 NSExtensionActivationRule 关键字，不然载体应用会被App Store拒绝。</p></blockquote><h3 id="配置载体应用以适用于老版本的iOS系统"><a href="#配置载体应用以适用于老版本的iOS系统" class="headerlink" title="配置载体应用以适用于老版本的iOS系统"></a>配置载体应用以适用于老版本的iOS系统</h3><p>如果你在主体应用中使用了内嵌框架，那么它就可以在iOS8.0之后的版本中使用，即便内嵌框架不支持老版本的系统也没关系。</p><p>使主体应用能做到上述这一点的是 <code>dlopen</code> 命令，它可以使你使用条件链接和加载框架包的机制。你可以使用这个命令来代替编译时链接，你可以在 Xcode 的 General 选项或 Build Phases 选项中对该命令进行编辑。其原理就是只有当主体应用在 iOS8.0 或更高的版本中运行时，才会链接使用内嵌框架。</p><p>您必须在有条件地 framework bundle的代码语句中使用Objective-C而不是Swift。您的应用程序的其余部分可以用任何一种语言编写，内嵌框架本身也可以用任何一种语言编写。</p><p>调用之后<code>dlopen</code>，使用以下类型的语句访问内嵌框架类：</p><pre><code>MyLoadedClass *loadedClass = [[NSClassFromString (@&quot;MyClass&quot;) alloc] init]; </code></pre><blockquote><p> 重要提示：如果你的主体应用使用了内嵌框架，那么就必须要支持arm64架构，否则会被App Store拒绝。</p></blockquote><p><strong>设置Xcode项目中应用扩展的条件链接</strong></p><p>1.将每一个应用扩展的运行系统版本设置为iOS8.0或更高，通常选中Xcode中的target，在General选项中设置Deployment info。<br>2.将你主体应用的运行系统版本设置为你想支持的最低iOS版本。<br>3.在你的主体应用中，通过 <a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIDevice_Class/index.html#//apple_ref/occ/instp/UIDevice/systemVersion" target="_blank" rel="noopener">systemVersion</a> 方法，在运行时检查判断iOS的版本，并判断是否执行dlopen命令。只有你的载体应用在iOS8.0或更高的版本中运行时才会指定dlopen命令。进行此调用时，请务必使用Objective-C，而不是Swift。</p><p>特定的iOS API通过dlopen命令使用内嵌框架。你必须选择性的使用这些API，就像使用 dlopen 命令时那样。这些API都是 <a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreFoundation/Reference/CFBundleRef/index.html#//apple_ref/c/tdef/CFBundleRef" target="_blank" rel="noopener">CFBundleRef</a> 的封装类型：</p><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreFoundation/Reference/CFBundleRef/index.html#//apple_ref/c/func/CFBundleGetFunctionPointerForName" target="_blank" rel="noopener">CFBundleGetFunctionPointerForName</a></p><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreFoundation/Reference/CFBundleRef/index.html#//apple_ref/c/func/CFBundleGetFunctionPointersForNames" target="_blank" rel="noopener">CFBundleGetFunctionPointersforNames</a></p><p>还有来自<code>NSBundle</code>类的方法：</p><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSBundle_Class/index.html#//apple_ref/occ/instm/NSBundle/load" target="_blank" rel="noopener">load</a><a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSBundle_Class/index.html#//apple_ref/occ/instm/NSBundle/loadAndReturnError:" target="_blank" rel="noopener">loadAndReturnError:</a><br><a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSBundle_Class/index.html#//apple_ref/occ/instm/NSBundle/classNamed:" target="_blank" rel="noopener">classNamed:</a></p><p>因为你一般会将载体应用的运行系统版本配置为较低的版本，所以这些API通常都是在运行时检查，只有确保载体应用在iOS8.0或更高版本中运行时才会使用这些API。</p>]]></content>
      
      <categories>
          
          <category> iOS文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018CocoaPods安装和使用</title>
      <link href="/2018/11/12/2018CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/11/12/2018CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote><p>2018 CocoaPods最新安装和使用以及跳过pod setup快速安装教程</p></blockquote><h3 id="第一步-修改ruby源"><a href="#第一步-修改ruby源" class="headerlink" title="第一步:修改ruby源"></a>第一步:修改ruby源</h3><p>安装CocoaPods,需要ruby环境,然而Mac系统默认会安装好ruby环境。</p><p>打开Mac终端</p><pre><code>gem sources -l //查看ruby源</code></pre><p>默认情况下，会显示</p><pre><code>https://rubygems.org/</code></pre><p>ruby源在墙内是访问不到的,需要置换为国内</p><p>原来一直用的是淘宝的</p><pre><code>gem sources -a https://ruby.taobao.org/</code></pre><p>但是淘宝的ruby源不更新了,不建议使用 ,原因可以看这个链接 <a href="https://ruby.taobao.org/" target="_blank" rel="noopener">https://ruby.taobao.org/</a></p><p>现在用 <a href="https://gems.ruby-china.org" target="_blank" rel="noopener">https://gems.ruby-china.org</a></p><pre><code>//删除之前使用的淘宝gem sources --remove  https://ruby.taobao.org/gem source -a https://gems.ruby-china.org</code></pre><p>为了验证你的Ruby镜像是并且仅是gems.ruby-china，可以用以下命令查看：</p><pre><code>gem sources -l   //检测是否成功</code></pre><p>只有在终端中出现下面文字才表明你上面的命令是成功的：</p><pre><code>https://gems.ruby-china.org</code></pre><p>补充: 最近ruby-china域名变化由org更改为com，请大家改为 <a href="https://gems.ruby-china.com" target="_blank" rel="noopener">https://gems.ruby-china.com</a></p><pre><code>gem sources --remove  https://gems.ruby-china.orggem source -a https://gems.ruby-china.com</code></pre><h3 id="第二步-升级Gem"><a href="#第二步-升级Gem" class="headerlink" title="第二步:升级Gem"></a>第二步:升级Gem</h3><p>Gem是来管理Ruby标准包.</p><pre><code>gem -v 　　　　　　　　　　　　//查看版本sudo gem update --system　  //升级gem</code></pre><p>不升级在第三步可能,会报很多错误,因为Gem版本太低,无法安装第三步,安装CocoaPods</p><p><strong>如果报错：</strong></p><pre><code>ERROR:  While executing gem ... (OptionParser::AmbiguousOption)ambiguous option: -system</code></pre><ul><li><p>安装RVM:</p><pre><code>curl -L get.rvm.io | bash -s stable</code></pre></li><li><p>查看版本：</p><pre><code>ruby -v</code></pre></li><li><p>已知版本：</p><pre><code>rvm list known</code></pre></li><li><p>安装版本：</p><pre><code>rvm install 2.4.1</code></pre></li></ul><h3 id="第三步-安装CocoaPods"><a href="#第三步-安装CocoaPods" class="headerlink" title="第三步,安装CocoaPods"></a>第三步,安装CocoaPods</h3><pre><code>sudo gem install cocoapods　　// Mac OS X 10.11前  输入这一条sudo gem install -n /usr/local/bin cocoapods  //Mac OS X 10.11后   输入这一条</code></pre><p>成功后</p><pre><code>pod setup   </code></pre><p>这条命令是将Github上的开源库都托管都安装Podspec索引安装到到本地,</p><p>测试<br>如果有版本号，则说明已经安装成功</p><pre><code>pod --version //查看版本</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-74059856be7549cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pod setup成功后信息png"></p><h3 id="第四步-利用cocoapods来安装第三方框架"><a href="#第四步-利用cocoapods来安装第三方框架" class="headerlink" title="第四步,利用cocoapods来安装第三方框架"></a>第四步,利用cocoapods来安装第三方框架</h3><ul><li><p>1 进入要安装框架的项目的.xcodeproj同级文件夹</p></li><li><p>2 在该文件夹中新建一个文件Podfile</p></li></ul><pre><code>pod init </code></pre><p><code>pod init</code>首先需要判断当前目录有没有 XCODEPROJ 项目，如果没有直接报错；若果有单个 XCODEPROJ 项目，会直接创建一个 podfile 文件；如果有多个XCODEPROJ 项目，需要指定一个项目，否则会报错：</p><pre><code>[!] Multiple Xcode projects found, please specify one</code></pre><p>或者手动 新建文件Podfile <code>vim Podfile</code></p><pre><code>vim Podfile</code></pre><p>Podfile文件中, 写入以下内容并保存 小提示：（终端vim文件 按 i 可编辑 ，esc 退出编辑，：wq  可保存退出）</p><pre><code># Uncomment the next line to define a global platform for your projectplatform :ios, &#39;7.0&#39;target &#39;MyApp&#39; do# Uncomment the next line if you&#39;re using Swift or would like to use dynamic frameworks# use_frameworks!# Pods for sync  pod &#39;AFNetworking&#39; , &#39;~&gt; 3.1.0&#39;end </code></pre><blockquote><p>解释一下<br><code>platform</code> : ios, ‘7.0’代表当前AFNetworking支持的iOS最低版本是iOS 7.0,  使用时需要去掉前面井号<br><code>MyApp</code> : 就是你自己的工程名字，<br><code>pod &#39;AFNetworking&#39;, &#39;~&gt; 3.1.0&#39;</code>代表要下载的AFNetworking版本是3.1.0及以上版本，还可以去掉后面的’~&gt; 3.1.0’，直接写pod ‘AFNetworking’，这样代表下载的AFNetworking是最新版。</p></blockquote><ul><li><p>3 上面信息表示文件中告诉cocoapods需要安装的框架信息</p><pre><code>  a.该框架支持的平台  b.适用的iOS版本  c.框架的名称  d.框架的版本</code></pre></li><li>4.导入第三方库<br>–no-repo-update : 不更新仓库,迅速加载第三方框架<pre><code>pod install --no-repo-updatepod update --no-repo-update</code></pre></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-87b7ef65dbfd5902.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="导入第三方库 成功后信息.png"></p><ul><li>5.可使用search命令搜索类库名<br>比如:<pre><code>pod search AFNetworking（也可以pod search UI等，可以查询你想要的）</code></pre>退出搜索, 输入 :wq</li></ul><h3 id="第五步-CocoaPods-中删除不需要的第三方库"><a href="#第五步-CocoaPods-中删除不需要的第三方库" class="headerlink" title="第五步,CocoaPods 中删除不需要的第三方库"></a>第五步,CocoaPods 中删除不需要的第三方库</h3><ul><li><p>1 打开Podfile,  找到不需要的类库, 直接删除该类库信息, 或者前面加#注释掉<br>比如要删除AFNetworking库 ,直接去掉Podfile中第五行信息 pod ‘AFNetworking’, ‘~&gt; 3.1.0’<br><img src="https://upload-images.jianshu.io/upload_images/126164-22fad901523a059d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="删除AFN库.png"></p></li><li><p>2 打开终端cd到当前项目的根目录下重新执行</p><pre><code>pod update --no-repo-update</code></pre></li><li>3 更新完成就删除成功了</li></ul><p><strong>注意: 删除一些三方库后编译可能会报错: library not found for -l 库名 </strong><br>解决:<br>在Build Settings中搜索Other Linker Flags，去掉-l”库名”。<br>(有时不管用,应该是cocoapods的版本问题)</p><h3 id="第六-Cocoapods降低版本及卸载"><a href="#第六-Cocoapods降低版本及卸载" class="headerlink" title="第六, Cocoapods降低版本及卸载"></a>第六, Cocoapods降低版本及卸载</h3><p>一. 移除pod组件<br> 1.这条指令会告诉你Cocoapods组件装在哪里 :<br> <code>which pod</code><br> 2.你可以手动移除这个组件 :<br> <code>sudo rm -rf 路径</code></p><p>二. 移除 RubyGems 中的 Cocoapods程序包<br> Q: RubyGems是什么?<br> A: RubyGems（简称 gems）是一个用于对 Ruby组件进行打包的 Ruby 打包系统。 它提供一个分发 Ruby 程序和库的标准格式，还提供一个管理程序包安装的工具。<br> 1.查看gems中本地程序包<br> <code>gem list</code><br> 2.移除程序包<br> <code>sudo gem uninstall cocoapods -v 要移除的版本号</code><br> 3.安装指定版本的Cocoapods<br> <code>sudo gem install cocoapods -v 要安装的版本号</code></p><hr><h3 id="跳过pod-setup快速安装"><a href="#跳过pod-setup快速安装" class="headerlink" title="跳过pod setup快速安装"></a>跳过pod setup快速安装</h3><p>有不少同学执行pod setup这一步, 感觉很慢…..</p><p>大约要下载200M的文件,偏偏下载速度出奇的慢,本人保持在30K/S,大约2个小时,关键是没有任何进度条显示,就这样傻乎乎的卡死在这里</p><p>一句 pod setup 卡你2个小时,前提还是你安装没有错,如果错误,又要重新2小时.</p><p>怎么能如此浪费时间呢?</p><p>前面说了,pod setup   这条命令是将Github上的开源库都托管都安装Podspec索引安装到到本地.</p><p>简单说就是下载一个包,到本地,也就是这个东西</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-2e3ab280a1702cef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="路径.png"></p><p>如果你同事电脑上有安装好,你其实可以从你同事电脑上拷贝过来,直接放到该路径就OK了.</p><p>如果你身边没有装好的CocoaPods的朋友,可以访问这个链接</p><p><a href="https://github.com/CocoaPods/Specs" target="_blank" rel="noopener">https://github.com/CocoaPods/Specs</a>  (github所有的第三方开源库的Podspec文件都托管在这里,这也是你pod setup所要下载的).</p><p>选择Download ZIP,用你的浏览器或者迅雷什么的,什么下载快用什么,分分钟下载完目前为111.3M(随着开源库的壮大,会慢慢变大).</p><p>解压后为这个样子</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-f50244cc5a58b156.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解压后改为master.png"></p><p>对比上图,Specs-master改名为master 放在 ~/.cocoapods/repos 路径即可.</p><p>~/.cocoapods/repos 这个路径是在执行 pod setup生成的,所以电脑无法前往此路径是,建议先pod setup下,然后关闭掉即可生成路径.</p><p>还有就是,FQ,会很快下载,也就是挂个VPN.</p>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOSTool </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo搭建github博客</title>
      <link href="/2018/11/11/Hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/11/11/Hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官方网站</a></p><h2 id="一-系统环境配置："><a href="#一-系统环境配置：" class="headerlink" title="一.系统环境配置："></a>一.系统环境配置：</h2><p>要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！</p><p><strong>1.安装 node.js</strong><br>​    下载地址 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a><br>​    直接双击下载下来的msi文件，一路下一步就ok了，安装完之后调出命令行或者node命令输入终端，输入node -v看到版本信息就表明安装成功了。如果不会就参考<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">node.js安装</a></p><p><strong>2.安装 git</strong><br>​    下载地址 <a href="https://git-scm.com/" target="_blank" rel="noopener">git下载</a><br>​    直接双击下载下来的git安装程序，同node安装，安装完之后右键发现多了两个Git GUI Here 、Git Bash Here，点击后者，然后输入git –version出现版本信息就表明安装成功了。</p><p><strong>3.注册 github账号</strong><br>​    github 官网 <a href="https://github.com/" target="_blank" rel="noopener">github</a></p><h2 id="二-搭建个人博客"><a href="#二-搭建个人博客" class="headerlink" title="二.搭建个人博客"></a>二.搭建个人博客</h2><h3 id="安装-hexo："><a href="#安装-hexo：" class="headerlink" title="安装 hexo："></a>安装 hexo：</h3><ul><li><p><strong>1.更新镜像</strong><br>参考 <a href="https://www.jianshu.com/p/aa8fb6fda884" target="_blank" rel="noopener">2018 mac终端更新淘宝npm镜像</a></p></li><li><p><strong>2. 安装 hexo 命令</strong></p><pre><code>  $ sudo cnpm install -g hexo-cli</code></pre><p>  在这里会有 一段时间等待，请稍等</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-8bcd9d6efc56835c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo安装成功"></p><ul><li><strong>3. 安装个人博客</strong><br>进入到 你本地的博客存放路径</li></ul><pre><code>    # 进入本地博客存放目录    $ cd /github/blog    # 初始化 个人博客    $ hexo init #等待一段时间</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/126164-91aed7dc4936b71b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo初始化成功"></p><p>初始化完成以后，会生成以下目录：<br><img src="https://upload-images.jianshu.io/upload_images/126164-d43db69ff782332d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构"></p><pre><code>#生成静态网页$ hexo g# 启动服务器。默认情况下，访问网址为： http://localhost:4000/   $ hexo s</code></pre><p>执行完以后，你就可以去打开 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>  看本地版的博客效果了。</p><hr><h2 id="三-修改主题："><a href="#三-修改主题：" class="headerlink" title="三.修改主题："></a>三.修改主题：</h2><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next官网</a><br><a href="https://link.jianshu.com/?t=https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">这里</a>有一些常见的hexo主题，读者可以挑选自己喜欢的安装。</p><p>个人比较喜欢 next 这款主题。基本呢就是这个效果<a href="https://honkersk.github.io/" target="_blank" rel="noopener">个人博客</a></p><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><pre><code>$ hexo clean</code></pre><p>下载主题</p><pre><code>$ git clone https://github.com/iissnan/hexo-theme-next.git themes/next</code></pre><h3 id="启动主题："><a href="#启动主题：" class="headerlink" title="启动主题："></a>启动主题：</h3><p><strong>1. 修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next</strong></p><pre><code>theme : next</code></pre><p><strong>2.生成静态页面</strong></p><pre><code>$ hexo clean # 生成静态页面$ hexo g# 启动服务器$ hexo s</code></pre><p>打开 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>  查看静态页面.</p><h2 id="四-部署到GitHub上："><a href="#四-部署到GitHub上：" class="headerlink" title="四.部署到GitHub上："></a>四.部署到GitHub上：</h2><p>修改站点根目录下 _config.yml 文件，在最后添加</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:honkerSK/honkerSK.github.io.git  #这里填你自己的github地址  branch: master</code></pre><p>然后在命令行中执行</p><pre><code>#注意需要提前安装一个扩展：$ cnpm install hexo-deployer-git --save#部署网站, 提交到github$ hexo d</code></pre><p>到此呢，你的博客基本就搭建完毕了。</p><hr><h3 id="博客外部插件："><a href="#博客外部插件：" class="headerlink" title="博客外部插件："></a>博客外部插件：</h3><p>这个是个人博客的第三方插件，一个博客搜索插件，一个评论插件。</p><h4 id="搜索插件-algolia："><a href="#搜索插件-algolia：" class="headerlink" title="搜索插件 algolia："></a>搜索插件 algolia：</h4><ul><li>1) 注册账号 <a href="https://www.algolia.com/" target="_blank" rel="noopener">algolia</a></li><li><p>2) 登陆，进去创建一个索引，如图：<br>  <img src="http://upload-images.jianshu.io/upload_images/126164-9ef16a35e47eea28?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="new index"></p></li><li><p>3) 创建一个api key，并赋予增删的权限，如图所示：<br>  <img src="http://upload-images.jianshu.io/upload_images/126164-c3aadf219cba3440?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="new api key"></p><p>  并赋予 add records,delete recourds,list indices,delete index 4个权限，如图所示：<br>  <img src="http://upload-images.jianshu.io/upload_images/126164-6c8a7bac6a473269?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="权限"></p></li><li><p>4) 然后编辑配置文件，首先是 next 目录下的 _config.yml：</p><pre><code>  将 # Algolia Search 下的  algolia_search:  enable: true  ---改为true</code></pre></li><li><p>5) 然后修改 站点目录下的 _config.yml：<br>  最后增加：</p><pre><code>  #站内搜索：  algolia:  applicationID: &#39;ZMNZVONxxx&#39;   #Application ID 对应的值  apiKey: &#39;a3b6cc86714b99e25e614968b07xxxxx&#39;   # 这里填你新建的 api key 对应的值  indexName: &#39;bigDataBeginner&#39;  #这里填你  创建的索引名称  chunkSize: 5000    #这个值不动</code></pre></li><li><p>6) 执行命令，将文章列表同步到 algolia：</p><pre><code>  $ export HEXO_ALGOLIA_INDEXING_KEY=a3b6cc86714b99e25e614968b073f442   # key值对于你新建 api key的值  $ hexo algolia</code></pre><p>  如果报错 执行 hexo clean 后，重试。然后预览。</p></li></ul><h4 id="评论插件-来必力："><a href="#评论插件-来必力：" class="headerlink" title="评论插件 来必力："></a>评论插件 来必力：</h4><ul><li>1) 注册账号<a href="https://livere.com/" target="_blank" rel="noopener">来必力</a></li><li><p>2) 登陆，绑定自己博客地址。如图所示：<br>  <img src="http://upload-images.jianshu.io/upload_images/126164-4d42139d82b90640?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="来必力"></p></li><li><p>3) 复制 自己地址对应的id值。如图所示：<br>  <img src="http://upload-images.jianshu.io/upload_images/126164-9db802d6e567991c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="复制id"></p></li><li><p>4) 编辑 next 目录下的 _config.yml 配置文件：<br>  修改下面一行：</p><pre><code>  livere_uid: &quot;MTAyMC8zMjg2xxxxxx&quot;  ---这里填入你复制的id值</code></pre><p>  清空缓存，重新生成静态页面预览就看到效果了。</p></li></ul><h2 id="Hexo常用命令："><a href="#Hexo常用命令：" class="headerlink" title="Hexo常用命令："></a>Hexo常用命令：</h2><pre><code>$ hexo clean 清除本地缓存$ hexo g # 或者hexo generate，生成静态页面$ hexo s # 或者hexo server，可以在http://localhost:4000/ 查看$ hexo new &quot;postName&quot; #新建文章$ hexo new page &quot;pageName&quot; #新建页面$ hexo d  # 代码同步到github上</code></pre><p>好了，本文到此结束。</p>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端Tool </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何优雅管理github的star项目</title>
      <link href="/2018/11/11/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%AE%A1%E7%90%86github%E7%9A%84star%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/11/11/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%AE%A1%E7%90%86github%E7%9A%84star%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<blockquote><p>在使用GitHub的过程中，我们经常会Star一些项目。数量一多，完全无法掌控。很早就有人提议官方添加分组和标签功能，但官方给出了回应说，不会做这个功能。所以我们只能使用第三方的工具来管理star项目了，接下来介绍几个常用的工具：</p></blockquote><h2 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h2><h3 id="github-stars-manager-推荐"><a href="#github-stars-manager-推荐" class="headerlink" title="github-stars-manager (推荐)"></a>github-stars-manager (推荐)</h3><p><a href="https://github.com/gabrielgodoy/github-stars-manager" target="_blank" rel="noopener">github-stars-manager源代码</a></p><p><a href="https://chrome.google.com/webstore/detail/github-stars-manager/epooeampfghdkampjnocabjniefmnkab" target="_blank" rel="noopener">Chrome应用商店</a></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-776854f4f633f918.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="github-stars-manager"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-397a238fb617dd53.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="github-stars-manager2"></p><p><strong>比较：</strong></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>开源</td><td>只有start标签，没有Repositoriesb标签</td></tr><tr><td>直接在 github 的 star 页面中增加tag，无缝集成。</td><td>需要github授权访问所有公开和私有仓库</td></tr><tr><td>可以直接导出数据到chrome书签栏</td><td>添加标签要一次读取内容，有延迟</td></tr><tr><td>比较新，18年5月创建并上架Chrome应用商店</td><td>标签不能排序，看上去比较乱</td></tr></tbody></table><h3 id="github-stars-tagger"><a href="#github-stars-tagger" class="headerlink" title="github-stars-tagger"></a>github-stars-tagger</h3><p><a href="https://github.com/artisologic/github-stars-tagger" target="_blank" rel="noopener">github-stars-tagger源代码</a></p><p><a href="https://chrome.google.com/webstore/detail/github-stars-tagger/aaihhjepepgajmehjdmfkofegfddcabc" target="_blank" rel="noopener">Chrome应用商店</a></p><p>Github 改版之前的插件，可以管理 star 项目，自带同步功能，最近更新时间17年2月，Github改版之后这个插件不能用了。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-00cbf448ffec683c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="github-stars-tagger"></p><h3 id="Codelf"><a href="#Codelf" class="headerlink" title="Codelf"></a>Codelf</h3><p><a href="http://unbug.github.io/codelf/" target="_blank" rel="noopener">Codelf在线应用</a></p><p><a href="https://chrome.google.com/webstore/detail/codelf-best-github-stars/jnmjaglhmmcplekpfnblniiammmdpaan/related?hl=en-GB" target="_blank" rel="noopener">Chrome应用商店</a></p><p>具有Bootstrap 风格，不是很美观，不过它支持导出导入数据，方便同步！</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-f3e4f7ef30225ce5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Codelf1"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-eaecf53795f7f197.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Codelf2"></p><p>这个工具有一个 Chrome 插件，不过插件也是一个网页。</p><p><strong>比较：</strong></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>支持导入导出</td><td>在线网站管理，需要授权</td></tr><tr><td>响应快</td><td>只能导入导出，数据保存在缓存中，容易丢失。</td></tr></tbody></table><h2 id="开源的"><a href="#开源的" class="headerlink" title="开源的"></a>开源的</h2><h3 id="Astral"><a href="#Astral" class="headerlink" title="Astral"></a>Astral</h3><p><a href="https://github.com/astralapp/astral" target="_blank" rel="noopener">Astral源代码</a></p><p><a href="https://app.astralapp.com/" target="_blank" rel="noopener">Astral在线应用</a></p><p>Astral 是一款基于 PHP 使用 Vue.js 构建的 Github star 项目管理工具，方便个人用户管理自己的 star 项目。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-4e22c5d19f7b92c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Astral 登录界面"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-8d5e23e2351c52ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Astral"></p><p><strong>比较：</strong></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>开源</td><td>在线网站标签管理</td></tr><tr><td>界面漂亮</td><td>不能同步到chrome书签</td></tr><tr><td>可以以json导出备份</td><td>需要授权</td></tr></tbody></table><h3 id="gitmark"><a href="#gitmark" class="headerlink" title="gitmark"></a>gitmark</h3><p><a href="https://github.com/GitMarkTeam/gitmark" target="_blank" rel="noopener">gitmark源代码</a></p><p><a href="http://gitmark.igevin.info/" target="_blank" rel="noopener">gitmark在线网址</a></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-dbf2731633562a25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gitmark"></p><p><strong>比较：</strong></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>开源</td><td>只是在线查看，没有标签管理功能</td></tr><tr><td>15年创建项目，最近一直在更新</td><td>需要授权访问公共仓库</td></tr></tbody></table><h2 id="不开源的"><a href="#不开源的" class="headerlink" title="不开源的"></a>不开源的</h2><h3 id="Gitconstellation"><a href="#Gitconstellation" class="headerlink" title="Gitconstellation"></a>Gitconstellation</h3><p>Gitconstellation网站：<a href="http://gitconstellation.com" target="_blank" rel="noopener">http://gitconstellation.com</a></p><p>这是一个不开源的 star 管理工具。界面有一种小清新的风格。它采用分段加载 star 项目的方式加载。</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-5e0b5e2e69fe98ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Gitconstellation"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-3de6189aaef5300b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Gitconstellation2"></p><p><strong>比较：</strong></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>界面美观</td><td>不开源</td></tr><tr><td>只授权了读取公共信息</td><td>无法导出相关内容</td></tr><tr><td></td><td>响应速度慢</td></tr></tbody></table><h3 id="OhMyStar2"><a href="#OhMyStar2" class="headerlink" title="OhMyStar2"></a>OhMyStar2</h3><p>ohmystarapp2 网址： <a href="http://www.ohmystarapp.com/" target="_blank" rel="noopener">http://www.ohmystarapp.com/</a></p><ul><li>只能在苹果电脑上用。</li><li>分为免费版和收费版。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-2ebfa00b294bb95f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OhMyStar2"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-41943ea9f800228c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OhMyStar2升级会员"></p><p><strong>比较：</strong></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>界面美观</td><td>不开源</td></tr><tr><td>可以导出相关内容</td><td>需要授权访问公共仓库</td></tr><tr><td>免费版添加标签没有数量限制</td><td>添加标签，响应速度慢</td></tr></tbody></table><h3 id="Starry"><a href="#Starry" class="headerlink" title="Starry"></a>Starry</h3><ul><li>国人开发，Appstore 17年上线， 界面和OhMyStar2类似。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-a6cf409b4d48b626.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Starry界面"></p><p><img src="https://upload-images.jianshu.io/upload_images/126164-e0c1595578dd5a56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Starry升级会员"></p><p><strong>比较：</strong></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>可以创建group管理</td><td>不开源</td></tr><tr><td>能拖拽项目添加到group中</td><td>免费版最多添加5个group</td></tr><tr><td>响应速度快</td><td>需要授权访问公共仓库</td></tr><tr><td></td><td>不能导出数据</td></tr></tbody></table><h3 id="Star-Orde"><a href="#Star-Orde" class="headerlink" title="Star Orde"></a>Star Orde</h3><ul><li>AppStore上收费12RMB,有mac版和iOS版。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-a3c31eaed97ebecd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Star Orde"></p><h2 id="不建议的"><a href="#不建议的" class="headerlink" title="不建议的"></a>不建议的</h2><h3 id="MyGitStar"><a href="#MyGitStar" class="headerlink" title="MyGitStar"></a>MyGitStar</h3><p><a href="https://github.com/Sidong/MyGitStar" target="_blank" rel="noopener">MyGitStar源码</a></p><ul><li>这个项目最近更新是14年4月，不清楚具体长啥样。</li><li>说明文档为中文</li></ul><h3 id="gitstars-openapi"><a href="#gitstars-openapi" class="headerlink" title="gitstars-openapi"></a>gitstars-openapi</h3><p><a href="https://code.hiroz.cn/g_gitstars/gitstars-openapi/" target="_blank" rel="noopener">gitstars-openapi 源码</a></p><ul><li>最近更新是16年9月，现在仅仅是先把 API 公开出来了，还在开发中，网站还没上线。</li></ul><h3 id="GitStars-com"><a href="#GitStars-com" class="headerlink" title="GitStars.com"></a>GitStars.com</h3><p><a href="https://github.com/jkeylu/GitStars.com" target="_blank" rel="noopener">GitStars.com源码</a></p><ul><li>最近更新是15年3月，现在停了，网站都打不开了，不过源码还在。</li></ul><h3 id="Gitrep"><a href="#Gitrep" class="headerlink" title="Gitrep"></a>Gitrep</h3><p> <a href="https://www.gitrep.com" target="_blank" rel="noopener">Gitrep在线网站</a></p><ul><li>网站虽然在，但是基本是废了，不能用。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你没有私有仓库，建议使用 google插件<code>github-stars-manager</code>。如果是苹果电脑，并且想要本地管理保存，建议使用mac软件 <code>OhMyStar2</code></p>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plug-in </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多个github帐号更新多个hexo博客</title>
      <link href="/2018/11/11/%E5%A4%9A%E4%B8%AAgithub%E5%B8%90%E5%8F%B7%E6%9B%B4%E6%96%B0%E5%A4%9A%E4%B8%AAhexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/11/11/%E5%A4%9A%E4%B8%AAgithub%E5%B8%90%E5%8F%B7%E6%9B%B4%E6%96%B0%E5%A4%9A%E4%B8%AAhexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<blockquote><p>一台电脑, 多个github帐号的SSH key切换, 更新多个hexo博客</p></blockquote><p>github账号，工作有一个，自己有一个。但是默认下使用ssh key在git push时只有默认账号能免输入账号和密码。</p><ul><li>如果你建立并配置了.ssh/config文件后, 但却不知道怎么使用。这篇文章是为你准备的。</li></ul><h3 id="打开终端-进入ssh根目录下"><a href="#打开终端-进入ssh根目录下" class="headerlink" title="打开终端,进入ssh根目录下"></a>打开终端,进入ssh根目录下</h3><pre><code>cd ~/.ssh/</code></pre><h3 id="创建新的-私钥-公钥-并指定秘钥名称-如-kentsun-rsa"><a href="#创建新的-私钥-公钥-并指定秘钥名称-如-kentsun-rsa" class="headerlink" title="创建新的 私钥/公钥, 并指定秘钥名称, 如 kentsun_rsa"></a>创建新的 私钥/公钥, 并指定秘钥名称, 如 kentsun_rsa</h3><ul><li>使用一下命令行, 然后两次回车即可.</li></ul><pre><code>ssh-keygen -t rsa -f  ~/.ssh/随便名字_id_rsa -C &quot;yourmail@xxx.com&quot;</code></pre><ul><li><p>或者使用下面命令行创建秘钥, 需要三次回车, 但是第一次回车需要输入秘钥名字.</p><pre><code>ssh-keygen -t rsa -C &quot;yourmail@xxx.com&quot;</code></pre></li><li><p>注意:这次创建新的秘钥 ,不要再三次回车了, 要在第一次回车的地方,填入新秘钥名字, 如果不填将使用默认的id_rsa , 会将原来的ssh_key覆盖. 新秘钥名后面建议加<code>_rsa</code>或者<code>id_rsa</code>.</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/126164-9067b8a7c11a8887.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sshkey2.png"></p><h3 id="配置config"><a href="#配置config" class="headerlink" title="配置config"></a>配置config</h3><p>如果 <code>~/.ssh/</code>根路径下, 没有config, 则创建一个config文件</p><pre><code>touch config</code></pre><ul><li>config配置如下, 第一个为原来的ssh key配置, kentsun为新的ssh key配置</li></ul><pre><code>#第一个账号，默认使用的账号Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa# 第二个账号 kentsunHost kentsun.github.com # kentsun为前缀名，可以任意设置 HostName github.com User git IdentityFile ~/.ssh/kentsun_rsa</code></pre><ul><li>我们指定 kentsun.github.com 这个”作用域”下的ssh连接统一指向 github.com ，并且使用之前生成好的 github_rsa 这个密钥加密。</li><li>默认的使用 ~/.ssh/id_rsa 这个密钥加密</li></ul><h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析:"></a>原理分析:</h4><ul><li>1.ssh 客户端是通过类似 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:githubUserName/repName.git 的地址来识别使用本地的哪个私钥的，<br>地址中的 User 是@前面的git， Host 是@后面的github.com。</li><li>2.如果所有账号的 User 和 Host 都为 git 和 github.com，那么就只能使用一个私钥。<br>所以要对User 和 Host 进行配置，让每个账号使用自己的 Host，每个 Host 的域名做 CNAME 解析到 github.com，<br>如上面配置中的Host kentsun.github.com。</li><li>3.配置了别名之后，新的地址就是<a href="mailto:git@kentsun.github.com" target="_blank" rel="noopener">git@kentsun.github.com</a>:githubUserName/repName.git。<br>这样 ssh 在连接时就可以区别不同的账号了。</li></ul><h3 id="设置新github账户SSH-key"><a href="#设置新github账户SSH-key" class="headerlink" title="设置新github账户SSH key"></a>设置新github账户SSH key</h3><p>最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\kentsun_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><p><img src="https://upload-images.jianshu.io/upload_images/126164-00e6538f67463e78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="github-sshkey.png"></p><p>将刚复制的内容粘贴到key那里，title随便填，保存。</p><h3 id="在-ssh根目录下-清空本地的-SSH-缓存，添加新的-SSH-密钥-到-SSH-agent中"><a href="#在-ssh根目录下-清空本地的-SSH-缓存，添加新的-SSH-密钥-到-SSH-agent中" class="headerlink" title="在.ssh根目录下, 清空本地的 SSH 缓存，添加新的 SSH 密钥 到 SSH agent中"></a>在.ssh根目录下, 清空本地的 SSH 缓存，添加新的 SSH 密钥 到 SSH agent中</h3><pre><code>cd ~/.sshssh-add -Dssh-add id_rsassh-add id_rsa_second</code></pre><ul><li>最后确认一下新秘钥已经添加成功<pre><code>ssh-add -l</code></pre></li></ul><h3 id="输入指令-验证配置是否成功"><a href="#输入指令-验证配置是否成功" class="headerlink" title="输入指令, 验证配置是否成功"></a>输入指令, 验证配置是否成功</h3><ul><li><p>默认ssh_key验证</p><pre><code>ssh -T git@github.com</code></pre></li><li><p>新ssh_key验证, 新秘钥名替换username</p><pre><code>ssh -T git@username.github.com</code></pre></li><li><p>如下提示信息, 则配置成功</p><pre><code>$ ssh -T git@github.comHi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre></li></ul><h3 id="进入各自项目文件夹，单独设置用户名-邮箱"><a href="#进入各自项目文件夹，单独设置用户名-邮箱" class="headerlink" title="进入各自项目文件夹，单独设置用户名/邮箱"></a>进入各自项目文件夹，单独设置用户名/邮箱</h3><ul><li>注意：如果有多个账号，建议使用局部的。</li></ul><pre><code>// 取消全局 用户名/邮箱 配置git config –global –unset user.namegit config –global –unset user.email// 单独设置每个repo 用户名/邮箱git config user.name &quot;用户名&quot;  //在config后加上--global即全局git config user.email &quot;邮箱&quot;</code></pre><ul><li>查看设置是否成功<pre><code>git config --list</code></pre></li></ul><h3 id="最后在-hexo-配置文件修改git地址"><a href="#最后在-hexo-配置文件修改git地址" class="headerlink" title="最后在 hexo 配置文件修改git地址"></a>最后在 hexo 配置文件修改git地址</h3><pre><code>deploy:  type: git  repository: git@username.github.com:githubUserName/githubUserName.github.io.git  branch: master</code></pre><ul><li>repo配置相当于在原来 git仓库地址中添加了Host名字 kentsun, 其他不变.</li></ul><p>可参考我的:</p><pre><code>deploy:  type: git  repo: git@kentsun.github.com:KentSun/KentSun.github.io.git  branch: master</code></pre><p>配置多个git账户重复以上步骤。</p><h3 id="修改remote-作用域"><a href="#修改remote-作用域" class="headerlink" title="修改remote 作用域"></a><del>修改remote 作用域</del></h3><p><del>+ 最后修改一下我们在 kentsun 克隆下来的项目的 remote “作用域” 。</del></p><pre><code>$ git remote rm origin$ git remote add origin git@kentsun.github.com:kentsun/123.git // 注意是 kentsun.github.com $ git push origin masterEverything up-to-date </code></pre>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端Tool </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装telnet</title>
      <link href="/2018/11/11/%E5%AE%89%E8%A3%85telnet/"/>
      <url>/2018/11/11/%E5%AE%89%E8%A3%85telnet/</url>
      <content type="html"><![CDATA[<ul><li>MacOS 10.12及以下版本，都内置了telnet命令，但是在之后的版本就已经取消了, 会报一下错误<pre><code>-bash: telnet: command not found</code></pre>所以接下来, 我们先来安装下telnet:</li></ul><h3 id="一-telnet安装"><a href="#一-telnet安装" class="headerlink" title="一.telnet安装"></a>一.telnet安装</h3><ul><li><p>安装homebrew</p><pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></pre></li><li><p>使用 homebrew 安装telnet：</p><pre><code>brew install telnet</code></pre></li></ul><h3 id="二-telnet使用"><a href="#二-telnet使用" class="headerlink" title="二.telnet使用"></a>二.telnet使用</h3><p><strong>telnet命令</strong>用于登录远程主机，对远程主机进行管理。telnet因为采用明文传送报文，安全性不好，很多Linux服务器都不开放telnet服务，而改用更安全的ssh方式了。但仍然有很多别的系统可能采用了telnet方式来提供远程登录，因此弄清楚telnet客户端的使用方式仍是很有必要的。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre><code>telnet(选项)(参数)</code></pre><h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><pre><code>-8：允许使用8位字符资料，包括输入与输出；-a：尝试自动登入远端系统；-b&lt;主机别名&gt;：使用别名指定远端主机名称；-c：不读取用户专属目录里的.telnetrc文件；-d：启动排错模式；-e&lt;脱离字符&gt;：设置脱离字符；-E：滤除脱离字符；-f：此参数的效果和指定&quot;-F&quot;参数相同；-F：使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机；-k&lt;域名&gt;：使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名；-K：不自动登入远端主机；-l&lt;用户名称&gt;：指定要登入远端主机的用户名称；-L：允许输出8位字符资料；-n&lt;记录文件&gt;：指定文件记录相关信息；-r：使用类似[rlogin](http://man.linuxde.net/rlogin &quot;rlogin命令&quot;)指令的用户界面；-S&lt;服务类型&gt;：设置telnet连线所需的[ip](http://man.linuxde.net/ip &quot;ip命令&quot;) TOS信息；-x：假设主机有支持数据加密的功能，就使用它；-X&lt;认证形态&gt;：关闭指定的认证形态。</code></pre><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>远程主机：指定要登录进行管理的远程主机；</li><li>端口：指定TELNET协议使用的端口号。</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre><code>telnet 192.168.2.10Trying 192.168.2.10...Connected to 192.168.2.10 (192.168.2.10).Escape character is &#39;^]&#39;.    localhost (Linux release 2.6.18-274.18.1.el5 #1 SMP Thu Feb 9 12:45:44 EST 2012) (1)[login](http://man.linuxde.net/login &quot;login命令&quot;): rootPassword: Login incorrect</code></pre>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOSTool </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用runtime封装字典转模型分类</title>
      <link href="/2018/09/28/%E4%BD%BF%E7%94%A8runtime%E5%B0%81%E8%A3%85%E5%AD%97%E5%85%B8%E8%BD%AC%E6%A8%A1%E5%9E%8B%E5%88%86%E7%B1%BB/"/>
      <url>/2018/09/28/%E4%BD%BF%E7%94%A8runtime%E5%B0%81%E8%A3%85%E5%AD%97%E5%85%B8%E8%BD%AC%E6%A8%A1%E5%9E%8B%E5%88%86%E7%B1%BB/</url>
      <content type="html"><![CDATA[<blockquote><p>将后台JSON数据中的字典转成本地的模型，我们一般选用部分优秀的第三方框架，如SBJSON、JSONKit、MJExtension、YYModel等。但是，一些简单的数据，我们也可以尝试自己来实现转换的过程。</p></blockquote><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>当我们的请求到的数据不是很复杂, 也不希望引入第三方框架的时候, 可以使用下这个分类, 来实现字典转模型.</p><h3 id="1-根据请求数据-创建对应的模型类-并根据字典中的键值对定义对应的属性"><a href="#1-根据请求数据-创建对应的模型类-并根据字典中的键值对定义对应的属性" class="headerlink" title="1.根据请求数据, 创建对应的模型类, 并根据字典中的键值对定义对应的属性"></a>1.根据请求数据, 创建对应的模型类, 并根据字典中的键值对定义对应的属性</h3><ul><li>创建模型原则: 从外层到内存, 一个类型字典对应一个模型</li><li>示例程序中, 根据plist, 创建了三个类: ShopItem , AttrModel , ListItemModel </li></ul><img src="/2018/09/28/使用runtime封装字典转模型分类/runtime-pic1.png"><ul><li>注意: 定义的属性名和字典中的键名字一致.</li></ul><h3 id="2-在分类中导入最外层模型"><a href="#2-在分类中导入最外层模型" class="headerlink" title="2.在分类中导入最外层模型"></a>2.在分类中导入最外层模型</h3><img src="/2018/09/28/使用runtime封装字典转模型分类/runtime-pic2.png"><h3 id="3-最外层类中导入-NSObject-EnumDict-分类"><a href="#3-最外层类中导入-NSObject-EnumDict-分类" class="headerlink" title="3.最外层类中导入 NSObject+EnumDict 分类"></a>3.最外层类中导入 NSObject+EnumDict 分类</h3><img src="/2018/09/28/使用runtime封装字典转模型分类/runtime-pic3.png"><h3 id="4-遵守分类协议-ModelDelegate-实现协议方法"><a href="#4-遵守分类协议-ModelDelegate-实现协议方法" class="headerlink" title="4.遵守分类协议 ModelDelegate, 实现协议方法"></a>4.遵守分类协议 ModelDelegate, 实现协议方法</h3><img src="/2018/09/28/使用runtime封装字典转模型分类/runtime-pic4.png"><h3 id="5-控制器中-导入最外层模型-ShopItem-h-解析数据遍历数组-并字典转模型"><a href="#5-控制器中-导入最外层模型-ShopItem-h-解析数据遍历数组-并字典转模型" class="headerlink" title="5.控制器中, 导入最外层模型 ShopItem.h , 解析数据遍历数组, 并字典转模型"></a>5.控制器中, 导入最外层模型 ShopItem.h , 解析数据遍历数组, 并字典转模型</h3><img src="/2018/09/28/使用runtime封装字典转模型分类/runtime-pic5.png"><h2 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h2><p>runtime字典转模型的核心算法思路</p><img src="/2018/09/28/使用runtime封装字典转模型分类/runtime0.png" title="[runtime字典转模型的核心算法思路]"><p>以往, 我们字典转模型,总是需要在模型类中定义一个静态方法或者对象方法,来字典转模型, 这样, 我们在不同的模型中, 都必须定义这样一个方法来完成字典转模型, 如果我们写的项目比较大, 模型比较多,这样字典转模型的效率就太低了,耦合性也比较高, 那我们如何做到字典转模型 与 模型类的彻底解耦呢?</p><p>我们可以创建一个 NSObject 的分类, 因为所有的类(NSProxy 除外)都继承自 NSObject, 那我们就可以用任意的类去调 NSObject 的这个分类方法, 子类可以任意调用父类方法</p><p>那么我们如何在这个分类方法中完成字典转模型呢?</p><p>这里就要用到<strong>运行时</strong>的概念了,</p><h3 id="首先我们在分类中导入-lt-objc-runtime-h-gt-这个框架-然后进行第一步-获取属性列表"><a href="#首先我们在分类中导入-lt-objc-runtime-h-gt-这个框架-然后进行第一步-获取属性列表" class="headerlink" title="首先我们在分类中导入 &lt;objc/runtime.h&gt;这个框架, 然后进行第一步,获取属性列表"></a>首先我们在分类中导入 &lt;objc/runtime.h&gt;这个框架, 然后进行第一步,获取属性列表</h3><pre class=" language-objc"><code class="language-objc">const char *kPropertyListKey = "SKPropertyListKey";+ (NSArray *)sk_objcProperties{     /* 获取关联对象 */    NSArray *ptyList = objc_getAssociatedObject(self, kPropertyListKey);     /* 如果 ptyList 有值,直接返回 */    if (ptyList) {        return ptyList;    }     /* 调用运行时方法, 取得类的属性列表 */    /* 成员变量:     * class_copyIvarList(__unsafe_unretained Class cls, unsigned int *outCount)     * 方法:     * class_copyMethodList(__unsafe_unretained Class cls, unsigned int *outCount)     * 属性:     * class_copyPropertyList(__unsafe_unretained Class cls, unsigned int *outCount)     * 协议:     * class_copyProtocolList(__unsafe_unretained Class cls, unsigned int *outCount)     */    unsigned int outCount = 0;    /**     * 参数1: 要获取得类     * 参数2: 类属性的个数指针     * 返回值: 所有属性的数组, C 语言中,数组的名字,就是指向第一个元素的地址     */    /* retain, creat, copy 需要release */    objc_property_t *propertyList = class_copyPropertyList([self class], &outCount);    NSMutableArray *mtArray = [NSMutableArray array];     /* 遍历所有属性 */    for (unsigned int i = 0; i < outCount; i++) {         /* 从数组中取得属性 */        objc_property_t property = propertyList[i];         /* 从 property 中获得属性名称 */        const char *propertyName_C = property_getName(property);         /* 将 C 字符串转化成 OC 字符串 */        NSString *propertyName_OC = [NSString stringWithCString:propertyName_C encoding:NSUTF8StringEncoding];        [mtArray addObject:propertyName_OC];    }     /* 设置关联对象 */    /**     *  参数1 : 对象self     *  参数2 : 动态添加属性的 key     *  参数3 : 动态添加属性值     *  参数4 : 对象的引用关系     */    objc_setAssociatedObject(self, kPropertyListKey, mtArray.copy, OBJC_ASSOCIATION_RETAIN_NONATOMIC);    /* 释放 */    free(propertyList);    return mtArray.copy;}</code></pre><h3 id="其实上面这段代码-只有4句是最关键的"><a href="#其实上面这段代码-只有4句是最关键的" class="headerlink" title="其实上面这段代码,只有4句是最关键的"></a>其实上面这段代码,只有4句是最关键的</h3><p>1.<code>/* 获取关联对象 */ NSArray *ptyList = objc_getAssociatedObject(self, kPropertyListKey);</code><br>如果在程序运行的时候, 模型对象的属性是不会发生变化的, 我们在利用这个函数如果能获取到关联对象的属性列表, 就不用再走下面的代码去利用运行时再去获取属性列表了</p><p>2.<code>objc_property_t *propertyList = class_copyPropertyList([self class], &amp;outCount);</code><br>这句代码就是真正的利用运行时获取属性列表, 这个属性列表是 C 的结构体指针数组,我们必须将其遍历,并利用另外一个函数将取出结构体指针所指向的结构体中国的 C 字符串,也就是属性名称</p><p>3.<code>const char *propertyName_C = property_getName(property);</code><br>获得C字符串后,我们只需要将其转换为 OC 字符串,加到可变数组中即可</p><p>4.<code>objc_setAssociatedObject(self, kPropertyListKey, mtArray.copy, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</code><br>设置属性列表, 就是把已经生成好的属性列表设置到一个类似于<em>属性</em>的东西储存起来, 下次 get 的时候,直接拿出来用即可,有点类似于<em>懒加载</em>.</p><h3 id="获取属性列表之后-我们就要进行字典转模型的操作了"><a href="#获取属性列表之后-我们就要进行字典转模型的操作了" class="headerlink" title="获取属性列表之后, 我们就要进行字典转模型的操作了"></a>获取属性列表之后, 我们就要进行字典转模型的操作了</h3><p>首先我们要遍历参数字典, 如果我们获取得属性列表中包含了字典中的 key,就利用 KVC 方法赋值,然后就完成了字典转模型的操作</p><pre class=" language-objc"><code class="language-objc">+ (instancetype)sk_objcWithDict:(NSDictionary *)dict{     /* 实例化对象 */    id objc = [[self alloc]init];     /* 使用字典,设置对象信息 */     /* 1\. 获得 self 的属性列表 */    NSArray *propertyList = [self  sk_objcProperties];     /* 2\. 遍历字典 */    [dict enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {         /* 3\. 判断 key 是否字 propertyList 中 */        if ([propertyList containsObject:key]) {             /* 说明属性存在,可以使用 KVC 设置数值 */            [objc setValue:obj forKey:key];        }    }];     /* 返回对象 */    return objc;}</code></pre><p>这样, 比如我在 ViewDidLoad 方法中, 自定义一个字典<br>然后我只需要一行代码就可以获取到模型对象,如下</p><pre class=" language-objc"><code class="language-objc">- (void)viewDidLoad {    [super viewDidLoad];    /* 创建一个字典 */    NSDictionary *dict = @{                           @"name":@"小明",                           @"age":@18,                           @"title":@"master",                           @"height":@1.7,                           @"something":@"nothing"                           };    Person *person = [Person sk_objcWithDict:dict];}</code></pre><p>而此时, 模型类中,没有添加任何的构造方法,只有单纯的属性,这样就做到了彻底的解耦, 比如我现在再来一个学生(Student)类,我也无需添加构造方法,也同样只需要调用<code>-(instancetype)sk_objcWithDict:dict;</code>即可.</p><blockquote><p>由于笔者水平有限，文中如果有错误的地方，或者有更好的方法，还望大神指出。<br>附上本文的所有 demo 下载链接，<a href="https://github.com/honkerSK/runtime-dictToModel" target="_blank" rel="noopener">【GitHub】</a>。<br>如果你看完后觉得对你有所帮助，还望在 GitHub 上点个 star。赠人玫瑰，手有余香。</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KVO官方文档-键值观察者指南</title>
      <link href="/2018/09/18/KVO%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E8%A7%82%E5%AF%9F%E8%80%85%E6%8C%87%E5%8D%97/"/>
      <url>/2018/09/18/KVO%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E8%A7%82%E5%AF%9F%E8%80%85%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<blockquote><p>KVO编程指南 Key-Value Observing Programming Guide</p></blockquote><h1 id="1-Introduction-to-Key-Value-Observing-Programming-Guide-KVO编程指南介绍"><a href="#1-Introduction-to-Key-Value-Observing-Programming-Guide-KVO编程指南介绍" class="headerlink" title="1 Introduction to Key-Value Observing Programming Guide - KVO编程指南介绍"></a>1 Introduction to Key-Value Observing Programming Guide - KVO编程指南介绍</h1><p>Key-value observing is a mechanism that allows objects to be notified of changes to specified properties of other objects.</p><p>键 - 值观察是一种机制，当指定对象属性改变的时候允许另一个对象接受通知。</p><blockquote><p>Important: In order to understand key-value observing, you must first understand key-value coding.</p><p>重要：了解键值观察之前，首先要理解键值编程 (<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/KeyValueCoding.html#//apple_ref/doc/uid/10000107i" target="_blank" rel="noopener">key-value coding</a>)</p></blockquote><h2 id="1-1-At-a-Glance-概括"><a href="#1-1-At-a-Glance-概括" class="headerlink" title="1.1 At a Glance - 概括"></a>1.1 At a Glance - 概括</h2><p>Key-value observing provides a mechanism that allows objects to be notified of changes to specific properties of other objects. It is particularly useful for communication between model and controller layers in an application. (In OS X, the controller layer binding technology relies heavily on key-value observing.) A controller object typically observes properties of model objects, and a view object observes properties of model objects through a controller. In addition, however, a model object may observe other model objects (usually to determine when a dependent value changes) or even itself (again to determine when a dependent value changes).</p><p>You can observe properties including simple attributes, to-one relationships, and to-many relationships. Observers of to-many relationships are informed of the type of change made—as well as which objects are involved in the change.</p><p>There are three steps to setting up an observer of a property. Understanding these three steps provides a clear illustration of how KVO works.</p><p>键 - 值观察是一种机制，当指定对象属性改变的时候允许另一个对象接受通知。在应用中，对于模型和控制器层之间的交流非常有用。（在 OS X 中，控制器层绑定技术严重依赖于键-值观察。）一个控制器对象通常观察模型对象的属性，视图对象通过控制器观察模型对象的属性。然后，一个模型对象可以观察其它模型对象（通常为了确定从属值是什么时候改变的），或者甚至观察自身（也是为了确定从属值何时变化）。</p><p>你可以观察一些属性，比如简单的属性，一对一关系的，一对多关系的。一对多关系的观察者可以收到变化的类型，以及哪些对象发生了改变。</p><p>建立属性的观察者有三步。下面提供一个清晰的KVO工作方式演示，来理解这三步。</p><p>1.First, see whether you have a scenario where key-value observing could be beneficial, for example, an object that needs to be notified when any changes are made to a specific property in another object.</p><p>1.首先，考虑这样的一个场景，例如当对一个A对象的特定做出任何改变的时候，B对象需要被通知。</p><p><img src="http://upload-images.jianshu.io/upload_images/126164-dd95aaccfd1d189b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>2.The PersonObject must register as an observer of the BankObject’s accountBalance property by sending an addObserver:forKeyPath:options:context: message.</p><p>2.<code>PersonObject</code>必须注册为 <code>BankObject</code> 的 <code>accountBalance</code> 属性的观察者，通过发送一个消息 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/occ/instm/NSObject/addObserver:forKeyPath:options:context:" target="_blank" rel="noopener">addObserver:forKeyPath:options:context:</a></p><p><img src="http://upload-images.jianshu.io/upload_images/126164-d228d76ad827b480.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>Note: The addObserver:forKeyPath:options:context: method establishes a connection between the instances of the objects that you specify. A connection is not established between the two classes, but rather between the two specified instances of the objects.</p><p>注意：<code>addObserver:forKeyPath:options:context:</code> 方法规定了一个指定对象实例之间的连接。注意不是两个类之间的连接，两个对象的实例。</p></blockquote><p>3.In order to respond to change notifications, the observer must implement the observeValueForKeyPath:ofObject:change:context: method. This method implementation defines how the observer responds to change notifications. It is in this method that you can customize your response to a change in one of the observed properties.</p><p>3.为了响应变化的通知，观察者必须实现方法 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/occ/instm/NSObject/observeValueForKeyPath:ofObject:change:context:" target="_blank" rel="noopener">observeValueForKeyPath:ofObject:change:context:</a>。这个方法的实现中定义了观察者如何响应改变通知。可以在这个方法中定制被观察属性之一改变时的响应。</p><p><img src="http://upload-images.jianshu.io/upload_images/126164-fd35321619548c85.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>Registering for Key-Value Observing describes how to register and receive observation notifications.</p><p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOBasics.html#//apple_ref/doc/uid/20002252-BAJEAIEE" target="_blank" rel="noopener">Registering for Key-Value Observing</a>说明如何注册和接受观察的通知。</p><p>4.The observeValueForKeyPath:ofObject:change:context: method is automatically invoked when the value of an observed property is changed in a KVO-compliant manner, or if a key upon which it depends is changed.</p><p>4.当被观察属性的值在KVO-compliant方式中改变 或者它依赖的一个key改变的时候，<code>observeValueForKeyPath:ofObject:change:context:</code> 方法自动被调用。</p><p><img src="http://upload-images.jianshu.io/upload_images/126164-5a85cbfe2f4a1d4b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>Registering Dependent Keys explains how to specify that the value of a key is dependent on the value of another key.</p><p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVODependentKeys.html#//apple_ref/doc/uid/20002179-BAJEAIEE" target="_blank" rel="noopener">Registering Dependent Keys</a> 解释了指定一个键的值依赖于另一个键的值。</p><p>KVO’s primary benefit is that you don’t have to implement your own scheme to send notifications every time a property changes. Its well-defined infrastructure has framework-level support that makes it easy to adopt—typically you do not have to add any code to your project. In addition, the infrastructure is already full-featured, which makes it easy to support multiple observers for a single property, as well as dependent values.</p><p>KVO Compliance describes the difference between automatic and manual key-value observing, and how to implement both.</p><p>Unlike notifications that use NSNotificationCenter, there is no central object that provides change notification for all observers. Instead, notifications are sent directly to the observing objects when changes are made. NSObject provides this base implementation of key-value observing, and you should rarely need to override these methods.</p><p>Key-Value Observing Implementation Details describes how key-value observing is implemented.</p><p>KVO的优点是，每次属性改变的时候，不需要自己实现发送通知。它良好定义的基础设施有架构层面的支持，使得它易于使用，通常不需要再工程中添加任何代码。此外，基础设施已经是全特性的，它可以很容易地支持单一属性的多个观察者，以及相关的值。</p><p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOCompliance.html#//apple_ref/doc/uid/20002178-BAJEAIEE" target="_blank" rel="noopener">KVO Compliance</a> 描述了自动和手动键值观察的区别，以及如何实现两者。</p><p>于使用 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class/index.html#//apple_ref/occ/cl/NSNotificationCenter" target="_blank" rel="noopener">NSNotificationCenter</a> 的通知不同，这里没有为所有观察者提供更改通知的中央对象，。相反，更改时通知直接被发送到观察对象。<code>NSObject</code> 提供了键值观察的基本实现，你应该很少需要重写这些方法。</p><p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html#//apple_ref/doc/uid/20002307-BAJEAIEE" target="_blank" rel="noopener">Key-Value Observing Implementation Details</a>描述键值观察室如何实现的。</p><h1 id="2-Registering-for-Key-Value-Observing-注册键值观察"><a href="#2-Registering-for-Key-Value-Observing-注册键值观察" class="headerlink" title="2 Registering for Key-Value Observing - 注册键值观察"></a>2 Registering for Key-Value Observing - 注册键值观察</h1><p>In order to receive key-value observing notifications for a property, three things are required:</p><ul><li>The observed class must be key-value observing compliant for the property that you wish to observe.</li><li>You must register the observing object with the observed object, using the method addObserver:forKeyPath:options:context:.</li><li>The observing class must implement observeValueForKeyPath:ofObject:change:context:.</li></ul><p>针对一个属性，为了接收键值观察通知，有3个要求：</p><ul><li>对于你希望观察的属性，被观察的类必须是键值观察兼容的。</li><li>你必须对被观察的对象注册观察对象，使用方法 <code>addObserver:forKeyPath:options:context:</code></li><li>观察类必须实现方法 <code>observeValueForKeyPath:ofObject:change:context:</code></li></ul><blockquote><p>Important: Not all classes are KVO-compliant for all properties. You can ensure your own classes are KVO-compliant by following the steps described in KVO Compliance. Typically properties in Apple-supplied frameworks are only KVO-compliant if they are documented as such.</p><p>重要提示：不是所有类对于所有属性都是KVO兼容的。你可以通过下面几个步骤确保你自己的类是KVO兼容的，在<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOCompliance.html#//apple_ref/doc/uid/20002178-BAJEAIEE" target="_blank" rel="noopener">KVO Compliance</a>中有描述。通常，如果它们被记录为这种苹果提供的框架属性，那就唯一KVO兼容的。</p></blockquote><h2 id="2-1-Registering-as-an-Observer-注册为一个观察者"><a href="#2-1-Registering-as-an-Observer-注册为一个观察者" class="headerlink" title="2.1 Registering as an Observer - 注册为一个观察者"></a>2.1 Registering as an Observer - 注册为一个观察者</h2><p>In order to be notified of changes to a property, an observing object must first register with the object to be observed by sending it an addObserver:forKeyPath:options:context: message, passing the observer object and the key path of the property to be observed. The options parameter specifies the information that is provided to the observer when a change notification is sent. Using the option NSKeyValueObservingOptionOld specifies that the original object value is provided to the observer as an entry in the change dictionary. Specifying the NSKeyValueObservingOptionNew option provides the new value as an entry in the change dictionary. To receive both values, you would bitwise OR the option constants.</p><p>The example in Listing 1 demonstrates registering an inspector object for the property openingBalance.</p><p>为了属性改变时能被通知到，观察对象首先要对被观察对象进行注册，通过给被观察对象发送消息 <code>addObserver:forKeyPath:options:context:</code> 。传给的参数是观察者对象，被观察对象属性的键路径（key path）。可选的参数是当改变通知被发送的时候，提供给观察者的指定信息。使用选项 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/doc/c_ref/NSKeyValueObservingOptionOld" target="_blank" rel="noopener">NSKeyValueObservingOptionOld</a> 指定原始对象的值，在变化字典中提供给观察者。<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/doc/c_ref/NSKeyValueObservingOptionNew" target="_blank" rel="noopener">NSKeyValueObservingOptionNew</a> 选项，提供新的值。为了收到这两个值，你应该对这两个选项常量使用位或。</p><p>清单1的例子演示给 <code>openingBalance</code> 属性注册一个观察者 <code>inspector</code> 对象。</p><pre class=" language-objc"><code class="language-objc">- (void)registerAsObserver {    /*     注册 `inspector` ，来接收 `account` 对象的属性 `openingBalance`      改变时的通知，并且指定旧值和新值都应该提供给观察者。     */    [account addObserver:inspector             forKeyPath:@"openingBalance"                 options:(NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld)                    context:NULL];}</code></pre><p>When you register an object as an observer, you can also provide a context pointer. The context pointer is provided to the observer when observeValueForKeyPath:ofObject:change:context: is invoked. The context pointer can be a C pointer or an object reference. The context pointer can be used as a unique identifier to determine the change that is being observed, or to provide some other data to the observer.</p><blockquote><p>Note: The key-value observing addObserver:forKeyPath:options:context: method does not maintain strong references to the observing object, the observed objects, or the context. You should ensure that you maintain strong references to the observing, and observed, objects, and the context as necessary.</p></blockquote><p>注册的时候，也可以提供一个上下文指针（context pointer），当 <code>observeValueForKeyPath:ofObject:change:context:</code> 被调用的时候，context pointer 会被提供给观察者。context pointer 可以是一个 C pointer 或者 一个对象引用。context pointer 可以用作唯一标识符，来确定正在被观察对象的变化，或者提供某些其他数据给观察者。</p><blockquote><p>注意：键值观察方法 <code>addObserver:forKeyPath:options:context:</code> ，对于观察者对象，被观察的对象或者 context 都不会维持强引用。在必要的时候，你应该自己确保你对于它们维持强引用。</p></blockquote><h2 id="2-2-Receiving-Notification-of-a-Change-针对改变接收通知"><a href="#2-2-Receiving-Notification-of-a-Change-针对改变接收通知" class="headerlink" title="2.2 Receiving Notification of a Change - 针对改变接收通知"></a>2.2 Receiving Notification of a Change - 针对改变接收通知</h2><p>When the value of an observed property of an object changes, the observer receives an observeValueForKeyPath:ofObject:change:context: message. All observers must implement this method.</p><p>The observer is provided the object and key path that triggered the observer notification, a dictionary containing details about the change, and the context pointer that was provided when the observer was registered.</p><p>The change dictionary entry NSKeyValueChangeKindKey provides information about the type of change that occurred. If the value of the observed object has changed, the NSKeyValueChangeKindKey entry returns NSKeyValueChangeSetting. Depending on the options specified when the observer was registered, the NSKeyValueChangeOldKey and NSKeyValueChangeNewKey entries in the change dictionary contain the values of the property before, and after, the change. If the property is an object, the value is provided directly. If the property is a scalar or a C structure, the value is wrapped in an NSValue object (as with key-value coding).</p><p>If the observed property is a to-many relationship, the NSKeyValueChangeKindKey entry also indicates whether objects in the relationship were inserted, removed, or replaced by returning NSKeyValueChangeInsertion, NSKeyValueChangeRemoval, or NSKeyValueChangeReplacement, respectively.</p><p>The change dictionary entry for NSKeyValueChangeIndexesKey is an NSIndexSet object specifying the indexes in the relationship that changed. If NSKeyValueObservingOptionNew or NSKeyValueObservingOptionOld are specified as options when the observer is registered, the NSKeyValueChangeOldKey and NSKeyValueChangeNewKey entries in the change dictionary are arrays containing the values of the related objects before, and after, the change.</p><p>The example in Listing 2 shows the observeValueForKeyPath:ofObject:change:context: implementation for an inspector that reflects the old and new values of the property openingBalance, as registered in Listing 1.</p><p>当一个改变了被观察对象属性的值，观察者收到消息 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/occ/instm/NSObject/observeValueForKeyPath:ofObject:change:context:" target="_blank" rel="noopener">observeValueForKeyPath:ofObject:change:context:</a> 。所有的观察者必须实现这个方法。</p><p>观察者被提供 触发观察者通知的对象和 <code>key path</code> ，就是一个字典，包含了变化和注册时填写的context pointer。</p><p>变化字典中 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/doc/c_ref/NSKeyValueChangeKindKey" target="_blank" rel="noopener">NSKeyValueChangeKindKey</a> 提供了关于发生变化的信息。如果被观察对象的值被改变了，<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/doc/c_ref/NSKeyValueChangeKindKey" target="_blank" rel="noopener">NSKeyValueChangeKindKey</a> 返回 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/doc/c_ref/NSKeyValueChangeSetting" target="_blank" rel="noopener">NSKeyValueChangeSetting</a> 。根据观察者被注册时指定的选项，NSKeyValueChangeOldKey 和 NSKeyValueChangeNewKey ，在变化字典中包含了属性之前的值以及改变之后的值。如果属性是一个对象，值会被直接提供。如果属性是标量或者C结构体，值会被包含在一个 <code>NSValue</code> 对象中（比如 键值编程）。</p><p>如果被观察的属性是一对多的关系（比如数组，集合），NSKeyValueChangeKindKey 也会指定关系中的对象是否被返回的 NSKeyValueChangeInsertion 插入，NSKeyValueChangeRemoval 移除或者 NSKeyValueChangeReplacement 替代。</p><p>变化字典的条目 NSKeyValueChangeIndexesKey 是一个 NSIndexSet 对象，指出被改变关系的下标。如果注册的时候 NSKeyValueObservingOptionNew 或者 NSKeyValueObservingOptionOld 被指定为选项，变化字典中 NSKeyValueChangeOldKey 和 NSKeyValueChangeNewKey 就会是数组，包含了相关对象变化之前和之后的值。</p><p>清单2的例子演示了 <code>observeValueForKeyPath:ofObject:change:context:</code> 实现</p><pre class=" language-objc"><code class="language-objc">- (void)observeValueForKeyPath:(NSString *)keyPath                      ofObject:(id)object                        change:(NSDictionary *)change                       context:(void *)context {    if ([keyPath isEqual:@"openingBalance"]) {        [openingBalanceInspectorField setObjectValue:            [change objectForKey:NSKeyValueChangeNewKey]];    }    /*     Be sure to call the superclass's implementation *if it implements it*.     NSObject does not implement the method.     */    [super observeValueForKeyPath:keyPath                         ofObject:object                           change:change                           context:context];}</code></pre><h2 id="2-3-Removing-an-Object-as-an-Observer-移除对象观察者"><a href="#2-3-Removing-an-Object-as-an-Observer-移除对象观察者" class="headerlink" title="2.3 Removing an Object as an Observer 移除对象观察者"></a>2.3 Removing an Object as an Observer 移除对象观察者</h2><p>You remove a key-value observer by sending the observed object a removeObserver:forKeyPath: message, specifying the observing object and the key path. The example in Listing 3 removes the inspector as an observer of openingBalance.</p><p>你可以给被观察对象发送一个消息 <code>removeObserver:forKeyPath:</code> 来移除键值观察，指定观察者对象和 key path 。清单3 的例子移除了 <code>openingBalance</code> 的观察者 inspector 。</p><pre class=" language-objc"><code class="language-objc">- (void)unregisterForChangeNotification {    [observedObject removeObserver:inspector forKeyPath:@"openingBalance"];}</code></pre><p>If the context is an object, you must keep a strong reference to it until removing the observer. After receiving a removeObserver:forKeyPath: message, the observing object will no longer receive any observeValueForKeyPath:ofObject:change:context: messages for the specified key path and object.</p><p>如果 context 是一个对象，在移除观察者之前你必须对它保持一个强引用。接收到 <code>removeObserver:forKeyPath:</code> 消息后，观察对象将不在接收任何指定 key path 和对象的 <code>observeValueForKeyPath:ofObject:change:context:</code> 消息。</p><h1 id="3-KVO-Compliance-KVO-兼容性"><a href="#3-KVO-Compliance-KVO-兼容性" class="headerlink" title="3 KVO Compliance - KVO 兼容性"></a>3 KVO Compliance - KVO 兼容性</h1><p>In order to be considered KVO-compliant for a specific property, a class must ensure the following:</p><ul><li>The class must be key-value coding compliant for the property, as specified in Ensuring KVC Compliance. KVO supports the same data types as KVC.</li><li>The class emits KVO change notifications for the property.</li><li>Dependent keys are registered appropriately (see Registering Dependent Keys).</li></ul><p>There are two techniques for ensuring the change notifications are emitted. Automatic support is provided by NSObject and is by default available for all properties of a class that are key-value coding compliant. Typically, if you follow standard Cocoa coding and naming conventions, you can use automatic change notifications—you don’t have to write any additional code.</p><p>Manual change notification provides additional control over when notifications are emitted, and requires additional coding. You can control automatic notifications for properties of your subclass by implementing the class method automaticallyNotifiesObserversForKey:.</p><p>考虑到指定属性的 KVO-compliant，类必须确认下面几点：</p><ul><li>类对于属性必须被键值编程兼容，在 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/Compliant.html#//apple_ref/doc/uid/20002172" target="_blank" rel="noopener">Ensuring KVC Compliance</a> 中有指出。KVO支持与KVC相同的数据类型。</li><li>类对于属性能发出KVO改变通知。</li><li>在注册时适当的设置相关的 <code>key</code> （见 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVODependentKeys.html#//apple_ref/doc/uid/20002179-BAJEAIEE" target="_blank" rel="noopener">Registering Dependent Keys</a>）</li></ul><p>有两种技术确保改变通知被发出。自动支持由 NSObject 提供，并且对于一个类的所有属性键值编程兼容性都是可用的。通常来说，如果遵循标准的Cocoa 编程和命名规范，你就可以使用自动变化通知，不用写任何额外的代码。</p><p>手动变化通知在当通知被发出的时候提供了额外的控制，并且需要添加一些代码。你可以通过实现类方法 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/occ/clm/NSObject/automaticallyNotifiesObserversForKey:" target="_blank" rel="noopener">automaticallyNotifiesObserversForKey:</a> 来控制你子类属性的自动通知。</p><h2 id="3-1-Automatic-Change-Notification-自动变化通知"><a href="#3-1-Automatic-Change-Notification-自动变化通知" class="headerlink" title="3.1 Automatic Change Notification - 自动变化通知"></a>3.1 Automatic Change Notification - 自动变化通知</h2><p>NSObject provides a basic implementation of automatic key-value change notification. Automatic key-value change notification informs observers of changes made using key-value compliant accessors, as well as the key-value coding methods. Automatic notification is also supported by the collection proxy objects returned by, for example, mutableArrayValueForKey:.</p><p>The examples shown in Listing 1 result in any observers of the property name to be notified of the change.</p><p>Listing 1 Examples of method calls that cause KVO change notifications to be emitted</p><p>NSObject 提供了一个自动键值变化通知的基本实现。自动键值变化通知告知所做改变的观察者使用键值兼容的 accessors，以及键值编程方法。自动通知也被返回的集合代理对象支持，例如 <code>mutableArrayValueForKey:</code>。</p><p>清单1的例子展示了改变时，属性名被修改的情况下任何观察者的结果。</p><p>清单1，导致发出KVO变化通知的方法调用例子</p><pre class=" language-objc"><code class="language-objc">// Call the accessor method.[account setName:@"Savings"];// Use setValue:forKey:.[account setValue:@"Savings" forKey:@"name"];// Use a key path, where 'account' is a kvc-compliant property of 'document'.[document setValue:@"Savings" forKeyPath:@"account.name"];// Use mutableArrayValueForKey: to retrieve a relationship proxy object.Transaction *newTransaction = <#Create a new transaction for the account#>;NSMutableArray *transactions = [account mutableArrayValueForKey:@"transactions"];[transactions addObject:newTransaction];</code></pre><h2 id="3-2-Manual-Change-Notification-手动变化通知"><a href="#3-2-Manual-Change-Notification-手动变化通知" class="headerlink" title="3.2 Manual Change Notification - 手动变化通知"></a>3.2 Manual Change Notification - 手动变化通知</h2><p>Manual change notification provides more granular control over how and when notifications are sent to observers. This can be useful to help minimize triggering notifications that are unnecessary, or to group a number of changes into a single notification.</p><p>A class that implements manual notification must override the NSObject implementation of automaticallyNotifiesObserversForKey:. It is possible to use both automatic and manual observer notifications in the same class. For properties that perform manual notification, the subclass implementation of automaticallyNotifiesObserversForKey: should return NO. A subclass implementation should invoke super for any unrecognized keys. The example in Listing 2 enables manual notification for the openingBalance property allowing the superclass to determine the notification for all other keys.</p><p>Listing 2 Example implementation of automaticallyNotifiesObserversForKey:</p><p>手动变化通知在当通知被发送给观察者的时候提供了更多精细的控制。对于减少不必要的触发通知，或者一大波变化给一个通知，都很有帮助。</p><p>实现手动通知的类必须重写 NSObject 实现的方法 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/occ/clm/NSObject/automaticallyNotifiesObserversForKey:" target="_blank" rel="noopener">automaticallyNotifiesObserversForKey:</a> 。有可能在相同的类中使用自动和手动的观察通知。对于执行手动通知的属性，子类的 <code>automaticallyNotifiesObserversForKey:</code> 方法实现应该返回 NO。子类实现中对于任何为确认的 key，应该调用父类。清单2的例子对于 openingBalance 属性启用了手动通知，允许父类来决定所有其他 key 的通知。</p><p>清单2 <code>automaticallyNotifiesObserversForKey:</code>实现的例子</p><pre class=" language-objc"><code class="language-objc">+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)theKey {    BOOL automatic = NO;    if ([theKey isEqualToString:@"openingBalance"]) {        automatic = NO;    }    else {        automatic = [super automaticallyNotifiesObserversForKey:theKey];    }    return automatic;}</code></pre><p>To implement manual observer notification, you invoke willChangeValueForKey: before changing the value, and didChangeValueForKey: after changing the value. The example in Listing 3 implements manual notifications for the openingBalance property.</p><p>Listing 3 Example accessor method implementing manual notification</p><p>要实现手动观察通知，在值变化之前要调用 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/occ/instm/NSObject/willChangeValueForKey:" target="_blank" rel="noopener">willChangeValueForKey:</a>，值变化之后要调用 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/occ/instm/NSObject/didChangeValueForKey:" target="_blank" rel="noopener">didChangeValueForKey:</a> 。清单3的例子，对于 openingBalance 属性实现了手动通知。</p><p>清单3 accessor 方法实现手动通知的例子</p><pre class=" language-objc"><code class="language-objc">- (void)setOpeningBalance:(double)theBalance {    [self willChangeValueForKey:@"openingBalance"];    _openingBalance = theBalance;    [self didChangeValueForKey:@"openingBalance"];}</code></pre><p>You can minimize sending unnecessary notifications by first checking if the value has changed. The example in Listing 4 tests the value of openingBalance and only provides the notification if it has changed.</p><p>Listing 4 Testing the value for change before providing notification</p><p>你可以先检查值是否改变，来将不必要发送的通知最小化。清单3的例子测试了 openingBalance 的值，并且只提供了如果它改变的通知。</p><p>清单4 在通知之前测试值得变化</p><pre><code>- (void)setOpeningBalance:(double)theBalance {    if (theBalance != _openingBalance) {        [self willChangeValueForKey:@&quot;openingBalance&quot;];        _openingBalance = theBalance;        [self didChangeValueForKey:@&quot;openingBalance&quot;];    }}</code></pre><p>If a single operation causes multiple keys to change you must nest the change notifications as shown in Listing 5.</p><p>Listing 5 Nesting change notifications for multiple keys</p><p>如果一个操作导致多个 key 的变化，你必须像清单5 一样将变化通知进行嵌套。</p><p>清单5 对多个 key 将变化通知嵌套</p><pre><code>- (void)setOpeningBalance:(double)theBalance {    [self willChangeValueForKey:@&quot;openingBalance&quot;];    [self willChangeValueForKey:@&quot;itemChanged&quot;];    _openingBalance = theBalance;    _itemChanged = _itemChanged+1;    [self didChangeValueForKey:@&quot;itemChanged&quot;];    [self didChangeValueForKey:@&quot;openingBalance&quot;];}</code></pre><p>In the case of an ordered to-many relationship, you must specify not only the key that changed, but also the type of change and the indexes of the objects involved. The type of change is an NSKeyValueChange that specifies NSKeyValueChangeInsertion, NSKeyValueChangeRemoval, or NSKeyValueChangeReplacement. The indexes of the affected objects are passed as an NSIndexSet object.</p><p>The code fragment in Listing 6 demonstrates how to wrap a deletion of objects in the to-many relationship transactions.</p><p>Listing 6 Implementation of manual observer notification in a to-many relationship</p><p>在有序，一对多关系的情况下，你必须指出不仅 key 发生了变化，还要指出变化的类型以及被调用对象的下标。变换的类型是 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/c/tdef/NSKeyValueChange" target="_blank" rel="noopener">NSKeyValueChange</a> ，可以指定 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/doc/c_ref/NSKeyValueChangeInsertion" target="_blank" rel="noopener">NSKeyValueChangeInsertion</a>，<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/doc/c_ref/NSKeyValueChangeRemoval" target="_blank" rel="noopener">NSKeyValueChangeRemoval</a>或者 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueObserving_Protocol/index.html#//apple_ref/doc/c_ref/NSKeyValueChangeReplacement" target="_blank" rel="noopener">NSKeyValueChangeReplacement</a> 。受影响对象的索引作为 NSIndexSet 对象被传递。</p><p>清单6 一对多关系的手动观察通知的实现</p><pre><code>- (void)removeTransactionsAtIndexes:(NSIndexSet *)indexes {    [self willChange:NSKeyValueChangeRemoval        valuesAtIndexes:indexes forKey:@&quot;transactions&quot;];    // Remove the transaction objects at the specified indexes.    [self didChange:NSKeyValueChangeRemoval        valuesAtIndexes:indexes forKey:@&quot;transactions&quot;];}</code></pre><h1 id="4-Registering-Dependent-Keys-注册相关-key"><a href="#4-Registering-Dependent-Keys-注册相关-key" class="headerlink" title="4 Registering Dependent Keys - 注册相关 key"></a>4 Registering Dependent Keys - 注册相关 key</h1><p>There are many situations in which the value of one property depends on that of one or more other attributes in another object. If the value of one attribute changes, then the value of the derived property should also be flagged for change. How you ensure that key-value observing notifications are posted for these dependent properties depends on the cardinality of the relationship.</p><p>一个属性的值取决于一个或者多个其他对象的属性，有很多种情况。如果一个属性变化，那么派生属性也应该被标记改变。对于这些相关属性依赖于关系的基数，你如果确保通知被发出。</p><h2 id="4-1-To-one-Relationships-一对一关系"><a href="#4-1-To-one-Relationships-一对一关系" class="headerlink" title="4.1 To-one Relationships - 一对一关系"></a>4.1 To-one Relationships - 一对一关系</h2><p>To trigger notifications automatically for a to-one relationship you should either override keyPathsForValuesAffectingValueForKey: or implement a suitable method that follows the pattern it defines for registering dependent keys.</p><p>For example, the full name of a person is dependent on both the first and last names. A method that returns the full name could be written as follows:</p><p>对于一对一关系，为了自动触发通知，你应该重写 <code>keyPathsForValuesAffectingValueForKey:</code> 方法，或者实现一个合适的方法，遵循一种模式，它定义取决于注册相关的key。</p><p>例如，一个人的全名依赖于人的姓和名。一个返回全名的方法可以写成下面形式：</p><pre class=" language-objc"><code class="language-objc">- (NSString *)fullName {    return [NSString stringWithFormat:@"%@ %@",firstName, lastName];}</code></pre><p>An application observing the fullName property must be notified when either the firstName or lastName properties change, as they affect the value of the property.</p><p>One solution is to override keyPathsForValuesAffectingValueForKey: specifying that the fullName property of a person is dependent on the lastName and firstName properties. Listing 1 shows an example implementation of such a dependency:</p><p>Listing 1 Example implementation of keyPathsForValuesAffectingValueForKey:</p><p>应用观察 fullName 属性，必须注意到当 firstName 或者 lastName 属性变化时，会影响到 fullName属性的值。</p><p>一种解决方法是重写 <code>keyPathsForValuesAffectingValueForKey:</code> ，指定人的 fullName 属性依赖于 lastName 和 firstName 属性。清单1 展示了这样一个例子：</p><p>清单1 <code>keyPathsForValuesAffectingValueForKey:</code> 的实现例子</p><pre class=" language-objc"><code class="language-objc">+ (NSSet *)keyPathsForValuesAffectingValueForKey:(NSString *)key {    NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];    if ([key isEqualToString:@"fullName"]) {        NSArray *affectingKeys = @[@"lastName", @"firstName"];        keyPaths = [keyPaths setByAddingObjectsFromArray:affectingKeys];    }    return keyPaths;}</code></pre><p>Your override should typically invoke super and return a set that includes any members in the set that result from doing that (so as not to interfere with overrides of this method in superclasses).</p><p>You can also achieve the same result by implementing a class method that follows the naming convention keyPathsForValuesAffecting, where is the name of the attribute (first letter capitalized) that is dependent on the values. Using this pattern the code in Listing 1 could be rewritten as a class method named keyPathsForValuesAffectingFullName as shown in Listing 2.</p><p>Listing 2 Example implementation of the keyPathsForValuesAffecting naming convention</p><p>重写，通常应该调用 super ，并且返回一个 set ，包括这样做的导致结果的任何成员。（在父类中不要因为这个方法的重写造成干扰）。</p><p>你也可以通过实现一个类方法达到同样的结果，遵循命名约定 keyPathsForValuesAffecting， 是属性名（首字母大写），依赖于值。清单1中使用这种模式的代码，可以像在清单2中被重写为一个类方法 <code>keyPathsForValuesAffectingFullName</code> 。</p><p>清单2 keyPathsForValuesAffecting 命名约定的实现例子</p><pre><code>+ (NSSet *)keyPathsForValuesAffectingFullName {    return [NSSet setWithObjects:@&quot;lastName&quot;, @&quot;firstName&quot;, nil];}</code></pre><p>You can’t override the keyPathsForValuesAffectingValueForKey: method when you add a computed property to an existing class using a category, because you’re not supposed to override methods in categories. In that case, implement a matching keyPathsForValuesAffecting class method to take advantage of this mechanism.</p><blockquote><p>Note: You cannot set up dependencies on to-many relationships by implementing keyPathsForValuesAffectingValueForKey:. Instead, you must observe the appropriate attribute of each of the objects in the to-many collection and respond to changes in their values by updating the dependent key yourself. The following section shows a strategy for dealing with this situation.</p></blockquote><p>当你使用一个 category 给一个现有的类添加一个计算属性的时候，你不能重写 <code>keyPathsForValuesAffectingValueForKey:</code> 方法，因为不允许重写分类（categories）中的方法。这种情况下，实现一个匹配的 <code>keyPathsForValuesAffecting&lt;Key&gt;</code> 类方法，体现了这种机制的优势。</p><blockquote><p>注意：你不能通过实现 <code>keyPathsForValuesAffectingValueForKey:</code> 方法建立依赖于一对多的关系。相反，你必须观察一对多集合中对象的每个响应属性，并通过更新自己依赖的 key 来响应它们值的变化。下面一节讲了处理这种情况的一种策略。</p></blockquote><h2 id="4-2-To-many-Relationships-一对多关系"><a href="#4-2-To-many-Relationships-一对多关系" class="headerlink" title="4.2 To-many Relationships - 一对多关系"></a>4.2 To-many Relationships - 一对多关系</h2><p>The keyPathsForValuesAffectingValueForKey: method does not support key-paths that include a to-many relationship. For example, suppose you have a Department object with a to-many relationship (employees) to a Employee, and Employee has a salary attribute. You might want the Department object have a totalSalary attribute that is dependent upon the salaries of all the Employees in the relationship. You can not do this with, for example, keyPathsForValuesAffectingTotalSalary and returning employees.salary as a key.</p><p>There are two possible solutions in both situations:</p><p>1.You can use key-value observing to register the parent (in this example, Department) as an observer of the relevant attribute of all the children (Employees in this example). You must add and remove the parent as an observer as child objects are added to and removed from the relationship (see Registering for Key-Value Observing). In the observeValueForKeyPath:ofObject:change:context: method you update the dependent value in response to changes, as illustrated in the following code fragment:</p><p><code>keyPathsForValuesAffectingValueForKey:</code> 方法不支持包含一对多关系的 key-path。例如，Department 对象有一个一对多的关系 对于 Employee，Employee 有 salary 属性。你希望 Department 对象有一个 totalSalary 属性，这个属性依赖于所有 Employees。你不能像下面这样，<code>keyPathsForValuesAffectingTotalSalary</code> 并且将 employees.salary 作为一个 key 返回。</p><p>在两种情况中有两个可能的解决方法：</p><p>1.可以使用键值观察注册 parent(例子中就是 Department) 作为所有 children（Employees） 相关属性的观察者。你必须添加和移除 parent 。在 <code>observeValueForKeyPath:ofObject:change:context:</code> 方法中，在响应变化中更新相关的值，就像下面的代码所示：</p><pre><code>- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {    if (context == totalSalaryContext) {        [self updateTotalSalary];    }    else    // deal with other observations and/or invoke super...}- (void)updateTotalSalary {    [self setTotalSalary:[self valueForKeyPath:@&quot;employees.@sum.salary&quot;]];}- (void)setTotalSalary:(NSNumber *)newTotalSalary {    if (totalSalary != newTotalSalary) {        [self willChangeValueForKey:@&quot;totalSalary&quot;];        _totalSalary = newTotalSalary;        [self didChangeValueForKey:@&quot;totalSalary&quot;];    }}- (NSNumber *)totalSalary {    return _totalSalary;}</code></pre><p>2.If you’re using Core Data, you can register the parent with the application’s notification center as an observer of its managed object context. The parent should respond to relevant change notifications posted by the children in a manner similar to that for key-value observing.</p><p>2.如果使用Core Data，你可以在应用程序的通知中心注册 parent 作为它管理的对象 context 的观察者。parent 应该响应 与键值观察类似方式被 children 发出的的变化通知。</p><h2 id="4-3-Key-Value-Observing-Implementation-Details-键值观察实现细节"><a href="#4-3-Key-Value-Observing-Implementation-Details-键值观察实现细节" class="headerlink" title="4.3 Key-Value Observing Implementation Details - 键值观察实现细节"></a>4.3 Key-Value Observing Implementation Details - 键值观察实现细节</h2><p>Automatic key-value observing is implemented using a technique called isa-swizzling.</p><p>The isa pointer, as the name suggests, points to the object’s class which maintains a dispatch table. This dispatch table essentially contains pointers to the methods the class implements, among other data.</p><p>When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class. As a result the value of the isa pointer does not necessarily reflect the actual class of the instance.</p><p>You should never rely on the isa pointer to determine class membership. Instead, you should use the class method to determine the class of an object instance.</p><p>自动键值观察是使用一种称为 <code>isa-swizzling</code> 的技术实现。</p><p>isa 指针，顾名思义，只想一个对象的类，维持一个调度表。这个调度表基本上包含指向类的方法实现以及其他数据的指针。</p><p>当一个观察者被注册，被观察者对象的 isa 指针所指的对象的属性被修改，指的是一个中间的类而不是真正的类。结果就是 isa 指针的值并不一定反映实际类的实例。</p><p>你应该永远不要依靠 isa 指针来确定类成员资格。相反，你应该使用 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSObject_Protocol/index.html#//apple_ref/occ/intfm/NSObject/class" target="_blank" rel="noopener">class</a> 方法来确定对象实例的类。</p><blockquote><p>苹果官方文档地址：<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA" target="_blank" rel="noopener">Key-Value Observing Programming Guide</a></p></blockquote><blockquote><p>由于笔者水平有限，文中如果有错误的地方，或者有更好的方法，还望大神指出。<br>附上本文的所有 demo 下载链接，<a href="">【GitHub】</a>。<br>如果你看完后觉得对你有所帮助，还望在 GitHub 上点个 star。赠人玫瑰，手有余香。</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KVC官方文档-键值编码指南第二部分6</title>
      <link href="/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%866/"/>
      <url>/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%866/</url>
      <content type="html"><![CDATA[<blockquote><p>Key-Value Coding Programming Guide 官方文档第二部分第6节<br>2018.9.20 第一次修正 </p></blockquote><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/SearchImplementation.html#//apple_ref/doc/uid/20000955-CJBBBFFA" target="_blank" rel="noopener">iOS-KVC官方文档第二部分第6节</a></p><h1 id="Key-Value-Coding-Fundamatals–Accessor-Search-Patterns"><a href="#Key-Value-Coding-Fundamatals–Accessor-Search-Patterns" class="headerlink" title="Key-Value Coding Fundamatals–Accessor Search Patterns"></a>Key-Value Coding Fundamatals–Accessor Search Patterns</h1><p>##访问器搜索方式</p><p>NSObject默认实现NSKeyValueCoding协议提供的基于键的访问器，使用一组明确定义的规则来调用对象的基础属性。这些协议方法使用键参数在其自己的对象实例中搜索访问器，实例变量以及遵循某些命名约定的相关方法。尽管您很少修改此默认搜索， 但了解它的工作方式会有所帮助，对于跟踪键值编码对象的行为，也可以使您自己的对象兼容。</p><blockquote><p>注意<br>本节中的描述使用<code>&lt;key&gt;</code>或<code>&lt;Key&gt;</code>作为键字符串的占位符，该键字符串在一个键值编码协议方法中作为参数出现，然后该方法将该键字符串用作间接方法调用或变量名称查找的一部分。映射的属性名称遵循占位符大小写的情况。例如，对于getter<code>&lt;key&gt;</code>和<code>is&lt;KEY &gt;</code>，名为 <code>hidden</code> 的属性映射为<code>hidden</code>和<code>isHidden</code> .。</p></blockquote><h3 id="基本的Getter搜索模式"><a href="#基本的Getter搜索模式" class="headerlink" title="基本的Getter搜索模式"></a>基本的Getter搜索模式</h3><p><code>valueForKey：</code>的默认实现，给定一个<code>key</code>参数作为输入，在接收<code>valueForKey：</code>调用的类实例中操作，执行以下过程。</p><p>1.搜索实例与名称，按照该顺序，搜索找到的名称为<code>get&lt;Key&gt;</code>、<code>&lt;key&gt;</code>、<code>is&lt;Key&gt;</code>或<code>&lt;key&gt;</code>的第一个访问器方法。如果找到，调用它并继续到步骤5。否则请继续执行下一步。 </p><p>2.如果找不到简单取值方法, 则在实例中搜索其方法名形如 <code>countOf&lt;Key&gt;</code>和<code>objectIn&lt;Key&gt;AtIndex:</code> （相当于<code>NSArray</code>类中定义的基本方法）和<code>&lt;key&gt;AtIndexes</code>:（相当于<code>NSArray</code>类中的<code>objectsAtIndexes:</code>方法）的方法。</p><p>如果第一个方法和后边两个方法中的至少一个方法被实现了, 则创建一个能够响应所有<code>NSArray</code>方法并返回该方法的集合代理对象。否则, 继续执行步骤3。</p><p>代理对象随后将它接收的任何NSArray消息转换为<code>countOf &lt;Key&gt;</code>，<code>objectIn &lt;Key&gt; AtIndex：</code>和<code>&lt;key&gt; AtIndexes：</code>的消息，并将其发送给创建它的键值编码兼容对象。如果原始对象还实现了一个名为<code>get &lt;Key&gt;：range：</code>的可选方法，则代理对象也会在适当时使用该方法。实际上，与符合键值编码的对象一起工作的代理对象允许底层属性的行为就像它是一样<code>NSArray</code>，即使它不是。</p><p>3.如果没有找到简单的访问器方法或数组访问方法组，请查找名为<code>countOf &lt;Key&gt;</code>，<code>enumeratorOf &lt;Key&gt;</code>和<code>memberOf &lt;Key&gt;：</code>的方法的三个方法（对应于<code>NSSet</code>类定义的原始方法）。</p><p>如果找到所有三个方法，请创建一个响应所有<code>NSSet</code>方法并返回该方法的集合代理对象。 否则，请继续执行步骤4。</p><p>这个代理对象随后将它接收的任何<code>NSSet</code>消息转换为<code>count Of &lt;Key&gt;</code>，<code>enumeration of &lt;Key&gt;</code>和<code>member Of &lt;Key&gt;：</code>消息到创建它的对象。实际上，与符合键值编码的对象一起工作的代理对象允许底层属性的行为就像它是一样<code>NSSet</code>，即使它不是。</p><p>4.如果找不到简单访问器方法或集合访问方法组, 并且消息接收者的类方法<code>accessInstanceVariablesDirectly</code>返回YES, 则系统按以下顺序搜索名为:<code>_&lt;key&gt;</code>、 <code>_is&lt;Key&gt;</code>、 <code>&lt;key&gt;</code>或<code>is&lt;Key&gt;</code>的实例变量。如果找到, 则直接获取实例变量的值, 然后继续执行步骤5。否则, 继续跳转到步骤6。</p><p>5.如果获取到的属性值是对象指针,即获取的是对象, 则直接将对象返回。</p><p>如果获取到的属性值是NSNumber支持的数据类型, 则将其存储在NSNumber实例并返回。<br>如果获取到的属性值不是 NSNumber 支持的类型, 则转换为NSValue对象, 然后返回。</p><p>6.如果上述所有方法都没有执行，则调用<code>valueForUndefinedKey：</code>。 默认情况下，这会引发异常，但NSObject的子类可以通过重载并根据特定key做一些特殊处理。</p><hr><h3 id="基本的Setter搜索方式"><a href="#基本的Setter搜索方式" class="headerlink" title="基本的Setter搜索方式"></a>基本的Setter搜索方式</h3><p><code>setValue:forKey:</code>的默认实现, 给定<code>key</code>和<code>value</code>参数作为输入, 在接收调用的对象内尝试将名为key的属性设置为value(或者, 对于非对象属性, 则为unwarp value, 详见<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/DataTypes.html#//apple_ref/doc/uid/20002171-BAJEAIEE" target="_blank" rel="noopener">Representing Non-Object Values</a>), 使用以下过程:</p><ul><li><p>1.按照顺序查找第一个名为<code>set&lt;Key&gt;:</code>或<code>_set&lt;Key&gt;</code>的方法。如果找到, 传入输入值 (或根据需要展开值) 调用它, 然后完成。</p></li><li><p>2.如果找不到简单访问器, 并且类方法<code>accessInstanceVariablesDirectly</code>返回YES, 则按以下顺序查找实例变量: <code>_&lt;key&gt;</code>、 <code>_is&lt;Key&gt;</code>、<code>&lt;key&gt;</code>、<code>is&lt;Key&gt;</code> 。如果找到, 则直接使用输入值 (或展开值) 设置变量并完成。</p></li><li><p>3.如果找不到以上方法或实例变量, 则调用<code>setValue:forUndefinedKey:</code>。默认情况下，这会引发异常，但<code>NSObject</code>的子类可以通过重载并根据特定key做一些特殊处理。</p></li></ul><hr><h3 id="可变数组的搜索方式"><a href="#可变数组的搜索方式" class="headerlink" title="可变数组的搜索方式"></a>可变数组的搜索方式</h3><p><code>mutableArrayValueForKey：</code>的默认实现，给定一个<code>key</code>参数作为输入，使用以下过程为接收访问者调用的对象内的一个名为<code>key</code>的属性返回一个可变代理数组：</p><p>1.查找一对方法, 名为<code>insertObject：in &lt;Key&gt; AtIndex：</code>和<code>removeObjectFrom &lt;Key&gt; AtIndex：</code>的方法（分别对应于<code>NSMutableArray</code>原始方法<code>insertObject：atIndex：</code>和<code>removeObjectAtIndex：</code>） ，或者名称类似于<code>insert &lt;Key&gt;：atIndexes：</code>和<code>remove &lt;Key&gt; AtIndexes：</code>（对应于<code>NSMutableArrayinsertObjects：atIndexes：</code>和<code>removeObjectsAtIndexes：</code>方法）。</p><p>如果对象至少实现一个插入方法和至少一个删除方法，则返回一个响应<code>NSMutableArray</code>消息的代理对象，方法是发送<code>insertObject：in &lt;Key&gt; AtIndex：</code>，<code>removeObjectFrom &lt;Key&gt; AtIndex：</code>，<code>insert &lt;Key&gt;：atIndexes：</code>，和<code>remove &lt;Key&gt; AtIndexes：</code>消息到<code>mutableArrayValueForKey：</code>的原始接收者。</p><p>当接收<code>mutableArrayValueForKey：</code>消息的对象也实现了一个可选的替换对象方法，其名称如<code>replaceObjectIn &lt;Key&gt; AtIndex：withObject：</code>或<code>replace &lt;Key&gt; AtIndexes：with &lt;Key&gt;：</code>，代理对象在适合最佳性能时会自动调用该可选方法。</p><p>2.如果对象没有可变数组方法，则查找名称与模式<code>set &lt;Key&gt;：</code>匹配的访问器方法。 在这种情况下，通过向<code>mutableArrayValueForKey：</code>的原始接收者发出<code>set &lt;Key&gt;：</code>消息，返回响应NSMutableArray消息的代理对象。</p><blockquote><p>注意:<br>此步骤中描述的机制比上一步的效率要低得多, 因为它可能涉及重复创建新的集合对象, 而不是修改现有的。因此, 在设计自己的键值编码兼容对象时, 通常应避免这种情况。</p></blockquote><p>3.如果既没有找到可变数组方法，也没有找到访问器，并且接收者的类对<code>accessInstanceVariablesDirectly</code>响应’YES<code>，则按照顺序搜索名为</code>_ <key><code>或</code><key>`的实例变量。</key></key></p><p>如果找到这样的实例变量，则返回一个代理对象，该对象将它接收的每个<code>NSMutableArray</code>消息转发给实例变量的值，该值通常是<code>NSMutableArray</code>的实例或其子类之一。</p><p>4.如果所有其他方法都失败了，只要收到<code>NSMutableArray</code>消息，就返回一个可变集合代理对象，该对象向<code>mutableArrayValueForKey：</code>消息的原始接收者发出<code>setValue：forUndefinedKey：</code>消息。</p><p>setValue:forUndefinedKey:的默认实现会抛出NSUndefinedKeyException异常, 但子类可能会重写此行为。</p><hr><h3 id="可变有序集的搜索方式"><a href="#可变有序集的搜索方式" class="headerlink" title="可变有序集的搜索方式"></a>可变有序集的搜索方式</h3><p>mutableOrderedSetValueForKey的默认实现：将相同的简单访问器方法和有序集访问器方法识别为<code>valueForKey :</code>(请参阅 <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/SearchImplementation.html#//apple_ref/doc/uid/20000955-138234" target="_blank" rel="noopener">Default Search Pattern for the Basic Getter</a><br>），并遵循相同的直接访问实例变量策略，但始终返回可变集合代理对象 <code>valueForKey：</code>返回的不可变集合。 此外，它还执行以下操作：</p><p>1.搜索名称类似于以下形式的方法: <code>insertObject：in &lt;Key&gt; AtIndex：</code>和<code>removeObjectFrom &lt;Key&gt; AtIndex：</code>（对应于<code>NSMutableOrderedSet</code>类定义的两个最原始方法），以及<code>insert &lt;Key&gt;： atIndexes：</code>和<code>remove &lt;Key&gt; AtIndexes：</code>（对应于<code>insertObjects：atIndexes：</code>和<code>removeObjectsAtIndexes：</code>）。</p><p>如果找到至少一个insert方法和至少一个remove方法，返回的代理对象每次接收到 NSMutableOrderedSet的消息后， 会通过以下组合方法给<code>mutableOrderedSetValueForKey</code>的原始对象 发送消息: <code>mutableOrderedSetValueForKey:</code>  <code>insertObject:in&lt;Key&gt;AtIndex:</code>, <code>removeObjectFrom &lt;Key&gt; AtIndex :</code>, <code>insert &lt;Key&gt;：atIndexes：</code>  <code>remove&lt;Key&gt;AtIndexes:</code> </p><p>代理对象还使用方法名为 <code>replaceObjectIn &lt;Key&gt; AtIndex：withObject：</code> 的方法，或<code>replace&lt;Key&gt;AtIndexes:with&lt;Key&gt;:</code> ,当这些方法存在于原始对象中时。</p><p>2.如果找不到可变的set方法，请搜索名为<code>set &lt;Key&gt;：</code>的访问器方法。 在这种情况下，返回的代理对象每次收到<code>NSMutableOrderedSet</code>消息时都会向<code>mutableOrderedSetValueForKey：</code>的原始接收者发送一个<code>set &lt;Key&gt;：</code>消息。</p><blockquote><p>注意<br>此步骤中描述的机制比前一步骤的效率低得多，因为它可能涉及重复创建新的集合对象而不是修改现有的集合对象。 因此，在设计自己的符合键值编码的对象时，通常应该避免使用它。</p></blockquote><p>3.如果找不到可变集消息和访问器，并且接收者的<code>accessInstanceVariablesDirectly</code>类方法返回<code>YES</code>，则按顺序搜索名称如<code>_ &lt;key&gt;</code>或<code>&lt;key&gt;</code>的实例变量。 如果找到这样的实例变量，则返回的代理对象将它接收的任何<code>NSMutableOrderedSet</code>消息转发给实例变量的值，该值通常是<code>NSMutableOrderedSet</code>或其子类之一的实例。</p><p>4.如果所有其他方法都失败了，那么只要收到一个可变的set消息，返回的代理对象就会向<code>mutableOrderedSetValueForKey：</code>的原始接收者发送一个<code>setValue：forUndefinedKey：</code>消息。</p><p><code>setValue：forUndefinedKey：</code>的默认实现引发了一个<code>NSUndefinedKeyException</code>，但是对象可能会覆盖此行为。</p><hr><h3 id="可变集的搜索方式"><a href="#可变集的搜索方式" class="headerlink" title="可变集的搜索方式"></a>可变集的搜索方式</h3><p><code>mutableSetValueForKey：</code>的默认实现，给定一个<code>key</code>参数作为输入，使用以下过程为接收访问者调用的对象内的一个名为<code>key</code>的数组属性返回一个可变代理集：</p><p>1.搜索方法名称为<code>add&lt;Key&gt;Object:</code>和 <code>remove &lt;Key&gt; Object</code> 的方法：（分别对应于<code>NSMutableSet</code>原始方法<code>addObject:</code>和<code>removeObject:</code>）以及<code>add&lt;Key&gt;：</code>和<code>remove&lt;Key&gt;:</code>（对应于<code>NSMutableSet</code> 方法<code>unionSet:</code>和<code>minusSet:</code> ）。如果找到至少一个添加方法和至少一个删除方法，则返回一个NSMutableSet代理对象，该代理对象发送<code>add &lt;Key&gt; Object：</code>，<code>remove &lt;Key&gt; Object：</code>，<code>add &lt;Key&gt;：</code>的某种组合， 和<code>remove &lt;Key&gt;：</code>对于它收到的每个<code>NSMutableSet</code>消息的<code>mutableSetValueForKey：</code>的原始接收者的消息。</p><p>代理对象还使用名称为“cross<key>：”或“set<key>：”的方法来提高性能（如果可用的话）。</key></key></p><p>2.如果<code>mutableSetValueForKey：</code>调用的接收者是托管对象，则搜索模式不会像非托管对象那样继续。 有关更多信息，请参阅“<em><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/index.html#//apple_ref/doc/uid/TP40001075" target="_blank" rel="noopener">Core Data Programming Guide</a></em><br>”中的托管对象访问器方法。</p><p>3.如果找不到可变集合方法，并且对象不是托管对象，则搜索名为<code>set &lt;Key&gt;：</code>的访问器方法。 如果找到这样的方法，则返回的代理对象将<code>set &lt;Key&gt;：</code>消息发送给它接收的每个NSMutableSet消息的<code>mutableSetValueForKey：</code>的原始接收者。</p><blockquote><p>注意<br>此步骤中描述的机制的效率远低于第一步的机制，因为它可能涉及重复创建新的集合对象而不是修改现有的集合对象。 因此，在设计自己的符合键值编码的对象时，通常应该避免使用它。</p></blockquote><p>4.如果找不到可变的set方法和accessor方法，并且<code>accessInstanceVariablesDirectly</code>类方法返回<code>YES</code>，则按照顺序搜索名为<code>_ &lt;key&gt;</code>或<code>&lt;key&gt;</code>的实例变量。 如果找到这样的实例变量，则代理对象将它接收的每个<code>NSMutableSet</code>消息转发给实例变量的值，该值通常是<code>NSMutableSet</code>的实例或其子类之一。</p><p>5.如果所有其他方法都失败了，返回的代理对象通过向<code>mutableSetValueForKey：&#39;的原始接收者发送</code>setValue：forUndefinedKey：<code>消息来响应它收到的任何</code>NSMutableSet`消息。</p><blockquote><p>由于笔者水平有限，文中如果有错误的地方，或者有更好的方法，还望大神指出。<br>附上本文的所有 demo 下载链接，<a href="">【GitHub】</a>。<br>如果你看完后觉得对你有所帮助，还望在 GitHub 上点个 star。赠人玫瑰，手有余香。</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KVC官方文档-键值编码指南第二部分5</title>
      <link href="/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%865/"/>
      <url>/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%865/</url>
      <content type="html"><![CDATA[<blockquote><p>Key-Value Coding Programming Guide 官方文档第二部分第5节<br>2018.9.20 第一次修正</p></blockquote><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/ValidatingProperties.html#//apple_ref/doc/uid/10000107i-CH18-SW1" target="_blank" rel="noopener">iOS-KVC官方文档第二部分第5节</a></p><h1 id="Key-Value-Coding-Fundamatals–Validating-Properties"><a href="#Key-Value-Coding-Fundamatals–Validating-Properties" class="headerlink" title="Key-Value Coding Fundamatals–Validating Properties"></a>Key-Value Coding Fundamatals–Validating Properties</h1><h2 id="验证属性"><a href="#验证属性" class="headerlink" title="验证属性"></a>验证属性</h2><p>键值编码协议定义了支持属性验证的方法。就像使用基于键的访问器来读取和写入符合键值编码的对象的属性一样，您也可以按键（或键路径）验证属性。当您调用<code>validateValue:forKey:error:</code>(或<code>validateValue:forKeyPath:error:</code>) 方法时， 协议的默认实现将搜索接收验证消息的对象 (或在键路径的末尾的对象)， 以查找名称与模式匹配的方法<code>validate&lt;Key&gt;:error:。如果对象没有此类方法， 则默认情况下验证成功, 默认实现返回</code>YES`。当存在属性特定的验证方法时， 默认实现将返回调用该方法的结果。</p><blockquote><p>注意<br>您通常仅在<code>Objective-C</code>中使用此处描述的验证。在 Swift 中, 通过依赖 optionals 和强类型检查的编译器支持, 可以更便捷地处理属性验证, 同时使用内置的 willSet 和 didSet 属性观察器来测试任何运行时 API 协定, 详见<br><em><a href="https://docs.swift.org/swift-book/index.html#//apple_ref/doc/uid/TP40014097" target="_blank" rel="noopener">The Swift Programming Language (Swift 4.2)</a></em><br>中<em><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-ID262" target="_blank" rel="noopener">Property Observers</a></em>章节对<code>willSet</code> <code>didSet</code>的描述。</p></blockquote><p>由于属性特定的验证方法通过引用的方式接收值和错误参数, 因此验证有三种可能的结果:</p><ol><li>验证方法判断值对象有效并返回YES而不改变值或错误。</li><li>验证方法判断值对象无效, 但选择不更改它。在这种情况下, 该方法返回NO并将错误引用 (如果调用方提供) 设置到<code>NSError</code>指示失败原因的对象。</li><li>验证方法判断值对象无效, 但创建一个新的、有效的对象作为替换。在这种情况下, 该方法返回YES同时保持错误对象不变。返回之前, 该方法修改值引用以指向新值对象。当它进行修改时, 该方法总是创建一个新对象, 而不是修改旧值, 即使 value 对象是可变的。</li></ol><p>清单 6-1显示了如何调用<code>name</code>字符串的验证的示例。</p><pre class=" language-objc"><code class="language-objc">Person* person = [[Person alloc] init];NSError* error;NSString* name = @"John";if (![person validateValue:&name forKey:@"name" error:&error]) {    NSLog(@"%@",error);}</code></pre><h3 id="自动验证"><a href="#自动验证" class="headerlink" title="自动验证"></a>自动验证</h3><p>通常, 键值编码协议及其默认实现都不定义任何自动执行验证的机制。相反, 您可以在您的应用程序中使用适合的验证方法。</p><p>某些其他Cocoa技术在某些情况下会自动进行验证。例如, <code>Core Data</code>会在保存托管对象上下文时自动执行验证 (详见<em><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/index.html#//apple_ref/doc/uid/TP40001075" target="_blank" rel="noopener">Core Data Programming Guide</a></em>)。此外, 在 macOS 中, <code>Cocoa Bindings</code> 允许您指定验证是否自动进行 (请阅读<em><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaBindings/CocoaBindings.html#//apple_ref/doc/uid/10000167i" target="_blank" rel="noopener">Cocoa Bindings Programming Topics</a></em>了解有关Cocoa Bindings的更多信息。)。</p><blockquote><p>由于笔者水平有限，文中如果有错误的地方，或者有更好的方法，还望大神指出。<br>附上本文的所有 demo 下载链接，<a href="">【GitHub】</a>。<br>如果你看完后觉得对你有所帮助，还望在 GitHub 上点个 star。赠人玫瑰，手有余香。</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KVC官方文档-键值编码指南第二部分4</title>
      <link href="/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%864/"/>
      <url>/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%864/</url>
      <content type="html"><![CDATA[<blockquote><p>Key-Value Coding Programming Guide 官方文档第二部分第4节<br>2018.9.20 第一次修正</p></blockquote><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/DataTypes.html#//apple_ref/doc/uid/20002171-BAJEAIEE" target="_blank" rel="noopener">iOS-KVC官方文档第二部分第4节</a></p><h1 id="Key-Value-Coding-Fundamatals–Representing-Non-Object-Values"><a href="#Key-Value-Coding-Fundamatals–Representing-Non-Object-Values" class="headerlink" title="Key-Value Coding Fundamatals–Representing Non-Object Values"></a>Key-Value Coding Fundamatals–Representing Non-Object Values</h1><h2 id="表示非对象值"><a href="#表示非对象值" class="headerlink" title="表示非对象值"></a>表示非对象值</h2><p>通过<code>NSObject</code>使用对象和非对象属性提供的键值编码协议方法的默认实现。 默认实现自动在对象参数或返回值以及非对象属性之间进行转换。 这允许即使存储的属性是标量或结构体，基于key的getter和setter的命名也保持一致。</p><blockquote><p>注意<br>因为Swift中的所有属性都是对象，所以本节仅适用于Objective-C属性。</p></blockquote><p>当你调用协议的其中一个getter时，<code>valueForKey：</code>，默认实现根据<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/SearchImplementation.html#//apple_ref/doc/uid/20000955-CJBBBFFA" target="_blank" rel="noopener">Accessor Search Patterns</a>中描述的规则 确定为指定键提供值的特定访问器方法或实例变量。 如果返回值不是对象，则getter使用此值初始化<code>NSNumber</code>对象（对于标量）或<code>NSValue</code>对象（对于结构体）并返回该值。</p><p>同样，默认情况下，像<code>setValue：forKey:</code>这样的setter在给定特定键的情况下确定属性的访问器或实例变量所需的数据类型。 如果数据类型不是对象，则setter首先向传入值对象发送适当的<code>&lt;type&gt; Value</code>消息以提取基础数据，并存储该数据。</p><blockquote><p>注意<br>当您使用非对象属性的nil值调用其中一个KVC协议<code>setter</code>时，setter没有明显的一般操作过程。 因此，它向接收setter调用的对象发送<code>setNilValueForKey：</code>消息。 此方法的默认实现引发<code>NSInvalidArgumentException</code>异常，但子类可能会覆盖此行为，如<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/HandlingNon-ObjectValues.html#//apple_ref/doc/uid/10000107i-CH5-SW1" target="_blank" rel="noopener">Handling Non-Object Values</a>中所述，例如设置标记值或提供有意义的默认值。</p></blockquote><h3 id="包装和解包标量类型"><a href="#包装和解包标量类型" class="headerlink" title="包装和解包标量类型"></a>包装和解包标量类型</h3><p>Table 5-1 列出默认KVC实现使用<code>NSNumber</code>实例包装的标量类型。 对于每种数据类型，该表显示用于初始化<code>NSNumber</code>基础属性值以提供getter返回值的创建方法。 然后显示用于在设置操作期间从setter输入参数中提取值的访问器方法。</p><p><strong>Table 5-1</strong> 标量类型包含在<code>NSNumber</code>对象中</p><table><thead><tr><th>Data type</th><th>Creation method</th><th>Accessor method</th></tr></thead><tbody><tr><td><code>BOOL</code></td><td><code>numberWithBool:</code></td><td><code>boolValue</code> (in iOS)    <code>charValue</code> (in macOS)*</td></tr><tr><td><code>char</code></td><td><code>numberWithChar:</code></td><td><code>charValue</code></td></tr><tr><td><code>double</code></td><td><code>numberWithDouble:</code></td><td><code>doubleValue</code></td></tr><tr><td><code>float</code></td><td><code>numberWithFloat:</code></td><td><code>floatValue</code></td></tr><tr><td><code>int</code></td><td><code>numberWithInt:</code></td><td><code>intValue</code></td></tr><tr><td><code>long</code></td><td><code>numberWithLong:</code></td><td><code>longValue</code></td></tr><tr><td><code>long long</code></td><td><code>numberWithLongLong:</code></td><td><code>longLongValue</code></td></tr><tr><td><code>short</code></td><td><code>numberWithShort:</code></td><td><code>shortValue</code></td></tr><tr><td><code>unsigned char</code></td><td><code>numberWithUnsignedChar:</code></td><td><code>unsignedChar</code></td></tr><tr><td><code>unsigned int</code></td><td><code>numberWithUnsignedInt:</code></td><td><code>unsignedInt</code></td></tr><tr><td><code>unsigned long</code></td><td><code>numberWithUnsignedLong:</code></td><td><code>unsignedLong</code></td></tr><tr><td><code>unsigned long long</code></td><td><code>numberWithUnsignedLongLong:</code></td><td><code>unsignedLongLong</code></td></tr><tr><td><code>unsigned short</code></td><td><code>numberWithUnsignedShort:</code></td><td><code>unsignedShort</code></td></tr></tbody></table><blockquote><p>注意<br>*在macOS中，由于历史原因，BOOL的类型定义为<code>signed char</code>，而KVC不区分这些。 因此，当<code>key</code>为<code>BOOL</code>时，不应将字符串值（例如@“true”或@“YES”）传递给<code>setValue：forKey：</code>。 KVC将尝试调用<code>charValue</code>（因为<code>BOOL</code>本身就是一个<code>char</code>），但是<code>NSString</code>没有实现这个方法，这会导致运行时错误。 相反，当<code>key</code>为<code>BOOL</code>时，只传递一个<code>NSNumber</code>对象，如<code>@(1)</code> 或 <code>@(YES)</code>，作为<code>setValue：forKey:</code> 的值参数。 此限制不适用于iOS，其中BOOL的类型定义为本机布尔类型bool，KVC调用boolValue，它适用于<code>NSNumber</code>对象或格式正确的<code>NSString</code>对象。</p></blockquote><h3 id="包装和解包结构体"><a href="#包装和解包结构体" class="headerlink" title="包装和解包结构体"></a>包装和解包结构体</h3><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/DataTypes.html#//apple_ref/doc/uid/20002171-184580-BCIEDECF" target="_blank" rel="noopener">Table 5-2</a> 下面列出了可以包装成<code>NSPoint</code>，<code>NSRange</code>，<code>NSRect</code>和<code>NSSize</code>的常用结构体的转化方法和取值方法</p><p><strong>Table 5-2</strong> 包装成<code>NSValue</code>的常用结构类型</p><table><thead><tr><th>Data type</th><th>Creation method</th><th>Accessor method</th></tr></thead><tbody><tr><td>NSPoint</td><td><a href="https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/Foundation/Classes/NSValue/Description.html#//apple_ref/occ/clm/NSValue/valueWithPoint:" target="_blank" rel="noopener">valueWithPoint:</a></td><td>pointValue</td></tr><tr><td>NSRange</td><td><a href="https://developer.apple.com/documentation/foundation/nsvalue/1410315-valuewithrange" target="_blank" rel="noopener">valueWithRange:</a></td><td>rangeValue</td></tr><tr><td>NSRect</td><td><a href="https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/Foundation/Classes/NSValue/Description.html#//apple_ref/occ/clm/NSValue/valueWithRect:" target="_blank" rel="noopener">valueWithRect:</a> (macOS only).</td><td>rectValue</td></tr><tr><td>NSSize</td><td><a href="https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/Foundation/Classes/NSValue/Description.html#//apple_ref/occ/clm/NSValue/valueWithSize:" target="_blank" rel="noopener">valueWithSize:</a></td><td>sizeValue</td></tr></tbody></table><p>不仅<code>NSPoint</code>，<code>NSRange</code>，<code>NSRect</code>和<code>NSSize</code>的可以自动包装和解包。 结构体类型（即Objective-C类型中字符串以<code>{</code>开头编码的类型）也可以包成NSValue对象中。 例如，参考5-1表格中声明的结构体和类接口。</p><p><strong>Listing 5-1</strong> 使用自定义结构体的类</p><pre class=" language-objc"><code class="language-objc">typedef struct {    float x, y, z;} ThreeFloats;@interface MyClass@property (nonatomic) ThreeFloats threeFloats;@end</code></pre><p>使用名为<code>myClass</code>的类的实例，可以使用KVC获取threeFloats值</p><pre class=" language-objc"><code class="language-objc">NSValue* result = [myClass valueForKey:@"threeFloats"];</code></pre><p><code>valueForKey：</code>的默认实现调用<code>threeFloats</code> 的getter方法，然后返回包含在<code>NSValue</code>对象中的结果。</p><p>同样，您可以使用KVC设置<code>threeFloats</code>值：</p><pre class=" language-objc"><code class="language-objc">ThreeFloats floats = {1., 2., 3.};NSValue* value = [NSValue valueWithBytes:&floats objCType:@encode(ThreeFloats)];[myClass setValue:value forKey:@"threeFloats"];</code></pre><p>默认实现使用<a href="https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/Foundation/Classes/NSValue/Description.html#//apple_ref/occ/instm/NSValue/getValue:" target="_blank" rel="noopener">getValue:</a>方法解包值，然后使用<code>setThreeFloats:</code>生成的结构体进行调用。</p><blockquote><p>由于笔者水平有限，文中如果有错误的地方，或者有更好的方法，还望大神指出。<br>附上本文的所有 demo 下载链接，<a href="">【GitHub】</a>。<br>如果你看完后觉得对你有所帮助，还望在 GitHub 上点个 star。赠人玫瑰，手有余香。</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KVC官方文档-键值编码指南第二部分3</title>
      <link href="/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%863/"/>
      <url>/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%863/</url>
      <content type="html"><![CDATA[<blockquote><p>Key-Value Coding Programming Guide 官方文档第二部分第3节<br>2018.9.20 第一次修正 </p></blockquote><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/AccessingCollectionProperties.html#//apple_ref/doc/uid/10000107i-CH4-SW1" target="_blank" rel="noopener">iOS-KVC官方文档第二部分第3节</a></p><h1 id="Key-Value-Coding-Fundamatals–Using-Collection-Operators"><a href="#Key-Value-Coding-Fundamatals–Using-Collection-Operators" class="headerlink" title="Key-Value Coding Fundamatals–Using Collection Operators"></a>Key-Value Coding Fundamatals–Using Collection Operators</h1><h2 id="使用集合运算符"><a href="#使用集合运算符" class="headerlink" title="使用集合运算符"></a>使用集合运算符</h2><p>当你向符合键值编码的对象发送<code>valueForKeyPath:</code>消息时, 可以在键路径中嵌入<em>集合运算符</em>。集合运算符是一个小的关键字列表，前面带一个at符号（@）, 它指定了<code>getter</code>应该执行的操作，以便在返回之前以某种方式操作数据。<code>valueForKeyPath:</code>由<code>NSObject</code>默认实现。</p><p>当键路径包含集合运算符时, 运算符前面的键路径的任何部分 (称为左键路径) 指向相对于消息接收者操作的集合。如果将消息直接发送到集合对象 (例如<code>NSArray</code>实例), 则可以省略左键路径。操作符之后的键路径部分（称为右键路径）指定操作符应处理的集合中的属性。除了@count需要正确的键路径之外，所有集合运算符。图4-1说明了操作符键路径格式。</p><p><strong>图 4-1</strong>运算符键路径格式</p><p>集合运算符展示了三种基本行为类型:</p><ul><li><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/CollectionOperators.html#//apple_ref/doc/uid/20002176-SW5" target="_blank" rel="noopener">聚合运算符</a>以某种方式合并集合的对象，并返回通常与右键路径中指定的属性的数据类型匹配的单个对象。该<code>@count</code>运算符是一个例外，它没有右键路径并始终将返回一个<code>NSNumber</code>实例。</p></li><li><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/CollectionOperators.html#//apple_ref/doc/uid/20002176-SW7" target="_blank" rel="noopener">数组运算符</a>返回一个<code>NSArray</code>实例，该实例包含命名集合中保存的对象的某个子集。</p></li><li><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/CollectionOperators.html#//apple_ref/doc/uid/20002176-SW9" target="_blank" rel="noopener">嵌套操作符</a>处理包含其他集合的集合，并根据操作符返回一个<code>NSArray</code>或<code>NSSet</code>实例，它以某种方式组合嵌套集合的对象。</p></li></ul><h3 id="示例数据"><a href="#示例数据" class="headerlink" title="示例数据"></a>示例数据</h3><p>下面描述包括演示如何调用每个运算符的代码段，以及执行此操作的结果。这依赖于<code>BankAccount</code>类 (在[列表 2-1]中显示), 它是一个保存<code>Transaction</code>对象的数组。其中每一个都代表一个简单的<code>checkbook</code>条目, 如清单 4-1中所声明的那样。</p><p><strong>清单 4-1</strong>Transaction对象的接口声明</p><pre class=" language-objc"><code class="language-objc">@interface Transaction : NSObject@property (nonatomic) NSString* payee;   // To whom@property (nonatomic) NSNumber* amount;  // How much@property (nonatomic) NSDate* date;      // When@end</code></pre><p>为了便于讨论, 假定BankAccount实例具有一个使用表4-1中显示的数据填充的交易数组, 并且您可以从BankAccount对象内部进行调用。</p><p><strong>表 4-1</strong>Transactions对象的示例数据</p><table><thead><tr><th>payee</th><th>amount</th><th>date</th></tr></thead><tbody><tr><td>Green Power</td><td>$120.00</td><td>Dec 1, 2015</td></tr><tr><td>Green Power</td><td>$150.00</td><td>Jan 1, 2016</td></tr><tr><td>Green Power</td><td>$170.00</td><td>Feb 1, 2016</td></tr><tr><td>Car Loan</td><td>$250.00</td><td>Jan 15, 2016</td></tr><tr><td>Car Loan</td><td>$250.00</td><td>Feb 15, 2016</td></tr><tr><td>Car Loan</td><td>$250.00</td><td>Mar 15, 2016</td></tr><tr><td>General Cable</td><td>$120.00</td><td>Dec 1, 2015</td></tr><tr><td>General Cable</td><td>$155.00</td><td>Jan 1, 2016</td></tr><tr><td>General Cable</td><td>$120.00</td><td>Feb 1, 2016</td></tr><tr><td>Mortgage</td><td>$1,250.00</td><td>Jan 15, 2016</td></tr><tr><td>Mortgage</td><td>$1,250.00</td><td>Feb 15, 2016</td></tr><tr><td>Mortgage</td><td>$1,250.00</td><td>Mar 15, 2016</td></tr><tr><td>Animal Hospital</td><td>$600.00</td><td>Jul 15, 2016</td></tr></tbody></table><h3 id="聚合运算符"><a href="#聚合运算符" class="headerlink" title="聚合运算符"></a>聚合运算符</h3><p>聚合运算符处理<code>array</code>或<code>set</code>属性, 从而生成反映集合某些方面的单个值。</p><h4 id="avg"><a href="#avg" class="headerlink" title="@avg"></a>@avg</h4><p>当指定@avg运算符时, <code>valueForKeyPath:</code>读取集合中每个元素的右键路径指定的属性, 将其转换为double (nil值用0替代), 并计算这些值的算术平均值。<br>然后它返回存储在NSNumber实例中的结果。</p><p>获取表 4-1中示例数据之间的平均交易记录金额:</p><pre class=" language-objc"><code class="language-objc">NSNumber *transactionAverage = [self.transactions valueForKeyPath:@"@avg.amount"];</code></pre><p><code>transactionAverage</code>的格式化的结果为 $ 456.54。</p><h4 id="count"><a href="#count" class="headerlink" title="@count"></a>@count</h4><p>指定<code>@count</code>运算符时, valueForKeyPath:返回一个包含集合中的对象个数的NSNumber实例。右键路径 (如果存在) 将被忽略。</p><p>在transactions中获取Transaction对象的数目:</p><pre class=" language-objc"><code class="language-objc">NSNumber *numberOfTransactions = [self.transactions valueForKeyPath:@"@count"];</code></pre><p><code>numberOfTransactions</code>的值为13。</p><h4 id="max"><a href="#max" class="headerlink" title="@max"></a>@max</h4><p>指定<code>@max</code>运算符时, <code>valueForKeyPath:</code>在由右键路径命名的集合项之间进行搜索, 并返回最大值。搜索使用<code>compare:</code>方法进行比较, 该方法由许多Foundation类（例如NSNumber类）定义。因此, 由右键路径指示的属性必须包含一个对此消息有意义响应的对象。搜索忽略值为<code>nil</code>的集合项。</p><p>在表 4-1中列出的交易记录中, 获取日期值 (即最新交易记录的日期) 的最大数量:</p><pre class=" language-objc"><code class="language-objc">NSDate *latestDate = [self.transactions valueForKeyPath:@"@max.date"];</code></pre><p><code>latestDate</code>的值为 Jul 15, 2016.</p><h4 id="min"><a href="#min" class="headerlink" title="@min"></a>@min</h4><p>指定<code>@min</code>运算符时, <code>valueForKeyPath:</code>在由右键路径命名的集合项之间进行搜索, 并返回最小值。搜索使用<code>compare:</code>方法进行比较, 许多基础类 (如<code>NSNumber</code>类) 中都有定义。因此, 由右键路径指示的属性必须持有对此消息有意义响应的对象。搜索忽略值为<code>nil</code>的集合项。</p><p>在表 4-1中列出的事务中, 获取日期值 (即最早的事务的日期) 的最短时间。</p><pre class=" language-objc"><code class="language-objc">NSDate *earliestDate = [self.transactions valueForKeyPath:@"@min.date"];</code></pre><p><code>earliestDate</code>的值为 Dec 1, 2015.</p><h4 id="sum"><a href="#sum" class="headerlink" title="@sum"></a>@sum</h4><p>指定@sum运算符时, <code>valueForKeyPath:</code>读取集合中每个元素的右键路径指定的属性, 将其转换为<code>double</code> (<code>nil</code>值替换为 0), 并计算总和。然后返回存储在NSNumber实例中的结果。</p><p>获取表 4-1中示例数据之间的交易记录金额的总和:</p><pre class=" language-objc"><code class="language-objc">NSNumber *amountSum = [self.transactions valueForKeyPath:@"@sum.amount"];</code></pre><p><code>amountSum</code>的结果为 $ 5935.00。</p><h3 id="数组运算符"><a href="#数组运算符" class="headerlink" title="数组运算符"></a>数组运算符</h3><p>数组运算符使<code>valueForKeyPath:</code>返回与右键路径指示的特定对象集相对应的对象数组。</p><blockquote><p>重要<br>在使用数组运算符时, 如果有任何叶(<code>leaf</code>)对象为nil, 则<code>valueForKeyPath:</code>方法将引发异常。</p></blockquote><h4 id="distinctUnionOfObjects"><a href="#distinctUnionOfObjects" class="headerlink" title="@distinctUnionOfObjects"></a>@distinctUnionOfObjects</h4><p>指定<code>@distinctUnionOfObjects</code>运算符时, <code>valueForKeyPath:</code>将创建并返回一个数组, 该数组包含与右键路径指定的属性对应的集合的不同对象。</p><p>获取transactions中的交易记录的payee属性值的集合, 并省略重复值:</p><pre class=" language-objc"><code class="language-objc">NSArray *distinctPayees = [self.transactions valueForKeyPath:@"@distinctUnionOfObjects.payee"];</code></pre><p>生成的<code>distinctPayees</code>数组包含以下每一个字符串实例：<code>Car Loan, General Cable, Animal Hospital, Green Power, Mortgage</code>。</p><blockquote><p>注意<br><code>@unionOfObjects</code>运算符提供类似的行为, 但不删除重复的对象。</p></blockquote><h4 id="unionOfObjects"><a href="#unionOfObjects" class="headerlink" title="@unionOfObjects"></a>@unionOfObjects</h4><p>指定<code>@unionOfObjects</code>运算符时, <code>valueForKeyPath:</code>将创建并返回一个数组, 该数组包含与由右键路径指定的属性对应的集合的所有对象。与<code>@distinctUnionOfObjects</code>不同, 不会删除重复对象。</p><p>获取<code>transactions</code>中的交易记录的payee属性值的集合:</p><pre class=" language-objc"><code class="language-objc">NSArray *payees = [self.transactions valueForKeyPath:@"@unionOfObjects.payee"];</code></pre><p>生成的<code>payees</code>数组包含以下字符串：<code>Green Power, Green Power, Green Power, Car Loan, Car Loan, Car Loan, General Cable, General Cable, General Cable, Mortgage, Mortgage, Mortgage, Animal Hospital</code>.记录了重复值。</p><blockquote><p>注意<br><code>@distinctUnionOfArrays</code>运算符类似, 但删除重复的对象。</p></blockquote><h3 id="嵌套运算符"><a href="#嵌套运算符" class="headerlink" title="嵌套运算符"></a>嵌套运算符</h3><p>嵌套运算符对嵌套集合进行操作, 集合本身的每个条目都包含一个集合。</p><blockquote><p>重要<br>如果在使用嵌套运算符时, 有任何叶(<code>leaf</code>)对象为nil, 则<code>valueForKeyPath:</code>方法将引发异常。</p></blockquote><p>对于下面的说明, 请看第二个称为<code>moreTransactions</code>的数据数组, 其中填充了表 4-2中的数据, 并与原来的<code>transactions</code>数组一起插入嵌套数组:</p><pre class=" language-objc"><code class="language-objc">NSArray* moreTransactions = @[<# transaction data #>];NSArray* arrayOfArrays = @[self.transactions, moreTransactions];</code></pre><p><strong>表 4-2</strong> <code>moreTransactions</code>数组中假设的<code>Transaction</code>数据</p><table><thead><tr><th>payee</th><th>amount</th><th>date</th></tr></thead><tbody><tr><td>General Cable - Cottage</td><td>$120.00</td><td>Dec 18, 2015</td></tr><tr><td>General Cable - Cottage</td><td>$155.00</td><td>Jan 9, 2016</td></tr><tr><td>General Cable - Cottage</td><td>$120.00</td><td>Dec 1, 2016</td></tr><tr><td>Second Mortgage</td><td>$1,250.00</td><td>Nov 15, 2016</td></tr><tr><td>Second Mortgage</td><td>$1,250.00</td><td>Sep 20, 2016</td></tr><tr><td>Second Mortgage</td><td>$1,250.00</td><td>Feb 12, 2016</td></tr><tr><td>Hobby Sho</td><td>$600.00</td><td>Jun 14, 2016</td></tr></tbody></table><h4 id="distinctUnionOfArrays"><a href="#distinctUnionOfArrays" class="headerlink" title="@distinctUnionOfArrays"></a>@distinctUnionOfArrays</h4><p>指定<code>@distinctUnionOfArrays</code>运算符时, <code>valueForKeyPath:</code>创建并返回一个数组, 其中包含与右键路径指定的属性相对应的所有集合的组合的不同对象。</p><p>在<code>arrayOfArrays</code>中的所有数组中获取<code>payee</code>属性的不同值:</p><pre><code>NSArray *collectedDistinctPayees = [arrayOfArrays valueForKeyPath:@&quot;@distinctUnionOfArrays.payee&quot;];</code></pre><p>生成的<code>collectedDistinctPayees</code>数组包含以下值: <code>Hobby Shop, Mortgage, Animal Hospital, Second Mortgage, Car Loan, General Cable - Cottage, General Cable, Green Power</code>。</p><blockquote><p>注意<br>@unionOfArrays运算符类似, 但不移除重复对象。</p></blockquote><h4 id="unionOfArrays"><a href="#unionOfArrays" class="headerlink" title="@unionOfArrays"></a>@unionOfArrays</h4><p>指定<code>@unionOfArrays</code>运算符时, <code>valueForKeyPath:</code>创建并返回一个数组, 其中包含与由右键路径指定的属性相对应的所有集合的组合的所有对象, 而不删除重复项。</p><p>在<code>arrayOfArrays</code>中的所有数组中获取<code>payee</code>属性的值:</p><pre><code>NSArray *collectedPayees = [arrayOfArrays valueForKeyPath:@&quot;@unionOfArrays.payee&quot;];</code></pre><p>生成的<code>collectedPayees</code>数组包含以下值:<code>Green Power, Green Power, Green Power, Car Loan, Car Loan, Car Loan, General Cable, General Cable, General Cable, Mortgage, Mortgage, Mortgage, Animal Hospital, General Cable</code>。</p><blockquote><p>注意<br><code>@distinctUnionOfArrays</code>运算符类似, 但移除重复对象。</p></blockquote><h4 id="distinctUnionOfSets"><a href="#distinctUnionOfSets" class="headerlink" title="@distinctUnionOfSets"></a>@distinctUnionOfSets</h4><p>当指定<code>@distinctUnionOfSets</code>运算符时, <code>valueForKeyPath:</code>创建并返回一个<code>NSSet</code>对象, 其中包含与由右键路径所指定的属性相对应的所有集合组合的不同对象。</p><p>此运算符的行为与<code>@distinctUnionOfArrays</code>类似, 只是它需要一个包含<code>NSSet</code>实例的<code>NSSet</code>实例对象, 其中, 而不是包含<code>NSArray</code>实例的<code>NSArray</code>实例对象。此外, 它还返回一个<code>NSSet</code>实例。假设示例数据已存储在集合而不是数组中, 则示例调用和结果与<code>@distinctUnionOfArrays</code>中显示的相同。</p><blockquote><p>由于笔者水平有限，文中如果有错误的地方，或者有更好的方法，还望大神指出。<br>附上本文的所有 demo 下载链接，<a href="">【GitHub】</a>。<br>如果你看完后觉得对你有所帮助，还望在 GitHub 上点个 star。赠人玫瑰，手有余香。</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KVC官方文档-键值编码指南第二部分2</title>
      <link href="/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%862/"/>
      <url>/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%862/</url>
      <content type="html"><![CDATA[<blockquote><p>Key-Value Coding Programming Guide 官方文档第二部分第2节<br>2018.9.20 第一次修正 </p></blockquote><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/AccessingCollectionProperties.html#//apple_ref/doc/uid/10000107i-CH4-SW1" target="_blank" rel="noopener">iOS-KVC官方文档第二部分第2节</a></p><h1 id="Key-Value-Coding-Fundamatals–Accessing-Collection-Properties"><a href="#Key-Value-Coding-Fundamatals–Accessing-Collection-Properties" class="headerlink" title="Key-Value Coding Fundamatals–Accessing Collection Properties"></a>Key-Value Coding Fundamatals–Accessing Collection Properties</h1><h2 id="访问集合属性"><a href="#访问集合属性" class="headerlink" title="访问集合属性"></a>访问集合属性</h2><p>符合键值编码的对象以与公开其他属性相同的方式公开其多对多属性。您可以像使用任何其他对象<code>valueForKey:</code>和<code>setValue:forKey:</code> (或它们的键路径等同方法) 一样获取或设置集合对象。但是, 当您要操作这些集合的内容时, 使用协议定义的可变代理方法通常是最有效的。</p><p>该协议为集合对象访问定义了三种不同的代理方法, 每个都具有一个键和一个键路径变体方法:</p><ul><li><a href="https://developer.apple.com/documentation/objectivec/nsobject/1416339-mutablearrayvalueforkey" target="_blank" rel="noopener">mutableArrayValueForKey:</a> 和 <a href="https://developer.apple.com/documentation/objectivec/nsobject/1414937-mutablearrayvalueforkeypath" target="_blank" rel="noopener">mutableArrayValueForKeyPath:</a></li></ul><p>这两个方法返回一个类似于<code>NSMutableArray</code>对象的代理对象。</p><ul><li><a href="https://developer.apple.com/documentation/objectivec/nsobject/1415105-mutablesetvalueforkey" target="_blank" rel="noopener">mutableSetValueForKey:</a> 和 <a href="https://developer.apple.com/documentation/objectivec/nsobject/1408115-mutablesetvalue" target="_blank" rel="noopener">mutableSetValueForKeyPath:</a></li></ul><p>这两个方法返回一个类似于<code>NSMutableSet</code>对象的代理对象。</p><ul><li><a href="https://developer.apple.com/documentation/objectivec/nsobject/1415479-mutableorderedsetvalue" target="_blank" rel="noopener">mutableOrderedSetValueForKey:</a> 和 <a href="https://developer.apple.com/documentation/objectivec/nsobject/1407188-mutableorderedsetvalue" target="_blank" rel="noopener">mutableOrderedSetValueForKeyPath:</a></li></ul><pre><code>这两个方法返回一个类似于`NSMutableOrderedSet`对象的代理对象。</code></pre><p>当您对代理对象进行操作，向对象添加对象，从中删除对象或替换对象时, 协议的默认实现将相应地修改基础属性。这比使用<code>valueForKey:</code>得到一个不可变集合对象更有效，创建一个修改了内容的可变集合对象，然后使用<code>setValue:forKey:</code>消息将其存储回对象。在许多情况下, 它也比直接使用可变属性更有效。这些方法提供了对集合对象中保存的对象保持键值观察遵从性的额外好处 (有关详细信息，请参阅<em><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177i" target="_blank" rel="noopener">Key-Value Observing Programming Guide</a></em>。</p><blockquote><p>由于笔者水平有限，文中如果有错误的地方，或者有更好的方法，还望大神指出。<br>附上本文的所有 demo 下载链接，<a href="">【GitHub】</a>。<br>如果你看完后觉得对你有所帮助，还望在 GitHub 上点个 star。赠人玫瑰，手有余香。</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KVC官方文档-键值编码指南第二部分1</title>
      <link href="/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%861/"/>
      <url>/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%861/</url>
      <content type="html"><![CDATA[<blockquote><p>Key-Value Coding Programming Guide 官方文档第二部分第1节<br>2018.9.20 第一次修正 </p></blockquote><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/BasicPrinciples.html#//apple_ref/doc/uid/20002170-BAJEAIEE" target="_blank" rel="noopener">iOS-KVC官方文档第二部分第1节</a></p><h1 id="Key-Value-Coding-Fundamatals–Accessing-Object-Properties"><a href="#Key-Value-Coding-Fundamatals–Accessing-Object-Properties" class="headerlink" title="Key-Value Coding Fundamatals–Accessing Object Properties"></a>Key-Value Coding Fundamatals–Accessing Object Properties</h1><blockquote><p>键值编码基础– 访问对象属性</p></blockquote><h2 id="访问对象属性"><a href="#访问对象属性" class="headerlink" title="访问对象属性"></a>访问对象属性</h2><p>对象通常在其接口声明中指定属性, 这些属性属于以下几种类别之一:</p><ul><li><p><strong>属性</strong>. 指简单值, 例如标量(<code>scalars</code>)、字符串或布尔值。值对象(如<code>NSNumber</code>)和其他不可变类型(如<code>NSColor</code>) 也被视为属性。</p></li><li><p><strong>一对一关系</strong>. 指具有自己属性的可变对象。对象的属性可以在对象本身不变的情况下更改。例如，银行帐户对象(bank account object)可能具有owner属性，该属性是Person对象的实例，该Person对象具有address属性。owner的address可能会更改，而不会更改银行帐户持有的owner。银行帐户的owner没有变更。只有Person的address 发生改变。</p></li><li><p><strong>一对多关系</strong>. 指集合对象。你通常使用<code>NSArray</code>或<code>NSSet</code>保存此类集合的实例，但也可以使用自定义集合类。</p></li></ul><p>清单 2-1中声明的<code>BankAccount</code>对象演示了每种类型的属性。</p><p><strong>清单 2-1</strong><code>BankAccount</code>对象的属性</p><pre class=" language-objc"><code class="language-objc">@interface BankAccount : NSObject@property (nonatomic) NSNumber* currentBalance;              // An attribute@property (nonatomic) Person* owner;                         // A to-one relation@property (nonatomic) NSArray<Transaction*>* transactions;   // A to-many relation@end</code></pre><p>为了保持封装，对象通常为其接口上的属性提供访问器方法。对象的作者可以显式地编写这些方法，也可以依赖编译器自动合成它们。无论哪种方式，使用这些访问器之一的代码的作者必须在编译之前将属性名称写入代码中。访问器方法的名称成为使用它的代码的静态部分。例如，给定清单2-1中声明的BankAccount对象，编译器会合成一个可以为myAccount实例调用的setter ：</p><pre class=" language-objc"><code class="language-objc">[myAccount setCurrentBalance:@(100.0)];</code></pre><p>这是直接的，但缺乏灵活性。另一方面，符合键值编码的对象提供了使用字符串标识符访问对象属性的更通用机制。</p><h3 id="使用Keys-和-Key-Paths标识对象的属性"><a href="#使用Keys-和-Key-Paths标识对象的属性" class="headerlink" title="使用Keys 和 Key Paths标识对象的属性"></a>使用Keys 和 Key Paths标识对象的属性</h3><p>键(<code>key</code>)是标识特定属性的字符串。通常, 按照惯例, 表示属性的键(<code>key</code>)是代码中显示的属性名。键(<code>key</code>)必须使用 <code>ASCII</code> 编码, 不能包含空格, 并且通常以小写字母开头 (尽管有例外, 如在许多类中的<code>URL</code>属性)。</p><p>由于清单 2-1中的<code>BankAccount</code>类是符合键值编码的, 所以它能识别键(即它的属性的名称)<code>owner</code>、<code>currentBalance</code>和<code>transactions</code> 。您也可以通过其键来设置值, 而不是调用<code>setCurrentBalance:</code>方法:</p><pre class=" language-objc"><code class="language-objc">[myAccount setValue:@(100.0) forKey:@"currentBalance"];</code></pre><p>实际上, 您可以使用不同的键参数通过相同方法来设置myAccount对象的所有属性。因为参数是字符串类型, 所以它可以在运行时操作变量。</p><p>键路径<code>Key path</code>是一个用点操作符<code>.</code>来分隔键的字符串, 用于指定要遍历的对象属性序列。序列中第一个键的属性是相对于接收者的, 每个后续键相对于上一个属性的值进行计算。键路径(<code>Key path</code>)对于使用单个方法深入调用对象的层次结构很有用。</p><p>例如, 应用于银行帐户实例的键路径<code>owner.address.street</code>是指存储在银行帐户所有者地址中的街道字符串的值, 假设<code>Person</code>和<code>Address</code>类也符合的键值编码。</p><blockquote><p>注意<br>在 Swift 中, 您可以使用<code>#keyPath</code>表达式, 而不是使用字符串来指示键或键路径。这提供了编译时检查的优点, 详见<em><a href="https://developer.apple.com/documentation/swift#2984801" target="_blank" rel="noopener">Using Swift with Cocoa and Objective-C (Swift 4.2)</a> </em>中的<em><a href="https://developer.apple.com/documentation/swift#2984801" target="_blank" rel="noopener">Keys and Key Paths</a></em>章节。</p></blockquote><h3 id="使用键获取属性值"><a href="#使用键获取属性值" class="headerlink" title="使用键获取属性值"></a>使用键获取属性值</h3><p>对象在遵循<code>NSKeyValueCoding</code>协议时符合键值编码。继承自的对象（<a href="https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/Foundation/Classes/NSObject/Description.html#//apple_ref/occ/cl/NSObject" target="_blank" rel="noopener"><code>NSObject</code></a>提供协议的基本方法的默认实现）会自动采用此协议的某些默认行为。这样的对象至少实现了以下基于键的基本getter：</p><ul><li><p><a href="https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/EOF/EOControl/Classes/NSObjectAdditions/Description.html#//apple_ref/occ/instm/NSObject/valueForKey:" target="_blank" rel="noopener"><code>valueForKey:</code></a> - 返回由key参数指定的属性的值。如果根据<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/SearchImplementation.html#//apple_ref/doc/uid/20000955-CJBBBFFA" target="_blank" rel="noopener">访问者搜索模式中</a>描述的规则无法找到key命名的属性，则该对象会向自身发送<a href="https://developer.apple.com/documentation/objectivec/nsobject/1413457-value" target="_blank" rel="noopener"><code>valueForUndefinedKey:</code></a>消息。<a href="https://developer.apple.com/documentation/objectivec/nsobject/1413457-value" target="_blank" rel="noopener"><code>valueForUndefinedKey:</code></a>引发的默认实现抛出<code>NSUndefinedKeyException</code>异常，但是子类可以覆盖此方法并更优雅地处理这种情况。</p></li><li><p><a href="https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/EOF/EOControl/Classes/NSObjectAdditions/Description.html#//apple_ref/occ/instm/NSObject/valueForKeyPath:" target="_blank" rel="noopener"><code>valueForKeyPath:</code></a> - 返回相对于接收器的指定键路径的值。keyPath序列中的任何对象都不符合特定key的键值编码 - 即，默认实现<code>valueForKey:</code>无法找到访问器方法 - -那么就会接收<a href="https://developer.apple.com/documentation/objectivec/nsobject/1413457-value" target="_blank" rel="noopener"><code>valueForUndefinedKey:</code></a>消息。</p></li><li><p><a href="https://developer.apple.com/documentation/objectivec/nsobject/1411319-dictionarywithvalues" target="_blank" rel="noopener"><code>dictionaryWithValuesForKeys:</code></a> - 返回相对于接收器的一组键所对应的值。该方法为数组中的每个键调用<code>valueForKey:</code>。返回的<code>NSDictionary</code>包含数组中所有键的值。</p></li></ul><blockquote><p>注意<br>集合对象 (如<code>NSArray</code>、 <code>NSSet</code>和<code>NSDictionary</code>) 不能包含nil的值。而是使用NSNull对象表示nil值。NSNull提供一个表示对象属性的nil值的单个实例。<code>dictionaryWithValuesForKeys:</code>的默认实现和相关的<code>setValuesForKeysWithDictionary:</code>会在NSNull (在字典参数中) 和nil(在存储的属性中)之间进行自动转换 。</p></blockquote><p>当您使用KeyPath来寻址属性时, 如果键路径中的最后一个键是一对多关系 (即引用集合), 则在多对键的右侧,返回的值是一个包含键的所有值的集合。例如, 请求键路径 “<code>transactions.payee</code>“ 的值返回包含所有<code>transaction</code>对象中<code>payee</code>对象的数组。这也适用于KeyPath中的多个数组。KeyPath <code>accounts.transactions.payee</code>返回一个数组，其中包含所有帐户中所有交易的所有收款人对象。</p><h3 id="使用键设置属性值"><a href="#使用键设置属性值" class="headerlink" title="使用键设置属性值"></a>使用键设置属性值</h3><p>与 <code>getter</code>一样, 符合键值编码的对象也提供了一小组通用setter，其默认行为基于以下<code>NSKeyValueCoding</code>协议的实现<a href="https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/Foundation/Classes/NSObject/Description.html#//apple_ref/occ/cl/NSObject" target="_blank" rel="noopener"><code>NSObject</code></a>:</p><ul><li><a href="https://developer.apple.com/documentation/objectivec/nsobject/1415969-setvalue" target="_blank" rel="noopener"><code>setValue:forKey:</code></a> - 将指定键设置为给定值。<code>setValue:forKey:</code>的默认实现会自动对表示标量和结构体的<code>NSNumber</code>和<code>NSValue</code>对象执行<code>解包</code>操作，并将它们设置到相应的属性中。有关包装(warp)和解包(unwarp)语义的详细信息，请参阅<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/DataTypes.html#//apple_ref/doc/uid/20002171-BAJEAIEE" target="_blank" rel="noopener">Representing Non-Object Values</a>。</li></ul><p>如果接收<code>setter</code>调用的对象中没有对应指定键的属性，该对象将给自己发送一个<code>[setValue:forUndefinedKey:]</code>消息。<code>setValue:forUndefinedKey:</code>的默认实现将抛出<code>NSUndefinedKeyException</code>异常。但是, 子类可以重写此方法以自定义方式处理请求。</p><ul><li><p><code>setValue:forKeyPath:</code> 在相对于接收者的指定键路径上设置给定值。键路径序列中指定键所对应的对象如果不是键值编码兼容的，将会收到<code>setValue:forUndefinedKey:</code>消息。</p></li><li><p><code>setValuesForKeysWithDictionary:</code> 将指定字典中的值设置到接收者的属性中, 使用字典键标识属性。默认实现调用每个键值对的<code>setValue:forKey:</code> , 根据需要用<code>nil</code>替换<code>NSNull</code>对象。</p></li></ul><p>在默认实现中, 当您尝试将非对象属性设置为<code>nil</code>值时, 符合键值编码兼容对象将自己发送一个<code>setNilValueForKey:</code>消息。<code>setNilValueForKey:</code>的默认实现将抛出<code>[NSInvalidArgumentException]</code>异常, 但对象可以重写此方法以替换默认值或标记值, 详见<em>处理非对象值</em>。</p><h3 id="使用键简化对象访问"><a href="#使用键简化对象访问" class="headerlink" title="使用键简化对象访问"></a>使用键简化对象访问</h3><p>想知道基于key的 <code>getter</code> 和 <code>setter</code> 如何简化代码, 请查看下面的示例。在 macOS 中, <code>NSTableView</code>和<code>NSOutlineView</code>对象的标识符字符串与每个它们的列相关联。如果表的模型对象不是符合键值编码的, 则表的数据源方法将强制检查每个列标识符, 依次查找要返回的正确属性, 如清单 2-2所示。此外, 在将来, 当您向模型中添加另一个属性时, 在本例中为<code>Person</code> 对象, 还必须重新访问数据源方法, 添加另一个条件来测试新属性并返回相关值.</p><p>清单 2-2 不基于键值编码的数据源方法的实现</p><pre class=" language-objc"><code class="language-objc">- (id)tableView:(NSTableView *)tableview objectValueForTableColumn:(id)column row:(NSInteger)row {    id result = nil;    Person *person = [self.people objectAtIndex:row];    if ([[column identifier] isEqualToString:@"name"]) {        result = [person name];    } else if ([[column identifier] isEqualToString:@"age"]) {        result = @([person age]);  // Wrap age, a scalar, as an NSNumber    } else if ([[column identifier] isEqualToString:@"favoriteColor"]) {        result = [person favoriteColor];    } // And so on...    return result;}</code></pre><p>另一方面,清单 2-3展示了相同数据源的方法的一个更紧凑的实现, 该数据源方法使用的是键值编码兼容的<code>Person</code>对象。仅使用<code>valueForKey:</code> getter, 数据源方法将使用列标识符作为键返回适当的值。除了更短的时间外, 它还更通用, 因为在以后添加新列时, 只要列标识符始终与模型对象的属性名称匹配, 它就会继续保持不变。</p><p>清单 2-3基于键值编码的数据源方法的实现</p><pre class=" language-objc"><code class="language-objc">- (id)tableView:(NSTableView *)tableview objectValueForTableColumn:(id)column row:(NSInteger)row {    return [[self.people objectAtIndex:row] valueForKey:[column identifier]];}</code></pre><blockquote><p>由于笔者水平有限，文中如果有错误的地方，或者有更好的方法，还望大神指出。<br>附上本文的所有 demo 下载链接，<a href="">【GitHub】</a>。<br>如果你看完后觉得对你有所帮助，还望在 GitHub 上点个 star。赠人玫瑰，手有余香。</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KVC官方文档-键值编码指南第一部分</title>
      <link href="/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/"/>
      <url>/2018/09/18/KVC%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E9%94%AE%E5%80%BC%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</url>
      <content type="html"><![CDATA[<blockquote><p>Key-Value Coding Programming Guide 官方文档第一部分<br>2018.9.20 第一次修正 </p></blockquote><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1" target="_blank" rel="noopener">iOS-KVC官方文档第一部分</a></p><h1 id="Key-Value-Coding-Programming-Guide-Getting-Started"><a href="#Key-Value-Coding-Programming-Guide-Getting-Started" class="headerlink" title="Key-Value Coding Programming Guide - Getting Started"></a>Key-Value Coding Programming Guide - Getting Started</h1><blockquote><p>键值编码编程指南-入门</p></blockquote><blockquote><p>该文档苹果官方已不再更新。有关Apple SDK的最新信息，请访问<a href="https://developer.apple.com/documentation" target="_blank" rel="noopener">文档网站</a>。</p></blockquote><h2 id="关于键值编码"><a href="#关于键值编码" class="headerlink" title="关于键值编码"></a>关于键值编码</h2><p>补充: key-value coding 翻译为 键值编码 , 简称KVC.</p><p>键值编码是一种由<code>NSKeyValueCoding</code>非正式协议启用的机制，对象采用该机制提供对其属性的间接访问。当对象符合键值编码时，其属性可通过字符串参数通过简洁，统一的消息传递接口寻址。这种间接访问机制补充了实例变量及其相关访问器方法提供的直接访问。</p><p>您通常使用访问器方法来访问对象的属性。get访问器（或getter）返回属性的值。set访问器（或setter）设置属性的值。在Objective-C中，您还可以直接访问属性的基础实例变量。以任何这些方式访问对象属性都很简单，但需要调用特定于属性的方法或变量名称。随着属性列表的增长或变化，访问这些属性的代码也必须如此。相反，符合键值编码的对象提供了一个简单的消息传递接口，该接口在其所有属性中都是一致的。</p><p>键值编码是一个基本概念，是许多其他Cocoa技术的基础，例如键值观察(key-value observing)，Cocoa绑定(Cocoa bindings)，Core Data和AppleScript-ability。在某些情况下，键值编码还有助于简化代码。</p><h3 id="使用键值编码兼容对象"><a href="#使用键值编码兼容对象" class="headerlink" title="使用键值编码兼容对象"></a>使用键值编码兼容对象</h3><p>对象通常在<code>NSObject</code>（直接或间接）继承时采用键值编码，它们都采用<code>NSKeyValueCoding</code>协议并为基本方法提供默认实现。这样的对象通过紧凑的消息传递接口使其他对象能够执行以下操作：</p><ul><li><p><strong>访问对象属性。</strong>该协议指定方法，例如getter <a href="https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/EOF/EOControl/Classes/NSObjectAdditions/Description.html#//apple_ref/occ/instm/NSObject/valueForKey:" target="_blank" rel="noopener"><code>valueForKey:</code></a> 和setter <a href="https://developer.apple.com/documentation/objectivec/nsobject/1415969-setvalue" target="_blank" rel="noopener"><code>setValue:forKey:</code></a>，用于通过名称或键访问对象属性，参数为字符串。这些和相关方法的默认实现使用键来定位基础数据并与其交互，如<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/BasicPrinciples.html#//apple_ref/doc/uid/20002170-BAJEAIEE" target="_blank" rel="noopener">Accessing Object Properties</a>。</p></li><li><p><strong>操纵集合属性。</strong>访问方法的默认实现和对象的集合属性（如<code>NSArray</code>对象）一样，也和任何其他属性一样。此外，如果对象定义属性的集合访问器方法，则它允许对集合内容进行键值访问。这通常比直接访问更有效，并允许您通过标准化界面使用自定义集合对象，如<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/AccessingCollectionProperties.html#//apple_ref/doc/uid/10000107i-CH4-SW1" target="_blank" rel="noopener">Accessing Collection Properties</a>。</p></li><li><p><strong>在集合对象上调用集合运算符。</strong>在符合键值编码的对象中访问集合属性时，可以将<em>集合运算符</em>插入到键字符串中，如<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/CollectionOperators.html#//apple_ref/doc/uid/20002176-BAJEAIEE" target="_blank" rel="noopener">Using Collection Operators</a>。集合运算符根据默认的<code>NSKeyValueCoding</code>getter实现对集合执行操作，然后返回集合的新的过滤版本或表示集合的某些特征的单个值。</p></li><li><p><strong>访问非对象属性。</strong>协议默认实现检测非对象属性，包括标量和结构体，并自动将它们包装和解包为协议接口上使用的对象，如<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/DataTypes.html#//apple_ref/doc/uid/20002171-BAJEAIEE" target="_blank" rel="noopener">Representing Non-Object Values</a>。此外，该协议声明了一种方法，该方法允许兼容对象<code>nil</code>通过键值编码接口在非对象属性上设置值时为该情况提供合适的作用。</p></li><li><p><strong>key path访问属性。</strong>如果具有符合键值编码的对象层次结构，则可以使用基于key path的方法调用，使用单个调用在层次结构内深入查看，获取或设置值。</p></li></ul><h3 id="采用对象的键值编码"><a href="#采用对象的键值编码" class="headerlink" title="采用对象的键值编码"></a>采用对象的键值编码</h3><p>为了使您自己的对象键值编码符合要求，您需要确保它们采用<code>NSKeyValueCoding</code>非正式协议并实现相应的方法，例如作为<a href="https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/EOF/EOControl/Classes/NSObjectAdditions/Description.html#//apple_ref/occ/instm/NSObject/valueForKey:" target="_blank" rel="noopener"><code>valueForKey:</code></a> 通用getter和<a href="https://developer.apple.com/documentation/objectivec/nsobject/1415969-setvalue" target="_blank" rel="noopener"><code>setValue:forKey:</code></a> 通用setter。幸运的是，如上所述，<a href="https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/Foundation/Protocols/NSObject/Description.html#//apple_ref/occ/intf/NSObject" target="_blank" rel="noopener"><code>NSObject</code></a>  采用此协议并为这些和其他基本方法提供默认实现。因此，如果您从<code>NSObject</code>（或其许多子类中的任何一个）派生对象，那么大部分工作已经完成。</p><p>为了使默认方法完成其工作，您需要确保对象的访问器方法和实例变量遵循某些明确定义的模式。这允许默认实现找到对象的属性以响应键值编码消息。然后，您可以选择通过提供验证方法和处理某些特殊情况来扩展和自定义键值编码。</p><h3 id="使用Swift进行键值编码"><a href="#使用Swift进行键值编码" class="headerlink" title="使用Swift进行键值编码"></a>使用Swift进行键值编码</h3><p><code>NSObject</code>从其子类或其子类之一 继承的Swift对象默认情况下是符合其属性的键值编码。而在Objective-C中，属性的访问器和实例变量必须遵循某些模式，Swift中的标准属性声明会自动保证这一点。另一方面，协议的许多功能要么不相关，要么使用Objective-C中不存在的本机Swift构造或技术来更好地处理。例如，因为所有Swift属性都是对象，所以您永远不会使用默认实现对非对象属性的特殊处理。</p><p>因此，虽然键值编码协议方法直接转换为Swift，但本指南主要关注Objective-C，您需要做更多工作以确保合规性，以及键值编码通常最有用的地方。整个指南中都提到了需要在Swift中采用明显不同方法的情况。</p><p>有关使用Swift和Cocoa技术的更多信息，请阅读<em>将Swift与Cocoa和Objective-C一起使用（Swift 3）</em>。有关Swift的完整描述，请阅读<em>Swift编程语言（Swift 3）</em>。</p><h3 id="使用键值编码的其他Cocoa技术"><a href="#使用键值编码的其他Cocoa技术" class="headerlink" title="使用键值编码的其他Cocoa技术"></a>使用键值编码的其他Cocoa技术</h3><p>符合键值编码的对象可以参与依赖于此类访问的各种Cocoa技术，包括：</p><ul><li><p><strong>键值观察(Key-value observing)。</strong>此机制使对象能够注册异步通知监听另一个对象属性的改变，如“ <em><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177i" target="_blank" rel="noopener">Key-Value Observing Programming</a></em>。</p></li><li><p><strong>Cocoa绑定(Cocoa bindings)。</strong>这一系列技术完全实现了Model-View-Controller范例，其中模型(Model)用于封装应用程序数据，视图(View)用于显示和编辑数据，控制器(Controller)在两者之间进行调解。阅读<em><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaBindings/CocoaBindings.html#//apple_ref/doc/uid/10000167i" target="_blank" rel="noopener">Cocoa Bindings Programming Topics</a></em>以了解有关Cocoa绑定的更多信息。</p></li><li><p><strong>核心数据(Core Data)。</strong>该框架为与对象生命周期和对象图形化管理相关的常见任务（包括持久性）提供通用和自动化解决方案。您可以在<em><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/index.html#//apple_ref/doc/uid/TP40001075" target="_blank" rel="noopener">Core Data Programming Guide</a></em>阅读Core Data 。</p></li><li><p><strong>AppleScript。</strong>这种脚本语言可以直接控制脚本化应用程序和macOS的许多部分。Cocoa的脚本支持利用键值编码来获取和设置脚本化对象中的信息。<code>NSScriptKeyValueCoding</code>非正式协议中的方法提供了使用键值编码的附加功能，包括通过多值键中的索引获取和设置键值，以及将键值强制（或转换）为适当的数据类型。<em><a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html#//apple_ref/doc/uid/10000156i" target="_blank" rel="noopener">AppleScript Overview</a></em>提供了AppleScript及其相关技术的高级概述。</p></li></ul><blockquote><p>由于笔者水平有限，文中如果有错误的地方，或者有更好的方法，还望大神指出。<br>附上本文的所有 demo 下载链接，<a href="">【GitHub】</a>。<br>如果你看完后觉得对你有所帮助，还望在 GitHub 上点个 star。赠人玫瑰，手有余香。</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UITableView的分割线设置及不能全屏原因</title>
      <link href="/2018/09/17/UITableView%E7%9A%84%E5%88%86%E5%89%B2%E7%BA%BF%E8%AE%BE%E7%BD%AE%E5%8F%8A%E4%B8%8D%E8%83%BD%E5%85%A8%E5%B1%8F%E5%8E%9F%E5%9B%A0/"/>
      <url>/2018/09/17/UITableView%E7%9A%84%E5%88%86%E5%89%B2%E7%BA%BF%E8%AE%BE%E7%BD%AE%E5%8F%8A%E4%B8%8D%E8%83%BD%E5%85%A8%E5%B1%8F%E5%8E%9F%E5%9B%A0/</url>
      <content type="html"><![CDATA[<blockquote><p>一般TableView设置全屏分隔线有下面三种方法</p></blockquote><h3 id="方法1-自定义cell-手动添加分割线"><a href="#方法1-自定义cell-手动添加分割线" class="headerlink" title="方法1:自定义cell, 手动添加分割线"></a>方法1:自定义cell, 手动添加分割线</h3><ul><li><p>首先先隐藏系统自带的分割线, 接下来有2种做法 (建议使用做法a)<br> <code>tableView.separatorStyle = UITableViewCellSeparatorStyleNone;</code><br> 或者<br> <code>self.tableView.separatorColor = [UIColor clearColor];</code></p></li><li><p><strong>做法a: 可以通过addSubview的方式添加一条分割线</strong> </p></li></ul><pre class=" language-objc"><code class="language-objc">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellId forIndexPath:indexPath];     //自定义分割线方法一: 通过addSubview的方式添加一条分割线    //在自定义cell 里面给每个cell添加高度为2的红色分割线    CGFloat cellH = cell.frame.size.height;    if(indexPath.row != cars.count - 1){        UIView *line = [[UIView alloc] initWithFrame:CGRectMake(0, cellH-2, self.view.frame.size.width, 2)];        line.backgroundColor = [UIColor redColor];        [cell addSubview:line];    }    return cell;}</code></pre><ul><li><strong>做法b:也可以自定义cell, cell中重写drawRect:  自绘分割线</strong></li></ul><pre class=" language-objc"><code class="language-objc">// 自绘分割线- (void)drawRect:(CGRect)rect{    CGContextRef context = UIGraphicsGetCurrentContext();    CGContextSetFillColorWithColor(context, [UIColor whiteColor].CGColor);    CGContextFillRect(context, rect);    CGContextSetStrokeColorWithColor(context, [UIColor greenColor].CGColor);  //绘制高度为2绿色分割线    CGContextStrokeRect(context, CGRectMake(0, rect.size.height - 2, rect.size.width, 2));}</code></pre><h3 id="方法2-自定义cell-重写setFrame方法-cell高度-1-露出tableView背景色"><a href="#方法2-自定义cell-重写setFrame方法-cell高度-1-露出tableView背景色" class="headerlink" title="方法2:自定义cell , 重写setFrame方法,cell高度-1,露出tableView背景色"></a>方法2:自定义cell , 重写setFrame方法,cell高度-1,露出tableView背景色</h3><ul><li>首先隐藏系统分割线, 设置tableView背景颜色.</li></ul><pre class=" language-objc"><code class="language-objc">self.tableView.separatorStyle =  UITableViewCellSeparatorStyleNone;    // 设置tableView背景色self.tableView.backgroundColor = [UIColor colorWithWhite:215 / 255.0 alpha:1];</code></pre><ul><li>在自定义cell中重写setFrame:</li></ul><pre class=" language-objc"><code class="language-objc">- (void)setFrame:(CGRect)frame{    frame.size.height -= 1;    // 给cellframe赋值    [super setFrame:frame];}</code></pre><h3 id="方法3-利用系统属性设置-separatorInset-layoutMargins-共需添加三句代码"><a href="#方法3-利用系统属性设置-separatorInset-layoutMargins-共需添加三句代码" class="headerlink" title="方法3.利用系统属性设置(separatorInset, layoutMargins), 共需添加三句代码"></a>方法3.利用系统属性设置(separatorInset, layoutMargins), 共需添加三句代码</h3><ul><li>对tableView的separatorInset, layoutMargins属性的设置</li></ul><pre class=" language-objc"><code class="language-objc">-(void)viewDidLoad {    [super viewDidLoad];    //1.调整(iOS7以上)表格分隔线边距    if ([self.tableView respondsToSelector:@selector(setSeparatorInset:)]) {        self.tableView.separatorInset = UIEdgeInsetsZero;    }    //2.调整(iOS8以上)view边距(或者在cell中设置preservesSuperviewLayoutMargins,二者等效)    if ([self.tableView respondsToSelector:@selector(setLayoutMargins:)]) {        self.tableView.layoutMargins = UIEdgeInsetsZero;    }}</code></pre><ul><li>对cell的LayoutMargins属性的设置</li><li>补充:对cell的设置可以写在cellForRowAtIndexPath里,也可以写在willDisplayCell方法里</li></ul><pre class=" language-objc"><code class="language-objc">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {      UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ID forIndexPath:indexPath];   //2.调整(iOS8以上)tableView边距(与上面第2步等效,二选一即可)    if ([cell respondsToSelector:@selector(setPreservesSuperviewLayoutMargins:)]) {        cell.preservesSuperviewLayoutMargins = NO;    }   //3.调整(iOS8以上)view边距    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {        [cell setLayoutMargins:UIEdgeInsetsZero];    }    return cell;}</code></pre><hr><h3 id="三种方法优缺点比较"><a href="#三种方法优缺点比较" class="headerlink" title="三种方法优缺点比较:"></a>三种方法优缺点比较:</h3><ul><li><p>方法1 中做法a比较好用,可以使用系统自带的cell, 但是需要添加一个view,设置背景颜色和frame. 而做法b仅仅为了分隔线却还必须再自定义cell, 重写drawRect,又显得麻烦;</p></li><li><p>方法2比较取巧,但是也需要自定义cell,在某些情况下不允许改变tableView的背景色,使用场景有限;</p></li><li><p>方法3不需要自定义cell,对系统(iOS7,iOS8以上)做个简单判断即可.可惜网上很多文章写的不对,很多人不会正确使用,有些会用的人也说不清楚原理,只管复制粘贴.<br>比如网上流传的一般是这样,需要四步,虽然真的管用,但多了一步<code>[cell setSeparatorInset:UIEdgeInsetsZero];</code>而且原理也没讲,估计是某大神写的,根本不屑于过多解释,让我用起来很郁闷,网上流传代码:</p></li></ul><pre class=" language-objc"><code class="language-objc">首先在viewDidLoad方法中加上如下代码：-(void)viewDidLoad {    [super viewDidLoad];    if ([self.tableView respondsToSelector:@selector(setSeparatorInset:)]) {    [self.tableView setSeparatorInset:UIEdgeInsetsZero];    }    if ([self.tableView respondsToSelector:@selector(setLayoutMargins:)]) {    [self.tableView setLayoutMargins:UIEdgeInsetsZero];}然后在willDisplayCell方法中加入如下代码：- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath{    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {        [cell setSeparatorInset:UIEdgeInsetsZero];   }    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {        [cell setLayoutMargins:UIEdgeInsetsZero];    }}</code></pre><hr><h3 id="分割线不能全屏原理解析"><a href="#分割线不能全屏原理解析" class="headerlink" title="分割线不能全屏原理解析"></a>分割线不能全屏原理解析</h3><ul><li><p>其实关于分隔线不能全屏的原理,苹果官方在文件中已经说明了,可以去看一下</p></li><li><p>在iOS7之前系统默认就是全屏的,iOS7时<code>UITableView</code>多了<code>separatorInset</code>属性,可在<code>UITableView</code>的头文件中查看,如下:</p></li></ul><pre class=" language-objc"><code class="language-objc">@property (nonatomic) UIEdgeInsets separatorInset NS_AVAILABLE_IOS(7_0) UI_APPEARANCE_SELECTOR; // allows customization of the frame of cell separators</code></pre><ul><li><p>iOS7时只要设置该属性为<code>UIEdgeInsetsZero</code>就没有问题了.</p></li><li><p>iOS8之后仅仅完成以上设置就不行了,仔细查看后发现iOS8的<code>UIView</code><br>的头文件里又多了个<code>layoutMargins</code>属性,并有官方注释</p></li></ul><pre><code>@property (nonatomic) UIEdgeInsets layoutMargins NS_AVAILABLE_IOS(8_0);</code></pre><pre><code>/* -layoutMargins returns a set of insets from the edge of the view&#39;s bounds that denote a default spacing for laying out content. If preservesSuperviewLayoutMargins is YES, margins cascade down the view tree, adjusting for geometry offsets, so that setting the left value of layoutMargins on a superview will affect the left value of layoutMargins for subviews positioned close to the left edge of their superview&#39;s bounds If your view subclass uses layoutMargins in its layout or drawing, override -layoutMarginsDidChange in order to refresh your view if the margins change. */大意是说:layoutMargins是view的bounds的边距,用来调整内容默认边距如果preservesSuperviewLayoutMargins属性是YES,那么设置父控件的layoutMargins边距,就会影响所有子控件的相对于父控件bounds的layoutMargins边距如果你的view的子类在布局或者绘图中使用了layoutMargins属性,需要重写-layoutMarginsDidChange 方法,以便当边距改变时能刷新你的view</code></pre><p>正是因为layoutMargins是UIView的新增属性,tablet和cell作为UIView的子类都有这个属性,所以相比较iOS7系统,iOS8之后就多了两步,必须同时再对tableView和cell的layoutMargins属性进行处理,才能让分隔线真正全屏.</p><p>同时官方注释中对preservesSuperviewLayoutMargins(意即:维持父控件的布局边距)属性的说明,也正好能说明网上另一种方法不设置<code>self.tableView.layoutMargins = UIEdgeInsetsZero;</code>而是设置<code>cell.preservesSuperviewLayoutMargins = NO;</code>为什么也能起作用</p><p>弄清楚了这些原理,就可以更好的记忆和使用这些方法,不用每次都去旧代码查找或者去百度了.</p><p>说到了最后,不知道大家有没有觉得影响分隔线全屏的元凶layoutMargins属性 稍微有点眼熟呢?其实它在另一个地方也做了不少恶,就在storyboard中:</p><img src="/2018/09/17/UITableView的分割线设置及不能全屏原因/layoutMargins.png" width="300" title="layoutMargins"><hr><p>PS:附效果图如下:</p><p>设置之前效果图:</p><img src="/2018/09/17/UITableView的分割线设置及不能全屏原因/1.png" width="300"><p>设置完第1步<code>self.tableView.separatorInset = UIEdgeInsetsZero;</code>后效果图:</p><img src="/2018/09/17/UITableView的分割线设置及不能全屏原因/2.png" width="300"><p>设置完第2步<code>self.tableView.layoutMargins = UIEdgeInsetsZero;</code>后效果图:</p><img src="/2018/09/17/UITableView的分割线设置及不能全屏原因/3.png" width="300"><p>设置完第3步<code>cell.layoutMargins = UIEdgeInsetsZero;</code>后效果图:</p><img src="/2018/09/17/UITableView的分割线设置及不能全屏原因/4.png" width="300"><blockquote><p>由于笔者水平有限，文中如果有错误的地方，或者有更好的方法，还望大神指出。<br>附上本文的所有 demo 下载链接，<a href="https://github.com/honkerSK/SKiOSDemo/tree/master/03-tableViewSeparatorDemo" target="_blank" rel="noopener">【GitHub】</a>。<br>如果你看完后觉得对你有所帮助，还望在 GitHub 上点个 star。赠人玫瑰，手有余香。</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理</title>
      <link href="/2018/09/15/UITableViewStylePlain%E5%92%8CUITableViewStyleGrouped%E6%A0%B7%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E6%95%88%E6%9E%9C%E5%A4%84%E7%90%86/"/>
      <url>/2018/09/15/UITableViewStylePlain%E5%92%8CUITableViewStyleGrouped%E6%A0%B7%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E6%95%88%E6%9E%9C%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote><p>创建UITableView 时, 需要设置TableView样式, 默认有两种样式:UITableViewStylePlain, UITableViewStyleGrouped</p></blockquote><pre><code>UITableView *tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) style: UITableViewStyleGrouped]</code></pre><p>下面先介绍下, 这两种样式以及区别:</p><h3 id="一-UITableView样式介绍"><a href="#一-UITableView样式介绍" class="headerlink" title="一. UITableView样式介绍"></a>一. UITableView样式介绍</h3><h4 id="UITableViewStylePlain-介绍"><a href="#UITableViewStylePlain-介绍" class="headerlink" title="UITableViewStylePlain 介绍"></a>UITableViewStylePlain 介绍</h4><p>在tableView的UITableViewStylePlain中，当一个section的rows有一部分可见时，section的header和footer浮动在内容顶部。plain style的tableView可以有一个section索引，作为一个bar在table的右边(例如A ~ Z)。你可以点击一个特定的标签，跳转到目标section。<br>例如下图：</p><img src="/2018/09/15/UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理/contacts.png" width="300" title="[contacts]"><h4 id="UITableViewStyleGroup-介绍"><a href="#UITableViewStyleGroup-介绍" class="headerlink" title="UITableViewStyleGroup 介绍"></a>UITableViewStyleGroup 介绍</h4><p>在tableView的UITableViewStyleGroup中，所有单元格拥有一个默认的背景颜色和默认背景视图。背景视图为特定section中的所有cell提供可视分组。例如，一个group可以是一个人的名字和标题，另一个group可以是电话,电子邮件帐户等。可参考iphone“设置”程序。<br>例如下图：</p><img src="/2018/09/15/UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理/settings.png" width="300" title="[settings]"><img src="/2018/09/15/UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理/accessibility.png" width="300" title="[accessibility]"><p>Group类型默认设置tableView灰色背景色，cell为白色背景色，section外边缘设置浅灰色边框，cell设置浅灰色间隔线。如下图：</p><img src="/2018/09/15/UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理/wechat.png" width="300" title="[wechat]"><h3 id="二-区别总结："><a href="#二-区别总结：" class="headerlink" title="二:区别总结："></a>二:区别总结：</h3><h4 id="UITableViewStylePlain使用"><a href="#UITableViewStylePlain使用" class="headerlink" title="UITableViewStylePlain使用"></a>UITableViewStylePlain使用</h4><p>1.plain类型有多段时，滚动时Section Header 在顶部停留，有些界面比如设置界面，这些新特性将显得多余。（自带效果）</p><p>2.plain类型默认section之间没有中间的间距和头部间距（想让plain类型的section之间留有空白，需要在UITableView代理方法中return自定义的headerView和footerView，并在自定义的headerView 和 footerView 里面重写setFrame方法）</p><h5 id="解决方案：让plain类型的UITableView的section头部视图不停留（取消粘性效果）"><a href="#解决方案：让plain类型的UITableView的section头部视图不停留（取消粘性效果）" class="headerlink" title="解决方案：让plain类型的UITableView的section头部视图不停留（取消粘性效果）"></a>解决方案：让plain类型的UITableView的section头部视图不停留（取消粘性效果）</h5><ul><li>方法一: 网上好多都是这个方法. 这个代码是通过scroll偏移量来监听和改变你的tableView的contentInset 可见很不好（试试就知道）</li></ul><pre class=" language-objc"><code class="language-objc">//去掉UItableview headerview黏性(sticky)- (void)scrollViewDidScroll:(UIScrollView *)scrollView {    CGFloat sectionHeaderHeight = 30;    if (scrollView.contentOffset.y <= sectionHeaderHeight&&scrollView.contentOffset.y>=0) {        scrollView.contentInset = UIEdgeInsetsMake(-scrollView.contentOffset.y, 0, 0, 0);    } else if (scrollView.contentOffset.y >= sectionHeaderHeight) {        scrollView.contentInset = UIEdgeInsetsMake(-sectionHeaderHeight, 0, 0, 0);    }}</code></pre><ul><li>方法二: 在自定义section的headerView中, 重写setFrame: 方法来重载table的section.<ul><li>注意:setFrame方法中需要拿到重载的table和section!</li></ul></li></ul><pre class=" language-objc"><code class="language-objc">- (void)setFrame:(CGRect)frame {        CGRect sectionRect = [self.tableView rectForSection:self.section];    CGRect newFrame = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(sectionRect), CGRectGetWidth(frame), CGRectGetHeight(frame));     [super setFrame:newFrame];}</code></pre><h4 id="UITableViewStyleGroup-使用"><a href="#UITableViewStyleGroup-使用" class="headerlink" title="UITableViewStyleGroup 使用"></a>UITableViewStyleGroup 使用</h4><h5 id="解决方案：去掉-UITableViewStyleGroup类型的多余间距"><a href="#解决方案：去掉-UITableViewStyleGroup类型的多余间距" class="headerlink" title="解决方案：去掉 UITableViewStyleGroup类型的多余间距"></a>解决方案：去掉 UITableViewStyleGroup类型的多余间距</h5><img src="/2018/09/15/UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理/scene1.png" width="300" title="[scene1]"><h5 id="应用场景一-sction的头部视图和尾部视图-无任何内容"><a href="#应用场景一-sction的头部视图和尾部视图-无任何内容" class="headerlink" title="应用场景一:  sction的头部视图和尾部视图,无任何内容"></a>应用场景一:  sction的头部视图和尾部视图,无任何内容</h5><ul><li>此应用场景需要分两步做:<br><strong>第一步: 处理第一个section上边多余间距(2种方法)</strong></li><li>方法一: tableView的tableHeaderView属性<ul><li>注意: 设置tableView头部视图的高度为特小值，但不能为零，若为零的话，iOS会取默认值，就无法消除头部间距了。</li></ul></li></ul><pre class=" language-objc"><code class="language-objc">- (void)viewDidLoad {  //设置代理    tableView.delegate = self;  //隐藏UITableViewStyleGrouped上边多余的间隔  tableView.tableHeaderView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 0, CGFLOAT_MIN)];}</code></pre><ul><li>方法二: 设置顶部额滚动区域 </li></ul><pre class=" language-objc"><code class="language-objc">tableView.contentInset = UIEdgeInsetsMake(-20, 0, 0, 0);</code></pre><ul><li>补充: 属性tableHeaderView和contentInset 结合使用, 可以设置表格第一个cell顶到最顶部</li></ul><pre class=" language-objc"><code class="language-objc">  tableView.tableHeaderView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 0, CGFLOAT_MIN)];    tableView.contentInset = UIEdgeInsetsMake(-20, 0, 0, 0);</code></pre><p><strong>第二步: 处理每个section下边多余间距(2种方法)</strong></p><ul><li><p>Group样式, 默认每一组都会有头部和尾部间距, 这两个间距保留一个就可以了.另一个间距设置为0.</p></li><li><p>方法一: tableView 属性sectionHeaderHeight 和 属性sectionFooterHeight , 处理多余间距</p></li></ul><pre class=" language-objc"><code class="language-objc">    //设置tableView主间距为20    tableView.sectionHeaderHeight = 0;    tableView.sectionFooterHeight = 20;</code></pre><ul><li>方法二: 调用tableView的代理方法 , 设置尾部视图的高度，<ul><li>注意: 去掉的视图, 返回值不能为0，否则系统启用默认值。返回的高度使用极小值CGFLOAT_MIN。</li><li>注意2: 调用下面两个tableView代理方法后, sectionHeaderHeight属性和sectionFooterHeight属性设置的值失效.</li></ul></li></ul><pre><code>- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{    return 44;}// 注意:return height 为 0，则 height 被设置成默认值- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{    return CGFLOAT_MIN;}</code></pre><img src="/2018/09/15/UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理/scene2.png" width="300" title="[scene2]"><h5 id="应用场景二-sction有头部标题-尾部标题"><a href="#应用场景二-sction有头部标题-尾部标题" class="headerlink" title="应用场景二:  sction有头部标题 尾部标题"></a>应用场景二:  sction有头部标题 尾部标题</h5><p>此应用场景两种方法取其一, 可以同时处理section顶部间距和中间间距</p><ul><li>方法一: 设置 tableView 属性sectionHeaderHeight 和 属性sectionFooterHeight , 可同时处理section多余顶部间距和中间间距</li></ul><pre class=" language-objc"><code class="language-objc">tableView.sectionHeaderHeight = 30;tableView.sectionFooterHeight = 0;</code></pre><ul><li>方法二:调用tableView的代理方法 , 设置头部视图和尾部视图的高度</li></ul><pre class=" language-objc"><code class="language-objc">//第二步:隐藏UITableViewStyleGrouped下边多余的间隔- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{    return 30;}// 注意:此时可以设置为0- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{    return 0;}</code></pre><img src="/2018/09/15/UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理/scene3.png" width="300" title="[scene3]"><h5 id="应用场景三-section自定义头部视图和尾部视图"><a href="#应用场景三-section自定义头部视图和尾部视图" class="headerlink" title="应用场景三:  section自定义头部视图和尾部视图"></a>应用场景三:  section自定义头部视图和尾部视图</h5><ul><li>调用下面tableView代理方法 自定义头部视图和尾部视图后, 不需要做顶部间距处理, 第一个section头部视图会自动顶到最顶部.</li></ul><pre class=" language-objc"><code class="language-objc">- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section{}- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section{}</code></pre><ul><li>中间间距 只需要通过tableView代理方法, 调整头部视图或者尾部视图各自的高度即可.</li></ul><pre class=" language-objc"><code class="language-objc">- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{    return 30;}//注意:此时可以设置为0- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{    return 0;}</code></pre><hr><h3 id="三-在-Storyboard-中-0-代码搞定顶部多余间距"><a href="#三-在-Storyboard-中-0-代码搞定顶部多余间距" class="headerlink" title="三. 在 Storyboard 中 0 代码搞定顶部多余间距"></a>三. 在 Storyboard 中 0 代码搞定顶部多余间距</h3><p>没用 Storyboard 的同学使用上面的代码就 OK 了；<br>而在 Storyboard 中可以 0 代码搞定这个事： </p><p>首先，在第一个 Section 的上面拖进来一个空 UIView </p><img src="/2018/09/15/UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理/storyboard1.jpg" width="300" title="[storyboard]"><p>然后选中这个 UIView 的 Runtime Attributes 栏，添加一个 <code>frame</code> 的 KeyPath </p><img src="/2018/09/15/UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理/runtime.jpg" width="300" title="[runtime]"><p>这样头部的间隔就乖乖的不见了： </p><img src="/2018/09/15/UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理/pay.jpg" width="300" title="[pay]"><h4 id="刨根问底-UITableViewHeader-的猫腻"><a href="#刨根问底-UITableViewHeader-的猫腻" class="headerlink" title="刨根问底 UITableViewHeader 的猫腻"></a>刨根问底 UITableViewHeader 的猫腻</h4><p>为什么刚才说 0.1 和 CGFLOAT_MIN 是等效的呢？经过研究，这个高度值的影响大概是这样的：</p><ol><li>若传入的 height == 0，则 height 被设置成默认值</li><li>若 height 小于屏幕半像素对应的高度，这个 header 不在另一个像素渲染</li></ol><p>半像素也就是 <code>1.0 / scale / 2.0</code>，如在 @2x 屏上是 0.25<br>直观的感受下，假如这个 height 被设置成 0.5 的样子：</p><img src="/2018/09/15/UITableViewStylePlain和UITableViewStyleGrouped样式的区别及效果处理/color.jpg" width="300" title="[color]"><p>导航栏下面的阴影线看上去宽了 0.5 像素的，Done。</p><blockquote><p>由于笔者水平有限，文中如果有错误的地方，或者有更好的方法，还望大神指出。<br>附上本文的所有 demo 下载链接，<a href="https://github.com/honkerSK/SKiOSDemo/tree/master/04-clearTableViewPlainAndGroupDemo" target="_blank" rel="noopener">【GitHub】</a>。<br>如果你看完后觉得对你有所帮助，还望在 GitHub 上点个 star。赠人玫瑰，手有余香。</p></blockquote>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>runtime使用示例代码</title>
      <link href="/2018/09/13/runtime%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/09/13/runtime%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h3 id="一、runtime简介"><a href="#一、runtime简介" class="headerlink" title="一、runtime简介"></a>一、runtime简介</h3><ul><li>RunTime简称运行时。OC就是<code>运行时机制</code>，也就是在运行时候的一些机制，其中最主要的是消息机制。</li><li>对于C语言，<code>函数的调用在编译的时候会决定调用哪个函数</code>。</li><li>对于OC的函数，属于<code>动态调用过程</code>，在编译的时候并不能决定真正调用哪个函数，只有在真正运行的时候才会根据函数的名称找到对应的函数来调用。</li><li>事实证明：<ul><li>在编译阶段，OC可以<code>调用任何函数</code>，即使这个函数并未实现，只要声明过就不会报错。</li><li>在编译阶段，C语言调用<code>未实现的函数</code>就会报错。</li></ul></li></ul><h3 id="二、runtime作用"><a href="#二、runtime作用" class="headerlink" title="二、runtime作用"></a>二、runtime作用</h3><h4 id="1-发送消息"><a href="#1-发送消息" class="headerlink" title="1.发送消息"></a>1.发送消息</h4><ul><li>方法调用的本质，就是让对象发送消息。</li><li>objc_msgSend,只有对象才能发送消息，因此以objc开头.</li><li>使用<code>消息机制</code>前提，必须导入#import &lt;objc/message.h&gt;</li><li>消息机制简单使用</li></ul><pre class=" language-objc"><code class="language-objc">    // 创建person对象    Person *p = [[Person alloc] init];    // 调用对象方法    [p eat];    // 本质：让对象发送消息    objc_msgSend(p, @selector(eat));    // 调用类方法的方式：两种    // 第一种通过类名调用    [Person eat];    // 第二种通过类对象调用    [[Person class] eat];    // 用类名调用类方法，底层会自动把类名转换成类对象调用    // 本质：让类对象发送消息    objc_msgSend([Person class], @selector(eat));</code></pre><ul><li>消息机制原理:对象根据方法编号SEL去映射表查找对应的方法实现</li></ul><img src="/2018/09/13/runtime使用示例代码/1.png"><h4 id="2-交换方法"><a href="#2-交换方法" class="headerlink" title="2.交换方法"></a>2.交换方法</h4><ul><li>开发使用场景:系统自带的方法功能不够，给系统自带的方法扩展一些功能，并且保持原有的功能。</li><li>方式一:继承系统的类，重写方法.</li><li>方式二:使用runtime,交换方法.</li></ul><pre class=" language-objc"><code class="language-objc">@implementation ViewController- (void)viewDidLoad {    [super viewDidLoad];    // Do any additional setup after loading the view, typically from a nib.    // 需求：给imageNamed方法提供功能，每次加载图片就判断下图片是否加载成功。    // 步骤一：先搞个分类，定义一个能加载图片并且能打印的方法+ (instancetype)imageWithName:(NSString *)name;    // 步骤二：交换imageNamed和imageWithName的实现，就能调用imageWithName，间接调用imageWithName的实现。    UIImage *image = [UIImage imageNamed:@"123"];}@end@implementation UIImage (Image)// 加载分类到内存的时候调用+ (void)load {    // 交换方法    // 获取imageWithName方法地址    Method imageWithName = class_getClassMethod(self, @selector(imageWithName:));    // 获取imageWithName方法地址    Method imageName = class_getClassMethod(self, @selector(imageNamed:));    // 交换方法地址，相当于交换实现方式    method_exchangeImplementations(imageWithName, imageName);}// 不能在分类中重写系统方法imageNamed，因为会把系统的功能给覆盖掉，而且分类中不能调用super.// 既能加载图片又能打印+ (instancetype)imageWithName:(NSString *)name {    // 这里调用imageWithName，相当于调用imageName    UIImage *image = [self imageWithName:name];    if (image == nil) {        NSLog(@"加载空的图片");    }    return image;}@end</code></pre><ul><li><p>交换原理：</p><ul><li><p>交换之前：</p><img src="/2018/09/13/runtime使用示例代码/2.png"><ul><li>交换之后：<img src="/2018/09/13/runtime使用示例代码/3.png"></li></ul></li></ul></li></ul><h4 id="3-动态添加方法"><a href="#3-动态添加方法" class="headerlink" title="3.动态添加方法"></a>3.动态添加方法</h4><ul><li>开发使用场景：如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类，添加方法解决。</li><li>经典面试题：有没有使用performSelector，其实主要想问你有没有动态添加过方法。</li><li>简单使用</li></ul><pre class=" language-objc"><code class="language-objc">@implementation ViewController- (void)viewDidLoad {    [super viewDidLoad];    // Do any additional setup after loading the view, typically from a nib.    Person *p = [[Person alloc] init];    // 默认person，没有实现eat方法，可以通过performSelector调用，但是会报错。    // 动态添加方法就不会报错    [p performSelector:@selector(eat)];}@end@implementation Person// void(*)()// 默认方法都有两个隐式参数，void eat(id self,SEL sel) {    NSLog(@"%@ %@",self,NSStringFromSelector(sel));}// 当一个对象调用未实现的方法，会调用这个方法处理,并且会把对应的方法列表传过来.// 刚好可以用来判断，未实现的方法是不是我们想要动态添加的方法+ (BOOL)resolveInstanceMethod:(SEL)sel {    if (sel == @selector(eat)) {        // 动态添加eat方法        // 第一个参数：给哪个类添加方法        // 第二个参数：添加方法的方法编号        // 第三个参数：添加方法的函数实现（函数地址）        // 第四个参数：函数的类型，(返回值+参数类型) v:void @:对象->self :表示SEL->_cmd        class_addMethod(self, @selector(eat), eat, "v@:");    }    return [super resolveInstanceMethod:sel];}@end</code></pre><h4 id="4-给分类添加属性"><a href="#4-给分类添加属性" class="headerlink" title="4.给分类添加属性"></a>4.给分类添加属性</h4><ul><li>原理：给一个类声明属性，其实本质就是给这个类添加关联，并不是直接把这个值的内存空间添加到类存空间。</li></ul><pre class=" language-objc"><code class="language-objc">@implementation ViewController- (void)viewDidLoad {    [super viewDidLoad];    // Do any additional setup after loading the view, typically from a nib.    // 给系统NSObject类动态添加属性name    NSObject *objc = [[NSObject alloc] init];    objc.name = @"乔布斯";    NSLog(@"%@",objc.name);}@end// 定义关联的keystatic const char *key = "name";@implementation NSObject (Property)- (NSString *)name {    // 根据关联的key，获取关联的值。    return objc_getAssociatedObject(self, key);}- (void)setName:(NSString *)name {    // 第一个参数：给哪个对象添加关联    // 第二个参数：关联的key，通过这个key获取    // 第三个参数：关联的value    // 第四个参数:关联的策略    objc_setAssociatedObject(self, key, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);}@end</code></pre><h4 id="5-字典转模型"><a href="#5-字典转模型" class="headerlink" title="5.字典转模型"></a>5.字典转模型</h4><ul><li>设计模型：字典转模型的第一步<ul><li>模型属性，通常需要跟字典中的key一一对应</li><li>问题：一个一个的生成模型属性，很慢？</li><li>需求：能不能自动根据一个字典，生成对应的属性。</li><li>解决：提供一个分类，专门根据字典生成对应的属性字符串。</li></ul></li></ul><pre class=" language-objc"><code class="language-objc">    @implementation NSObject (Log)// 自动打印属性字符串+ (void)resolveDict:(NSDictionary *)dict {    // 拼接属性字符串代码    NSMutableString *strM = [NSMutableString string];    // 1.遍历字典，把字典中的所有key取出来，生成对应的属性代码    [dict enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {        // 类型经常变，抽出来         NSString *type;        if ([obj isKindOfClass:NSClassFromString(@"__NSCFString")]) {            type = @"NSString";        }else if ([obj isKindOfClass:NSClassFromString(@"__NSCFArray")]){            type = @"NSArray";        }else if ([obj isKindOfClass:NSClassFromString(@"__NSCFNumber")]){            type = @"int";        }else if ([obj isKindOfClass:NSClassFromString(@"__NSCFDictionary")]){            type = @"NSDictionary";        }        // 属性字符串        NSString *str;        if ([type containsString:@"NS"]) {            str = [NSString stringWithFormat:@"@property (nonatomic, strong) %@ *%@;",type,key];        }else{            str = [NSString stringWithFormat:@"@property (nonatomic, assign) %@ %@;",type,key];        }        // 每生成属性字符串，就自动换行。        [strM appendFormat:@"\n%@\n",str];    }];    // 把拼接好的字符串打印出来，就好了。    NSLog(@"%@",strM);}@end</code></pre><ul><li>字典转模型的方式一：KVC</li></ul><pre class=" language-objc"><code class="language-objc">@implementation Status+ (instancetype)statusWithDict:(NSDictionary *)dict {    Status *status = [[self alloc] init];    [status setValuesForKeysWithDictionary:dict];    return status;}@end</code></pre><ul><li>KVC字典转模型弊端：必须保证，模型中的属性和字典中的key一一对应。<ul><li>如果不一致，就会调用<code>[&lt;Status 0x7fa74b545d60&gt; setValue:forUndefinedKey:]</code><br>报<code>key</code>找不到的错。</li><li>分析:模型中的属性和字典的key不一一对应，系统就会调用<code>setValue:forUndefinedKey:</code>报错。</li><li>解决:重写对象的<code>setValue:forUndefinedKey:</code>,把系统的方法覆盖，<br>就能继续使用KVC，字典转模型了。</li></ul></li></ul><pre class=" language-objc"><code class="language-objc">- (void)setValue:(id)value forUndefinedKey:(NSString *)key {}</code></pre><ul><li>字典转模型的方式二：Runtime<ul><li>思路：利用运行时，遍历模型中所有属性，根据模型的属性名，去字典中查找key，取出对应的值，给模型的属性赋值。</li><li>步骤：提供一个NSObject分类，专门字典转模型，以后所有模型都可以通过这个分类转。</li></ul></li></ul><pre class=" language-objc"><code class="language-objc">@implementation ViewController- (void)viewDidLoad {    [super viewDidLoad];    // Do any additional setup after loading the view, typically from a nib.    // 解析Plist文件    NSString *filePath = [[NSBundle mainBundle] pathForResource:@"status.plist" ofType:nil];    NSDictionary *statusDict = [NSDictionary dictionaryWithContentsOfFile:filePath];    // 获取字典数组    NSArray *dictArr = statusDict[@"statuses"];    // 自动生成模型的属性字符串//    [NSObject resolveDict:dictArr[0][@"user"]];    _statuses = [NSMutableArray array];    // 遍历字典数组    for (NSDictionary *dict in dictArr) {        Status *status = [Status modelWithDict:dict];        [_statuses addObject:status];    }    // 测试数据    NSLog(@"%@ %@",_statuses,[_statuses[0] user]);}@end@implementation NSObject (Model)+ (instancetype)modelWithDict:(NSDictionary *)dict {    // 思路：遍历模型中所有属性-》使用运行时    // 0.创建对应的对象    id objc = [[self alloc] init];    // 1.利用runtime给对象中的成员属性赋值    // class_copyIvarList:获取类中的所有成员属性    // Ivar：成员属性的意思    // 第一个参数：表示获取哪个类中的成员属性    // 第二个参数：表示这个类有多少成员属性，传入一个Int变量地址，会自动给这个变量赋值    // 返回值Ivar *：指的是一个ivar数组，会把所有成员属性放在一个数组中，通过返回的数组就能全部获取到。    /* 类似下面这种写法     Ivar ivar;     Ivar ivar1;     Ivar ivar2;     // 定义一个ivar的数组a     Ivar a[] = {ivar,ivar1,ivar2};     // 用一个Ivar *指针指向数组第一个元素     Ivar *ivarList = a;     // 根据指针访问数组第一个元素     ivarList[0];     */    unsigned int count;    // 获取类中的所有成员属性    Ivar *ivarList = class_copyIvarList(self, &count);    for (int i = 0; i < count; i++) {        // 根据角标，从数组取出对应的成员属性        Ivar ivar = ivarList[i];        // 获取成员属性名        NSString *name = [NSString stringWithUTF8String:ivar_getName(ivar)];        // 处理成员属性名->字典中的key        // 从第一个角标开始截取        NSString *key = [name substringFromIndex:1];        // 根据成员属性名去字典中查找对应的value        id value = dict[key];        // 二级转换:如果字典中还有字典，也需要把对应的字典转换成模型        // 判断下value是否是字典        if ([value isKindOfClass:[NSDictionary class]]) {            // 字典转模型            // 获取模型的类对象，调用modelWithDict            // 模型的类名已知，就是成员属性的类型            // 获取成员属性类型           NSString *type = [NSString stringWithUTF8String:ivar_getTypeEncoding(ivar)];          // 生成的是这种@"@\"User\"" 类型 -》 @"User"  在OC字符串中 \" -> "，\是转义的意思，不占用字符            // 裁剪类型字符串            NSRange range = [type rangeOfString:@"\""];           type = [type substringFromIndex:range.location + range.length];            range = [type rangeOfString:@"\""];            // 裁剪到哪个角标，不包括当前角标          type = [type substringToIndex:range.location];            // 根据字符串类名生成类对象            Class modelClass = NSClassFromString(type);            if (modelClass) { // 有对应的模型才需要转                // 把字典转模型                value  =  [modelClass modelWithDict:value];            }        }        // 三级转换：NSArray中也是字典，把数组中的字典转换成模型.        // 判断值是否是数组        if ([value isKindOfClass:[NSArray class]]) {            // 判断对应类有没有实现字典数组转模型数组的协议            if ([self respondsToSelector:@selector(arrayContainModelClass)]) {                // 转换成id类型，就能调用任何对象的方法                id idSelf = self;                // 获取数组中字典对应的模型                NSString *type =  [idSelf arrayContainModelClass][key];                // 生成模型               Class classModel = NSClassFromString(type);                NSMutableArray *arrM = [NSMutableArray array];                // 遍历字典数组，生成模型数组                for (NSDictionary *dict in value) {                    // 字典转模型                  id model =  [classModel modelWithDict:dict];                    [arrM addObject:model];                }                // 把模型数组赋值给value                value = arrM;            }        }        if (value) { // 有值，才需要给模型的属性赋值            // 利用KVC给模型中的属性赋值            [objc setValue:value forKey:key];        }    }    return objc;}@end</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>const,static,extern区别</title>
      <link href="/2018/09/12/const-static-extern%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/09/12/const-static-extern%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h3 id="一、const与宏的区别（面试题）"><a href="#一、const与宏的区别（面试题）" class="headerlink" title="一、const与宏的区别（面试题）:"></a>一、const与宏的区别（面试题）:</h3><ul><li><p><code>const简介</code>:之前常用的字符串常量，一般是抽成宏，但是苹果不推荐我们抽成宏，推荐我们使用const常量。</p><ul><li><code>执行时刻</code>:宏是预编译（编译之前处理），const是编译阶段。</li><li><code>编译检查</code>:宏不做检查，不会报编译错误，只是替换，const会编译检查，会报编译错误。</li><li><code>宏的好处</code>:宏能定义一些函数，方法。 const不能。</li><li><code>宏的坏处</code>:使用大量宏，容易造成编译时间久，每次都需要重新替换。</li></ul><p>注意:很多Blog都说使用宏，会消耗很多内存，我这验证并不会生成很多内存，宏定义的是常量，常量都放在常量区，只会生成一份内存。</p></li></ul><pre class=" language-objc"><code class="language-objc">//常见常量: 抽成宏#define SKAccount @"account123"//字符串变量static NSString *const account = @"account123";@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad {    [super viewDidLoad];    NSString *str = SKAccount;    NSString *str2 = SKAccount;    NSLog(@"%p %p", str, str2);     //打印结果 0x10c7ba068 0x10c7ba068}</code></pre><pre class=" language-objc"><code class="language-objc">// 常见的常量：抽成宏#define Account @"account"#define UserDefault [NSUserDefaults standardUserDefaults]// 字符串常量static NSString * const account = @"account";- (void)viewDidLoad {    [super viewDidLoad];    // 偏好设置存储    // 使用宏    [UserDefault setValue:@"123" forKey:Account];    // 使用const常量    [[NSUserDefaults standardUserDefaults] setValue:@"123" forKey:account];}</code></pre><h3 id="二、const作用：限制类型"><a href="#二、const作用：限制类型" class="headerlink" title="二、const作用：限制类型"></a>二、const作用：限制类型</h3><pre class=" language-c"><code class="language-c"><span class="token operator">*</span>   <span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">const</span>仅仅用来修饰右边的变量（基本数据变量p，指针变量<span class="token operator">*</span>p）<span class="token operator">*</span>   <span class="token number">2</span><span class="token punctuation">.</span>被<span class="token keyword">const</span>修饰的变量是只读的。</code></pre><ul><li>const基本使用</li></ul><pre class=" language-objc"><code class="language-objc">- (void)viewDidLoad {    [super viewDidLoad];    // 定义变量    int a = 1;    // 允许修改值    a = 20;    // const两种用法    // const:修饰基本变量b    // 这两种写法是一样的，const只修饰右边的基本变量b    const int b = 20; // b:只读变量    int const b = 20; // b:只读变量    // 不允许修改值    b = 1;    // const:修饰指针变量*p，带*的变量，就是指针变量.    // 定义一个指向int类型的指针变量，指向a的地址    int *p = &a;    int c = 10;      p = &c;    // 允许修改p指向的地址，    // 允许修改p访问内存空间的值    *p = 20;    // const修饰指针变量访问的内存空间，修饰的是右边*p1，    // 两种方式一样    const int *p1; // *p1：常量 p1:变量    int const *p1; // *p1：常量 p1:变量    // const修饰指针变量p1    int * const p1; // *p1:变量 p1:常量    // 第一个const修饰*p1 第二个const修饰 p1    // 两种方式一样    const int * const p1; // *p1：常量 p1：常量    int const * const p1;  // *p1：常量 p1：常量}</code></pre><h3 id="三、const开发中使用场景"><a href="#三、const开发中使用场景" class="headerlink" title="三、const开发中使用场景:"></a>三、const开发中使用场景:</h3><pre class=" language-objc"><code class="language-objc">*   1.需求1:提供一个方法，这个方法的参数是地址，里面只能通过地址读取值,不能通过地址修改值*   2.需求2:提供一个方法，这个方法的参数是地址，里面不能修改参数的地址。@implementation ViewController// const放*前面约束参数，表示*a只读// 只能修改地址a,不能通过a修改访问的内存空间- (void)test:(const int * )a {//    *a = 20;}// const放*后面约束参数，表示a只读// 不能修改a的地址，只能修改a访问的值- (void)test1:(int * const)a{    int b;    // 会报错    a = &b;    *a = 2;}- (void)viewDidLoad {    [super viewDidLoad];    // Do any additional setup after loading the view, typically from a nib.    int a = 10;    // 需求1:提供一个方法，这个方法的参数是地址，里面只能通过地址读取值,不能通过地址修改值。    // 这时候就需要使用const，约束方法的参数只读.    [self test:&a];    // 需求2:提供一个方法，这个方法的参数是地址，里面不能修改参数的地址。    [self test1:&a];}@end</code></pre><h3 id="四、static和extern简单使用-要使用一个东西，先了解其作用"><a href="#四、static和extern简单使用-要使用一个东西，先了解其作用" class="headerlink" title="四、static和extern简单使用(要使用一个东西，先了解其作用)"></a>四、static和extern简单使用(要使用一个东西，先了解其作用)</h3><ul><li><p>static作用: </p><ul><li><p>修饰局部变量：</p><p>1.延长局部变量的生命周期,程序结束才会销毁。</p><p>2.局部变量只会生成一份内存,只会初始化一次。</p><p>3.改变局部变量的作用域。</p></li><li><p>修饰全局变量</p><p>1.只能在本文件中访问,修改全局变量的作用域,生命周期不会改</p><p>2.避免重复定义全局变量</p></li></ul></li><li><p>extern作用:</p><ul><li>只是用来获取全局变量(包括全局静态变量)的值，不能用于定义变量</li></ul></li><li><p>extern工作原理:</p><ul><li>先在当前文件查找有没有全局变量，没有找到，才会去其他文件查找。</li></ul></li></ul><pre class=" language-objc"><code class="language-objc">// 全局变量：只有一份内存，所有文件共享，与extern联合使用。int a = 20;// static修饰全局变量static int age = 20;- (void)test {    // static修饰局部变量    static int age = 0;    age++;    NSLog(@"%d",age);}- (void)viewDidLoad {    [super viewDidLoad];    // Do any additional setup after loading the view, typically from a nib.    [self test];    [self test];    extern int age;    NSLog(@"%d",age);}</code></pre><h3 id="五、static与const联合使用"><a href="#五、static与const联合使用" class="headerlink" title="五、static与const联合使用"></a>五、static与const联合使用</h3><ul><li>static与const作用:声明一个只读的静态变量</li><li>开发使用场景:在<code>一个文件中</code>经常使用的字符串常量，可以使用static与const组合</li></ul><pre class=" language-objc"><code class="language-objc">// 开发中常用static修饰全局变量,只改变作用域// 为什么要改变全局变量作用域，防止重复声明全局变量。// 开发中声明的全局变量，有些不希望外界改动，只允许读取。// 比如一个基本数据类型不希望别人改动// 声明一个静态的全局只读常量static const int a = 20;// staic和const联合的作用:声明一个静态的全局只读常量// iOS中staic和const常用使用场景，是用来代替宏，把一个经常使用的字符串常量，定义成静态全局只读变量.// 开发中经常拿到key修改值，因此用const修饰key,表示key只读，不允许修改。static  NSString * const key = @"name";// 如果 const修饰 *key1,表示*key1只读，key1还是能改变。static  NSString const *key1 = @"name";</code></pre><h3 id="六、extern与const联合使用"><a href="#六、extern与const联合使用" class="headerlink" title="六、extern与const联合使用"></a>六、extern与const联合使用</h3><ul><li>开发中使用场景:在<code>多个文件中</code>经常使用的同一个字符串常量，可以使用extern与const组合。</li><li>原因: <ul><li>static与const组合：在每个文件都需要定义一份静态全局变量。</li><li>extern与const组合:只需要定义一份全局变量，多个文件共享。</li></ul></li><li><p>全局常量正规写法:开发中便于管理所有的全局变量，通常搞一个GlobeConst文件，里面专门定义全局变量，统一管理，要不然项目文件多不好找。</p></li><li><p>GlobeConst.h</p></li></ul><pre><code>/*******************************首页****************************/extern NSString * const nameKey = @&quot;name&quot;;/*******************************首页****************************/</code></pre><ul><li>GlobeConst.m</li></ul><pre><code>#import &lt;Foundation/Foundation.h&gt;/*******************************首页****************************/NSString * const nameKey = @&quot;name&quot;;/*******************************首页****************************/</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题24--补充</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9824-%E8%A1%A5%E5%85%85/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9824-%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><ul><li>统一建模语言（UML，UnifiedModelingLanguage）是面向对象软件的标准化建模语言。UML因其简单、统一的特点，而且能表达软件设计中的动态和静态信息，目前已成为可视化建模语言的工业标准。在软件无线电系统的开发过程中，统一建模语言可以在整个设计周期中使用，帮助设计者缩短设计时间，减少改进的成本，使软硬件分割最优。</li><li>用例图 静态图 行为图 交互图 实现图</li></ul><h4 id="如果设计一个交易平台，流程如下：A用户在平台P发现B用户有东西出售，P平台的业务逻辑是需要A先付款到P得中间账户，等到A确认收货后，P向B付款，你能尝试某种表示方式来让程序员，产品设计，美术设计明白这个流程么？"><a href="#如果设计一个交易平台，流程如下：A用户在平台P发现B用户有东西出售，P平台的业务逻辑是需要A先付款到P得中间账户，等到A确认收货后，P向B付款，你能尝试某种表示方式来让程序员，产品设计，美术设计明白这个流程么？" class="headerlink" title="如果设计一个交易平台，流程如下：A用户在平台P发现B用户有东西出售，P平台的业务逻辑是需要A先付款到P得中间账户，等到A确认收货后，P向B付款，你能尝试某种表示方式来让程序员，产品设计，美术设计明白这个流程么？"></a>如果设计一个交易平台，流程如下：A用户在平台P发现B用户有东西出售，P平台的业务逻辑是需要A先付款到P得中间账户，等到A确认收货后，P向B付款，你能尝试某种表示方式来让程序员，产品设计，美术设计明白这个流程么？</h4><h4 id="从1-n个五序列的数字中排序的算法有哪些，简单代码实现一个并写出时间复杂度"><a href="#从1-n个五序列的数字中排序的算法有哪些，简单代码实现一个并写出时间复杂度" class="headerlink" title="从1-n个五序列的数字中排序的算法有哪些，简单代码实现一个并写出时间复杂度"></a>从1-n个五序列的数字中排序的算法有哪些，简单代码实现一个并写出时间复杂度</h4><h4 id="有一个6克和21克的砝码，怎样称量三次将420克的糖分成270克和150克"><a href="#有一个6克和21克的砝码，怎样称量三次将420克的糖分成270克和150克" class="headerlink" title="有一个6克和21克的砝码，怎样称量三次将420克的糖分成270克和150克"></a>有一个6克和21克的砝码，怎样称量三次将420克的糖分成270克和150克</h4><h4 id="一桌子人，每个人额头上都贴有标签，绿色和红色，绿色至少1个，大家都能看到别人头上的标签，看不到自己头上的标签，然后开始闭眼游戏，大家觉得自己头上是绿色标签就拍一下手掌，第一次闭眼没人拍掌，第二次，第三次也同样没有人拍掌，第四次有一个人拍掌了，请问绿色标签有几张"><a href="#一桌子人，每个人额头上都贴有标签，绿色和红色，绿色至少1个，大家都能看到别人头上的标签，看不到自己头上的标签，然后开始闭眼游戏，大家觉得自己头上是绿色标签就拍一下手掌，第一次闭眼没人拍掌，第二次，第三次也同样没有人拍掌，第四次有一个人拍掌了，请问绿色标签有几张" class="headerlink" title="一桌子人，每个人额头上都贴有标签，绿色和红色，绿色至少1个，大家都能看到别人头上的标签，看不到自己头上的标签，然后开始闭眼游戏，大家觉得自己头上是绿色标签就拍一下手掌，第一次闭眼没人拍掌，第二次，第三次也同样没有人拍掌，第四次有一个人拍掌了，请问绿色标签有几张"></a>一桌子人，每个人额头上都贴有标签，绿色和红色，绿色至少1个，大家都能看到别人头上的标签，看不到自己头上的标签，然后开始闭眼游戏，大家觉得自己头上是绿色标签就拍一下手掌，第一次闭眼没人拍掌，第二次，第三次也同样没有人拍掌，第四次有一个人拍掌了，请问绿色标签有几张</h4><h4 id="是否使用过coreImage和coreText-如果使用过，说说你的体验"><a href="#是否使用过coreImage和coreText-如果使用过，说说你的体验" class="headerlink" title="是否使用过coreImage和coreText?如果使用过，说说你的体验"></a>是否使用过coreImage和coreText?如果使用过，说说你的体验</h4><ul><li>coreImage是IOS5中新加入的一个Objective-c的框架，提供了强大高效的图像处理功能，用来对基于像素的图像进行操作与分析。</li></ul><h4 id="写一个单项链表逆序"><a href="#写一个单项链表逆序" class="headerlink" title="写一个单项链表逆序"></a>写一个单项链表逆序</h4><h4 id="什么是OpenGL-具体使用"><a href="#什么是OpenGL-具体使用" class="headerlink" title="什么是OpenGL?具体使用"></a>什么是OpenGL?具体使用</h4><h4 id="开启一个其他线程来计算1-1-并且把结果用主线程显示在label上更新UI"><a href="#开启一个其他线程来计算1-1-并且把结果用主线程显示在label上更新UI" class="headerlink" title="开启一个其他线程来计算1+1 并且把结果用主线程显示在label上更新UI"></a>开启一个其他线程来计算1+1 并且把结果用主线程显示在label上更新UI</h4><h4 id="ffmpeg框架"><a href="#ffmpeg框架" class="headerlink" title="ffmpeg框架"></a>ffmpeg框架</h4><h4 id="静态链接库"><a href="#静态链接库" class="headerlink" title="静态链接库"></a>静态链接库</h4><h4 id="init和initwithobject区别（语法）？"><a href="#init和initwithobject区别（语法）？" class="headerlink" title="init和initwithobject区别（语法）？"></a>init和initwithobject区别（语法）？</h4><h4 id="什么是OOP？"><a href="#什么是OOP？" class="headerlink" title="什么是OOP？"></a>什么是OOP？</h4><h4 id="为NSString扩展一个方法，方法能判断字符串是否是Url地址（即判断字符串是否以“http-”），放回BOOL值类型"><a href="#为NSString扩展一个方法，方法能判断字符串是否是Url地址（即判断字符串是否以“http-”），放回BOOL值类型" class="headerlink" title="为NSString扩展一个方法，方法能判断字符串是否是Url地址（即判断字符串是否以“http://”），放回BOOL值类型"></a>为NSString扩展一个方法，方法能判断字符串是否是Url地址（即判断字符串是否以“http://”），放回BOOL值类型</h4><h4 id="写一个iphone程序，有2屏，可以通过滑动切换，第二屏有一个webview，读取本地的html文件，Html文件中会加载一个本地xml文件，获取xml文件中的数据内容并显示。（可选：html中加载的js文件）"><a href="#写一个iphone程序，有2屏，可以通过滑动切换，第二屏有一个webview，读取本地的html文件，Html文件中会加载一个本地xml文件，获取xml文件中的数据内容并显示。（可选：html中加载的js文件）" class="headerlink" title="写一个iphone程序，有2屏，可以通过滑动切换，第二屏有一个webview，读取本地的html文件，Html文件中会加载一个本地xml文件，获取xml文件中的数据内容并显示。（可选：html中加载的js文件）"></a>写一个iphone程序，有2屏，可以通过滑动切换，第二屏有一个webview，读取本地的html文件，Html文件中会加载一个本地xml文件，获取xml文件中的数据内容并显示。（可选：html中加载的js文件）</h4><h4 id="如何避免json解析出现内存泄露，内存泄露后怎么解决"><a href="#如何避免json解析出现内存泄露，内存泄露后怎么解决" class="headerlink" title=".如何避免json解析出现内存泄露，内存泄露后怎么解决"></a>.如何避免json解析出现内存泄露，内存泄露后怎么解决</h4><h4 id="什么情况下会发生内存泄漏和内存溢出？"><a href="#什么情况下会发生内存泄漏和内存溢出？" class="headerlink" title="什么情况下会发生内存泄漏和内存溢出？"></a>什么情况下会发生内存泄漏和内存溢出？</h4><h4 id="有方法查看当前系统内存使用情况吗？"><a href="#有方法查看当前系统内存使用情况吗？" class="headerlink" title="有方法查看当前系统内存使用情况吗？"></a>有方法查看当前系统内存使用情况吗？</h4><ul><li>静态分析 ：通过静态分析我们可以最初步的了解到代码的一些不规范的地方或者是存在的内存泄漏，这是我们第一步对内存泄漏的检测。当然有一些警告并不是我们关心的可以略过。</li><li>通过instruments来检查内存泄漏<br> 这个方法能粗略的定位我们在哪里发生了内存泄漏。方法是完成一个循环操作，如果内存增长为0就证明我们程序在该次循环操作中不存在内存泄漏，如果内存增长不为0那证明有可能存在内存泄漏，当然具体问题需要具体分析。</li><li>代码测试内存泄漏<br> 在做这项工作之前我们要注意一下，在dealloc的方法中我们是否已经释放了该对象所拥有的所有对象。观察对象的生成和销毁是否配对。准确的说就是init（创建对象的方法）和dealloc是否会被成对触发（简单说来就是走一次创建对象就有走一次dealloc该对象）。<br> 下面是自己遇到的一些比较隐秘的造成内存泄漏的情况：<br> 1.两个对象互相拥有：也就是说对象a里面retain/addSubview了b对象，b对象同时也retain/addSubView了a对象。注意：delegate不要用retain属性，要用assign属性也会导致互相拥有。<br> 2.有时候需要用removeFromSuperView来释放：具体说明，也许我的a对象拥有一个b对象，b对象add到了c对象上，而在我们的设计中b对象的生命周期应该和a对象相同；这时候只一句[b release]/self.b = nil是不能把b对象释放掉的（一般情况下release会使其retainCount－1,[super dealloc]会再次将所有subView的retainCount－1,而b并不是a的subView，所有最后的一次－1没有了）；所以我们需要在之前加上[b removeFromSuperView]。</li></ul><h4 id="写一个贪吃蛇的算法"><a href="#写一个贪吃蛇的算法" class="headerlink" title="写一个贪吃蛇的算法"></a>写一个贪吃蛇的算法</h4><h4 id="请写一个类似于NSMutableArray的类，可以添加，删除，以及如何以最快的速度查找某个元素？"><a href="#请写一个类似于NSMutableArray的类，可以添加，删除，以及如何以最快的速度查找某个元素？" class="headerlink" title="请写一个类似于NSMutableArray的类，可以添加，删除，以及如何以最快的速度查找某个元素？"></a>请写一个类似于NSMutableArray的类，可以添加，删除，以及如何以最快的速度查找某个元素？</h4><h4 id="给一个数字，判断从左读和从右读是否是一致的？例如12321和4444"><a href="#给一个数字，判断从左读和从右读是否是一致的？例如12321和4444" class="headerlink" title="给一个数字，判断从左读和从右读是否是一致的？例如12321和4444"></a>给一个数字，判断从左读和从右读是否是一致的？例如12321和4444</h4><h4 id="给一个数组-1、3、2、4、8-排序后-1、2、3、4、8-？"><a href="#给一个数组-1、3、2、4、8-排序后-1、2、3、4、8-？" class="headerlink" title="给一个数组[1、3、2、4、8]排序后[1、2、3、4、8]？"></a>给一个数组[1、3、2、4、8]排序后[1、2、3、4、8]？</h4><h4 id="怎么用下面的类？北京品科艺科技有限公司"><a href="#怎么用下面的类？北京品科艺科技有限公司" class="headerlink" title="怎么用下面的类？北京品科艺科技有限公司"></a>怎么用下面的类？北京品科艺科技有限公司</h4><ul><li>NSuserDefault</li><li>NSMange Object Context</li><li>NSPredict</li></ul><h4 id="怎么从xib文件加载成UIview？"><a href="#怎么从xib文件加载成UIview？" class="headerlink" title="怎么从xib文件加载成UIview？"></a>怎么从xib文件加载成UIview？</h4><h4 id="OAuth2-0授权的过程，是否用过1-0？"><a href="#OAuth2-0授权的过程，是否用过1-0？" class="headerlink" title="OAuth2.0授权的过程，是否用过1.0？"></a>OAuth2.0授权的过程，是否用过1.0？</h4><h4 id="id是编译时还是运行时"><a href="#id是编译时还是运行时" class="headerlink" title="id是编译时还是运行时"></a>id是编译时还是运行时</h4><h4 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h4><h4 id="、CFNetwork基于啥？"><a href="#、CFNetwork基于啥？" class="headerlink" title="、CFNetwork基于啥？"></a>、CFNetwork基于啥？</h4><h4 id="逻辑运算跟位运算的区别？"><a href="#逻辑运算跟位运算的区别？" class="headerlink" title="逻辑运算跟位运算的区别？"></a>逻辑运算跟位运算的区别？</h4><h4 id="三维动画的旋转的原理？底层怎么实现？点与点-用距阵变换实现的。"><a href="#三维动画的旋转的原理？底层怎么实现？点与点-用距阵变换实现的。" class="headerlink" title="三维动画的旋转的原理？底层怎么实现？点与点 用距阵变换实现的。"></a>三维动画的旋转的原理？底层怎么实现？点与点 用距阵变换实现的。</h4><h4 id="NSFileManager-NSFileHandle为什么不用文件加载而用数据库？"><a href="#NSFileManager-NSFileHandle为什么不用文件加载而用数据库？" class="headerlink" title="NSFileManager/NSFileHandle为什么不用文件加载而用数据库？"></a>NSFileManager/NSFileHandle为什么不用文件加载而用数据库？</h4><h4 id="uikit基于什么？"><a href="#uikit基于什么？" class="headerlink" title="uikit基于什么？"></a>uikit基于什么？</h4><h4 id="默写二分查找算法？"><a href="#默写二分查找算法？" class="headerlink" title="默写二分查找算法？"></a>默写二分查找算法？</h4><h4 id="设计一个忽略大小写比较两个字符串的算法？"><a href="#设计一个忽略大小写比较两个字符串的算法？" class="headerlink" title="设计一个忽略大小写比较两个字符串的算法？"></a>设计一个忽略大小写比较两个字符串的算法？</h4><h4 id="怎么过滤一段既有字符串又有数字的，让他只剩数字？"><a href="#怎么过滤一段既有字符串又有数字的，让他只剩数字？" class="headerlink" title="怎么过滤一段既有字符串又有数字的，让他只剩数字？"></a>怎么过滤一段既有字符串又有数字的，让他只剩数字？</h4><h4 id="支付功能。微信支付-支付宝支付"><a href="#支付功能。微信支付-支付宝支付" class="headerlink" title="支付功能。微信支付 支付宝支付"></a>支付功能。微信支付 支付宝支付</h4><h4 id="友盟分享-报错"><a href="#友盟分享-报错" class="headerlink" title="友盟分享 报错"></a>友盟分享 报错</h4><h4 id="假设某一个生物每B年繁殖一次，一次繁殖N个只，寿命是M年，编写程序起初有X只生物，求T年之后生物的总数是多少？"><a href="#假设某一个生物每B年繁殖一次，一次繁殖N个只，寿命是M年，编写程序起初有X只生物，求T年之后生物的总数是多少？" class="headerlink" title="假设某一个生物每B年繁殖一次，一次繁殖N个只，寿命是M年，编写程序起初有X只生物，求T年之后生物的总数是多少？"></a>假设某一个生物每B年繁殖一次，一次繁殖N个只，寿命是M年，编写程序起初有X只生物，求T年之后生物的总数是多少？</h4><h4 id="有个不相同的数，从中随机取N个数，要求N个数互不相同。"><a href="#有个不相同的数，从中随机取N个数，要求N个数互不相同。" class="headerlink" title="=有个不相同的数，从中随机取N个数，要求N个数互不相同。"></a>=有个不相同的数，从中随机取N个数，要求N个数互不相同。</h4><p>//（已经有随机函数int getRand（int min，int max）表示获取从最小值到最大值的随机整数）<br> {<br> return min + (max – min) *rand()/RAND_MAX;<br> }</p><h4 id="什么是消息推送？"><a href="#什么是消息推送？" class="headerlink" title="什么是消息推送？"></a>什么是消息推送？</h4><h4 id="已知二叉树后序遍历序列是dabec，中序遍历序列是debac，它的前"><a href="#已知二叉树后序遍历序列是dabec，中序遍历序列是debac，它的前" class="headerlink" title="已知二叉树后序遍历序列是dabec，中序遍历序列是debac，它的前"></a>已知二叉树后序遍历序列是dabec，中序遍历序列是debac，它的前</h4><h4 id="在iPhone中怎么写入C-程序，详细写下来"><a href="#在iPhone中怎么写入C-程序，详细写下来" class="headerlink" title="在iPhone中怎么写入C++程序，详细写下来"></a>在iPhone中怎么写入C++程序，详细写下来</h4><h4 id="远程推送；本地消息和原地推送的区别"><a href="#远程推送；本地消息和原地推送的区别" class="headerlink" title="远程推送；本地消息和原地推送的区别"></a>远程推送；本地消息和原地推送的区别</h4><h4 id="苹果怎么实现安全机制"><a href="#苹果怎么实现安全机制" class="headerlink" title="苹果怎么实现安全机制"></a>苹果怎么实现安全机制</h4><ul><li>设备控制和保护:支持用户从一系列密码设计策略中根据安全需求来进行选择，包括超时设定、密码长度以及密码更新周期等</li><li>数据保护。256位AES硬件加密算法。远程信息擦除，本地信息擦除</li><li>安全网络通信，VPN SSL WAP/WAP2认证方式接入wifi</li><li>安全的iOS平台。运行时保护-沙盒机制，应用之间不能相互访问，系统资源与用户程序隔离。强制前面。安全认证框架</li></ul><h4 id="极光推送原理（第三方框架），怎么用的？遇到什么问题？怎么解决的？"><a href="#极光推送原理（第三方框架），怎么用的？遇到什么问题？怎么解决的？" class="headerlink" title="极光推送原理（第三方框架），怎么用的？遇到什么问题？怎么解决的？"></a>极光推送原理（第三方框架），怎么用的？遇到什么问题？怎么解决的？</h4><h4 id="微信的附近功能怎么实现的？"><a href="#微信的附近功能怎么实现的？" class="headerlink" title="微信的附近功能怎么实现的？"></a>微信的附近功能怎么实现的？</h4><h4 id="怎么实现第三方登陆"><a href="#怎么实现第三方登陆" class="headerlink" title="怎么实现第三方登陆"></a>怎么实现第三方登陆</h4><h4 id="autolayout？sizeclass"><a href="#autolayout？sizeclass" class="headerlink" title="autolayout？sizeclass"></a>autolayout？sizeclass</h4><h4 id="HealthKit是什么？"><a href="#HealthKit是什么？" class="headerlink" title="HealthKit是什么？"></a>HealthKit是什么？</h4><p>2014年6月2日召开的年度开发者大会上，苹果发布了一款新的移动应用平台，可以收集和分析用户的健康数据，这是苹果计划为其计算和移动软件推出的一系列新功能的一部分该移动应用平台被命名为“Healthkit ”，苹果高管告诉开发者，它可以整合iPhone或iPad上其它健康应用收集的数据，如血压和体重等。</p><p>HealthKit框架提供了一个结构，应用可以使用它来分享健康和健身数据。HealthKit管理从不同来源获得的数据，并根据用户的偏好设置，自动将不同来源的所有数据合并起来。应用还可以获取每个来源的原始数据，然后执行自己的数据合并。</p><p>HealthKit也可以直接与健康和健身设备一起工作。在iOS8.0中，系统可以自动将兼容的低功耗蓝牙心率仪的数据直接保存在<br> HealthKit存储中。如果有M7运动协处理器，系统还可以自动导入计步数据。其他的设备和数据源必须要有配套的应用才可以获取数据并保存在HealthKit中。</p><p>HealthKit另外提供了一个应用来帮助管理用户的健康数据。健康应用为用户展示HealthKit的数据。用户可以使用健康应用来查看、添加、删除或者管理其全部的健康和健身数据。用户还可以编辑每种数据类型的分享权限。</p><p>HealthKit和健康应用在iPad上都不可用。HealthKit框架不能用于应用扩展。</p><h4 id="HomeKit是什么？"><a href="#HomeKit是什么？" class="headerlink" title="HomeKit是什么？"></a>HomeKit是什么？</h4><p>HomeKit，是苹果2014年发布的智能家居平台。HomeKit库是用来沟通和控制家庭自动化配件的，这些家庭自动化配件都支持苹果的HomeKit Accessory Protocol。HomeKit应用程序可让用户发现兼容配件并配置它们。用户可以创建一些action来控制智能配件（例如恒温或者光线强弱），对其进行分组，并且可以通过Siri触发。HomeKit对象被存储在用户iOS设备的数据库中，并且通过iCloud还可以同步到其他iOS设备。HomeKit支持远程访问智能配件，并支持多个用户设备和多个用户。HomeKit 还对用户的安全和隐私做了处理。</p><h4 id="iCloud是什么包含了哪些技术与服务？"><a href="#iCloud是什么包含了哪些技术与服务？" class="headerlink" title="iCloud是什么包含了哪些技术与服务？"></a>iCloud是什么包含了哪些技术与服务？</h4><p>iCloud是苹果公司所提供的云端服务，2011年6月6日苹果公司执行长乔布斯（Steve Jobs）抱病主持全球开发者大会（WWDC），正式发表云端服务iCloud, iOS 5 以及 OS X Lion.其中iCloud的功能是存储内容，包括购买的音乐、应用、电子书等推送到所有设备,iCloud是一系列服务的技术封装,使用者可以免费储存5GB资料。可以备份存放照片、音乐、通讯录、短信、文档等内容，在你需要的时候以无线方式将他们推送到你所有的设备上。自行执行。轻松自如、运作流畅，它就是这么管用。可与亲朋好友共享体验的完整平台。它不仅安全，而且可提供丰富的社交体验，从任何计算机或设备均可随时方便地进行访问。iCloud上所提供的应用程序包括办公生产率、开发工具、媒体和窗口小部件等。随着时间的推移，还将通过易于使用的市场空间和应用程序开发工具箱提供范围更广的应用程序。</p><p>服务:应用软件、电子书与备份、Documents in the Cloud、Photo Stream（照片流）、iTunes Match、Mobile Me</p><p>CoreData：中多线程中处理大量数据同步时的操作</p><p>CoreData:是CoCoa中处理数据绑定数据的关键特性，提供完整的对象持久化存储方案。如果你使用sqlite3厌倦了敲打sql语句，CoreData正解决了你这烦恼。sqlite3是CoreData处理的数据类型之一，当你将CoreData和sqlite的结合起来使用的话，你将能开发出强大的数据库应用。</p><h4 id="CoreData与多线程操作"><a href="#CoreData与多线程操作" class="headerlink" title="CoreData与多线程操作:"></a>CoreData与多线程操作:</h4><p>为了在查询数据的时候不让界面停滞，使用多线程是不可避免，一般我们会用thread，串行线程或者并发线程。coredata与多线程交互的时候，每个线程都必须拥有一个manager context对象，一般有两种方式：</p><p>1.每一个线程使用私有的manager context，共享一个 persistent store coordinator</p><p>2.每个线程使用私有的manager context和私有的persistent store coordinator</p><p>对于这两种方式，我们比较推荐使用第一钟方式，因为使用第二种方式的会消耗我们更多的内存，所以推荐使用第一种。         注意:CoreData里面还带有一个通知NSManagedObjectContextDidSaveNotification，主要监NSManagedObjectContext的数据是否改变，并合并数据改变到相应context</p><h4 id="请解释一下Handoff是什么，并简述它是如何实现iOS、Mac-网页应用互通的-开发指南"><a href="#请解释一下Handoff是什么，并简述它是如何实现iOS、Mac-网页应用互通的-开发指南" class="headerlink" title="请解释一下Handoff是什么，并简述它是如何实现iOS、Mac/网页应用互通的   开发指南"></a>请解释一下Handoff是什么，并简述它是如何实现iOS、Mac/网页应用互通的   开发指南</h4><p>Handoff英译是用手推开某人，在计算机领域是CDMA术语，表示切换的意思。OSX 10.10 Yosemite新增了一个酷炫的功能“HandOff”，打开这个功能之后，用户可以在Mac上对iPad和iPhone进行操作，比如能够编写iPhone上未完成的邮件，并且可以在Mac上打开iPhone的热点等等，Mac的Hand Off功能只能识别Mac周围的iPhone手机。</p><p>Handoff的核心思想就是：用户在一个应用里所做的任何操作都包含着一个activity，一个activity可以和一个特定用户的多台设备关联起来。用行话来说，抽象出这种activity的类叫做NSUserActivity，大部分时间我们都会和这个类打交道。需要一提的是，所有的设备都必须靠近（靠近是指两台设备的蓝牙能够彼此连接），这样Handoff才能正常工作。而且还有两个先决条件得满足：第一个条件是得有一个能正常使用的iCloud账号，而且用户应该在每台准备使用Handoff的设备上登陆这个iCloud账号。事实上，当在不同的设备上切换时，为了保证正在进行的activity不被中断而且被关联到同一个用户，应该尽可能地在所有设备上使用同一个iCloud账号。第二个条件是当两个或两个以上不同的应用想要在同一个用户activity进行Handoff的操作时需要具备的，在这种情况下，所有涉及到的应用必须使用Xcode里相同的团队标识（TeamID）签名。</p><p>当编写一个支持Handoff的应用时，需要关注以下三个交互事件：</p><p>1.为将在另一台设备上继续做的事创建一个新的用户activity。</p><p>2.当需要时，用新的数据更新已有的用户activity。</p><p>3.把一个用户activity传递到另一台设备。</p><p>需要注意的是Handoff相关的测试只能在真实设备上进行，所以你得有至少两台运行着iOS 8.0或以上系统的设备。不管是多台iPhone，多台iPad或者同时拥有iPhone和iPad都可以。</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题23--通知与推送</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9823-%E9%80%9A%E7%9F%A5%E4%B8%8E%E6%8E%A8%E9%80%81/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9823-%E9%80%9A%E7%9F%A5%E4%B8%8E%E6%8E%A8%E9%80%81/</url>
      <content type="html"><![CDATA[<h4 id="本地通知和远程推送通知对基本概念和用法？"><a href="#本地通知和远程推送通知对基本概念和用法？" class="headerlink" title="本地通知和远程推送通知对基本概念和用法？"></a>本地通知和远程推送通知对基本概念和用法？</h4><p><img src="http://" alt="image">image  </p><pre><code>本地通知和远程推送通知都可以向不在前台运行的应用发送消息,这种消息既可能是即将发生的事件,也可能是服务器的新数据.不管是本地通知还是远程通知,他们在程序界面的显示效果相同,都可能显示为一段警告信息或应用程序图标上的微章.本地通知和远程推送通知的基本目的都是让应用程序能够通知用户某些事情, 而且不需要应用程序在前台运行.二者的区别在于本地通知由本应用负责调用,只能从当前设备上的iOS发出, 而远程通知由远程服务器上的程序发送到APNS,再由APNS把消息推送至设备上的程序</code></pre><h4 id="iOS允许最近本地通知数最大是多少（c）"><a href="#iOS允许最近本地通知数最大是多少（c）" class="headerlink" title="iOS允许最近本地通知数最大是多少（c）"></a>iOS允许最近本地通知数最大是多少（c）</h4><pre><code>A.16  B.32  C.64  D.128</code></pre><h4 id="把程序自己关掉和程序进入后台-远程推送的区别"><a href="#把程序自己关掉和程序进入后台-远程推送的区别" class="headerlink" title="把程序自己关掉和程序进入后台,远程推送的区别"></a>把程序自己关掉和程序进入后台,远程推送的区别</h4><ul><li>关掉后不执行任何代码, 不能处理事件</li><li>应用程序进入后台状态不久后转入挂起状态。在这种状态下，应用程序不执行任何代码，并有可能在任意时候从内存中删除。只有当用户再次运行此应用，应用才会从挂起状态唤醒，代码得以继续执行</li><li>或者进入后台时开启多任务状态，保留在内存中，这样就可以执行系统允许的动作</li><li>远程推送是由远程服务器上的程序发送到APNS,再由APNS把消息推送至设备上的程序,当应用程序收到推送的消息会自动调用特定的方法执行事先写好的代码</li></ul><h4 id="本地通知和远程推送通知对基本概念和用法？-1"><a href="#本地通知和远程推送通知对基本概念和用法？-1" class="headerlink" title="本地通知和远程推送通知对基本概念和用法？"></a>本地通知和远程推送通知对基本概念和用法？</h4><ul><li>本地通知和远程推送通知都可以向不在前台运行的应用发送消息,这种消息既可能是即将发生的事件,也可能是服务器的新数据.不管是本地通知还是远程通知,他们在程序界面的显示效果相同,都可能显示为一段警告信息或应用程序图标上的微章.</li><li>本地通知和远程推送通知的基本目的都是让应用程序能够通知用户某些事情, 而且不需要应用程序在前台运行.二者的区别在于本地通知由本应用负责调用,只能从当前设备上的iOS发出, 而远程通知由远程服务器上的程序发送到APNS,再由APNS把消息推送至设备上的程序</li></ul><h4 id="Push-Notification-是如何工作的？"><a href="#Push-Notification-是如何工作的？" class="headerlink" title="Push Notification 是如何工作的？"></a>Push Notification 是如何工作的？</h4><ul><li>推送通知分为两种,一个是本地推送,一个是远程推送</li><li>本地推送:不需要联网也可以推送,是开发人员在APP内设定特定的时间来提醒用户干什么</li><li>远程推送:需要联网,用户的设备会于苹果APNS服务器形成一个长连接,用户设备会发送uuid和Bundle idenidentifier给苹果服务器,苹果服务器会加密生成一个deviceToken给用户设备,然后设备会将deviceToken发送给APP的服务器,服务器会将deviceToken存进他们的数据库,这时候如果有人发送消息给我,服务器端就会去查询我的deviceToken,然后将deviceToken和要发送的信息发送给苹果服务器,苹果服务器通过deviceToken找到我的设备并将消息推送到我的设备上,这里还有个情况是如果APP在线,那么APP服务器会于APP产生一个长连接,这时候APPF服务器会直接通过deviceToken将消息推送到设备上</li></ul><h4 id="为什么-NotificationCenter-要-removeObserver-如何实现自动-remove"><a href="#为什么-NotificationCenter-要-removeObserver-如何实现自动-remove" class="headerlink" title="为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove?"></a>为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove?</h4><ul><li>如果不移除的话,万一注册通知的类被销毁以后又发了通知,程序会崩溃.因为向野指针发送了消息</li><li>实现自动remove:通过自释放机制,通过动态属性将remove转移给第三者,解除耦合,达到自动实现remove</li></ul><h4 id="是否可以把比较耗时的操作放在NSNotificationCenter中"><a href="#是否可以把比较耗时的操作放在NSNotificationCenter中" class="headerlink" title="是否可以把比较耗时的操作放在NSNotificationCenter中"></a>是否可以把比较耗时的操作放在NSNotificationCenter中</h4><ul><li>如果在异步线程发的通知，那么可以执行比较耗时的操作；</li><li>如果在主线程发的通知，那么就不可以执行比较耗时的操作</li></ul>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题22--性能优化</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9822-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9822-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>文字是以前收集的，国外大牛写的，忘记原文链接了。</p><h4 id="入门级"><a href="#入门级" class="headerlink" title="入门级"></a>入门级</h4><ol><li>用ARC管理内存</li><li>在正确的地方使用 reuseIdentifier</li><li>尽量把views设置为透明</li><li>避免过于庞大的XIB</li><li><p>不要阻塞主线程</p></li><li><p>在Image Views中调整图片大小。如果要在UIImageView中显示一个来自bundle的图片，你应保证图片的大小和UIImageView的大小相同。在运行中缩放图片是很耗费资源的，特别是UIImageView嵌套在UIScrollView中的情况下。如果图片是从远端服务加载的你不能控制图片大小，比如在下载前调整到合适大小的话，你可以在下载完成后，最好是用background thread，缩放一次，然后在UIImageView中使用缩放后的图片。</p></li><li>选择正确的Collection。<ul><li>Arrays: 有序的一组值。使用index来lookup很快，使用value lookup很慢， 插入/删除很慢。</li><li>Dictionaries: 存储键值对。 用键来查找比较快。</li><li>Sets: 无序的一组值。用值来查找很快，插入/删除很快。</li></ul></li><li>打开gzip压缩。app可能大量依赖于服务器资源，问题是我们的目标是移动设备，因此你就不能指望网络状况有多好。减小文档的一个方式就是在服务端和你的app中打开gzip。这对于文字这种能有更高压缩率的数据来说会有更显著的效用。<br> iOS已经在NSURLConnection中默认支持了gzip压缩，当然AFNetworking这些基于它的框架亦然。</li></ol><h4 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h4><ol><li>重用和延迟加载(lazy load) Views<ul><li>更多的view意味着更多的渲染，也就是更多的CPU和内存消耗，对于那种嵌套了很多view在UIScrollView里边的app更是如此。</li><li>这里我们用到的技巧就是模仿UITableView和UICollectionView的操作: 不要一次创建所有的subview，而是当需要时才创建，当它们完成了使命，把他们放进一个可重用的队列中。这样的话你就只需要在滚动发生时创建你的views，避免了不划算的内存分配。</li></ul></li><li>Cache, Cache, 还是Cache!<ul><li>一个极好的原则就是，缓存所需要的，也就是那些不大可能改变但是需要经常读取的东西。</li><li>我们能缓存些什么呢？一些选项是，远端服务器的响应，图片，甚至计算结果，比如UITableView的行高。</li><li>NSCache和NSDictionary类似，不同的是系统回收内存的时候它会自动删掉它的内容。</li></ul></li><li>权衡渲染方法.性能能还是要bundle保持合适的大小。</li><li>处理内存警告.移除对缓存，图片object和其他一些可以重创建的objects的strong references.</li><li>重用大开销对象</li><li>一些objects的初始化很慢，比如NSDateFormatter和NSCalendar。然而，你又不可避免地需要使用它们，比如从JSON或者XML中解析数据。想要避免使用这个对象的瓶颈你就需要重用他们，可以通过添加属性到你的class里或者创建静态变量来实现。</li><li>避免反复处理数据.在服务器端和客户端使用相同的数据结构很重要。</li><li>选择正确的数据格式.解析JSON会比XML更快一些，JSON也通常更小更便于传输。从iOS5起有了官方内建的JSON deserialization 就更加方便使用了。但是XML也有XML的好处，比如使用SAX 来解析XML就像解析本地文件一样，你不需像解析json一样等到整个文档下载完成才开始解析。当你处理很大的数据的时候就会极大地减低内存消耗和增加性能。</li><li>正确设定背景图片<ul><li>全屏背景图，在view中添加一个UIImageView作为一个子View</li><li>只是某个小的view的背景图，你就需要用UIColor的colorWithPatternImage来做了，它会更快地渲染也不会花费很多内存：</li></ul></li><li>减少使用Web特性。想要更高的性能你就要调整下你的HTML了。第一件要做的事就是尽可能移除不必要的javascript，避免使用过大的框架。能只用原生js就更好了。尽可能异步加载例如用户行为统计script这种不影响页面表达的javascript。注意你使用的图片，保证图片的符合你使用的大小。</li><li>Shadow Path 。Core Animation不得不先在后台得出你的图形并加好阴影然后才渲染，这开销是很大的。使用shadowPath的话就避免了这个问题。使用shadow path的话iOS就不必每次都计算如何渲染，它使用一个预先计算好的路径。但问题是自己计算path的话可能在某些View中比较困难，且每当view的frame变化的时候你都需要去update shadow path.</li><li>优化Table View<ul><li>正确使用reuseIdentifier来重用cells</li><li>尽量使所有的view opaque，包括cell自身</li><li>避免渐变，图片缩放，后台选人</li><li>缓存行高</li><li>如果cell内现实的内容来自web，使用异步加载，缓存请求结果</li><li>使用shadowPath来画阴影</li><li>减少subviews的数量</li><li>尽量不适用cellForRowAtIndexPath:，如果你需要用到它，只用一次然后缓存结果</li><li>使用正确的数据结构来存储数据</li><li>使用rowHeight, sectionFooterHeight 和 sectionHeaderHeight来设定固定的高，不要请求delegate</li></ul></li><li>选择正确的数据存储选项<ul><li>NSUserDefaults的问题是什么？虽然它很nice也很便捷，但是它只适用于小数据，比如一些简单的布尔型的设置选项，再大点你就要考虑其它方式了</li><li>XML这种结构化档案呢？总体来说，你需要读取整个文件到内存里去解析，这样是很不经济的。使用SAX又是一个很麻烦的事情。</li><li>NSCoding？不幸的是，它也需要读写文件，所以也有以上问题。</li><li>在这种应用场景下，使用SQLite 或者 Core Data比较好。使用这些技术你用特定的查询语句就能只加载你需要的对象。</li><li>在性能层面来讲，SQLite和Core Data是很相似的。他们的不同在于具体使用方法。</li><li>Core Data代表一个对象的graph model，但SQLite就是一个DBMS。</li><li>Apple在一般情况下建议使用Core Data，但是如果你有理由不使用它，那么就去使用更加底层的SQLite吧。</li><li>如果你使用SQLite，你可以用FMDB这个库来简化SQLite的操作，这样你就不用花很多经历了解SQLite的C API了。</li></ul></li></ol><h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4><ol><li><p>加速启动时间。快速打开app是很重要的，特别是用户第一次打开它时，对app来讲，第一印象太太太重要了。你能做的就是使它尽可能做更多的异步任务，比如加载远端或者数据库数据，解析数据。避免过于庞大的XIB，因为他们是在主线程上加载的。所以尽量使用没有这个问题的Storyboards吧！一定要把设备从Xcode断开来测试启动速度</p></li><li><p>使用Autorelease Pool。NSAutoreleasePool`负责释放block中的autoreleased objects。一般情况下它会自动被UIKit调用。但是有些状况下你也需要手动去创建它。假如你创建很多临时对象，你会发现内存一直在减少直到这些对象被release的时候。这是因为只有当UIKit用光了autorelease pool的时候memory才会被释放。消息是你可以在你自己的@autoreleasepool里创建临时的对象来避免这个行为。</p></li><li><p>选择是否缓存图片。常见的从bundle中加载图片的方式有两种，一个是用imageNamed，二是用imageWithContentsOfFile，第一种比较常见一点。</p></li><li><p>避免日期格式转换。如果你要用NSDateFormatter来处理很多日期格式，应该小心以待。就像先前提到的，任何时候重用NSDateFormatters都是一个好的实践。如果你可以控制你所处理的日期格式，尽量选择Unix时间戳。你可以方便地从时间戳转换到NSDate:</p><pre><code>    - (NSDate*)dateFromUnixTimestamp:(NSTimeInterval)timestamp {    return[NSDate dateWithTimeIntervalSince1970:timestamp];    }</code></pre></li></ol><p>这样会比用C来解析日期字符串还快！需要注意的是，许多web API会以微秒的形式返回时间戳，因为这种格式在javascript中更方便使用。记住用dateFromUnixTimestamp之前除以1000就好了。</p><h4 id="平时你是如何对代码进行性能优化的？"><a href="#平时你是如何对代码进行性能优化的？" class="headerlink" title="平时你是如何对代码进行性能优化的？"></a>平时你是如何对代码进行性能优化的？</h4><ul><li>利用性能分析工具检测，包括静态 Analyze 工具，以及运行时 Profile 工具，通过Xcode工具栏中Product-&gt;Profile可以启动,启动后界面如下:</li></ul><p>  image</p><ul><li><p>比如测试程序启动运行时间，当点击Time Profiler应用程序开始运行后.就能获取到整个应用程序运行消耗时间分布和百分比.为了保证数据分析在统一使用场景真实需要注意一定要使用真机,因为此时模拟器是运行在Mac上，而Mac上的CPU往往比iOS设备要快。</p></li><li><p>为了防止一个应用占用过多的系统资源，开发iOS的苹果工程师门设计了一个“看门狗”的机制。在不同的场景下，“看门狗”会监测应用的性能。如果超出了该场景所规定的运行时间，“看门狗”就会强制终结这个应用的进程。开发者们在crashlog里面，会看到诸如0x8badf00d这样的错误代码。</p></li></ul><h4 id="优化Table-View"><a href="#优化Table-View" class="headerlink" title="优化Table View"></a>优化Table View</h4><ul><li>正确使用reuseIdentifier来重用cells</li><li>尽量使所有的view opaque，包括cell自身</li><li>如果cell内现实的内容来自web，使用异步加载，缓存请求结果</li><li>减少subviews的数量</li><li>尽量不适用cellForRowAtIndexPath:，如果你需要用到它，只用一次然后缓存结果</li><li>使用rowHeight, sectionFooterHeight和 sectionHeaderHeight来设定固定的高，不要请求delegate</li></ul><h4 id="UIImage加载图片性能问题"><a href="#UIImage加载图片性能问题" class="headerlink" title="UIImage加载图片性能问题"></a>UIImage加载图片性能问题</h4><ul><li>imagedNamed初始化</li><li>imageWithContentsOfFile初始化</li><li>imageNamed默认加载图片成功后会内存中缓存图片,这个方法用一个指定的名字在系统缓存中查找并返回一个图片对象.如果缓存中没有找到相应的图片对象,则从指定地方加载图片然后缓存对象，并返回这个图片对象.</li><li>imageWithContentsOfFile则仅只加载图片,不缓存.</li><li>加载一张大图并且使用一次，用imageWithContentsOfFile是最好,这样CPU不需要做缓存节约时间.</li><li>使用场景需要编程时，应该根据实际应用场景加以区分，UIimage虽小，但使用元素较多问题会有所凸显. <ul><li>不要在viewWillAppear 中做费时的操作：viewWillAppear: 在view显示之前被调用，出于效率考虑，方法中不要处理复杂费时操作；在该方法设置 view 的显示属性之类的简单事情，比如背景色，字体等。否则，会明显感觉到 view 有卡顿或者延迟。</li><li>在正确的地方使用reuseIdentifier：table view用 tableView:cellForRowAtIndexPath:为rows分配cells的时候，它的数据应该重用自UITableViewCell。</li><li>尽量把views设置为透明：如果你有透明的Views你应该设置它们的opaque属性为YES。系统用一个最优的方式渲染这些views。这个简单的属性在IB或者代码里都可以设定。</li><li>避免过于庞大的XIB：尽量简单的为每个Controller配置一个单独的XIB，尽可能把一个View Controller的view层次结构分散到单独的XIB中去, 当你加载一个引用了图片或者声音资源的nib时，nib加载代码会把图片和声音文件写进内存。</li><li>不要阻塞主线程：永远不要使主线程承担过多。因为UIKit在主线程上做所有工作，渲染，管理触摸反应，回应输入等都需要在它上面完成,大部分阻碍主进程的情形是你的app在做一些牵涉到读写外部资源的I/O操作，比如存储或者网络。<br> dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,   0), ^{<br> // 选择一个子线程来执行耗时操作<br> dispatch_async(dispatch_get_main_queue(), ^{<br> // 返回主线程更新UI<br> });<br> });</li><li>在Image Views中调整图片大小<br> 如果要在UIImageView中显示一个来自bundle的图片，你应保证图片的大小和UIImageView的大小相同。在运行中缩放图片是很耗费资源的.</li></ul></li></ul><h4 id="讲讲你用Instrument优化动画性能的经历吧（别问我什么是Instrument）"><a href="#讲讲你用Instrument优化动画性能的经历吧（别问我什么是Instrument）" class="headerlink" title="讲讲你用Instrument优化动画性能的经历吧（别问我什么是Instrument）"></a>讲讲你用Instrument优化动画性能的经历吧（别问我什么是Instrument）</h4><pre><code>Apple的instrument为开发者提供了各种template去优化app性能和定位问题。很多公司都在赶feature，并没有充足的时间来做优化，导致不少开发者对instrument不怎么熟悉。但这里面其实涵盖了非常完整的计算机基础理论知识体系，memory，disk，network，thread，cpu，gpu等等，顺藤摸瓜去学习，是一笔巨大的知识财富。动画性能只是其中一个template，重点还是理解上面问题当中CPU GPU如何配合工作的知识。</code></pre><h4 id="facebook启动时间优化"><a href="#facebook启动时间优化" class="headerlink" title="facebook启动时间优化"></a>facebook启动时间优化</h4><p>1.瘦身请求依赖 2.UDP启动请求先行缓存 3.队列串行化处理启动响应</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题21--Runtime</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9821-Runtime/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9821-Runtime/</url>
      <content type="html"><![CDATA[<h4 id="Runtime是什么"><a href="#Runtime是什么" class="headerlink" title="Runtime是什么"></a>Runtime是什么</h4><p>Runtime 又叫运行时，是一套底层的 C 语言 API，其为 iOS 内部的核心之一，我们平时编写的 OC 代码，底层都是基于它来实现的。比如：</p><pre><code>[receiver message];// 底层运行时会被编译器转化为：objc_msgSend(receiver, selector)// 如果其还有参数比如：[receiver message:(id)arg...];// 底层运行时会被编译器转化为：objc_msgSend(receiver, selector, arg1, arg2, ...)</code></pre><h4 id="为什么需要Runtime"><a href="#为什么需要Runtime" class="headerlink" title="为什么需要Runtime"></a>为什么需要Runtime</h4><ul><li>Objective-C 是一门动态语言，它会将一些工作放在代码运行时才处理而并非编译时。也就是说，有很多类和成员变量在我们编译的时是不知道的，而在运行时，我们所编写的代码会转换成完整的确定的代码运行。</li><li>因此，编译器是不够的，我们还需要一个运行时系统(Runtime system)来处理编译后的代码。</li><li>Runtime 基本是用 C 和汇编写的，由此可见苹果为了动态系统的高效而做出的努力。苹果和 GNU 各自维护一个开源的 Runtime 版本，这两个版本之间都在努力保持一致。</li></ul><h4 id="Runtime-的作用"><a href="#Runtime-的作用" class="headerlink" title="Runtime 的作用"></a>Runtime 的作用</h4><p>OC 在三种层面上与 Runtime 系统进行交互：</p><pre><code>1.通过 Objective-C 源代码    只需要编写 OC 代码，Runtime 系统自动在幕后搞定一切，调用方法，编译器会将 OC 代码转换成运行时代码，在运行时确定数据结构和函数。2.通过 Foundation 框架的 NSObject 类定义的方法    Cocoa 程序中绝大部分类都是 NSObject 类的子类，所以都继承了 NSObject 的行为。(NSProxy 类时个例外，它是个抽象超类)    一些情况下，NSObject 类仅仅定义了完成某件事情的模板，并没有提供所需要的代码。例如 - description方法，该方法返回类内容的字符串表示，该方法主要用来调试程序。NSObject类并不知道子类的内容，所以它只是返回类的名字和对象的地址，NSObject的子类可以重新实现。    还有一些NSObject的方法可以从Runtime系统中获取信息，允许对象进行自我检查。例如：    -class方法返回对象的类；    -isKindOfClass: 和 -isMemberOfClass: 方法检查对象是否存在于指定的类的继承体系中(是否是其子类或者父类或者当前类的成员变量)；    -respondsToSelector: 检查对象能否响应指定的消息；    -conformsToProtocol:检查对象是否实现了指定协议类的方法；    -methodForSelector: 返回指定方法实现的地址。3.通过对 Runtime 库函数的直接调用    Runtime 系统是具有公共接口的动态共享库。头文件存放于/usr/include/objc目录下，这意味着我们使用时只需要引入objc/Runtime.h头文件即可。    许多函数可以让你使用纯 C 代码来实现 Objc 中同样的功能。除非是写一些 Objc 与其他语言的桥接或是底层的 debug 工作，你在写 Objc 代码时一般不会用到这些 C 语言函数。</code></pre><h4 id="Runtime的相关术语"><a href="#Runtime的相关术语" class="headerlink" title="Runtime的相关术语"></a>Runtime的相关术语</h4><pre><code>1.SEL    它是selector在 Objc 中的表示(Swift 中是 Selector 类)。selector 是方法选择器，其实作用就和名字一样，日常生活中，我们通过人名辨别谁是谁，注意 Objc 在相同的类中不会有命名相同的两个方法。selector 对方法名进行包装，以便找到对应的方法实现。它的数据结构是：typedef struct objc_selector *SEL;我们可以看出它是个映射到方法的 C 字符串，你可以通过 Objc 编译器器命令@selector() 或者 Runtime 系统的 sel_registerName 函数来获取一个 SEL 类型的方法选择器。注意：不同类中相同名字的方法所对应的 selector 是相同的，由于变量的类型不同，所以不会导致它们调用方法实现混乱。2.idid 是一个参数类型，它是指向某个类的实例的指针。定义如下：typedef struct objc_object *id;struct objc_object { Class isa; };以上定义，看到 objc_object 结构体包含一个 isa 指针，根据 isa 指针就可以找到对象所属的类。注意：isa 指针在代码运行时并不总指向实例对象所属的类型，所以不能依靠它来确定类型，要想确定类型还是需要用对象的 -class 方法。PS:KVO 的实现机理就是将被观察对象的 isa 指针指向一个中间类而不是真实类型。3.Classtypedef struct objc_class *Class;Class 其实是指向 objc_class 结构体的指针。objc_class 的数据结构如下：struct objc_class {    Class isa  OBJC_ISA_AVAILABILITY;#if !__OBJC2__    Class super_class                                        OBJC2_UNAVAILABLE;    const char *name                                         OBJC2_UNAVAILABLE;    long version                                             OBJC2_UNAVAILABLE;    long info                                                OBJC2_UNAVAILABLE;    long instance_size                                       OBJC2_UNAVAILABLE;    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;#endif} OBJC2_UNAVAILABLE;从 objc_class 可以看到，一个运行时类中关联了它的父类指针、类名、成员变量、方法、缓存以及附属的协议。其中 objc_ivar_list 和 objc_method_list 分别是成员变量列表和方法列表：// 成员变量列表struct objc_ivar_list {    int ivar_count                                           OBJC2_UNAVAILABLE;#ifdef __LP64__    int space                                                OBJC2_UNAVAILABLE;#endif    /* variable length structure */    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;}                                                            OBJC2_UNAVAILABLE;// 方法列表struct objc_method_list {    struct objc_method_list *obsolete                        OBJC2_UNAVAILABLE;    int method_count                                         OBJC2_UNAVAILABLE;#ifdef __LP64__    int space                                                OBJC2_UNAVAILABLE;#endif    /* variable length structure */    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;}由此可见，我们可以动态修改 *methodList 的值来添加成员方法，这也是 Category 实现的原理，同样解释了 Category 不能添加属性的原因。objc_ivar_list 结构体用来存储成员变量的列表，而 objc_ivar 则是存储了单个成员变量的信息；同理，objc_method_list 结构体存储着方法数组的列表，而单个方法的信息则由 objc_method 结构体存储。值得注意的时，objc_class 中也有一个 isa 指针，这说明 Objc 类本身也是一个对象。为了处理类和对象的关系，Runtime 库创建了一种叫做 Meta Class(元类) 的东西，类对象所属的类就叫做元类。Meta Class 表述了类对象本身所具备的元数据。我们所熟悉的类方法，就源自于 Meta Class。我们可以理解为类方法就是类对象的实例方法。每个类仅有一个类对象，而每个类对象仅有一个与之相关的元类。当你发出一个类似 [NSObject alloc](类方法) 的消息时，实际上，这个消息被发送给了一个类对象(Class Object)，这个类对象必须是一个元类的实例，而这个元类同时也是一个根元类(Root Meta Class)的实例。所有元类的 isa 指针最终都指向根元类。所以当 [NSObject alloc] 这条消息发送给类对象的时候，运行时代码 objc_msgSend() 会去它元类中查找能够响应消息的方法实现，如果找到了，就会对这个类对象执行方法调用。最后 objc_class 中还有一个 objc_cache ，缓存，它的作用很重要，后面会提到。4.MethodMethod 代表类中某个方法的类型typedef struct objc_method *Method;struct objc_method {    SEL method_name                                          OBJC2_UNAVAILABLE;    char *method_types                                       OBJC2_UNAVAILABLE;    IMP method_imp                                           OBJC2_UNAVAILABLE;}objc_method 存储了方法名，方法类型和方法实现：方法名类型为 SEL方法类型 method_types 是个 char 指针，存储方法的参数类型和返回值类型method_imp 指向了方法的实现，本质是一个函数指针IvarIvar 是表示成员变量的类型。typedef struct objc_ivar *Ivar;struct objc_ivar {    char *ivar_name                                          OBJC2_UNAVAILABLE;    char *ivar_type                                          OBJC2_UNAVAILABLE;    int ivar_offset                                          OBJC2_UNAVAILABLE;#ifdef __LP64__    int space                                                OBJC2_UNAVAILABLE;#endif}其中 ivar_offset 是基地址偏移字节5.IMPIMP在objc.h中的定义是：typedef id (*IMP)(id, SEL, ...);它就是一个函数指针，这是由编译器生成的。当你发起一个 ObjC 消息之后，最终它会执行的那段代码，就是由这个函数指针指定的。而 IMP 这个函数指针就指向了这个方法的实现。如果得到了执行某个实例某个方法的入口，我们就可以绕开消息传递阶段，直接执行方法，这在后面 Cache 中会提到。你会发现 IMP 指向的方法与 objc_msgSend 函数类型相同，参数都包含 id 和 SEL 类型。每个方法名都对应一个 SEL 类型的方法选择器，而每个实例对象中的 SEL 对应的方法实现肯定是唯一的，通过一组 id和 SEL 参数就能确定唯一的方法实现地址。而一个确定的方法也只有唯一的一组 id 和 SEL 参数。6.CacheCache 定义如下：typedef struct objc_cache *Cachestruct objc_cache {    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;    unsigned int occupied                                    OBJC2_UNAVAILABLE;    Method buckets[1]                                        OBJC2_UNAVAILABLE;};Cache 为方法调用的性能进行优化，每当实例对象接收到一个消息时，它不会直接在 isa 指针指向的类的方法列表中遍历查找能够响应的方法，因为每次都要查找效率太低了，而是优先在 Cache 中查找。Runtime 系统会把被调用的方法存到 Cache 中，如果一个方法被调用，那么它有可能今后还会被调用，下次查找的时候就会效率更高。就像计算机组成原理中 CPU 绕过主存先访问 Cache 一样。7.Propertytypedef struct objc_property *Property;typedef struct objc_property *objc_property_t;//这个更常用可以通过class_copyPropertyList 和 protocol_copyPropertyList 方法获取类和协议中的属性：objc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount)objc_property_t *protocol_copyPropertyList(Protocol *proto, unsigned int *outCount)注意：返回的是属性列表，列表中每个元素都是一个 objc_property_t 指针#import &lt;Foundation/Foundation.h&gt;@interface Person : NSObject/** 姓名 */@property (strong, nonatomic) NSString *name;/** age */@property (assign, nonatomic) int age;/** weight */@property (assign, nonatomic) double weight;@end以上是一个 Person 类，有3个属性。让我们用上述方法获取类的运行时属性。    unsigned int outCount = 0;    objc_property_t *properties = class_copyPropertyList([Person class], &amp;outCount);    NSLog(@&quot;%d&quot;, outCount);    for (NSInteger i = 0; i &lt; outCount; i++) {        NSString *name = @(property_getName(properties[i]));        NSString *attributes = @(property_getAttributes(properties[i]));        NSLog(@&quot;%@--------%@&quot;, name, attributes);    }打印结果如下：test[2321:451525] 3test[2321:451525] name--------T@&quot;NSString&quot;,&amp;,N,V_nametest[2321:451525] age--------Ti,N,V_agetest[2321:451525] weight--------Td,N,V_weightproperty_getName 用来查找属性的名称，返回 c 字符串。property_getAttributes 函数挖掘属性的真实名称和 @encode 类型，返回 c 字符串。objc_property_t class_getProperty(Class cls, const char *name)objc_property_t protocol_getProperty(Protocol *proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty)class_getProperty 和 protocol_getProperty 通过给出属性名在类和协议中获得属性的引用。</code></pre><h4 id="Runtime与消息"><a href="#Runtime与消息" class="headerlink" title="Runtime与消息"></a>Runtime与消息</h4><ul><li>一些 Runtime 术语讲完了，接下来就要说到消息了。体会苹果官方文档中的 messages aren’t bound to method implementations until Runtime。消息直到运行时才会与方法实现进行绑定。</li><li>这里要清楚一点，objc_msgSend 方法看清来好像返回了数据，其实objc_msgSend 从不返回数据，而是你的方法在运行时实现被调用后才会返回数据。下面详细叙述消息发送的步骤：<ul><li>首先检测这个 selector 是不是要忽略。比如 Mac OS X 开发，有了垃圾回收就不理会 retain，release 这些函数。</li><li>检测这个 selector 的 target 是不是 nil，Objc 允许我们对一个 nil 对象执行任何方法不会 Crash，因为运行时会被忽略掉。</li><li>如果上面两步都通过了，那么就开始查找这个类的实现 IMP，先从 cache 里查找，如果找到了就运行对应的函数去执行相应的代码。</li><li>如果 cache 找不到就找类的方法列表中是否有对应的方法。</li><li>如果类的方法列表中找不到就到父类的方法列表中查找，一直找到 NSObject 类为止。<br> 如果还找不到，就要开始进入动态方法解析了，后面会提到。</li></ul></li><li>在消息的传递中，编译器会根据情况在 objc_msgSend ， objc_msgSend_stret ， objc_msgSendSuper ， objc_msgSendSuper_stret 这四个方法中选择一个调用。如果消息是传递给父类，那么会调用名字带有 Super 的函数，如果消息返回值是数据结构而不是简单值时，会调用名字带有 stret 的函数。</li></ul><h4 id="方法中的隐藏参数"><a href="#方法中的隐藏参数" class="headerlink" title="方法中的隐藏参数"></a>方法中的隐藏参数</h4><pre><code>疑问：我们经常用到关键字 self ，但是 self 是如何获取当前方法的对象呢？其实，这也是 Runtime 系统的作用，self 实在方法运行时被动态传入的。当 objc_msgSend 找到方法对应实现时，它将直接调用该方法实现，并将消息中所有参数都传递给方法实现，同时，它还将传递两个隐藏参数：接受消息的对象(self 所指向的内容，当前方法的对象指针)方法选择器(_cmd 指向的内容，当前方法的 SEL 指针)因为在源代码方法的定义中，我们并没有发现这两个参数的声明。它们时在代码被编译时被插入方法实现中的。尽管这些参数没有被明确声明，在源代码中我们仍然可以引用它们。这两个参数中， self更实用。它是在方法实现中访问消息接收者对象的实例变量的途径。这时我们可能会想到另一个关键字 super ，实际上 super 关键字接收到消息时，编译器会创建一个 objc_super 结构体：struct objc_super { id receiver; Class class; };这个结构体指明了消息应该被传递给特定的父类。 receiver 仍然是 self 本身，当我们想通过 [super class] 获取父类时，编译器其实是将指向 self 的 id 指针和 class 的 SEL 传递给了 objc_msgSendSuper 函数。只有在 NSObject 类中才能找到 class 方法，然后 class 方法底层被转换为 object_getClass()， 接着底层编译器将代码转换为 objc_msgSend(objc_super-&gt;receiver, @selector(class))，传入的第一个参数是指向 self 的 id 指针，与调用 [self class] 相同，所以我们得到的永远都是 self 的类型。因此你会发现：// 这句话并不能获取父类的类型，只能获取当前类的类型名NSLog(@&quot;%@&quot;, NSStringFromClass([super class]));获取方法地址NSObject 类中有一个实例方法：methodForSelector，你可以用它来获取某个方法选择器对应的 IMP ，举个例子：void (*setter)(id, SEL, BOOL);int i;setter = (void (*)(id, SEL, BOOL))[target    methodForSelector:@selector(setFilled:)];for ( i = 0 ; i &lt; 1000 ; i++ )    setter(targetList[i], @selector(setFilled:), YES);当方法被当做函数调用时，两个隐藏参数也必须明确给出，上面的例子调用了1000次函数，你也可以尝试给 target 发送1000次 setFilled: 消息会花多久。虽然可以更高效的调用方法，但是这种做法很少用，除非时需要持续大量重复调用某个方法的情况，才会选择使用以免消息发送泛滥。注意：methodForSelector:方法是由 Runtime 系统提供的，而不是 Objc 自身的特性动态方法解析你可以动态提供一个方法实现。如果我们使用关键字 @dynamic 在类的实现文件中修饰一个属性，表明我们会为这个属性动态提供存取方法，编译器不会再默认为我们生成这个属性的 setter 和 getter 方法了，需要我们自己提供。@dynamic propertyName;这时，我们可以通过分别重载 resolveInstanceMethod: 和 resolveClassMethod: 方法添加实例方法实现和类方法实现。当 Runtime 系统在 Cache 和类的方法列表(包括父类)中找不到要执行的方法时，Runtime 会调用 resolveInstanceMethod: 或 resolveClassMethod: 来给我们一次动态添加方法实现的机会。我们需要用 class_addMethod 函数完成向特定类添加特定方法实现的操作：void dynamicMethodIMP(id self, SEL _cmd) {    // implementation ....}@implementation MyClass+ (BOOL)resolveInstanceMethod:(SEL)aSEL{    if (aSEL == @selector(resolveThisMethodDynamically)) {          class_addMethod([self class], aSEL, (IMP) dynamicMethodIMP, &quot;v@:&quot;);          return YES;    }    return [super resolveInstanceMethod:aSEL];}@end上面的例子为 resolveThisMethodDynamically 方法添加了实现内容，就是 dynamicMethodIMP 方法中的代码。其中 &quot;v@:&quot; 表示返回值和参数，这个符号表示的含义见：Type Encoding注意：动态方法解析会在消息转发机制侵入前执行，动态方法解析器将会首先给予提供该方法选择器对应的 IMP 的机会。如果你想让该方法选择器被传送到转发机制，就让 resolveInstanceMethod: 方法返回 NO。</code></pre><h4 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h4><pre><code>1.重定向消息转发机制执行前，Runtime 系统允许我们替换消息的接收者为其他对象。通过 - (id)forwardingTargetForSelector:(SEL)aSelector 方法。- (id)forwardingTargetForSelector:(SEL)aSelector{    if(aSelector == @selector(mysteriousMethod:)){        return alternateObject;    }    return [super forwardingTargetForSelector:aSelector];}如果此方法返回 nil 或者 self，则会计入消息转发机制(forwardInvocation:)，否则将向返回的对象重新发送消息。2.转发当动态方法解析不做处理返回 NO 时，则会触发消息转发机制。这时 forwardInvocation: 方法会被执行，我们可以重写这个方法来自定义我们的转发逻辑：- (void)forwardInvocation:(NSInvocation *)anInvocation{    if ([someOtherObject respondsToSelector:            [anInvocation selector]])        [anInvocation invokeWithTarget:someOtherObject];    else        [super forwardInvocation:anInvocation];}唯一参数是个 NSInvocation 类型的对象，该对象封装了原始的消息和消息的参数。我们可以实现 forwardInvocation: 方法来对不能处理的消息做一些处理。也可以将消息转发给其他对象处理，而不抛出错误。注意：参数 anInvocation 是从哪来的？在 forwardInvocation: 消息发送前，Runtime 系统会向对象发送methodSignatureForSelector: 消息，并取到返回的方法签名用于生成 NSInvocation 对象。所以重写 forwardInvocation: 的同时也要重写 methodSignatureForSelector: 方法，否则会抛异常。当一个对象由于没有相应的方法实现而无法相应某消息时，运行时系统将通过 forwardInvocation: 消息通知该对象。每个对象都继承了 forwardInvocation: 方法。但是， NSObject 中的方法实现只是简单的调用了 doesNotRecognizeSelector:。通过实现自己的 forwardInvocation: 方法，我们可以将消息转发给其他对象。forwardInvocation: 方法就是一个不能识别消息的分发中心，将这些不能识别的消息转发给不同的接收对象，或者转发给同一个对象，再或者将消息翻译成另外的消息，亦或者简单的“吃掉”某些消息，因此没有响应也不会报错。这一切都取决于方法的具体实现。注意：forwardInvocation:方法只有在消息接收对象中无法正常响应消息时才会被调用。所以，如果我们向往一个对象将一个消息转发给其他对象时，要确保这个对象不能有该消息的所对应的方法。否则，forwardInvocation:将不可能被调用。转发和多继承转发和继承相似，可用于为 Objc 编程添加一些多继承的效果。就像下图那样，一个对象把消息转发出去，就好像它把另一个对象中的方法接过来或者“继承”过来一样。这使得在不同继承体系分支下的两个类可以实现“继承”对方的方法，在上图中 Warrior 和 Diplomat 没有继承关系，但是 Warrior 将 negotiate 消息转发给了 Diplomat 后，就好似 Diplomat 是 Warrior 的超类一样。消息转发弥补了 Objc 不支持多继承的性质，也避免了因为多继承导致单个类变得臃肿复杂。</code></pre><h4 id="转发与继承"><a href="#转发与继承" class="headerlink" title="转发与继承"></a>转发与继承</h4><pre><code>虽然转发可以实现继承的功能，但是 NSObject 还是必须表面上很严谨，像 respondsToSelector: 和 isKindOfClass: 这类方法只会考虑继承体系，不会考虑转发链。 Warrior 对象被问到是否能响应 negotiate消息：if ( [aWarrior respondsToSelector:@selector(negotiate)] )    ...回答当然是 NO， 尽管它能接受 negotiate 消息而不报错，因为它靠转发消息给 Diplomat 类响应消息。如果你就是想要让别人以为 Warrior 继承到了 Diplomat 的 negotiate 方法，你得重新实现 respondsToSelector: 和 isKindOfClass: 来加入你的转发算法：- (BOOL)respondsToSelector:(SEL)aSelector{    if ( [super respondsToSelector:aSelector] )        return YES;    else {        /* Here, test whether the aSelector message can     *         * be forwarded to another object and whether that  *         * object can respond to it. Return YES if it can.  */    }    return NO;}除了 respondsToSelector: 和 isKindOfClass: 之外，instancesRespondToSelector: 中也应该写一份转发算法。如果使用了协议，conformsToProtocol: 同样也要加入到这一行列中。如果一个对象想要转发它接受的任何远程消息，它得给出一个方法标签来返回准确的方法描述 methodSignatureForSelector:，这个方法会最终响应被转发的消息。从而生成一个确定的 NSInvocation 对象描述消息和消息参数。这个方法最终响应被转发的消息。它需要像下面这样实现：- (NSMethodSignature*)methodSignatureForSelector:(SEL)selector{    NSMethodSignature* signature = [super methodSignatureForSelector:selector];    if (!signature) {       signature = [surrogate methodSignatureForSelector:selector];    }    return signature;}</code></pre><h4 id="健壮的实例变量-Non-Fragile-ivars"><a href="#健壮的实例变量-Non-Fragile-ivars" class="headerlink" title="健壮的实例变量(Non Fragile ivars)"></a>健壮的实例变量(Non Fragile ivars)</h4><pre><code>在 Runtime 的现行版本中，最大的特点就是健壮的实例变量了。当一个类被编译时，实例变量的内存布局就形成了，它表明访问类的实例变量的位置。实例变量一次根据自己所占空间而产生位移：上图左是 NSObject 类的实例变量布局。右边是我们写的类的布局。这样子有一个很大的缺陷，就是缺乏拓展性。哪天苹果更新了 NSObject 类的话，就会出现问题：我们自定义的类的区域和父类的区域重叠了。只有苹果将父类改为以前的布局才能拯救我们，但这样导致它们不能再拓展它们的框架了，因为成员变量布局被固定住了。在脆弱的实例变量(Fragile ivar)环境下，需要我们重新编译继承自 Apple 的类来恢复兼容。如果是健壮的实例变量的话，如下图：在健壮的实例变量下，编译器生成的实例变量布局跟以前一样，但是当 Runtime 系统检测到与父类有部分重叠时它会调整你新添加的实例变量的位移，那样你再子类中新添加的成员变量就被保护起来了。注意：在健壮的实例变量下，不要使用 siof(SomeClass)，而是用 class_getInstanceSize([SomeClass class]) 代替；也不要使用  offsetof(SomeClass, SomeIvar)，而要使用 ivar_getOffset(class_getInstanceVariable([SomeClass class], &quot;SomeIvar&quot;)) 来代替。总结我们让自己的类继承自 NSObject 不仅仅是因为基类有很多复杂的内存分配问题，更是因为这使得我们可以享受到 Runtime 系统带来的便利。虽然平时我们很少会考虑一句简单的调用方法，发送消息底层所做的复杂的操作，但深入理解 Runtime 系统的细节使得我们可以利用消息机制写出功能更强大的代码。</code></pre><hr><h4 id="runtime实现的机制是什么-怎么用，一般用于干嘛-你还能记得你所使用的相关的头文件或者某些方法的名称吗？"><a href="#runtime实现的机制是什么-怎么用，一般用于干嘛-你还能记得你所使用的相关的头文件或者某些方法的名称吗？" class="headerlink" title="runtime实现的机制是什么,怎么用，一般用于干嘛. 你还能记得你所使用的相关的头文件或者某些方法的名称吗？"></a>runtime实现的机制是什么,怎么用，一般用于干嘛. 你还能记得你所使用的相关的头文件或者某些方法的名称吗？</h4><ul><li>需要导入&lt;objc/message.h&gt;&lt;objc/runtime.h&gt;</li><li>runtime，运行时机制，它是一套C语言库</li><li>实际上我们编写的所有OC代码，最终都是转成了runtime库的东西，比如类转成了runtime库里面的结构体等数据类型，方法转成了runtime库里面的C语言函数，平时调方法都是转成了objc_msgSend函数（所以说OC有个消息发送机制）</li><li>因此，可以说runtime是OC的底层实现，是OC的幕后执行者</li><li>有了runtime库，能做什么事情呢？runtime库里面包含了跟类、成员变量、方法相关的API，比如获取类里面的所有成员变量，为类动态添加成员变量，动态改变类的方法实现，为类动态添加新的方法等</li><li>因此，有了runtime，想怎么改就怎么改</li></ul><h4 id="Objective-C-如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？"><a href="#Objective-C-如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？" class="headerlink" title="Objective-C 如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？"></a>Objective-C 如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？</h4><p>这题目主要考察的是runtime如何交换方法。先在分类中添加一个方法,注意不能重写系统方法,会覆盖</p><pre><code>+(NSString *)myLog{  // 这里写打印行号,什么方法,哪个类调用等等}// 加载分类到内存的时候调用    +(void)load    {    // 获取imageWithName方法地址    Method description = class_getClassMethod(self, @selector(description));    // 获取imageWithName方法地址    Method myLog = class_getClassMethod(self, @selector(myLog));    // 交换方法地址，相当于交换实现方式    method_exchangeImplementations(description, myLog);    }</code></pre><h4 id="如何让-Category-支持属性？"><a href="#如何让-Category-支持属性？" class="headerlink" title="如何让 Category 支持属性？"></a>如何让 Category 支持属性？</h4><p>使用runtime可以实现</p><pre><code>头文件@interface NSObject (test)@property (nonatomic, copy) NSString *name;@end.m文件@implementation NSObject (test)// 定义关联的keystatic const char *key = &quot;name&quot;;-(NSString *)name{    // 根据关联的key，获取关联的值。   return objc_getAssociatedObject(self, key);}-(void)setName:(NSString *)name{    // 第一个参数：给哪个对象添加关联    // 第二个参数：关联的key，通过这个key获取    // 第三个参数：关联的value    // 第四个参数:关联的策略    objc_setAssociatedObject(self, key, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);}</code></pre><h4 id="Toll-Free-Bridging-是什么？什么情况下会使用？"><a href="#Toll-Free-Bridging-是什么？什么情况下会使用？" class="headerlink" title="Toll-Free Bridging 是什么？什么情况下会使用？"></a>Toll-Free Bridging 是什么？什么情况下会使用？</h4><ul><li>Toll-Free Bridging用于在Foundation对象与Core Foundation对象之间交换数据,俗称桥接</li><li>在ARC环境下,Foundation对象转成 Core Foundation对象</li><li>使用__bridge桥接以后ARC会自动管理2个对象</li><li>使用__bridge_retained桥接需要手动释放Core Foundation对象</li><li>在ARC环境下, Core Foundation对象转成 Foundation对象</li><li>使用__bridge桥接,如果Core Foundation对象被释放,Foundation对象也同时不能使用了,需要手动管理Core Foundation对象</li><li>使用__bridge_transfer桥接,系统会自动管理2个对象</li></ul><h4 id="performSelector-withObject-afterDelay-内部大概是怎么实现的，有什么注意事项么？"><a href="#performSelector-withObject-afterDelay-内部大概是怎么实现的，有什么注意事项么？" class="headerlink" title="performSelector:withObject:afterDelay: 内部大概是怎么实现的，有什么注意事项么？"></a>performSelector:withObject:afterDelay: 内部大概是怎么实现的，有什么注意事项么？</h4><ul><li>创建一个定时器,时间结束后系统会使用runtime通过方法名称(Selector本质就是方法名称)去方法列表中找到对应的方法实现并调用方法</li><li>注意事项 <ul><li>调用performSelector:withObject:afterDelay:方法时,先判断希望调用的方法是否存在respondsToSelector:</li><li>这个方法是异步方法,必须在主线程调用,在子线程调用永远不会调用到想调用的方法</li></ul></li></ul><h4 id="什么是-Method-Swizzle（黑魔法），什么情况下会使用？"><a href="#什么是-Method-Swizzle（黑魔法），什么情况下会使用？" class="headerlink" title="什么是 Method Swizzle（黑魔法），什么情况下会使用？"></a>什么是 Method Swizzle（黑魔法），什么情况下会使用？</h4><ul><li>在没有一个类的实现源码的情况下，想改变其中一个方法的实现，除了继承它重写、和借助类别重名方法暴力抢先之外，还有更加灵活的方法Method Swizzle。</li><li>Method swizzling指的是改变一个已存在的选择器对应的实现的过程。OC中方法的调用能够在运行时通过改变——通过改变类的调度表（dispatch table）中选择器到最终函数间的映射关系。</li><li>在OC中调用一个方法，其实是向一个对象发送消息，查找消息的唯一依据是selector的名字。利用OC的动态特性，可以实现在运行时偷换selector对应的方法实现。</li><li>每个类都有一个方法列表，存放着selector的名字和方法实现的映射关系。IMP有点类似函数指针，指向具体的Method实现。</li><li>我们可以利用 method_exchangeImplementations 来交换2个方法中的IMP，</li><li>我们可以利用 class_replaceMethod 来修改类，</li><li>我们可以利用 method_setImplementation 来直接设置某个方法的IMP，</li><li>归根结底，都是偷换了selector的IMP</li></ul><h4 id="能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？"><a href="#能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？" class="headerlink" title="能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？"></a>能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</h4><pre><code>- 不能向编译后得到的类中增加实例变量；- 能向运行时创建的类中添加实例变量；解释如下：因为编译后的类已经注册在 runtime 中，类结构体中的 objc_ivar_list 实例变量的链表 和 instance_size 实例变量的内存大小已经确定，同时runtime 会调用 class_setIvarLayout 或 class_setWeakIvarLayout 来处理 strong weak 引用。所以不能向存在的类中添加实例变量；运行时创建的类是可以添加实例变量，调用 class_addIvar 函数。但是得在调用 objc_allocateClassPair 之后，objc_registerClassPair 之前，原因同上。</code></pre><h4 id="为什么其他语言里叫函数调用，-objective-c里则是给对象发消息（或者谈下对runtime的理解）"><a href="#为什么其他语言里叫函数调用，-objective-c里则是给对象发消息（或者谈下对runtime的理解）" class="headerlink" title="为什么其他语言里叫函数调用， objective c里则是给对象发消息（或者谈下对runtime的理解）"></a>为什么其他语言里叫函数调用， objective c里则是给对象发消息（或者谈下对runtime的理解）</h4><pre><code>先来看看怎么理解发送消息的含义：[receiver message]会被编译器转化为： objc_msgSend(receiver, selector) 如果消息含有参数，则为： objc_msgSend(receiver, selector, arg1, arg2, ...)如果消息的接收者能够找到对应的selector，那么就相当于直接执行了接收者这个对象的特定方法；否则，消息要么被转发，或是临时向接收者动态添加这个selector对应的实现内容，要么就干脆玩完崩溃掉。现在可以看出[receiver message]真的不是一个简简单单的方法调用。因为这只是在编译阶段确定了要向接收者发送message这条消息，而receive将要如何响应这条消息，那就要看运行时发生的情况来决定了。OC 的 Runtime 铸就了它动态语言的特性，Objc Runtime使得C具有了面向对象能力，在程序运行时创建，检查，修改类、对象和它们的方法。可以使用runtime的一系列方法实现。顺便附上OC中一个类的数据结构 /usr/include/objc/runtime.hstruct objc_class {    Class isa OBJC_ISA_AVAILABILITY; //isa指针指向Meta Class，因为Objc的类的本身也是一个Object，为了处理这个关系，runtime就创造了Meta Class，当给类发送[NSObject alloc]这样消息时，实际上是把这个消息发给了Class Object      #if !__OBJC2__         Class super_class OBJC2_UNAVAILABLE; // 父类      const char *name OBJC2_UNAVAILABLE; // 类名          long version OBJC2_UNAVAILABLE; // 类的版本信息，默认为0          long info OBJC2_UNAVAILABLE; // 类信息，供运行期使用的一些位标识          long instance_size OBJC2_UNAVAILABLE; // 该类的实例变量大小          struct objc_ivar_list *ivars OBJC2_UNAVAILABLE; // 该类的成员变量链表          struct objc_method_list **methodLists OBJC2_UNAVAILABLE; // 方法定义的链表          struct objc_cache *cache OBJC2_UNAVAILABLE; // 方法缓存，对象接到一个消息会根据isa指针查找消息对象，这时会在method       Lists中遍历，如果cache了，常用的方法调用时就能够提高调用的效率。         struct objc_protocol_list *protocols OBJC2_UNAVAILABLE; // 协议链表      #endif} OBJC2_UNAVAILABLE;OC中一个类的对象实例的数据结构（/usr/include/objc/objc.h）:typedef struct objc_class *Class;      /// Represents an instance of a class.      struct objc_object {              Class isa  OBJC_ISA_AVAILABILITY;      };      /// A pointer to an instance of a class.      typedef struct objc_object *id;向object发送消息时，Runtime库会根据object的isa指针找到这个实例object所属于的类，然后在类的方法列表以及父类方法列表寻找对应的方法运行。id是一个objc_object结构类型的指针，这个类型的对象能够转换成任何一种对象。然后再来看看消息发送的函数：objc_msgSend函数在引言中已经对objc_msgSend进行了一点介绍，看起来像是objc_msgSend返回了数据，其实objc_msgSend从不返回数据而是你的方法被调用后返回了数据。下面详细叙述下消息发送步骤：检测这个 selector 是不是要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会 retain,release 这些函数了。 检测这个 target 是不是 nil 对象。ObjC 的特性是允许对一个 nil 对象执行任何一个方法不会 Crash，因为会被忽略掉。 如果上面两个都过了，那就开始查找这个类的 IMP，先从 cache 里面找，完了找得到就跳到对应的函数去执行。 如果 cache 找不到就找一下方法分发表。 如果分发表找不到就到超类的分发表去找，一直找，直到找到NSObject类为止。 如果还找不到就要开始进入动态方法解析了，后面会提到。后面还有： 动态方法解析resolveThisMethodDynamically 消息转发forwardingTargetForSelector</code></pre><h4 id="runtime如何实现weak属性？"><a href="#runtime如何实现weak属性？" class="headerlink" title="runtime如何实现weak属性？"></a>runtime如何实现weak属性？</h4><pre><code>•   通过关联属性来实现：•   // 声明一个weak属性，这里假设delegate，其实weak关键字可以不使用，•   // 因为我们重写了getter/setter方法•   @property (nonatomic, weak) id delegate;•    •   - (id)delegate {•     return objc_getAssociatedObject(self, @&quot;__delegate__key&quot;);•   }•    •   // 指定使用OBJC_ASSOCIATION_ASSIGN，官方注释是：•   // Specifies a weak reference to the associated object.•   // 也就是说对于对象类型，就是weak了•   - (void)setDelegate:(id)delegate {•     objc_setAssociatedObject(self, @&quot;__delegate__key&quot;, delegate, OBJC_ASSOCIATION_ASSIGN);•   }•   通过objc_storeWeak函数来实现，不过这种方式几乎没有遇到有人这么使用过，因为这里不细说了。</code></pre><h4 id="runtime如何通过selector找到对应的IMP地址？"><a href="#runtime如何通过selector找到对应的IMP地址？" class="headerlink" title="runtime如何通过selector找到对应的IMP地址？"></a>runtime如何通过selector找到对应的IMP地址？</h4><ul><li>每个selector都与对应的IMP是一一对应的关系，通过selector就可以直接找到对应的IMP：</li></ul><h4 id="objc-msgForward函数是做什么的，直接调用它将会发生什么？"><a href="#objc-msgForward函数是做什么的，直接调用它将会发生什么？" class="headerlink" title="objc_msgForward函数是做什么的，直接调用它将会发生什么？"></a>objc_msgForward函数是做什么的，直接调用它将会发生什么？</h4><pre><code>_objc_msgForward是IMP类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，_objc_msgForward会尝试做消息转发。IMP msgForward =  _objc_msgForward;如果手动调用objcmsgForward，将跳过查找IMP的过程，而是直接触发“消息转发”，进入如下流程：•   第一步：+ (BOOL)resolveInstanceMethod:(SEL)sel实现方法，指定是否动态添加方法。若返回NO，则进入下一步，若返回YES，则通过class_addMethod函数动态地添加方法，消息得到处理，此流程完毕。•   第二步：在第一步返回的是NO时，就会进入- (id)forwardingTargetForSelector:(SEL)aSelector方法，这是运行时给我们的第二次机会，用于指定哪个对象响应这个selector。不能指定为self。若返回nil，表示没有响应者，则会进入第三步。若返回某个对象，则会调用该对象的方法。•   第三步：若第二步返回的是nil，则我们首先要通过- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector指定方法签名，若返回nil，则表示不处理。若返回方法签名，则会进入下一步。•   第四步：当第三步返回方法方法签名后，就会调用- (void)forwardInvocation:(NSInvocation *)anInvocation方法，我们可以通过anInvocation对象做很多处理，比如修改实现方法，修改响应对象等•   第五步：若没有实现- (void)forwardInvocation:(NSInvocation *)anInvocation方法，那么会进入- (void)doesNotRecognizeSelector:(SEL)aSelector方法。若我们没有实现这个方法，那么就会crash，然后提示打不到响应的方法。到此，动态解析的流程就结束了。</code></pre><h4 id="runtime如何实现weak变量的自动置nil？"><a href="#runtime如何实现weak变量的自动置nil？" class="headerlink" title="runtime如何实现weak变量的自动置nil？"></a>runtime如何实现weak变量的自动置nil？</h4><pre><code>runtime对注册的类会进行布局，对于weak对象会放入一个hash表中。 用weak指向的对象内存地址作为key，当此对象的引用计数为0的时候会dealloc。假如weak指向的对象内存地址是a，那么就会以a为键，在这个 weak 表中搜索，找到所有以a为键的weak对象，从而设置为nil。weak修饰的指针默认值是nil（在Objective-C中向nil发送消息是安全的）</code></pre><h4 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h4><ul><li>在运行时确定要调用的方法,动态绑定将调用方法的确定也推迟到运行时。在编译时，方法的调用并不和代码绑定在一起，只有在消实发送出来之后，才确定被调用的代码。通过动态类型和动态绑定技术，代码每次执行都可以得到不同的结果。运行时因子负责确定消息的接收者和被调用的方法。运行时的消息分发机制为动态绑定提供支持。当向一个动态类型确定了的对象发送消息时，运行环境系统会通过接收者的isa指针定位对象的类，并以此为起点确定被调用的方法，方法和消息是动态绑定的。而且，不必在Objective-C 代码中做任何工作，就可以自动获取动态绑定的好处。在每次发送消息时，特别是当消息的接收者是动态类型已经确定的对象时，动态绑定就会例行而透明地发生</li></ul>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题20--安全机制</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9820-%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9820-%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h4 id="苹果的安全机制有哪些"><a href="#苹果的安全机制有哪些" class="headerlink" title="苹果的安全机制有哪些"></a>苹果的安全机制有哪些</h4><ul><li>没经过用户同意，你不能随便获取用户信息。</li><li>所有的程序都在沙盒里运行，B程序不能进入A程序的运行范围。</li><li>如果跟钱有关，比如说支付宝，这些底层的实现都是保密的，只提供接口供开发者调用，这样的话安全性得到保障。</li><li>如果要防止代码被反编译，可以将自己的代码中的.m文件封装成静态库（.a文件）或者是framework文件，只提供给其它人.h文件。这样就保证了个人代码的安全性。</li><li>网络登录的话跟用户名跟密码相关要发送POST请求，如果是GET请求的话密码会直接在URL中显示。然后同时要对帐号密码采用加密技术，加一句：我们公司用的是MD5，但是现在MD5有一个专门的网站来破解，为了防止这个，可以采用加盐技术。</li></ul><h4 id="iOS-的签名机制大概是怎样的？"><a href="#iOS-的签名机制大概是怎样的？" class="headerlink" title="iOS 的签名机制大概是怎样的？"></a>iOS 的签名机制大概是怎样的？</h4><ul><li>假设，我们有一个APP需要发布，为了防止中途篡改APP内容，保证APP的完整性，以及APP是由指定的私钥发的。首先，先将APP内容通过摘要算法，得到摘要，再用私钥对摘要进行加密得到密文，将源文本、密文、和私钥对应的公钥一并发布即可。</li><li>那么如何验证呢？<br> 验证方首先查看公钥是否是私钥方的，然后用公钥对密文进行解密得到摘要，将APP用同样的摘要算法得到摘要，两个摘要进行比对，如果相等那么一切正常。这个过程只要有一步出问题就视为无效。</li></ul><h4 id="客户端安全性处理方式？"><a href="#客户端安全性处理方式？" class="headerlink" title="客户端安全性处理方式？"></a>客户端安全性处理方式？</h4><pre><code>1&gt;  网络数据传输(敏感数据[账号\密码\消费数据\银行卡账号], 不能明文发送)2&gt;  协议的问题(自定义协议, 游戏代练)3&gt;  本地文件存储(游戏的存档)4&gt;  源代码(混淆)</code></pre><h4 id="如何进行数据加密"><a href="#如何进行数据加密" class="headerlink" title="如何进行数据加密?"></a>如何进行数据加密?</h4><p>常见的加密算法:MD5 \ SHA \ DES \ 3DES \ RC2和RC4 \ RSA \ IDEA \ DSA \ AES</p><p>加密算法的选择:一般公司都会有一套自己的加密方案，按照公司接口文档的规定去加密</p><p>MD5的特点:</p><p>（1）输入两个不同的明文不会得到相同的输出值</p><p>（2）根据输出值，不能得到原始的明文，即其过程不可逆</p><p>现在的MD5已不再是绝对安全，对此，可以对MD5稍作改进，以增加解密的难度</p><p>加盐（Salt）：在明文的固定位置插入随机串，然后再进行MD5</p><p>先加密，后乱序：先对明文进行MD5，然后对加密得到的MD5串的字符进行乱序</p><p>总之宗旨就是：黑客就算攻破了数据库，也无法解密出正确的明文</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题19--设计模式</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9819-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9819-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="从设计模式的角度分析Delegate、Notification、KVO的区别"><a href="#从设计模式的角度分析Delegate、Notification、KVO的区别" class="headerlink" title="从设计模式的角度分析Delegate、Notification、KVO的区别"></a>从设计模式的角度分析Delegate、Notification、KVO的区别</h4><p>三者优缺点：</p><p>delegate的优势：</p><p>1.非常严格的语法。所有将听到的事件必须是在delegate协议中有清晰的定义。</p><p>2.如果delegate中的一个方法没有实现那么就会出现编译警告/错误</p><p>3.协议必须在controller的作用域范围内定义</p><p>4.在一个应用中的控制流程是可跟踪的并且是可识别的；</p><p>5.在一个控制器中可以定义定义多个不同的协议，每个协议有不同的delegates</p><p>6.没有第三方对象要求保持/监视通信过程。</p><p>7.能够接收调用的协议方法的返回值。这意味着delegate能够提供反馈信息给controller</p><p>8.经常被用在存在父子关系的对象之间通信，例如控制器和控制器的view（自己加的理解）</p><p>缺点：</p><p>1.需要定义很多代码：1.协议定义；2.controller的delegate属性；3.在delegate本身中实现delegate方法定义</p><p>2.在释放代理对象时，需要小心的将delegate改为nil。一旦设定失败，那么调用释放对象的方法将会出现内存crash</p><p>3.在一个controller中有多个delegate对象，并且delegate是遵守同一个协议，但还是很难告诉多个对象同一个事件，不过有可能。</p><p>4.经常用在一对一的通信。（不知道是缺点还是优点，只能算是特点）（自己加的理解）</p><p>notification的优势：</p><p>1.不需要编写多少代码，实现比较简单</p><p>2.对于一个发出的通知，多个对象能够做出反应，即一对多的方式实现简单</p><p>3.controller能够传递context对象（dictionary），context对象携带了关于发送通知的自定义的信息</p><p>缺点：</p><p>1.在编译期不会检查通知是否能够被观察者正确的处理；</p><p>2.在释放注册的对象时，需要在通知中心取消注册；</p><p>3.在调试的时候应用的工作以及控制过程难跟踪；</p><p>4.需要第三方对象来管理controller与观察者对象之间的联系；</p><p>5.controller和观察者需要提前知道通知名称、UserInfo dictionary keys。如果这些没有在工作区间定义，那么会出现不同步的情况；</p><p>6.通知发出后，controller不能从观察者获得任何的反馈信息（相比较delegate）。</p><p>KVO的优势：</p><p>1.能够提供一种简单的方法实现两个对象间的同步。例如：model和view之间同步；</p><p>2.能够对非我们创建的对象，即内部对象的状态改变作出响应，而且不需要改变内部对象（SKD对象）的实现；</p><p>3.能够提供观察的属性的最新值以及先前值；</p><p>4.用key paths来观察属性，因此也可以观察嵌套对象；</p><p>5.完成了对观察对象的抽象，因为不需要额外的代码来允许观察值能够被观察</p><p>6.可以一对多。</p><p>缺点：</p><p>1.我们观察的属性必须使用strings来定义。因此在编译器不会出现警告以及检查；</p><p>2.对属性重构将导致我们的观察代码不再可用；</p><p>3.复杂的“IF”语句要求对象正在观察多个值。这是因为所有的观察代码通过一个方法来指向；</p><p>4.当释放观察者时不需要移除观察者。</p><ol><li>效率 肯定是delegate比NSNotification高。</li></ol><p>delegate方法比notification更加直接，最典型的特征是，delegate方法往往需要关注返回值，</p><p>也就是delegate方法的结果。比如-windowShouldClose:，需要关心返回的是yes还是no。所以delegate方法往往包含</p><p>should这个很传神的词。也就是好比你做我的delegate，我会问你我想关闭窗口你愿意吗？你需要给我一个答案，我根据你的答案来决定如何做下一</p><p>步。相反的，notification最大的特色就是不关心接受者的态度，</p><p>我只管把通告放出来，你接受不接受就是你的事情，同时我也不关心结果。所以notification往往用did这个词汇，比如</p><p>NSWindowDidResizeNotification，那么NSWindow对象放出这个notification后就什么都不管了也不会等待接</p><p>受者的反应。</p><p>2、KVO和NSNotification的区别 ：</p><p>和delegate一样，KVO和NSNotification的作用也是类与类之间的通信，与delegate不同的是1）这两个都是负责发出通知，剩下的事情就不管了，所以没有返回值；2）delegate只是一对一，而这两个可以一对多。这两者也有各自的特点。</p><p>总结：</p><p>从上面的分析中可以看出3中设计模式都有各自的优点和缺点。在这三种模式中，我认为KVO有最清晰的使用案例，而且针对某个需求有清晰的实用性。而另外两种模式有比较相似的用处，并且经常用来给controller间进行通信。那么我们在什么情况使用其中之一呢？</p><p>根据我开发iOS应用的经历，我发现有些过分的使用通知模式。我个人不是很喜欢使用通知中心。我发现用通知中心很难把握应用的执行流程。Userlnfo dictionaries的keys到处传递导致失去了同步，而且在公共空间需要定义太多的常量。对于一个工作于现有的项目的开发者来说，如果过分的使用通知中心，那么很难理解应用的流程。</p><p>我觉得使用命名规则好的协议和协议方法定义对于清晰的理解controllers间的通信是很容易的。努力的定义这些协议方法将增强代码的可读性，以及更好的跟踪你的app。代理协议发生改变以及实现都可通过编译器检查出来，如果没有将会在开发的过程中至少会出现crash，而不仅仅是让一些事情异常工作。甚至在同一事件通知多控制器的场景中，只要你的应用在controller层次有着良好的结构，消息将在该层次上传递。该层次能够向后传递直至让所有需要知道事件的controllers都知道。当然会有delegation模式不适合的例外情况出现，而且notification可能更加有效。例如：应用中所有的controller需要知道一个事件。然而这些类型的场景很少出现。另外一个例子是当你建立了一个架构而且需要通知该事件给正在运行中应用。</p><p>根据经验，如果是属性层的事件，不管是在不需要编程的对象还是在紧紧绑定一个view对象的model对象，我只使用观察。对于其他的事件，我都会使用delegate模式。如果因为某种原因我不能使用delegate，首先我将估计我的app架构是否出现了严重的错误。如果没有错误，然后才使用notification。</p><h4 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h4><ul><li>设计模式是为特定场景下的问题而定制的解决方案。特定场景指问题所在的重复出现的场景，问题指特定环境下你想达成的目标。同样的问题在不同的环境下会有不同的限制和挑战。定制的解决方案是指在特定环境下克服了问题的限制条件而达成目标的一种设计。</li></ul><h4 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h4><ul><li>设计模式分为三种类型，共23种。 <ul><li>创建型模式：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。</li><li>结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</li><li>行为型模式：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter模式）、状态模式、策略模式、职责链模式(责任链模式)、访问者模式。</li></ul></li></ul><h4 id="类工厂方法是什么？"><a href="#类工厂方法是什么？" class="headerlink" title="类工厂方法是什么？"></a>类工厂方法是什么？</h4><ul><li>类工厂方法的实现是为了向客户提供方便，它们将分配和初始化合在一个步骤中， 返回被创建的对象，并<br> 进行自动释放处理。</li><li>这些方法的形式是+ (type)className…（其中 className不包括任何前缀）。</li><li>工厂方法可能不仅仅为了方便使用。它们不但可以将分配和初始化合在一起，还可以为初始化过程提供对<br> 象的分配信息。</li><li>类工厂方法的另一个目的是使类（比如NSWorkspace）提供单例。虽 然init…方法可以确认一<br> 个类在每次程序运行过程只存在一个实例，但它需要首先分配一个“生的”实例，然后还必须释放该实例。工厂方法则可以避免为可能没有用的对象盲目分配内存。</li></ul><h4 id="单例是什么？"><a href="#单例是什么？" class="headerlink" title="单例是什么？"></a>单例是什么？</h4><p>单例模式的意思就是只有一个实例。单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。这个类称为单例类。</p><ol><li>单例模式的要点：</li></ol><p>显然单例模式的要点有三个；一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。</p><ol><li>单例模式的优点：<ul><li>实例控制：Singleton 会阻止其他对象实例化其自己的 Singleton 对象的副本，从而确保所有对象都访问唯一实例。</li><li>灵活性：因为类控制了实例化过程，所以类可以更加灵活修改实例化过程</li></ul></li></ol><h4 id="手写一下单例方法-或者单例模式的设计：GCD-方式和同步锁方式的区别在哪里？unlock-呢？GCD-是怎么保证单例的？"><a href="#手写一下单例方法-或者单例模式的设计：GCD-方式和同步锁方式的区别在哪里？unlock-呢？GCD-是怎么保证单例的？" class="headerlink" title="手写一下单例方法(或者单例模式的设计：GCD 方式和同步锁方式的区别在哪里？unlock 呢？GCD 是怎么保证单例的？)"></a>手写一下单例方法(或者单例模式的设计：GCD 方式和同步锁方式的区别在哪里？unlock 呢？GCD 是怎么保证单例的？)</h4><p>image</p><h4 id="简要描述观察者模式，并运用此模式编写一段代码？"><a href="#简要描述观察者模式，并运用此模式编写一段代码？" class="headerlink" title="简要描述观察者模式，并运用此模式编写一段代码？"></a>简要描述观察者模式，并运用此模式编写一段代码？</h4><ul><li>观察者模式（Observer）是指一个或多个对象对另一个对象进行观察，当被观察对象发生变化时，观察者可以直接或间接地得到通知，从而能自动地更新观察者的数据，或者进行一些操作。</li><li>具体到iOS的开发中，实现观察者模式常用的方式有KVO和Notification两种。</li><li>两者的不同在于，KVO是被观察者主动向观察者发送消息；Notification是被观察者向NotificationCenter发送消息，再由NotificationCenter post通知到每个注册的观察者。</li></ul><h4 id="谈谈你对MVC的理解-为什么要用MVC-在Cocoa中MVC是怎么实现的-你还熟悉其他的OC设计模式或别的设计模式吗"><a href="#谈谈你对MVC的理解-为什么要用MVC-在Cocoa中MVC是怎么实现的-你还熟悉其他的OC设计模式或别的设计模式吗" class="headerlink" title="谈谈你对MVC的理解?为什么要用MVC?在Cocoa中MVC是怎么实现的?你还熟悉其他的OC设计模式或别的设计模式吗?"></a>谈谈你对MVC的理解?为什么要用MVC?在Cocoa中MVC是怎么实现的?你还熟悉其他的OC设计模式或别的设计模式吗?</h4><ul><li>MVC就是Model-View-Controller的缩写,M指的是业务模型,V指的是用户页面,C指的是控制器。MVC是架构模式,是讲M和V的代码分离,从而使同那个一个程序可以使用不同的表现形式。</li><li>单例,代理,观察者,工厂模式等</li><li>单例模式:上面有详细说明</li><li>代理模式:代理模式给某一个对象提供一个代理对象,并由代理对象控制对源对象的引用.比如一个工厂生产了产品,并不想直接卖给用户,而是搞了很多代理商,用户可以直接找代理商买东西,代理商从工厂进货.常见的如QQ的自动回复就属于代理拦截,代理模式在iphone中得到广泛应用.</li></ul><h4 id="MVC优点不正确的是"><a href="#MVC优点不正确的是" class="headerlink" title="MVC优点不正确的是"></a>MVC优点不正确的是</h4><pre><code>A 低耦合性B 高重用性和可适用性C 较低的生命周期成本D 代码高效率</code></pre><ul><li>参考答案：D</li><li>理由：MVC只是一种设计模式，它的出现有比较久的历史了。Model-Controller-View是在开发中最常见到的设计模式，通过将Model、View、Controller三者相互联系，以Model作为数据加工厂，以Controller作为桥梁，处理业务，而View只是数据展示层，理应与业务无关。MVC设计模式降低了耦合性，提供了重用性和适用性，可有效地提高开发效率。</li></ul><h4 id="如何理解MVVM框架，它的优点和缺点在哪？运用此框架编写一段代码，建议采用ReactiveCocoa库实现；"><a href="#如何理解MVVM框架，它的优点和缺点在哪？运用此框架编写一段代码，建议采用ReactiveCocoa库实现；" class="headerlink" title="如何理解MVVM框架，它的优点和缺点在哪？运用此框架编写一段代码，建议采用ReactiveCocoa库实现；"></a>如何理解MVVM框架，它的优点和缺点在哪？运用此框架编写一段代码，建议采用ReactiveCocoa库实现；</h4><ul><li>MVVM框架相对于传统的MVC来说，主要区别在于把原本在C中（ViewController）的业务逻辑、网络请求、数据存储等操作和表现逻辑，分离到ViewModel中，从而使ViewController得到精简</li><li>MVC中，Controller同时操作Model和View；MVVM中，ViewModel作为一个过渡，Model的数据获取和加工由ViewModel负责，得到适合View的数据，利用绑定机制，使得View得以自动更新。</li></ul><pre><code>优点：层次更加分明清晰代码简洁优雅减少VC的复杂性代码和界面完全分离方便测试缺点：MVVM需要使用数据绑定机制，对于OS X 开发，可以直接使用Coocoa Binding，对于iOS，没有太好的数据绑定方法，可以使用KVO，但如果需要绑定的属性太多的话，需要编写大量的selector代码。ReactiveCocoa提供了一种很方便优雅的绑定机制。</code></pre><h4 id="ReactiveCocoa"><a href="#ReactiveCocoa" class="headerlink" title="ReactiveCocoa"></a>ReactiveCocoa</h4><ul><li>RAC具有函数式编程和响应式编程的特性</li><li>试图解决以下问题</li><li>传统iOS开发过程中，状态以及状态之间依赖过多的问题</li><li>传统MVC架构的问题：Controller比较复杂，可测试性差</li><li>提供统一的消息传递机制</li></ul><h4 id="哪些途径可以让-ViewController-瘦下来？"><a href="#哪些途径可以让-ViewController-瘦下来？" class="headerlink" title="哪些途径可以让 ViewController 瘦下来？"></a>哪些途径可以让 ViewController 瘦下来？</h4><ul><li>把 Data Source 和其他 Protocols 分离出来(将UITableView或者UICollectionView的代码提取出来放在其他类中)</li><li>将业务逻辑移到 Model 中(和模型有关的逻辑全部在model中写)</li><li>把网络请求逻辑移到 Model 层(网络请求依靠模型)</li><li>把 View 代码移到 View 层(自定义View)</li></ul><h4 id="你在你的项目中用到了哪些设计模式？"><a href="#你在你的项目中用到了哪些设计模式？" class="headerlink" title="你在你的项目中用到了哪些设计模式？"></a>你在你的项目中用到了哪些设计模式？</h4><pre><code>项目中使用了很多的设计模式，我相信面试官最好听到的不仅仅是设计模式的名字，更想听到的是这些设计模式在项目中如何应用。因此，笔者认为这个问题隐式地说明了应该回答设计模式及其在项目中的应用。参考答案：•   单例设计模式：在项目中，单例是必不可少的。比如UIApplication、NSUserDefaults就是苹果提供的单例。在项目中经常会将用户数据管理封装成一个单例类，因此用户的信息需要全局使用。•   MVC设计模式：现在绝大部分项目都是基于MVC设计模式的，现在有一部分开发者采用MVVM、MVP等模式。•   通知(NSNotification)模式：通知在开发中是必不可少的，对于跨模块的类交互，需要使用通知；对于多对多的关系，使用通知更好实现。•   工厂设计模式：在我的项目中使用了大量的工厂设计模式，特别是生成控件的API，都已经封装成一套，全部是扩展的类方法，可简化很多的代码。•   KVC/KVO设计模式：有的时候需要监听某个类的属性值的变化而做出相应的改变，这时候会使用KVC/KVO设计模式。在项目中，我需要监听model中的某个属性值的变化，当变化时，需要更新UI显示，这时候使用KVC/KVO设计模式就很方便了。就说这么多吧，还有很多的设计模式，不过其它并不是那么常用。</code></pre><h4 id="如何实现单例，单例会有什么弊端？"><a href="#如何实现单例，单例会有什么弊端？" class="headerlink" title="如何实现单例，单例会有什么弊端？"></a>如何实现单例，单例会有什么弊端？</h4><pre><code>单例在项目中的是必不可少的，它可以使我们全局都可共享我们的数据。这只是简单的问题，大家根据自己的情况回答。参考答案：•   首先，单例写法有好几种，通常的写法是基于线程安全的写法，结合dispatch_once来使用，保证单例对象只会被创建一次。如果不小心销毁了单例，再调用单例生成方法是不会再创建的。•   其次，由于单例是约定俗成的，因此在实际开发中通常不会去重写内存管理方法。单例确实给我们带来的便利，但是它也会有代价的。单例一旦创建，整个App使用过程都不会释放，这会占用内存，因此不可滥用单例。</code></pre><h4 id="你在你的项目中用到了哪些设计模式？-1"><a href="#你在你的项目中用到了哪些设计模式？-1" class="headerlink" title="你在你的项目中用到了哪些设计模式？"></a>你在你的项目中用到了哪些设计模式？</h4><ul><li><p>设计模式有很多,面试官肯定不想听你把项目里的设计模式名字报给他,他想听得肯定是你是怎么去用这些设计模式的</p></li><li><p>参考答案:</p></li><li><p>MVC:这个设计模型大部分应用应该都在用,介绍下MVC就好</p></li><li><p>单例:单例在项目中用的还是蛮多的,像登录界面,对一些第三方框架二次封装等等</p></li><li><p>KVC/KVO:这个用的应该也很多,KVC用来替换掉系统的tabbar,用KVO来监听偏移量来完成下拉刷新,改变导航条背景颜色这些</p></li><li><p>工厂方法:这个用的更多了,设置一些自定义View肯定要用到这个设计模式</p></li><li><p>如何实现单例，单例会有什么弊端？</p></li><li><p>这个问题还是蛮简单的,说下单例是怎么写的,单例的缺点就好</p></li><li><p>参考答案:</p><pre><code>  // OC版  +(instancetype)sharedInstance  {  static id sharedInstance = nil;  static dispatch_once_t onceToken;  dispatch_once(&amp;onceToken, ^{  sharedInstance = [[self alloc] init];  });  return sharedInstance;  }  // Swift版  static let sharedInstance : &lt;#SingletonClass#&gt; = &lt;#SingletonClass#&gt;()</code></pre></li><li><p>单例的缺点也就是会一直占着这块内存,不会被释放</p></li></ul><h4 id="单例书写"><a href="#单例书写" class="headerlink" title="单例书写"></a>单例书写</h4><ul><li>伪单例</li></ul><pre><code>1、 获取单例对象的方法+ (DataHandle *)sharedDataHandle; // 创建单例对象的方法。类方法 命名规则： shared + 类名2、 方法的实现// 因为实例是全局的 因此要定义为全局变量，且需要存储在静态区，不释放。不能存储在栈区。static DataHandle *handle = nil;// 伪单例 和 完整的单例。 以及线程的安全。// 一般使用伪单例就足够了 每次都用 sharedDataHandle 创建对象。+ (DataHandle *)sharedDataHandle{    // 添加同步锁，一次只能一个线程访问。如果有多个线程访问，等待。一个访问结束后下一个。    @synchronized(self){        if (nil == handle) {            handle = [[DataHadle alloc] init];                     }    }  return handle;}</code></pre><ul><li>完整单例</li></ul><pre><code>完整的单例完整的单例要求比较高，不仅要求我们通过方法获取的对象是单例，如果有 对该对象进行copy mutableCopy copyWithZone 等操作时，也是同一份对象。这就要求我们必须重写这些方法，在这些方法内部做一些操作。完整的单例要做到四个方面：为单例对象实现一个静态实例,然后设置成nil，构造方法检查静态实例是否为nil，是则新建并返回一个实例，重写allocWithZone方法，用来保证其他人直接使用alloc和init试图获得一个新实例的时候不会产生一个新实例，适当实现copyWithZone，,retain,retainCount,release和autorelease 等方法1、 获取单例对象的方法+ (DataHandle *)sharedDataHandle; // 创建单例对象的方法。类方法 命名规则： shared + 类名2、 方法的实现@synchronized(self){        if (nil == handle) {            handle = [[super allocWithZone:nil] init]; // 避免死循环            // 如果 在单例类里面重写了 allocWithZone 方法 ，在创建单例对象时 使用 [[DataHandle alloc] init] 创建，会死循环。        }    } return handle;3、 重写 allocWithZone copy mutableCopy copyWithZone防止外界拷贝造成多个实例， 保证实例的唯一性。注意：如果自己重写了 allocWithZone 就不要再调用自身的 alloc 方法，否则会出现死循环。+ (instancetype)allocWithZone:(struct _NSZone *)zone{    return [DataHandle sharedDataHandle];}- (id)copy{    return self;}- (id)mutableCopy{    return self;}+ (id)copyWithZone:(struct _NSZone *)zone{    return self;}4、 重写 alloc retain release autorelease retainCount+ (instancetype)alloc{    return [DataHandle sharedDataHandle];}//  因为只有一个实例， 一直不释放，所以不增加引用计数。无意义。- (instancetype)retain{    return self;}- (oneway void)release{    // nothing}- (instancetype)autorelease{    return self;}- (NSUInteger)retainCount{    return NSUIntegerMax; // 返回整形最大值。}</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题18--多媒体</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9818-%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9818-%E5%A4%9A%E5%AA%92%E4%BD%93/</url>
      <content type="html"><![CDATA[<h4 id="iPhone-OS主要提供了几种播放音频的方法？"><a href="#iPhone-OS主要提供了几种播放音频的方法？" class="headerlink" title="iPhone OS主要提供了几种播放音频的方法？"></a>iPhone OS主要提供了几种播放音频的方法？</h4><p>SystemSound Services</p><p>AVAudioPlayer 类</p><p>Audio Queue Services</p><p>OpenAL</p><h3 id="使用AVAudioPlayer类调用哪个框架、使用步骤？"><a href="#使用AVAudioPlayer类调用哪个框架、使用步骤？" class="headerlink" title="使用AVAudioPlayer类调用哪个框架、使用步骤？"></a>使用AVAudioPlayer类调用哪个框架、使用步骤？</h3><p>AVFoundation.framework</p><p>步骤：配置 AVAudioPlayer 对象；</p><p>实现 AVAudioPlayer 类的委托方法；</p><p>控制 AVAudioPlayer 类的对象；</p><p>监控音量水平；</p><p>回放进度和拖拽播放。</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题17--多线程</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9817-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9817-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h4 id="你们项目中为什么多线程用GCD而不用NSOperation呢-你有没有发现国外的大牛他们多线程都是用NSOperation-你能告诉我他们这样做的理由吗"><a href="#你们项目中为什么多线程用GCD而不用NSOperation呢-你有没有发现国外的大牛他们多线程都是用NSOperation-你能告诉我他们这样做的理由吗" class="headerlink" title="你们项目中为什么多线程用GCD而不用NSOperation呢? 你有没有发现国外的大牛他们多线程都是用NSOperation? 你能告诉我他们这样做的理由吗?"></a>你们项目中为什么多线程用GCD而不用NSOperation呢? 你有没有发现国外的大牛他们多线程都是用NSOperation? 你能告诉我他们这样做的理由吗?</h4><p>关系:</p><p>①:先搞清两者的关系,NSOpertaionQueue用GCD构建封装的，是GCD的高级抽象!</p><p>②:GCD仅仅支持FIFO队列，而NSOperationQueue中的队列可以被重新设置优先级，从而实现不同操作的执行顺序调整。GCD不支持异步操作之间的依赖关系设置。如果某个操作的依赖另一个操作的数据（生产者-消费者模型是其中之一），使用NSOperationQueue能够按照正确的顺序执行操作。GCD则没有内建的依赖关系支持。</p><p>③:NSOperationQueue支持KVO，意味着我们可以观察任务的执行状态。</p><p>了解以上不同，我们可以从以下角度来回答</p><p>性能:①:GCD更接近底层，而NSOperationQueue则更高级抽象，所以GCD在追求性能的底层操作来说，是速度最快的。这取决于使用Instruments进行代码性能分析，如有必要的话</p><p>②:从异步操作之间的事务性，顺序行，依赖关系。GCD需要自己写更多的代码来实现，而NSOperationQueue已经内建了这些支持</p><p>③:如果异步操作的过程需要更多的被交互和UI呈现出来，NSOperationQueue会是一个更好的选择。底层代码中，任务之间不太互相依赖，而需要更高的并发能力，GCD则更有优势</p><p>最后的一句话:别忘了高德纳的教诲：“在大概97%的时间里，我们应该忘记微小的性能提升。过早优化是万恶之源。”只有Instruments显示有真正的性能提升时才有必要用低级的GCD。</p><h4 id="详解GCD死锁"><a href="#详解GCD死锁" class="headerlink" title="详解GCD死锁"></a>详解GCD死锁</h4><h4 id="unix上进程怎么通信？"><a href="#unix上进程怎么通信？" class="headerlink" title="unix上进程怎么通信？"></a>unix上进程怎么通信？</h4><ul><li>UNIX主要支持三种通信方式：</li><li>基本通信：主要用来协调进程间的同步和互斥 <ul><li>锁文件通信:通信的双方通过查找特定目录下特定类型的文件(称锁文件)来完成进程间  对临界资源访问时的互斥；例如进程p1访问一个临界资源，首先查看是否有一个特定类型文件，若有，则等待一段时间再查找锁文件。</li><li>记录锁文件</li></ul></li><li>管道通信：适应大批量的数据传递</li><li>IPC    ：适应大批量的数据传递</li></ul><h4 id="列举几种进程的同步机制、进程的通信途径、死锁及死锁的处理方法。"><a href="#列举几种进程的同步机制、进程的通信途径、死锁及死锁的处理方法。" class="headerlink" title="列举几种进程的同步机制、进程的通信途径、死锁及死锁的处理方法。"></a>列举几种进程的同步机制、进程的通信途径、死锁及死锁的处理方法。</h4><ul><li>进程的同步机制原子操作 信号量机制 自旋锁 管程，会合，分布式系统</li><li>进程之间通信的途径：共享存储系统消息传递系统管道：以文件系统为基础</li><li>进程死锁的原因：资源竞争及进程推进顺序非法</li><li>死锁的4个必要条件：互斥、请求保持、不可剥夺、环路</li><li>死锁的处理：鸵鸟策略、预防策略、避免策略、检测与解除死锁</li></ul><h4 id="线程与进程的区别和联系"><a href="#线程与进程的区别和联系" class="headerlink" title="线程与进程的区别和联系?"></a>线程与进程的区别和联系?</h4><ul><li>线程是进程的基本单位。</li><li>进程和线程都是由操作系统所产生的程序运行的基本单元,系统利用该基本单元实现系统对应用的并发性。</li><li>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。</li><li>进程有独立的地址空间,一个进程崩溃后,在保护模式下 不会对其它进程产生影响。</li><li>线程只是一个进程中的不同执行路径。</li><li>线程有自己的堆栈和局部变量,但线程之间没有单独的地址空间,一个线程死掉就等于整个进程死掉,所以多进程的程序要比多线程的程序健壮,但在进程切换时,耗费资源较大,效率要差一些。</li><li>但对于一些要求同时进行并且又要共享某些变量的并发操作,只能用线程,不能用进程。</li></ul><h4 id="iOS线程间怎么通信？"><a href="#iOS线程间怎么通信？" class="headerlink" title="iOS线程间怎么通信？"></a>iOS线程间怎么通信？</h4><ul><li>performSelector:onThread:withObject:waitUntilDone:</li><li>NSMachPort<br> (基本机制：A线程（父线程）创建NSMachPort对象，并加入A线程的runloop。当创建B线程（辅助线程）时，将创建的NSMachPort对象传递到主体入口点，B线程（辅助线程）就可以使用相同的端口对象将消息传回A线程（父线程）。)</li></ul><h4 id="iOS多线程的底层实现？"><a href="#iOS多线程的底层实现？" class="headerlink" title="iOS多线程的底层实现？"></a>iOS多线程的底层实现？</h4><ul><li>首先搞清楚什么是线程、什么是多线程 <ul><li>Mach是第一个以多线程方式处理任务的系统，因此多线程的底层实现机制是基于Mach的线程</li><li>开发中很少用Mach级的线程，因为Mach级的线程没有提供多线程的基本特征，线程之间是独立的</li></ul></li><li>开发中实现多线程的方案 <ul><li>C语言的POSIX接口：#include &lt;pthread.h&gt;</li><li>OC的NSThread</li><li>C语言的GCD接口（性能最好，代码更精简）</li><li>OC的NSOperation和NSOperationQueue（基于GCD）</li></ul></li></ul><h4 id="谈谈多线程安全问题的几种解决方案-何为线程同步-如何实现的-分线程回调主线程方法是什么-有什么作用"><a href="#谈谈多线程安全问题的几种解决方案-何为线程同步-如何实现的-分线程回调主线程方法是什么-有什么作用" class="headerlink" title="谈谈多线程安全问题的几种解决方案?何为线程同步,如何实现的?分线程回调主线程方法是什么,有什么作用?"></a>谈谈多线程安全问题的几种解决方案?何为线程同步,如何实现的?分线程回调主线程方法是什么,有什么作用?</h4><ul><li>解决方案: 使用锁: 锁是线程编程同步工具的基础。锁可以让你很容易保护代码中一大块区域以便你可以确保代码的正确性。 <ol><li>使用POSIX互斥锁;</li><li>使用NSLock类;</li><li>使用@synchronized指令等。</li></ol></li><li>回到主线程的方法: dispatch_async(dispatch_get_main_queue(), ^{ });</li><li>作用: 主线程是显示UI界面,子线程多数是进行数据处理</li></ul><h4 id="使用atomic一定是线程安全的吗？"><a href="#使用atomic一定是线程安全的吗？" class="headerlink" title="使用atomic一定是线程安全的吗？"></a>使用atomic一定是线程安全的吗？</h4><pre><code>不是的。 atomic原子操作，系统会为setter方法加锁。 具体使用 @synchronized(self){//code } nonatomic不会为setter方法加锁。 atomic：线程安全，需要消耗大量系统资源来为属性加锁 nonatomic：非线程安全，适合内存较小的移动设备使用atomic并不能保证绝对的线程安全，对于要绝对保证线程安全的操作，还需要使用更高级的方式来处理，比如NSSpinLock、@syncronized等</code></pre><h4 id="谈谈你对多线程开发的理解-多线程的好处，多线程的作用-？ios中有几种实现多线程的方法？"><a href="#谈谈你对多线程开发的理解-多线程的好处，多线程的作用-？ios中有几种实现多线程的方法？" class="headerlink" title="谈谈你对多线程开发的理解(多线程的好处，多线程的作用)？ios中有几种实现多线程的方法？"></a>谈谈你对多线程开发的理解(多线程的好处，多线程的作用)？ios中有几种实现多线程的方法？</h4><ul><li>好处： <ul><li>使用线程可以把占据时间长的程序中的任务放到后台去处理</li><li>用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度</li><li>程序的运行效率可能提高</li><li>在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。</li></ul></li><li>缺点： <ul><li>如果有大量的线程,会影响性能,因为操作系统需要在它们之间切换。</li><li>更多的线程需要更多的内存空间。</li><li>线程的中止需要考虑其对程序运行的影响。</li></ul></li><li>通常块模型数据是在多个线程间共享的，需要防止线程死锁情况的发生。</li><li>实现多线程的方法： <ol><li>NSObject的类方法 // -(void)performSelectornBackground/OnMainThread:(SEL)aSelector withObject:(id)arg</li><li>NSThread</li><li>NSOperation</li><li>GCD</li></ol></li></ul><h4 id="OC中异步使用的哪种事件模型-iOS中异步实现机制"><a href="#OC中异步使用的哪种事件模型-iOS中异步实现机制" class="headerlink" title="OC中异步使用的哪种事件模型,iOS中异步实现机制"></a>OC中异步使用的哪种事件模型,iOS中异步实现机制</h4><ul><li>异步非阻塞 I/O（AIO）</li></ul><h4 id="详细谈谈GCD"><a href="#详细谈谈GCD" class="headerlink" title="详细谈谈GCD"></a>详细谈谈GCD</h4><ol><li>推出的时间 iOS4 目的是用来取代NSThread（ios2.0推出）的，是 C语言框架，它能够自动利用更多CPU的核数，并且会自动管理线程的生命周期。<ul><li>CGD的两个核心概念：任务， 队列</li><li>任务：记为在block中执行的代码。</li><li>队列：用来存放任务的。</li><li>注意事项： 队列 != 线程。队列中存放的任务最后都要由线程来执行!。队列的原则:先进先出,后进后出(FIFO/ First In First Out)</li></ul></li><li>队列又分为四种种：1 串行队列  2 并发队列 3 主队列 4 全局队列<ul><li>串行队列： 任务一个接一个的执行。</li><li>并发队列： 队列中的任务并发执行。</li><li>主队列： 跟主线程相关的队列，主队列里面的内容都会在主线程中执行（我们一般在主线程中刷新UI）。</li><li>全局队列： 一个特殊的并发队列。</li></ul></li><li><p>并发队列与全局队列的区别：</p><ul><li>并发队列有名称,可以跟踪错误。全局队列没有</li><li>在ARC中两个队列不需要考虑释放内存,但是在MRC中并发队列是创建出来的需要release操作，而全局队列只有一个不需要。</li><li>一般在开发过程中我们使用全局队列。</li></ul></li><li><p>执行任务的两个函数</p><ul><li>‘同步’执行任务:dispatch_sync(&lt;#dispatch_queue_t queue#&gt;, &lt;#^(void)block#&gt;)</li><li>‘异步’执行任务:dispatch_async(dispatch_queue_t queue, &lt;#^(void)block#&gt;)</li></ul></li><li>“同步”和”异步”的区别:<ul><li>“同步”: 只能在’当前’线程中执行任务,不具备开启新线程的能力.</li><li>“异步”: 可以在’新’的线程中执行任务,具备开启新线程的能力.</li></ul></li><li>各个队列的执行效果：<ul><li>串行队列同步执行，既在当前线程中顺序执行</li><li>串行队列异步执行，开辟一条新的线程，在该线程中顺序执行</li><li>并行队列同步执行，不开辟线程，在当前线程中顺序执行</li><li>并行队列异步执行，开辟多个新的线程，并且线程会重用，无序执行</li><li>主队列异步执行，不开辟新的线程，顺序执行</li><li>主队列同步执行，会造成死锁（’主线程’和’主队列’相互等待,卡住主线程）</li></ul></li><li>线程间通讯：经典案例：子线程进行耗时操作（例如下载更新等）主线程进行UI刷新。<ul><li>经典用法(子线程下载(耗时操作),主线程刷新UI):</li></ul></li></ol><pre><code>dispatch_async(dispatch_get_global_queue(0, 0), ^{  // 执行耗时的异步操作...dispatch_async(dispatch_get_main_queue(), ^{// 回到主线程，执行UI刷新操作</code></pre><ol><li><p>延迟操作</p><p>调用 NSObject 方法:[self performSelector:@selector(run) withObject:nil afterDelay:2.0];</p><p>// 2秒后再调用self的run方法</p><p>GCD函数实现延时执行:dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{</p><p>// 2秒后执行这里的代码… 在哪个线程执行，跟队列类型有关</p></li><li><p>队列组的使用：</p><ul><li>项目需求:首先:分别异步执行两个耗时操作;其次:等两次耗时操作都执行完毕后,再回到主线程执行操作.使用队列组(dispatch_group_t)快速,高效的实现上述需求.</li></ul><p>dispatch_group_t group = dispatch_group_create(); // 队列组</p><p>dispatch_queue_t queue = dispatch_get_global_queue(0, 0); // 全局并发队列</p><p>dispatch_group_async(group, queue, ^{// 异步执行操作1</p><p>// longTime1</p><p>});</p><p>dispatch_group_async(group, queue, ^{  // 异步执行操作2</p><p>// longTime2</p><p>});</p><p>dispatch_group_notify(group, dispatch_get_main_queue(), ^{</p><p>// 在主线程刷新数据<br> // reload Data<br> });</p></li></ol><h4 id="GCD内部怎么实现的"><a href="#GCD内部怎么实现的" class="headerlink" title="GCD内部怎么实现的"></a>GCD内部怎么实现的</h4><ul><li>iOS和OS X的核心是XNU内核，GCD是基于XNU内核实现的</li><li>GCD的API全部在libdispatch库中</li><li>GCD的底层实现主要有Dispatch Queue和Dispatch Source <ul><li>Dispatch Queue ：管理block(操作)</li><li>Dispatch Source ：处理事件(MACH端口发送,MACH端口接收,检测与进程相关事件等10种事件)</li></ul></li></ul><h4 id="GCD的queue、main-queue中执行的代码一定是在main-thread么？"><a href="#GCD的queue、main-queue中执行的代码一定是在main-thread么？" class="headerlink" title="GCD的queue、main queue中执行的代码一定是在main thread么？"></a>GCD的queue、main queue中执行的代码一定是在main thread么？</h4><pre><code>•   对于queue中所执行的代码不一定在main thread中。如果queue是在主线程中创建的，那么所执行的代码就是在主线程中执行。如果是在子线程中创建的，那么就不会在main thread中执行。•   对于main queue就是在主线程中的，因此一定会在主线程中执行。获取main queue就可以了，不需要我们创建，获取方式通过调用方法dispatchgetmain_queue来获取。</code></pre><h4 id="如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）"><a href="#如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）" class="headerlink" title="如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）"></a>如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</h4><pre><code>使用Dispatch Group追加block到Global Group Queue,这些block如果全部执行完毕，就会执行Main Dispatch Queue中的结束处理的block。dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, );dispatch_group_t group = dispatch_group_create();dispatch_group_async(group, queue, ^{ /*加载图片1 */ });dispatch_group_async(group, queue, ^{ /*加载图片2 */ });dispatch_group_async(group, queue, ^{ /*加载图片3 */ });dispatch_group_notify(group, dispatch_get_main_queue(), ^{        // 合并图片});</code></pre><h4 id="有a、b、c、d-4个异步请求，如何判断a、b、c、d都完成执行？如果需要a、b、c、d顺序执行，该如何实现？"><a href="#有a、b、c、d-4个异步请求，如何判断a、b、c、d都完成执行？如果需要a、b、c、d顺序执行，该如何实现？" class="headerlink" title="有a、b、c、d 4个异步请求，如何判断a、b、c、d都完成执行？如果需要a、b、c、d顺序执行，该如何实现？"></a>有a、b、c、d 4个异步请求，如何判断a、b、c、d都完成执行？如果需要a、b、c、d顺序执行，该如何实现？</h4><pre><code>1.  对于这四个异步请求，要判断都执行完成最简单的方式就是通过GCD的group来实现：2.  dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);3.  dispatch_group_t group = dispatch_group_create();4.  dispatch_group_async(group, queue, ^{ /*任务a */ });5.  dispatch_group_async(group, queue, ^{ /*任务b */ });6.  dispatch_group_async(group, queue, ^{ /*任务c */ }); 7.  dispatch_group_async(group, queue, ^{ /*任务d */ }); 8.   9.  dispatch_group_notify(group, dispatch_get_main_queue(), ^{10.     // 在a、b、c、d异步执行完成后，会回调这里11. });当然，我们还可以使用非常老套的方法来处理，通过四个变量来标识a、b、c、d四个任务是否完成，然后在runloop中让其等待，当完成时才退出run loop。但是这样做会让后面的代码得不到执行，直到Run loop执行完毕。要求顺序执行，那么可以将任务放到串行队列中，自然就是按顺序来异步执行了</code></pre><h4 id="发送10个网络请求，然后再接收到所有回应之后执行后续操作，如何实现？"><a href="#发送10个网络请求，然后再接收到所有回应之后执行后续操作，如何实现？" class="headerlink" title="发送10个网络请求，然后再接收到所有回应之后执行后续操作，如何实现？"></a>发送10个网络请求，然后再接收到所有回应之后执行后续操作，如何实现？</h4><pre><code>从题目分析可知，10个请求要全部完成后，才执行某一功能。比如，下载10图片后合成一张大图，就需要异步全部下载完成后，才能合并成大图。做法：通过dispatch_group_t来实现，将每个请求放入到Group中，将合并成大图的操作放在dispatch_group_notify中实现。dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);dispatch_group_t group = dispatch_group_create();dispatch_group_async(group, queue, ^{ /*加载图片1 */ });dispatch_group_async(group, queue, ^{ /*加载图片2 */ });dispatch_group_async(group, queue, ^{ /*加载图片3 */ }); dispatch_group_notify(group, dispatch_get_main_queue(), ^{    // 合并图片});</code></pre><h4 id="苹果为什么要废弃dispatch-get-current-queue？"><a href="#苹果为什么要废弃dispatch-get-current-queue？" class="headerlink" title="苹果为什么要废弃dispatch_get_current_queue？"></a>苹果为什么要废弃dispatch_get_current_queue？</h4><ul><li>dispatch_get_current_queue容易造成死锁。详情点击该API查看官方注释。</li></ul><h4 id="如果让你来实现-dispatch-once，你会怎么做？"><a href="#如果让你来实现-dispatch-once，你会怎么做？" class="headerlink" title="如果让你来实现 dispatch_once，你会怎么做？"></a>如果让你来实现 dispatch_once，你会怎么做？</h4><ul><li><a href="https://link.jianshu.com?t=http://www.dreamingwish.com/article/gcd-guide-dispatch-once-2.html" target="_blank" rel="noopener">http://www.dreamingwish.com/article/gcd-guide-dispatch-once-2.html</a>（超级详细解析）</li><li>个人觉得说出实现的思路即可，无锁的线程同步编程，每一处的线程竞争都考虑到并妥善处理</li><li>线程A执行Block时，任何其它线程都需要等待。</li><li>线程A执行完Block应该立即标记任务完成状态，然后遍历信号量链来唤醒所有等待线程。</li><li>线程A遍历信号量链来signal时，任何其他新进入函数的线程都应该直接返回而无需等待。</li><li>线程A遍历信号量链来signal时，若有其它等待线程B仍在更新或试图更新信号量链，应该保证此线程B能正确完成其任务：a.直接返回 b.等待在信号量上并很快又被唤醒。</li><li>线程B构造信号量时，应该考虑线程A随时可能改变状态（“等待”、“完成”、“遍历信号量链”）。</li><li>线程B构造信号量时，应该考虑到另一个线程C也可能正在更新或试图更新信号量链，应该保证B、C都能正常完成其任务：a.增加链节并等待在信号量上 b.发现线程A已经标记“完成”然后直接销毁信号量并退出函数。</li></ul><h4 id="关于NSOperation"><a href="#关于NSOperation" class="headerlink" title="关于NSOperation:"></a>关于NSOperation:</h4><ul><li>NSOperation: 抽象类,不能直接使用,需要使用其子类.(类似的类还有核心动画)</li><li>两个常用子类: NSInvocationOperation(调用) 和 NSBlockOperation(块);</li><li>两者没有本质区别,后者使用 Block 的形式组织代码,使用相对方便.</li><li>NSInvocationOperation在调用start方法后，不会开启新的线程只会在当前线程中执行。</li><li>NSBlockOperation 在调用start方法后，如果封装的操作数&gt;1会开辟多条线程执行 =1 只会在当前线程执行.</li><li>NSOperationQueue 创建的操作队列默认为全局队列，队列中的操作执行顺序是无序的，如果需要让它有序执行需要添加依赖关系。</li><li>// 操作op3依赖于操作op2  [op3 addDependency:op2];</li><li>// 操作op2依赖于操作op1  [op2 addDependency:op1];</li><li>同时可以设置最大并发数</li><li>NSOperationQueue NSOperation支持 取消暂停的操作 但是正在进行的的操作并不能取消，这一旦取消不可恢复.</li><li>NSOperationQueue支持KVO，可以监测operation是否正在执行（isExecuted）、是否结束（isFinished），是否取消（isCanceld）</li></ul><h4 id="NSOperation-queue"><a href="#NSOperation-queue" class="headerlink" title="NSOperation queue?"></a>NSOperation queue?</h4><ul><li>存放NSOperation的集合类。不能说队列，不是严格的先进先出</li></ul><h4 id="NSOperation与GCD的区别"><a href="#NSOperation与GCD的区别" class="headerlink" title="NSOperation与GCD的区别"></a>NSOperation与GCD的区别</h4><ul><li>GCD<ol><li>GCD是iOS4.0推出的，主要针对多核cpu做了优化，是纯c语言的技术。</li><li>GCD是将任务（block）添加到队列（串行、并行、全局、主队列），并且以同步/异步的方式执行任务的函数。</li><li>GCD提供了一些NSOperation不具备的功能 <ul><li>一次性执行</li><li>延迟执行</li><li>调度组</li><li>GCD 是严格的队列，先进先出 FIFO；</li></ul></li></ol></li><li>NSOperation<ol><li>NSOperation是iOS2.0推出的，iOS4.0以后又重写了NSOperation</li><li>NSOperation是将操作（异步的任务）添加到队列（并发队列），就会执行指定的函数</li><li>NSOperation提供的方便操作 <ul><li>最大并发数</li><li>队列的暂停和继续</li><li>取消所有的操作</li><li>指定操作之间的依赖关系依赖关系，可以让异步任务同步执行.</li><li>将KVO用于NSOperation中，监听一个operation是否完成。</li><li>能够设置NSOperation的优先级，能够使同一个并行队列中的任务区分先后地执行</li><li>对NSOperation进行继承，在这之上添加成员变量与成员方法，提高整个代码的复用度</li></ul></li></ol></li></ul><h4 id="GCD与NSThread的区别"><a href="#GCD与NSThread的区别" class="headerlink" title="GCD与NSThread的区别"></a>GCD与NSThread的区别</h4><ul><li>NSThread 通过 @selector 指定要执行的方法，代码分散</li><li>GCD 通过 block 指定要执行的代码，代码集中, 所有的代码写在一起的，让代码更加简单，易于阅读和维护</li><li>使用 GCD 不需要管理线程的创建/销毁/复用的过程！程序员不用关心线程的生命周期</li><li>如果要开多个线程 NSThread 必须实例化多个线程对象</li><li>NSThread 靠 NSObject 的分类方法实现的线程间通讯，</li></ul><h4 id="为什么要取消-恢复队列呢？"><a href="#为什么要取消-恢复队列呢？" class="headerlink" title="为什么要取消/恢复队列呢？"></a>为什么要取消/恢复队列呢？</h4><ul><li>一般在内存警告后取消队列中的操作。</li><li>为了保证scorllView在滚动的时候流畅 通常在滚动开始时，暂停队列中的所有操作，滚动结束后，恢复操作。</li></ul><h4 id="Object-C中创建线程的方法是什么-如果在主线程中执行代码，方法是什么-如果想延时执行代码、方法又是什么"><a href="#Object-C中创建线程的方法是什么-如果在主线程中执行代码，方法是什么-如果想延时执行代码、方法又是什么" class="headerlink" title="Object C中创建线程的方法是什么?如果在主线程中执行代码，方法是什么?如果想延时执行代码、方法又是什么?"></a>Object C中创建线程的方法是什么?如果在主线程中执行代码，方法是什么?如果想延时执行代码、方法又是什么?</h4><pre><code>线程创建有三种方法：使用NSThread创建、使用GCD的dispatch、使用子类化的NSOperation,然后将其加入NSOperationQueue;NSThread创建线程的三种方法： NSThread *thread = [[NSThread alloc]initWithTarget:self selector:@selector(run:) object:@&quot;nil&quot;]; [NSThread detachNewThreadSelector:@selector(run:) toTarget:self withObject:@&quot;我是分离出来的子线程&quot;];[self performSelectorInBackground:@selector(run:) withObject:@&quot;我是后台线程&quot;];在主线程执行代码，就调用performSelectorOnMainThread方法。如果想延时执行代码可以调用performSelector:onThread:withObject:waitUntilDone:方法；GCD：利用异步函数dispatch_async()创建子线程。在主线程执行代码，dispatch_async(dispatch_get_main_queue(), ^{});延迟执行代码（延迟·可以控制代码在哪个线程执行）：dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{});NSOperationQueue：使用NSOperation的子类封装操作，再将操作添加到NSOperationQueue创建的队列中，实现多线程。在主线程执行代码，只要将封装代码的NSOperation对象添加到主队列就可以了。</code></pre><h4 id="下面关于线程管理错误的是"><a href="#下面关于线程管理错误的是" class="headerlink" title="下面关于线程管理错误的是"></a>下面关于线程管理错误的是</h4><pre><code>A. GCD所用的开销要比NSThread大B. 可以在子线程中修改UI元素C. NSOperationQueue是比NSthread更高层的封装D. GCD可以根据不同优先级分配线程</code></pre><ul><li>参考答案：B</li><li>理由：首先，UI元素的更新必须在主线程。GCD与Block配合使用，block需要自动捕获上下文变量信息等，因此需要更多的资源，故比NSThread开销要大一些。NSOperationQueue与NSOperation配合使用，比NSThread更易于操作线程。GCD提供了多个优先级，我们可以根据设置优先级，让其自动为我们分配线程。</li></ul>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题16--WebView与JS交互</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9816-WebView%E4%B8%8EJS%E4%BA%A4%E4%BA%92/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9816-WebView%E4%B8%8EJS%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<h4 id="iOS中调用HTML"><a href="#iOS中调用HTML" class="headerlink" title="iOS中调用HTML"></a>iOS中调用HTML</h4><pre><code> 1. 加载网页    NSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;index&quot; withExtension:@&quot;html&quot;];    NSURLRequest *request = [NSURLRequest requestWithURL:url];    [self.webView loadRequest:request]; 2. 删除    NSString *str1 = @&quot;var word = document.getElementById(&#39;word&#39;);&quot;;    NSString *str2 = @&quot;word.remove();&quot;;    [webView  stringByEvaluatingJavaScriptFromString:str1];    [webView  stringByEvaluatingJavaScriptFromString:str2];3. 更改    NSString *str3 = @&quot;var change = document.getElementsByClassName(&#39;change&#39;)[0];&quot;                       &quot;change.innerHTML = &#39;好你的哦!&#39;;&quot;;    [webView stringByEvaluatingJavaScriptFromString:str3];4.  插入    NSString *str4 =@&quot;var img = document.createElement(&#39;img&#39;);&quot;                     &quot;img.src = &#39;img_01.jpg&#39;;&quot;                     &quot;img.width = &#39;160&#39;;&quot;                     &quot;img.height = &#39;80&#39;;&quot;                     &quot;document.body.appendChild(img);&quot;;    [webView stringByEvaluatingJavaScriptFromString:str4]; 5. 改变标题    NSString *str1 = @&quot;var h1 = document.getElementsByTagName(&#39;h1&#39;)[0];&quot;                      &quot;h1.innerHTML=&#39;简书啊啊啊啊&#39;;&quot;;    [webView stringByEvaluatingJavaScriptFromString:str1];   6. 删除尾部    NSString *str2 =@&quot;document.getElementById(&#39;footer&#39;).remove();&quot;;    [webView stringByEvaluatingJavaScriptFromString:str2];7. 拿出所有的网页内容    NSString *str3 = @&quot;document.body.outerHTML&quot;;    NSString *html = [webView stringByEvaluatingJavaScriptFromString:str3];    NSLog(@&quot;%@&quot;, html);</code></pre><h4 id="在HTML中调用OC"><a href="#在HTML中调用OC" class="headerlink" title="在HTML中调用OC"></a>在HTML中调用OC</h4><pre><code>-(BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType{    NSString *str = request.URL.absoluteString;    NSRange range = [str rangeOfString:@&quot;ZJY://&quot;];    if (range.location != NSNotFound) {        NSString *method = [str substringFromIndex:range.location + range.length];        SEL sel = NSSelectorFromString(method);        [self performSelector:sel];    }    return YES;}// 访问相册- (void)getImage{    UIImagePickerController *pickerImg = [[UIImagePickerController alloc]init];    pickerImg.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;    [self presentViewController:pickerImg animated:YES completion:nil];}</code></pre><h4 id="JavaScriptCore-使用"><a href="#JavaScriptCore-使用" class="headerlink" title="JavaScriptCore 使用"></a>JavaScriptCore 使用</h4><ul><li>JavaScriptCore是webkit的一个重要组成部分，主要是对JS进行解析和提供执行环境。iOS7后苹果在iPhone平台推出，极大的方便了我们对js的操作。我们可以脱离webview直接运行我们的js。iOS7以前我们对JS的操作只有webview里面一个函数stringByEvaluatingJavaScriptFromString，JS对OC的回调都是基于URL的拦截进行的操作。大家用得比较多的是WebViewJavascriptBridge和EasyJSWebView这两个开源库，很多混合都采用的这种方式。</li></ul><pre><code>#import &quot;JSContext.h&quot;#import &quot;JSValue.h&quot;#import &quot;JSManagedValue.h&quot;#import &quot;JSVirtualMachine.h&quot;#import &quot;JSExport.h&quot;</code></pre><ul><li>JSContext:JS执行的环境，同时也通过JSVirtualMachine管理着所有对象的生命周期，每个JSValue都和JSContext相关联并且强引用context。</li><li>JSValue:JS对象在JSVirtualMachine中的一个强引用，其实就是Hybird对象。我们对JS的操作都是通过它。并且每个JSValue都是强引用一个context。同时，OC和JS对象之间的转换也是通过它，相应的类型转换如下：</li></ul><table><thead><tr><th>Objective-C type</th><th>JavaScript type</th></tr></thead><tbody><tr><td>nil</td><td>undefined</td></tr><tr><td>NSNull</td><td>null</td></tr><tr><td>NSString</td><td>string</td></tr><tr><td>NSNumber</td><td>number, boolean</td></tr><tr><td>NSDictionary</td><td>Object object</td></tr><tr><td>NSArray</td><td>Array object</td></tr><tr><td>NSDate</td><td>Date object</td></tr><tr><td>NSBlock (1)</td><td>Function object (1)</td></tr><tr><td>id (2)</td><td>Wrapper object (2)</td></tr><tr><td>Class (3)</td><td>Constructor object (3)</td></tr></tbody></table><ul><li>JSManagedValue:JS和OC对象的内存管理辅助对象。由于JS内存管理是垃圾回收，并且JS中的对象都是强引用，而OC是引用计数。如果双方相互引用，势必会造成循环引用，而导致内存泄露。我们可以用JSManagedValue保存JSValue来避免。</li><li>JSVirtualMachine:JS运行的虚拟机，有独立的堆空间和垃圾回收机制。</li><li>JSExport:一个协议，如果JS对象想直接调用OC对象里面的方法和属性，那么这个OC对象只要实现这个JSExport协议就可以了。</li><li>Objective-C -&gt; JavaScript</li></ul><pre><code>    self.context = [[JSContext alloc] init];    NSString *js = @&quot;function add(a,b) {return a+b}&quot;;    [self.context evaluateScript:js];    JSValue *n = [self.context[@&quot;add&quot;] callWithArguments:@[@2, @3]];    NSLog(@&quot;---%@&quot;, @([n toInt32]));//---5</code></pre><ul><li>JavaScript -&gt; Objective-C.JS调用OC有两个方法：block和JSExport protocol。</li><li>block(JS function):</li></ul><pre><code>    self.context = [[JSContext alloc] init];    self.context[@&quot;add&quot;] = ^(NSInteger a, NSInteger b) {        NSLog(@&quot;---%@&quot;, @(a + b));    };    [self.context evaluateScript:@&quot;add(2,3)&quot;];    我们定义一个block，然后保存到context里面，其实就是转换成了JS的function。然后我们直接执行这个function，调用的就是我们的block里面的内容了。</code></pre><ul><li>JSExport protocol:</li></ul><pre><code>//定义一个JSExport protocol@protocol JSExportTest &lt;JSExport&gt;- (NSInteger)add:(NSInteger)a b:(NSInteger)b;@property (nonatomic, assign) NSInteger sum;@end//建一个对象去实现这个协议：@interface JSProtocolObj : NSObject&lt;JSExportTest&gt;@end@implementation JSProtocolObj@synthesize sum = _sum;//实现协议方法- (NSInteger)add:(NSInteger)a b:(NSInteger)b{    return a+b;}//重写setter方法方便打印信息，- (void)setSum:(NSInteger)sum{    NSLog(@&quot;--%@&quot;, @(sum));    _sum = sum;}@end//在VC中进行测试@interface ViewController () &lt;JSExportTest&gt;@property (nonatomic, strong) JSProtocolObj *obj;@property (nonatomic, strong) JSContext *context;@end@implementation ViewController- (void)viewDidLoad {    [super viewDidLoad];    //创建context    self.context = [[JSContext alloc] init];    //设置异常处理    self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) {        [JSContext currentContext].exception = exception;        NSLog(@&quot;exception:%@&quot;,exception);    };    //将obj添加到context中    self.context[@&quot;OCObj&quot;] = self.obj;    //JS里面调用Obj方法，并将结果赋值给Obj的sum属性    [self.context evaluateScript:@&quot;OCObj.sum = OCObj.addB(2,3)&quot;];}demo很简单，还是定义了一个两个数相加的方法，还有一个保存结果的变量。在JS中进行调用这个对象的方法，并将结果赋值sum。唯一要注意的是OC的函数命名和JS函数命名规则问题。协议中定义的是add: b:，但是JS里面方法名字是addB(a,b)。可以通过JSExportAs这个宏转换成JS的函数名字。</code></pre><ul><li>内存管理:现在来说说内存管理的注意点，OC使用的ARC，JS使用的是垃圾回收机制，并且所有的引用是都强引用，不过JS的循环引用，垃圾回收会帮它们打破。JavaScriptCore里面提供的API，正常情况下，OC和JS对象之间内存管理都无需我们去关心。不过还是有几个注意点需要我们去留意下。</li></ul><pre><code>1、不要在block里面直接使用context，或者使用外部的JSValue对象。//错误代码：self.context[@&quot;block&quot;] = ^(){     JSValue *value = [JSValue valueWithObject:@&quot;aaa&quot; inContext:self.context];};这个代码，不用自己看了，编译器都会提示你的。这个block里面使用self，很容易就看出来了。//一个比较隐蔽的     JSValue *value = [JSValue valueWithObject:@&quot;ssss&quot; inContext:self.context];    self.context[@&quot;log&quot;] = ^(){        NSLog(@&quot;%@&quot;,value);    };这个是block里面使用了外部的value，value对context和它管理的JS对象都是强引用。这个value被block所捕获，这边同样也会内存泄露，context是销毁不掉的。//正确的做法，str对象是JS那边传递过来。self.context[@&quot;log&quot;] = ^(NSString *str){        NSLog(@&quot;%@&quot;,str);    };2、OC对象不要用属性直接保存JSValue对象，因为这样太容易循环引用了。看个demo，把上面的示例改下：//定义一个JSExport protocol@protocol JSExportTest &lt;JSExport&gt;//用来保存JS的对象@property (nonatomic, strong) JSvalue *jsValue;@end//建一个对象去实现这个协议：@interface JSProtocolObj : NSObject&lt;JSExportTest&gt;@end@implementation JSProtocolObj@synthesize jsValue = _jsValue;@end//在VC中进行测试@interface ViewController () &lt;JSExportTest&gt;@property (nonatomic, strong) JSProtocolObj *obj;@property (nonatomic, strong) JSContext *context;@end@implementation ViewController- (void)viewDidLoad {    [super viewDidLoad];    //创建context    self.context = [[JSContext alloc] init];    //设置异常处理    self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) {        [JSContext currentContext].exception = exception;        NSLog(@&quot;exception:%@&quot;,exception);    };   //加载JS代码到context中   [self.context evaluateScript:   @&quot;function callback (){};    function setObj(obj) {    this.obj = obj;    obj.jsValue=callback;}&quot;];   //调用JS方法   [self.context[@&quot;setObj&quot;] callWithArguments:@[self.obj]];  }上面的例子很简单，调用JS方法，进行赋值，JS对象保留了传进来的obj，最后，JS将自己的回调callback赋值给了obj，方便obj下次回调给JS；由于JS那边保存了obj，而且obj这边也保留了JS的回调。这样就形成了循环引用。怎么解决这个问题？我们只需要打破obj对JSValue对象的引用即可。当然，不是我们OC中的weak。而是之前说的内存管理辅助对象JSManagedValue。JSManagedValue 本身就是我们需要的弱引用。用官方的话来说叫garbage collection weak reference。但是它帮助我们持有JSValue对象必须同时满足一下两个条件（不翻译了，翻译了怪怪的！）：The JSManagedValue&#39;s JavaScript value is reachable from JavaScriptThe owner of the managed reference is reachable in Objective-C. Manually adding or removing the managed reference in the JSVirtualMachine determines reachability.意思很简单，JSManagedValue 帮助我们保存JSValue，那里面保存的JS对象必须在JS中存在，同时 JSManagedValue 的owner在OC中也存在。我们可以通过它提供的两个方法``` + (JSManagedValue )managedValueWithValue:(JSValue )value;(JSManagedValue )managedValueWithValue:(JSValue )value andOwner:(id)owner创建JSManagedValue对象。通过JSVirtualMachine的方法- (void)addManagedReference:(id)object withOwner:(id)owner来建立这个弱引用关系。通过- (void)removeManagedReference:(id)object withOwner:(id)owner``` 来手动移除他们之间的联系。把刚刚的代码改下：//定义一个JSExport protocol@protocol JSExportTest &lt;JSExport&gt;//用来保存JS的对象@property (nonatomic, strong) JSValue *jsValue;@end//建一个对象去实现这个协议：@interface JSProtocolObj : NSObject&lt;JSExportTest&gt;//添加一个JSManagedValue用来保存JSValue@property (nonatomic, strong) JSManagedValue *managedValue;@end@implementation JSProtocolObj@synthesize jsValue = _jsValue;//重写setter方法- (void)setJsValue:(JSValue *)jsValue{    _managedValue = [JSManagedValue managedValueWithValue:jsValue];    [[[JSContext currentContext] virtualMachine] addManagedReference:_managedValue     withOwner:self];}@end//在VC中进行测试@interface ViewController () &lt;JSExportTest&gt;@property (nonatomic, strong) JSProtocolObj *obj;@property (nonatomic, strong) JSContext *context;@end@implementation ViewController- (void)viewDidLoad {    [super viewDidLoad];    //创建context    self.context = [[JSContext alloc] init];    //设置异常处理    self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) {        [JSContext currentContext].exception = exception;        NSLog(@&quot;exception:%@&quot;,exception);    };   //加载JS代码到context中   [self.context evaluateScript:   @&quot;function callback (){};    function setObj(obj) {   this.obj = obj;   obj.jsValue=callback;   }&quot;];   //调用JS方法   [self.context[@&quot;setObj&quot;] callWithArguments:@[self.obj]];  }注：以上代码只是为了突出用 JSManagedValue来保存 JSValue，所以重写了 setter 方法。实际不会写这么搓的姿势。。。应该根据回调方法传进来参数，进行保存 JSValue。3、不要在不同的 JSVirtualMachine 之间进行传递JS对象。一个 JSVirtualMachine可以运行多个context，由于都是在同一个堆内存和同一个垃圾回收下，所以相互之间传值是没问题的。但是如果在不同的 JSVirtualMachine传值，垃圾回收就不知道他们之间的关系了，可能会引起异常。</code></pre><ul><li>线程:JavaScriptCore 线程是安全的，每个context运行的时候通过lock关联的JSVirtualMachine。如果要进行并发操作，可以创建多个JSVirtualMachine实例进行操作。</li><li>与UIWebView的操作</li></ul><pre><code>通过上面的demo，应该差不多了解OC如何和JS进行通信。下面我们看看如何对 UIWebView 进行操作，我们不再通过URL拦截，我们直接取 UIWebView 的 context，然后进行对JS操作。在UIWebView的finish的回调中进行获取- (void)webViewDidFinishLoad:(UIWebView *)webView{    self.context = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];}上面用了私有属性，可能会被苹果给拒了。这边要注意的是每个页面加载完都是一个新的context，但是都是同一个JSVirtualMachine。如果JS调用OC方法进行操作UI的时候，请注意线程是不是主线程。</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题15--网络</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9815-%E7%BD%91%E7%BB%9C/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9815-%E7%BD%91%E7%BB%9C/</url>
      <content type="html"><![CDATA[<h4 id="http请求方式？"><a href="#http请求方式？" class="headerlink" title="http请求方式？"></a>http请求方式？</h4><p>通常，HTTP的请求方式有3种，分别是：POST、GET、HEAD。POST和GET方法是用于数据发送的。</p><p>POST：它将要发送的数据单独放在一个流中进行发送，而不是附加在URL地址后面，这样做的好处是这些数据不会出现在URL地址中。</p><p>GET：它将要发送的数据直接添加在URL后面，如：<a href="https://link.jianshu.com?t=http://www.sina.com.cn?username=" target="_blank" rel="noopener">www.sina.com.cn?username=</a>“”&amp;password=””，这样的好处是可以直接将数据加在URL后，而不需在用另外的流来发送这些数据，但是缺点也显而易见，它将用户的信息显示出来了。</p><p>HEAD：它是请求资源的元数据方法。在具体的应用中，我暂时还没遇到过，也不去对它进行研究，需要是在学习。</p><h4 id="Http定义了与服务器交互的不同方法，最基本的方法有？"><a href="#Http定义了与服务器交互的不同方法，最基本的方法有？" class="headerlink" title="Http定义了与服务器交互的不同方法，最基本的方法有？"></a>Http定义了与服务器交互的不同方法，最基本的方法有？</h4><ul><li>URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。</li><li>GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</li></ul><h4 id="socket编程简述"><a href="#socket编程简述" class="headerlink" title="socket编程简述"></a>socket编程简述</h4><p>它是基于TCP/IP协议，Socket就是一个可以连通网络上不同计算机程序之间的管道，把一堆数据从管道的A端扔进去，则会从管道的B端（也许同时还可以从C、D、E、F……端冒出来）。管道的端口由两个因素来唯一确认，即机器的IP地址和程序所使用的端口号。</p><p>Socket可以支持数据的发送和接收，它会定义一种称为套接字的变量，发送数据时首先创建套接字，然后使用该套接字的sendto等方法对准某个IP/端口进行数据发送；接收端也首先创建套接字，然后将该套接字绑定到一个IP/端口上，所有发向此端口的数据会被该套接字的recv等函数读出。如同读出文件中的数据一样。</p><p>TCP/IP的socket提供下列三种类型套接字。  流式套接字、数据报式套接字、原始式套接字。</p><p>客户端编程步骤：</p><p>1：加载套接字库，创建套接字(WSAStartup()/socket())；</p><p>2：向服务器发出连接请求(connect())；</p><p>3：和服务器端进行通信(send()/recv())；</p><p>4：关闭套接字，关闭加载的套接字库(closesocket()/WSACleanup())。</p><p>常用第三方库：1，Asyncsocket库</p><p>asihttp代码原理，异步请求的原理，异步请求最大数目，为什么只能这么多？</p><p>ASIHTTPRequest是一个简易使用的类库,通过包装CFNetwork API 来简化 和服务器端的通讯. 它编写的语言是Objective-C 能够应用于Mac OS X and iPhone 平台的应用程序.</p><p>异步: 请求通过事件触发-&gt;服务器处理（这是浏览器仍然可以作其他事情）-&gt;处理完毕这个数量是跟cpu有关的,并发性取决于cpu核数,每个核只能同时处理一个任务.4核cpu理论上可以并发处理4个任务,如果按http来算就是4个请求,但是cpu是抢占式资源,所以一般来说并发量是要根据任务的耗时和cpu的繁忙度来计算4个左右只是个经验值你开10个短耗时的任务和几个长耗时任务的效率是不同的。</p><h4 id="JSONKit、SBJson、TouchJSON和原生的区别"><a href="#JSONKit、SBJson、TouchJSON和原生的区别" class="headerlink" title="JSONKit、SBJson、TouchJSON和原生的区别?"></a>JSONKit、SBJson、TouchJSON和原生的区别?</h4><p>JSONKit、SBJson、TouchJSON（性能从左到右，越右越差,主要就是性能上的差别）</p><h4 id="App需要加载超大量的数据，给服务器发送请求，但是服务器卡住了如何解决？"><a href="#App需要加载超大量的数据，给服务器发送请求，但是服务器卡住了如何解决？" class="headerlink" title="App需要加载超大量的数据，给服务器发送请求，但是服务器卡住了如何解决？"></a>App需要加载超大量的数据，给服务器发送请求，但是服务器卡住了如何解决？</h4><p>1&gt;  设置请求超时<br> 2&gt;  给用户提示请求超时<br> 3&gt;  根据用户操作再次请求数据</p><h4 id="HTTP的通信的-发送请求、接收响应-包含哪些内容？OC中是怎样实现的？"><a href="#HTTP的通信的-发送请求、接收响应-包含哪些内容？OC中是怎样实现的？" class="headerlink" title="HTTP的通信的 发送请求、接收响应 包含哪些内容？OC中是怎样实现的？"></a>HTTP的通信的 发送请求、接收响应 包含哪些内容？OC中是怎样实现的？</h4><ol><li>请求：一个请求包含以下内容：</li><li>请求行：包含了请求方法、请求资源路径、HTTP协议版本<br> GET /XXServer/resources/images/1.jpg HTTP/1.1</li><li>请求头：包含了对客户端的环境描述、客户端请求的主机地址等信息 <ul><li>Host: 192.168.1.105:8080   // 客户端想访问的服务器主机地址</li><li>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9) Firefox/30.0<br> // 客户端的类型，客户端的软件环境</li><li>Accept: text/html, <em>/</em>   // 客户端所能接收的数据类型</li><li>Accept-Language: zh-cn   // 客户端的语言环境</li><li>Accept-Encoding: gzip   // 客户端支持的数据压缩格式</li></ul></li><li>请求体：客户端发给服务器的具体数据，比如文件数据</li><li>OC中请求NSURLRequest <ul><li>发送给服务器的请求包含：</li><li>请求行： 包含了请求方法、请求资源路径、HTTP协议版本</li><li>请求头：  对客户端的环境描述、客户端请求的主机地址等信息</li><li>请求体：  客户端发给服务器的具体数据</li><li>默认超时时常：60s</li></ul></li><li>响应： <ul><li>一个响应包括：</li><li>状态行：包含了HTTP协议版本、状态码、状态英文名称 HTTP/1.1 200 OK</li><li>响应头：包含了对服务器的描述、对返回数据的描述</li><li>Server: Apache-Coyote/1.1   // 服务器的类型</li><li>Content-Type: image/jpeg   // 返回数据的类型</li><li>Content-Length: 56811   // 返回数据的长度</li><li>Date: Mon, 23 Jun 2014 12:54:52 GMT  // 响应的时间</li><li>实体内容：服务器返回给客户端的具体数据，比如文件数据</li><li>OC中响应用NSURLRespose：返回给客户端的回应包含： <ul><li>状态行 ： 包含了HTTP协议版本、状态码、状态英文名称</li><li>响应头 ： 包含了对服务器的描述、对返回数据的描述</li><li>实体内容：服务器返回给客户端的具体二进制数据</li><li>常用属性：  expectedContentLength （下载时返回文件的长度）<br> suggestedFilename（建议保存的文件名）</li></ul></li></ul></li></ol><h4 id="http-的post与get区别与联系，实践中如何选择它们？"><a href="#http-的post与get区别与联系，实践中如何选择它们？" class="headerlink" title="http 的post与get区别与联系，实践中如何选择它们？"></a>http 的post与get区别与联系，实践中如何选择它们？</h4><table><thead><tr><th></th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>用途</td><td>从服务器上获取数据</td><td>向服务器传送数据提交方式</td></tr><tr><td>服务器解析</td><td>Request.QueryString获取变量的值</td><td>Request.Form获取提交的数据</td></tr><tr><td>数据大小</td><td>最大1024字节</td><td>无限制</td></tr><tr><td>安全性</td><td>URL中能看到提交的数据</td><td>隐藏在请求头中</td></tr></tbody></table><h4 id="知道TCP-UDP吗？说说关于UDP-TCP的区别？"><a href="#知道TCP-UDP吗？说说关于UDP-TCP的区别？" class="headerlink" title="知道TCP/UDP吗？说说关于UDP/TCP的区别？"></a>知道TCP/UDP吗？说说关于UDP/TCP的区别？</h4><ul><li>UDP: 是用户数据报协议: 主要用在实时性要求高以及对质量相对较弱的地方,但面对现在高质量的线路不是容易丢包除非是一些拥塞条件下, 如流媒体</li><li>TCP: 是传输控制协议:是面连接的,那么运行环境必然要求其可靠性不可丢包有良好的拥塞控制机制如http ftp telnet 等</li></ul><table><thead><tr><th></th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>发送与接收</td><td>安全送达</td><td>只管发送</td></tr><tr><td>建立连接</td><td>是（三次握手）</td><td>否（有数据包，无需连接）</td></tr><tr><td>数据大小</td><td>无限制</td><td>每个数据报64k</td></tr><tr><td>可靠性</td><td>可靠</td><td>不可靠</td></tr><tr><td>速度</td><td>慢（三次握手才能完成连接</td><td>快（无需连接）</td></tr><tr><td>应用</td><td>流媒体</td><td>qq</td></tr></tbody></table><h4 id="什么是三次握手与四次挥手？"><a href="#什么是三次握手与四次挥手？" class="headerlink" title="什么是三次握手与四次挥手？"></a>什么是三次握手与四次挥手？</h4><ul><li>三次握手实现的过程：<ul><li>第一次握手：建立连接时，客户端发送同步序列编号到服务器，并进入发送状态，等待服务器确认</li><li>第二次：服务器收到同步序列编号，确认并同时自己也发送一个同步序列编号+确认标志，此时服务器进入接收状态</li><li>第三次：客户端收到服务器发送的包，并向服务器发送确认标志，随后链接成功。</li><li>注意：是在链接成功后在进行数据传输。</li></ul></li><li>四次挥手：<ul><li>第一次： 客户端向服务器发送一个带有结束标记的报文。</li><li>第二次：服务器收到报文后，向客户端发送一个确认序号，同时通知自己相应的应用程序：对方要求关闭连接</li><li>第三次： 服务器向客户端发送一个带有结束标记的报文。</li><li>第四次： 客户端收到报文后，向服务器发送一个确认序号。链接关闭。</li></ul></li></ul><h4 id="分析json、xml的区别-json、xml解析方式的底层是如何处理的"><a href="#分析json、xml的区别-json、xml解析方式的底层是如何处理的" class="headerlink" title="分析json、xml的区别?json、xml解析方式的底层是如何处理的?"></a>分析json、xml的区别?json、xml解析方式的底层是如何处理的?</h4><ol><li>Json与xml的区别:<ul><li>可读性方面:基本相同,xml的可读性比较好</li><li>可扩展性方面:都具有很好的扩展性</li><li>编码难度方面:相对而言:JSON的编码比较容易</li><li>解码难度:json的解码难度基本为零,xml需要考虑子节点和父节点</li><li>数据体积方面:json相对于xml来讲,数据体积小,传递的速度跟快些</li><li>数据交互方面:json与JavaScript的交互更加方面,更容易解析处理,更好的数据交互</li><li>数据描述方面:xml对数据描述性比较好</li><li>传输速度方面:json的速度远远快于xml</li></ul></li><li>JSON底层原理:<ul><li>遍历字符串中的字符,最终根据格式规定的特殊字符,比如{}号,[]号, : 号 等进行区分,{}号是一个字典 的开始,[]号是一个数组的开始, : 号是字典的键和值的分水岭,最终乃是将json数据转化为字典,字典中值可能是字典,数组,或字符串而已。</li></ul></li><li>XML底层原理:<ul><li>XML解析常用的解析方法有两种:DOM解析和SAX解析。</li><li>DOM 采用建立树形结构的方式访问 XML 文档,而 SAX 采用的事件模型。</li><li>DOM 解析把 XML 文档转化为一个包含其内容的树,并可以对树进行遍历。</li><li>使用 DOM 解析器的时候需 要处理整个 XML 文档,所以对性能和内存的要求比较高。</li><li>SAX在解析 XML 文档的时候可以触发一系列的事件,当发现给定的tag的时候,它可以激活一个回调方法,告诉该方法制定的标签已经找到。</li><li>SAX 对内存的要求通常会比较低,因为它让开发人员自己来决定所要处理的tag。特别是当开发人员只需要处理文档中所包含的部分数据时,SAX 这种扩展能力得到了更好的体现。</li></ul></li><li>(补充)其他解析方式有自定义二进制解析，就是按字节去解析，电话会谈就是如此，还可以是字符串之间用特殊符号连接的数据，将此数据用特殊符号可以分割成所用数据。</li></ol><h4 id="http和scoket通信的区别-socket连接相关库-TCP-UDP的连接方法-HTTP的几种常用方式"><a href="#http和scoket通信的区别-socket连接相关库-TCP-UDP的连接方法-HTTP的几种常用方式" class="headerlink" title="http和scoket通信的区别?socket连接相关库,TCP,UDP的连接方法,HTTP的几种常用方式?"></a>http和scoket通信的区别?socket连接相关库,TCP,UDP的连接方法,HTTP的几种常用方式?</h4><ol><li>http和scoket通信的区别: <ul><li>http是客户端用http协议进行请求,发送请求时候需要封装http请求头,并绑定请求的数据,服务器一般有web服务器配合(当然也非绝对)。 http请求方式为客户端主动发起请求,服务器才能给响应,一次请求完毕后则断开连接,以节省资源。服务器不能主动给客户端响应(除非采取http长连接技术)。iphone主要使用类是NSUrlConnection。</li><li>scoket是客户端跟服务器直接使用socket“套接字”进行连接,并没有规定连接后断开,所以客户端和服务器可以保持连接通道,双方都可以主动发送数据。一般在游戏开发或股票开发这种要求即时性很强并且保持发送数据量比较大的场合使用。主要使用类是CFSocketRef。</li></ul></li></ol><h4 id="通信底层原理（OSI七层模型）"><a href="#通信底层原理（OSI七层模型）" class="headerlink" title="通信底层原理（OSI七层模型）"></a>通信底层原理（OSI七层模型）</h4><ul><li>OSI简介：OSI采用了分层的结构化技术，共分七层，物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</li><li>物理层：主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特。</li><li>数据链路层：定义了如何让格式化数据以进行传输，以及如何让控制对物理介质的访问。这一层通常还提供错误检测和纠正，以确保数据的可靠传输。</li><li>网络层：：在位于不同地理位置的网络中的两个主机系统之间提供连接和路径选择。Internet的发展使得从世界各站点访问信息的用户数大大增加，而网络层正是管理这种连接的层。</li><li><p>传输层：定义了一些传输数据的协议和端口号（WWW端口80等），如：TCP（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据），UDP（用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段和传输，到达目的地址后再进行重组。常常把这一层数据叫做段。</p></li><li><p>会话层：通过传输层（端口号：传输端口与接收端口）建立数据传输的通路。主要在你的系统之间发起会话或者接受会话请求（设备之间需要互相认识可以是IP也可以是MAC或者是主机名）</p></li><li>表示层：：可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。例如，PC程序与另一台计算机进行通信，其中一台计算机使用扩展二一十进制交换码（EBCDIC），而另一台则使用美国信息交换标准码（ASCII）来表示相同的字符。如有必要，表示层会通过使用一种通格式来实现多种数据格式之间的转换。</li><li>应用层：是最靠近用户的OSI层。这一层为用户的应用程序（例如电子邮件、文件传输和终端仿真）提供网络服务。</li></ul><p>all  people seem to need date processing这一句话的意思是所有的人似乎都需要处理数据</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Application</td><td>all</td></tr><tr><td>Presentation</td><td>people</td></tr><tr><td>Session</td><td>seem</td></tr><tr><td>Transport</td><td>to</td></tr><tr><td>Network</td><td>need</td></tr><tr><td>Data</td><td>date</td></tr><tr><td>Physical</td><td>processing</td></tr></tbody></table><h4 id="设计一套大文件（如上百M的视频）下载方案"><a href="#设计一套大文件（如上百M的视频）下载方案" class="headerlink" title="设计一套大文件（如上百M的视频）下载方案"></a>设计一套大文件（如上百M的视频）下载方案</h4><ul><li><p>NSURLSession</p></li><li><p>支持断点下载，自动记录停止下载时断点的位置</p></li><li><p>遵守NSURLSessionDownloadDelegate协议</p></li><li><p>使用NSURLSession下载大文件，被下载文件会被自动写入沙盒的临时文件夹tmp中</p></li><li><p>下载完毕，通常需要将已下载文件移动其他位置（tmp文件夹中的数据被定时删除），通常是cache文件夹中</p></li><li><p>下载步骤：</p><ul><li><p>设置下载任务task的为成员变量</p><pre><code> @property (nonatomic, strong) NSURLSessionDownloadTask *task;</code></pre></li><li><p>获取NSURLSession对象</p><pre><code>  NSURLSession *session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration] delegate:self delegateQueue:[[NSOperationQueue alloc] init]];</code></pre></li><li><p>初始化下载任务任务</p><pre><code>  self.task = [session downloadTaskWithURL:（此处为下载文件路径URL）];</code></pre></li><li><p>实现代理方法</p><pre><code>  /**每当写入数据到临时文件的时候，就会调用一次该方法，通常在该方法中获取下载进度*/  -(void)URLSession:(NSURLSession *)session downloadTask: (NSURLSessionDownloadTask *)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite  {  // 计算下载进度   CGFloat progress = 1.0 * totalBytesWritten / totalBytesExpectedToWrite;  }  /**任务终止时调用的方法，通常用于断点下载*/  -(void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes  {    //fileOffset：下载任务中止时的偏移量  }  /**遇到错误的时候调用，error参数只能传递客户端的错误*/  -(void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error  { }  /**下载完成的时候调用，需要将文件剪切到可以长期保存的文件夹中*/  -(void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask didFinishDownloadingToURL:(NSURL *)location  {  //生成文件长期保存的路径  NSString *file = [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:downloadTask.response.suggestedFilename];  //获取文件句柄  NSFileManager *fileManager = [NSFileManager defaultManager];  //通过文件句柄，将文件剪切到文件长期保存的路径  [fileManager moveItemAtURL:location toURL:[NSURL fileURLWithPath:file] error:nil];  }</code></pre></li><li><p>操作任务状态</p><pre><code>  /**开始/继续下载任务*/  [self.task resume];  /**暂停下载任务*/  [self.task suspend]; </code></pre></li></ul></li></ul><h4 id="HTTP协议的特点，关于HTTP请求GET和POST的区别"><a href="#HTTP协议的特点，关于HTTP请求GET和POST的区别" class="headerlink" title="HTTP协议的特点，关于HTTP请求GET和POST的区别?"></a>HTTP协议的特点，关于HTTP请求GET和POST的区别?</h4><pre><code>HTTP协议的特点:- HTTP超文本传输协议，是短连接，是客户端主动发送请求，服务器做出响应，服务器响应之后，链接断开。HTTP是一个属于应用层面向对象的协议，HTTP有两类报文：请求报文和响应报文。- HTTP请求报文：一个HTTP请求报文由请求行、请求头部、空行和请求数据4部分组成。- HTTP响应报文：由三部分组成：状态行、消息报头、响应正文。</code></pre><h4 id="即时聊天App不会采用的网络传输方式"><a href="#即时聊天App不会采用的网络传输方式" class="headerlink" title="即时聊天App不会采用的网络传输方式"></a>即时聊天App不会采用的网络传输方式</h4><pre><code>A UDPB TCP C HTTP D FTP参考答案：D理由：FTP是文件传输协议，是File Transfer Protocol的简称，它的作用是用于控制互联网上文件的双向传输，因此一定不会是即时聊天使用的；UDP是面向无连接的传输层协议，数据传输是不可靠的，它只管发，不管收不收得到；TCP是面向连接的，可靠的传输层协议；HTTP是超文本传输协议，对应于应用层，而HTTP是基于TCP的。</code></pre><h4 id="在App中混合HTML5开发App如何实现的。在App中使用HTML5的优缺点是什么？"><a href="#在App中混合HTML5开发App如何实现的。在App中使用HTML5的优缺点是什么？" class="headerlink" title="在App中混合HTML5开发App如何实现的。在App中使用HTML5的优缺点是什么？"></a>在App中混合HTML5开发App如何实现的。在App中使用HTML5的优缺点是什么？</h4><pre><code>在iOS中，通常是用UIWebView来实现，当然在iOS8以后可以使用WKWebView来实现.有以下几种实现方法：通过实现UIWebView的代理方法来拦截，判断scheme是否是约定好的，然后iOS调用本地相关API来实现：- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType;在iOS7以后，可以直接通过JavaScripteCore这个库来实现，通过往JS DOM注入对象，而这个对象对应于我们iOS的某个类的实例。更详细请阅读：OC JavaScriptCore与js交互WKWebView新特性及JS交互Swift JavaScriptCore与JS交互可以通过WebViewJavascriptBridge来实现。具体如何使用，请大家去其它博客搜索吧！优缺点：iOS加入H5响应比原生要慢很多，体验不太好，这是缺点。iOS加入H5可以实现嵌入别的功能入口，可随时更改，不用更新版本就可以上线，这是最大的优点。</code></pre><h4 id="介绍一下XMPP-有什么优缺点吗"><a href="#介绍一下XMPP-有什么优缺点吗" class="headerlink" title="介绍一下XMPP?有什么优缺点吗?"></a>介绍一下XMPP?有什么优缺点吗?</h4><pre><code>XMPP(Extensible Messaging and Presence Protocol,前称)是一种以XML为基础的开放式实时通信协议,是 经由互联网工程工作小组(IETF)通过的互联网标准。简单的说,XMPP就是一种协议,一种规定。就是说,在网络上传 东西,要建立连接,TCP/IP连接,建立后再传东西,而XMPP就是规定你传的东西的格式。XMPP是基于XML的协议。 优点开放:XMPP协议是自由、开放、公开的,并且易于了解。 而且在客户端 、 服务器 、 组件 、 源码库等方面,都已经各自有多种实现。 标准:互联网工程工作小组( IETF )已经将Jabber的核心XML流协议以XMPP之名,正式列为认可的实时通信及Presence技术。 而XMPP的技术规格已被定义在RFC 3920及RFC 3921 。 任何IM供应商在遵循XMPP协议下,都可与Google Talk实现连接。 证实可用:第一个Jabber(现在XMPP)技术是Jeremie Miller在1998年开发的,现在已经相当稳定;数以百计的开发者为XMPP技术而努 力。 今日的互联网上有数以万计的XMPP服务器运作着,并有数以百万计的人们使用XMPP实时传讯软件。分散式:XMPP网络的架构和电子邮件十分相像;XMPP核心协议通信方式是先创建一个stream,XMPP以TCP传递XML数据流,没有 中央主服务器。 任何人都可以运行自己的XMPP服务器,使个人及组织能够掌控他们的实时传讯体验。安全:任何XMPP协议的服务器可以独立于公众XMPP网络(例如在企业内部网络中),而使用SASL及TLS等技术的可靠安全性,已自 带于核心XMPP技术规格中。可扩展:XML 命名空间的威力可使任何人在核心协议的基础上建造定制化的功能;为了维持通透性,常见的扩展由XMPP标准基金会 。 弹性佳:XMPP除了可用在实时通信的应用程序,还能用在网络管理、内容供稿、协同工具、文件共享、游戏、远程系统监控等。 多样性:用XMPP协议来建造及布署实时应用程序及服务的公司及开放源代码计划分布在各种领域;用XMPP技术开发软件,资源及支持的 来源是多样的,使得使你不会陷于被“绑架”的困境。缺点数据负载太重:随着通常超过70%的XMPP协议的服务器的数据流量的存在和近60%的被重复转发,XMPP协议目前拥有一个大型架空中存在的 数据提供给多个收件人。 新的议定书正在研究,以减轻这一问题。没有二进制数据:XMPP协议的方式被编码为一个单一的长的XML文件,因此无法提供修改二进制数据。 因此, 文件传输协议一样使用外部的 HTTP。 如果不可避免,XMPP协议还提供了带编码的文件传输的所有数据使用的Base64 。 至于其他二进制数据加密会话 (encrypted conversations)或图形图标(graphic icons)以嵌入式使用相同的方法。</code></pre><h4 id="NSURLConnection的几个常用的代理"><a href="#NSURLConnection的几个常用的代理" class="headerlink" title="NSURLConnection的几个常用的代理?"></a>NSURLConnection的几个常用的代理?</h4><ul><li>NSURLConnectionDownloadDelegate :能够实现监听下载进度!但是下载之后,找不到下载好的文件!</li><li>NSURLConnectionDataDelegate 是针对数据下载提供的方法!需要注意的是,需要自己实现监听进度的业务逻辑!</li><li>利用 NSURLConnection 的异步回调进行文件下载: <ul><li>如果是小文件下载,问题不大! 可以直接使用异步回调进行下载</li><li>如果使用异步回调的方法进行大文件下载,则会出现内存暴涨的情况!</li></ul></li><li>内存暴涨的原因: 大文件下载之后,默认是放在内存中的,所以下载的文件越大,越耗费内存.</li><li>存在的缺点: 使用异步回调实现文件,无法监听下载进度!并且对于大文件下载,会造成内存暴涨!</li><li>基于以上两点,一般,在进行文件下载的时候,使用代理回调监听下载进度!并且在下载文件的时候,手动管理内存!</li></ul><h4 id="NSURLConnection-amp-NSURLSession的区别"><a href="#NSURLConnection-amp-NSURLSession的区别" class="headerlink" title="NSURLConnection&amp;NSURLSession的区别?"></a>NSURLConnection&amp;NSURLSession的区别?</h4><ul><li>虽然 NSURLConnection 在 iOS 9.0 中已经被废弃，但是作为资深的 iOS 程序员，必须要了解 NSURLConnection 的细节, <ul><li>NSURLSession: 用于替代 NSURLConnection</li><li>支持后台运行的网络任务</li><li>暂停、停止、重启网络任务，不再需要 NSOperation 封装</li><li>请求可以使用同样的配置容器</li><li>不同的 session 可以使用不同的私有存储</li><li>block 和代理可以同时起作用</li><li>直接从文件系统上传、下载</li></ul></li></ul><h4 id="XML是什么-XML与HTML的区别"><a href="#XML是什么-XML与HTML的区别" class="headerlink" title="XML是什么? XML与HTML的区别?"></a>XML是什么? XML与HTML的区别?</h4><ul><li>XML的简单使其易于在任何应用程序中读写数据，这使XML很快成为数据交换的唯一公共语言，虽然不同的应用软件也支持其它的数据交换格式，但不久之后他们都将支持XML，那就意味着程序可以更容易的与Windows,Mac OS,Linux以及其他平台下产生的信息结合，然后可以很容易加载XML数据到程序中并分析他，并以XML格式输出结果。</li><li>XML去掉了之前令许多开发人员头疼的SGML（标准通用标记语言）的随意语法。在XML中，采用了如下的语法： <ul><li>任何的起始标签都必须有一个结束标签。</li><li>可以采用另一种简化语法，可以在一个标签中同时表示起始和结束标签。这种语法是在大于符号之前紧跟一个斜线（/），例如&lt;tag/ &gt;。XML解析器会将其翻译成<tag></tag>。</li><li>标签必须按合适的顺序进行嵌套，所以结束标签必须按镜像顺序匹配起始标签，例如this is asamplestring。这好比是将起始和结束标签看作是数学中的左右括号：在没有关闭所有的内部括号之前，是不能关闭外面的括号的。</li><li>所有的特性都必须有值。</li><li>所有的特性都必须在值的周围加上双引号。</li></ul></li><li>XML与HTML的设计区别是：XML的核心是数据，其重点是数据的内容。而HTML 被设计用来显示数据，其重点是数据的显示。</li><li>XML和HTML语法区别：HTML的标记不是所有的都需要成对出现，XML则要求所有的标记必须成对出现；HTML标记不区分大小写，XML则 大小敏感,即区分大小写。</li></ul><h4 id="网络图片处理问题中怎么解决一个相同的网络地址重复请求的问题？"><a href="#网络图片处理问题中怎么解决一个相同的网络地址重复请求的问题？" class="headerlink" title="网络图片处理问题中怎么解决一个相同的网络地址重复请求的问题？"></a>网络图片处理问题中怎么解决一个相同的网络地址重复请求的问题？</h4><p>利用字典（图片地址为key，下载操作为value）</p><h4 id="sip是什么？"><a href="#sip是什么？" class="headerlink" title="sip是什么？"></a>sip是什么？</h4><pre><code>1&gt;  SIP（Session Initiation Protocol），会话发起协议2&gt;  SIP是建立VOIP连接的 IETF 标准，IETF是全球互联网最具权威的技术标准化组织3&gt;  所谓VOIP，就是网络电话，直接用互联网打电话，不用耗手机话费</code></pre><h4 id="TCP-IP四层模型"><a href="#TCP-IP四层模型" class="headerlink" title="TCP/IP四层模型"></a>TCP/IP四层模型</h4><ul><li>TCP/IP是一组协议的代名词，它还包括许多协议，组成了TCP/IP协议簇。TCP/IP协议簇分为四层，IP位于协议簇的第二层(对应OSI的第三层)，TCP位于协议簇的第三层(对应OSI的第四层)。</li><li>应用层：应用程序间沟通的层，如简单电子邮件传输（SMTP）、文件传输协议（FTP）、网络远程访问协议（Telnet）等。</li><li>传输层：在此层中，它提供了节点间的数据传送服务，如传输控制协议（TCP）、用户数据报协议（UDP）等，TCP和UDP给数据包加入传输数据并把它传输到下一层中，这一层负责传送数据，并且确定数据已被送达并接收。</li><li>互连网络层：负责提供基本的数据封包传送功能，让每一块数据包都能够到达目的主机（但不检查是否被正确接收），如网际协议（IP）。</li><li>网络接口层：对实际的网络媒体的管理，定义如何使用实际网络（如Ethernet、Serial Line等）来传送数据。</li></ul>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题14--Runloop</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9814-Runloop/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9814-Runloop/</url>
      <content type="html"><![CDATA[<h4 id="什么是-Runloop？"><a href="#什么是-Runloop？" class="headerlink" title="什么是 Runloop？"></a>什么是 Runloop？</h4><ul><li>从字面上讲就是运行循环。</li><li>它内部就是do-while循环，在这个循环内部不断地处理各种任务。</li><li>一个线程对应一个RunLoop，主线程的RunLoop默认已经启动，子线程的RunLoop得手动启动（调用run方法）</li><li>RunLoop只能选择一个Mode启动，如果当前Mode中没有任何Source(Sources0、Sources1)、Timer，那么就直接退出RunLoop</li><li>基本的作用就是保持程序的持续运行，处理app中的各种事件。通过runloop，有事运行，没事就休息，可以节省cpu资源，提高程序性能。</li></ul><h4 id="Runloop对象"><a href="#Runloop对象" class="headerlink" title="Runloop对象"></a>Runloop对象</h4><p>iOS中有2套API来访问和使用RunLoop</p><ul><li>Foundation：NSRunLoop</li><li>Core Foundation：CFRunLoopRef</li><li>NSRunLoop和CFRunLoopRef都代表着RunLoop对象</li><li>NSRunLoop是基于CFRunLoopRef的一层OC包装，所以要了解RunLoop内部结构，需要多研究CFRunLoopRef层面的API。</li></ul><h4 id="Runloop与线程"><a href="#Runloop与线程" class="headerlink" title="Runloop与线程"></a>Runloop与线程</h4><ul><li>每条线程都有唯一的一个与之对应的RunLoop对象</li><li>主线程的RunLoop已经自动创建好了，子线程的RunLoop需要主动创建</li><li>RunLoop在第一次获取时创建，在线程结束时销毁</li></ul><h4 id="获得RunLoop对象"><a href="#获得RunLoop对象" class="headerlink" title="获得RunLoop对象"></a>获得RunLoop对象</h4><ul><li>Foundation</li></ul><p>[NSRunLoop currentRunLoop]; // 获得当前线程的RunLoop对象</p><p>[NSRunLoop mainRunLoop]; // 获得主线程的RunLoop对象</p><ul><li>Core Foundation</li></ul><p>CFRunLoopGetCurrent(); // 获得当前线程的RunLoop对象</p><p>CFRunLoopGetMain(); // 获得主线程的RunLoop对象</p><h4 id="RunLoop相关类"><a href="#RunLoop相关类" class="headerlink" title="RunLoop相关类"></a>RunLoop相关类</h4><pre><code>Core Foundation中关于RunLoop的5个类CFRunLoopRefCFRunLoopModeRefCFRunLoopSourceRefCFRunLoopTimerRefCFRunLoopObserverRef</code></pre><h4 id="CFRunLoopModeRef"><a href="#CFRunLoopModeRef" class="headerlink" title="CFRunLoopModeRef"></a>CFRunLoopModeRef</h4><pre><code>CFRunLoopModeRef代表RunLoop的运行模式。一个RunLoop包含若干个Mode，每个Mode又包含若干个(set)Source/(array)Timer/(array)Observer每次RunLoop启动时，只能指定其中一个 Mode，这个Mode被称作CurrentMode如果需要切换Mode，只能退出Loop，再重新指定一个Mode进入这样做主要是为了分隔开不同组的Source/Timer/Observer，让其互不影响mode主要是用来指定事件在运行循环中的优先级的，分为：•   NSDefaultRunLoopMode（kCFRunLoopDefaultMode）：默认，空闲状态•   UITrackingRunLoopMode：ScrollView滑动时会切换到该Mode•   UIInitializationRunLoopMode：run loop启动时，会切换到该mode•   NSRunLoopCommonModes（kCFRunLoopCommonModes）：Mode集合苹果公开提供的Mode有两个：•   NSDefaultRunLoopMode（kCFRunLoopDefaultMode）•   NSRunLoopCommonModes（kCFRunLoopCommonModes）</code></pre><h4 id="CFRunLoopTimerRef"><a href="#CFRunLoopTimerRef" class="headerlink" title="CFRunLoopTimerRef"></a>CFRunLoopTimerRef</h4><ul><li>CFRunLoopTimerRef是基于时间的触发器</li><li>CFRunLoopTimerRef基本上说的就是NSTimer，它受RunLoop的Mode影响</li><li>GCD的定时器不受RunLoop的Mode影响</li></ul><h4 id="CFRunLoopSourceRef"><a href="#CFRunLoopSourceRef" class="headerlink" title="CFRunLoopSourceRef"></a>CFRunLoopSourceRef</h4><pre><code>CFRunLoopSourceRef是事件源（输入源）按照官方文档，Source的分类Port-Based SourcesCustom Input SourcesCocoa Perform Selector Sources按照函数调用栈，Source的分类Source0：非基于Port的Source1：基于Port的，通过内核和其他线程通信，接收、分发系统事件</code></pre><h4 id="CFRunLoopObserverRef"><a href="#CFRunLoopObserverRef" class="headerlink" title="CFRunLoopObserverRef"></a>CFRunLoopObserverRef</h4><ul><li>CFRunLoopObserverRef是观察者，能够监听RunLoop的状态改变</li><li>可以监听的时间点有以下几个<ul><li>kcfRunLoopEntry(即将进入loop)//1</li><li>kcfRunLoopBeforeTimers(即将处理timer)//2</li><li>kcfRunLoopBeforeSources(即将处理source)//4</li><li>kcfRunLoopBeforeWaiting(即将进入休眠)//32</li><li>kcfRunLoopAfterWaiting(刚从休眠中唤醒)//64</li><li>kcfRunLoopExit(即将退出loop)//128</li></ul></li><li>添加Observer</li></ul><pre><code>    CFRunLoopObserverRef observer = CFRunLoopObserverCreateWithHandler(CFAllocatorGetDefault(), kCFRunLoopAllActivities, YES, 0, ^(CFRunLoopObserverRef observer, CFRunLoopActivity activity) {    NSLog(@&quot;----监听到RunLoop状态发生改变---%zd&quot;, activity);});// 添加观察者：监听RunLoop的状态CFRunLoopAddObserver(CFRunLoopGetCurrent(), observer, kCFRunLoopDefaultMode);// 释放ObserverCFRelease(observer);</code></pre><h4 id="RunLoop处理逻辑"><a href="#RunLoop处理逻辑" class="headerlink" title="RunLoop处理逻辑"></a>RunLoop处理逻辑</h4><ul><li>通知Observer:即将进入Loop（1）</li><li>通知Observer：将要处理Timer（2）</li><li>通知Observer：将要处理Source0（3）</li><li>处理Source0（4）</li><li>如果有Source0，跳到第9步（5）</li><li>通知Observer：线程即将休眠（6）</li><li>休眠，等待唤醒：（7）<ul><li>Source0(port)。</li><li>timer启动</li><li>RunLoop设置的timer已经超时</li><li>Runloop被外部手动唤醒</li></ul></li><li>通知Observer：线程将被唤醒（8）</li><li>处理未处理的时间（9）<ul><li>如果用户定义的定时器启动，处理定时器事件并重启Runloop。进入步骤2.</li><li>如果输入源启动，传递相应的消息。</li><li>如果RunLopp被显式唤醒而且时间还没超时，重启RunLoop，进入步骤2.</li></ul></li><li>通知Observer：即将退出Loop</li></ul><h4 id="Runloop的应用"><a href="#Runloop的应用" class="headerlink" title="Runloop的应用"></a>Runloop的应用</h4><ul><li>NSTimer</li><li>ImageView显示</li><li>PerformSelector</li><li>常驻线程</li><li>自动释放池</li></ul><h4 id="runloop定时源和输入源-image"><a href="#runloop定时源和输入源-image" class="headerlink" title="runloop定时源和输入源 image"></a>runloop定时源和输入源 <img src="http://" alt="image">image</h4><ul><li>Runloop处理的输入事件有两种不同的来源：输入源（input source）和定时源（timer source）</li><li>输入源传递异步消息，通常来自于其他线程或者程序。</li><li>定时源则传递同步消息，在特定时间或者一定的时间间隔发生</li></ul><h4 id="NSRunLoop的实现机制-及在多线程中如何使用"><a href="#NSRunLoop的实现机制-及在多线程中如何使用" class="headerlink" title="NSRunLoop的实现机制,及在多线程中如何使用"></a>NSRunLoop的实现机制,及在多线程中如何使用</h4><pre><code>- 实现机制：回答runloop的基本作用，处理逻辑，前面都有。- 程序创建子线程的时候，才需要手动启动runloop。主线程的runloop已经默认启动。- 在多线程中，你需要判断是否需要runloop。如果需要runloop，那么你要负责配置runloop并启动。你不需要在任何情况下都去启动runloop。比如，你使用线程去处理一个预先定义好的耗时极长的任务时，你就可以无需启动runloop。Runloop只在你要和线程有交互时才需要</code></pre><h4 id="runloop和线程有什么关系？"><a href="#runloop和线程有什么关系？" class="headerlink" title="runloop和线程有什么关系？"></a>runloop和线程有什么关系？</h4><pre><code>- 主线程的run loop默认是启动的。iOS的应用程序里面，程序启动后会有一个如下的main()函数( argc,  * argv[]) {@autoreleasepool {    return UIApplicationMain(argc, argv, , NSStringFromClass([AppDelegate class]));}}重点是UIApplicationMain()函数，这个方法会为main thread设置一个NSRunLoop对象，这就解释了：为什么我们的应用可以在无人操作的时候休息，需要让它干活的时候又能立马响应。- 对其它线程来说，runloop默认是没有启动的，runloop只在你要和线程有交互时才需要。- 在任何一个 Cocoa 程序的线程中，都可以通过以下代码来获取到当前线程的 run loop 。NSRunLoop *runloop = [NSRunLoop currentRunLoop];</code></pre><h4 id="autorelease-对象在什么情况下会被释放？"><a href="#autorelease-对象在什么情况下会被释放？" class="headerlink" title="autorelease 对象在什么情况下会被释放？"></a>autorelease 对象在什么情况下会被释放？</h4><ul><li>分两种情况：手动干预释放和系统自动释放</li><li>手动干预释放就是指定autoreleasepool,当前作用域大括号结束就立即释放</li><li>系统自动去释放:不手动指定autoreleasepool,Autorelease对象会在当前的 runloop 迭代结束时释放</li><li>kCFRunLoopEntry(1):第一次进入会自动创建一个autorelease</li><li>kCFRunLoopBeforeWaiting(32):进入休眠状态前会自动销毁一个autorelease,然后重新创建一个新的autorelease</li><li>kCFRunLoopExit(128):退出runloop时会自动销毁最后一个创建的autorelease</li></ul><h4 id="对于runloop的理解不正确的是"><a href="#对于runloop的理解不正确的是" class="headerlink" title="对于runloop的理解不正确的是"></a>对于runloop的理解不正确的是</h4><pre><code>A 每一个线程都有其对应的RunLoopB 默认非主线程的RunLoop是没有运行的C 在一个单独的线程中没有必要去启用RunLoopD 可以将NSTimer添加到runloop中</code></pre><ul><li>参考答案：C</li><li>理由：说到RunLoop，它可是多线程的法定。通常来说，一个线程一次只能执行一个任务，执行完任务后就会退出线程。但是，对于主线程是不能退出的，因此我们需要让主线程即时任务执行完毕，也可以继续等待是接收事件而不退出，那么RunLoop就是关键法宝了。但是非主线程通常来说就是为了执行某一任务的，执行完毕就需要归还资源，因此默认是不运行RunLoop的。NSRunLoop提供了一个添加NSTimer的方法，这个方法是在应用正常状态下会回调。</li></ul><h4 id="runloop的mode作用是什么？"><a href="#runloop的mode作用是什么？" class="headerlink" title="runloop的mode作用是什么？"></a>runloop的mode作用是什么？</h4><pre><code>mode主要是用来指定事件在运行循环中的优先级的，分为：•   NSDefaultRunLoopMode（kCFRunLoopDefaultMode）：默认，空闲状态•   UITrackingRunLoopMode：ScrollView滑动时会切换到该Mode•   UIInitializationRunLoopMode：run loop启动时，会切换到该mode•   NSRunLoopCommonModes（kCFRunLoopCommonModes）：Mode集合苹果公开提供的Mode有两个：•   NSDefaultRunLoopMode（kCFRunLoopDefaultMode）•   NSRunLoopCommonModes（kCFRunLoopCommonModes）如果我们把一个NSTimer对象以NSDefaultRunLoopMode（kCFRunLoopDefaultMode）添加到主运行循环中的时候, ScrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。当我们滚动的时候，也希望不调度，那就应该使用默认模式。但是，如果希望在滚动时，定时器也要回调，那就应该使用common mode。</code></pre><h4 id="请写出NSTimer使用时的注意事项（两项即可）"><a href="#请写出NSTimer使用时的注意事项（两项即可）" class="headerlink" title="请写出NSTimer使用时的注意事项（两项即可）"></a>请写出NSTimer使用时的注意事项（两项即可）</h4><pre><code>思路和上一题一样，如果想要销毁timer，则必须先将timer置为失效，否则timer就一直占用内存而不会释放。造成逻辑上的内存泄漏。该泄漏不能用xcode及instruments测出来。 另外对于要求必须销毁timer的逻辑处理，未将timer置为失效，若每次都创建一次，则之前的不能得到释放，则会同时存在多个timer的实例在内存中。参考答案：•   注意timer添加到runloop时应该设置为什么mode•   注意timer在不需要时，一定要调用invalidate方法使定时器失效，否则得不到释放</code></pre><h4 id="UITableViewCell上有个UILabel，显示NSTimer实现的秒表时间，手指滚动cell过程中，label是否刷新，为什么？"><a href="#UITableViewCell上有个UILabel，显示NSTimer实现的秒表时间，手指滚动cell过程中，label是否刷新，为什么？" class="headerlink" title="UITableViewCell上有个UILabel，显示NSTimer实现的秒表时间，手指滚动cell过程中，label是否刷新，为什么？"></a>UITableViewCell上有个UILabel，显示NSTimer实现的秒表时间，手指滚动cell过程中，label是否刷新，为什么？</h4><pre><code>和上一题一样的思路，如果要cell滚动过程中定时器正常回调，UI正常刷新，那么要将timer放入到CommonModes下，因为是NSDefaultRunLoopMode，只有在空闲状态下才会回调。</code></pre><h4 id="为什么-UIScrollView-的滚动会导致-NSTimer-失效？"><a href="#为什么-UIScrollView-的滚动会导致-NSTimer-失效？" class="headerlink" title="为什么 UIScrollView 的滚动会导致 NSTimer 失效？"></a>为什么 UIScrollView 的滚动会导致 NSTimer 失效？</h4><ul><li>思路和上一题一样，解决办法有2个,一个是更改mode为NSRunLoopCommonModes(无论runloop运行在哪个mode,都能运行),还有种办法是切换到主线程来更新UI界面的刷新</li></ul><pre><code> //将timer添加到NSDefaultRunLoopMode中 [NSTimer scheduledTimerWithTimeInterval: target: selector:@selector(timerTick:) userInfo: repeats:];  //然后再添加到NSRunLoopCommonModes里   NSTimer *timer = [NSTimer timerWithTimeInterval: target: selector:@selector(timerTick:) userInfo: repeats:];    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</code></pre><h4 id="在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？"><a href="#在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？" class="headerlink" title="在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？"></a>在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</h4><ul><li>思路和上一题一样</li></ul><h4 id="在开发中如何使用RunLoop？什么应用场景？"><a href="#在开发中如何使用RunLoop？什么应用场景？" class="headerlink" title="在开发中如何使用RunLoop？什么应用场景？"></a>在开发中如何使用RunLoop？什么应用场景？</h4><ul><li>开启一个常驻线程（让一个子线程不进入消亡状态，等待其他线程发来消息，处理其他事件）</li><li>在子线程中开启一个定时器</li><li>在子线程中进行一些长期监控</li><li>可以控制定时器在特定模式下执行</li><li>可以让某些事件（行为、任务）在特定模式下执行</li><li>可以添加Observer监听RunLoop的状态，比如监听点击事件的处理（在所有点击事件之前做一些事情）</li></ul>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题13--数据存储</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9813-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9813-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<h4 id="sqlite中插入特殊字符的方法和接收到处理方法。"><a href="#sqlite中插入特殊字符的方法和接收到处理方法。" class="headerlink" title="sqlite中插入特殊字符的方法和接收到处理方法。"></a>sqlite中插入特殊字符的方法和接收到处理方法。</h4><p>除’其他的都是在特殊字符前面加“/”，而 ‘ -&gt; ‘’ 。方法：keyWord = keyWord.replace(“/“,”//“);</p><h4 id="什么是NSManagedObject模型？"><a href="#什么是NSManagedObject模型？" class="headerlink" title="什么是NSManagedObject模型？"></a>什么是NSManagedObject模型？</h4><p>NSManagedObjcet是NSObject的子类，Core Date的重要组成部分。是一个通用类，实现了Core Date模型层所需的基本功能，用户可以通过NSManagedObjcet建立自己的数据模型。</p><h4 id="你实现过多线程的Core-Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？"><a href="#你实现过多线程的Core-Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？" class="headerlink" title="你实现过多线程的Core Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？"></a>你实现过多线程的Core Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？</h4><pre><code>1&gt;  CoreData是对SQLite数据库的封装2&gt;  coreData中有三个对象是必须掌握的, NSManagedObject :只要定义一个类继承于该类就会创建一张与之对应的表, 也就是一个继承于该类的类就对应一张表. 每一个通过继承该类创建出来的对象,都是该类对应的表中的一条数据NSManagedObjectContext: 用于操作数据库, 只要有类它就能对数据库的表进行增删改查NSPersistentStoreCoordinator: 决定数据存储的位置 (SQLite/XML/其它文件中)3&gt;  Core data本身并不是一个并发安全的架构所以在多线程中实现Core data会有问题.问题在于&gt;2.1  CoreData中的NSManagedObjectContext在多线程中不安全&gt;2.2如果想要多线程访问CoreData的话，最好的方法是一个线程一个NSManagedObjectContext&gt;2.3每个NSManagedObjectContext对象实例都可以使用同一个NSPersistentStoreCoordinator实例，这是因为NSManagedObjectContext会在便用NSPersistentStoreCoordinator前上锁</code></pre><h4 id="简单描述下客户端的缓存机制？"><a href="#简单描述下客户端的缓存机制？" class="headerlink" title="简单描述下客户端的缓存机制？"></a>简单描述下客户端的缓存机制？</h4><ul><li>缓存可以分为：内存数据缓存、数据库缓存、文件缓存 <ul><li>每次想获取数据的时候</li><li>先检测内存中有无缓存</li><li>再检测本地有无缓存(数据库\文件)</li><li>最终发送网络请求</li><li>将服务器返回的网络数据进行缓存（内存、数据库、文件）， 以便下次读取</li></ul></li></ul><h4 id="什么是序列化和反序列化，用来做什么"><a href="#什么是序列化和反序列化，用来做什么" class="headerlink" title="什么是序列化和反序列化，用来做什么"></a>什么是序列化和反序列化，用来做什么</h4><ul><li>序列化把对象转化为字节序列的过程</li><li>反序列化把直接序列恢复成对象</li><li>把对象写到文件或者数据库中，并且读取出来</li></ul><h4 id="OC中实现复杂对象的存储"><a href="#OC中实现复杂对象的存储" class="headerlink" title="OC中实现复杂对象的存储"></a>OC中实现复杂对象的存储</h4><ul><li>遵循NSCoding协议，实现复杂对象的存储，实现该协议后可以对其进行打包或者解包，转化为NSDate</li></ul><h4 id="iOS中常用的数据存储方式有哪些？"><a href="#iOS中常用的数据存储方式有哪些？" class="headerlink" title="iOS中常用的数据存储方式有哪些？"></a>iOS中常用的数据存储方式有哪些？</h4><ol><li>数据存储有四种方案，NSUserDefault,KeyChain,File,DB.</li><li>其中File有三种方式：plist,Archiver,Stream</li><li>DB包括core Data和FMDB</li></ol><h4 id="说一说你对SQLite的认识"><a href="#说一说你对SQLite的认识" class="headerlink" title="说一说你对SQLite的认识"></a>说一说你对SQLite的认识</h4><ul><li>SQLite是目前主流的嵌入式关系型数据库，其最主要的特点就是轻量级、跨平台，当前很多嵌入式操作系统都将其作为数据库首选。</li><li>虽然SQLite是一款轻型数据库，但是其功能也绝不亚于很多大型关系数据库。</li><li>学习数据库就要学习其相关的定义、操作、查询语言，也就是大家日常说得SQL语句。和其他数据库相比，SQLite中的SQL语法并没有太大的差别，因此这里对于SQL语句的内容不会过多赘述，大家可以参考SQLite中其他SQL相关的内容，这里还是重点讲解iOS中如何使用SQLite构建应用程序。先看一下SQLite数据库的几个特点：<ul><li>基于C语言开发的轻型数据库</li><li>在iOS中需要使用C语言语法进行数据库操作、访问（无法使用ObjC直接访问，因为libqlite3框架基于C语言编写）</li><li>SQLite中采用的是动态数据类型，即使创建时定义了一种类型，在实际操作时也可以存储其他类型，但是推荐建库时使用合适的类型（特别是应用需要考虑跨平台的情况时）</li><li>建立连接后通常不需要关闭连接（尽管可以手动关闭）</li></ul></li><li>在iOS中操作SQLite数据库可以分为以下几步（注意先在项目中导入libsqlite3框架）：<ul><li>打开数据库，利用sqlite3_open()打开数据库会指定一个数据库文件保存路径，如果文件存在则直接打开，否则创建并打开。打开数据库会得到一个sqlite3类型的对象，后面需要借助这个对象进行其他操作。</li><li>执行SQL语句，执行SQL语句又包括有返回值的语句和无返回值语句。</li><li>对于无返回值的语句（如增加、删除、修改等）直接通过sqlite3_exec()函数执行；</li><li>对于有返回值的语句则首先通过sqlite3_prepare_v2()进行sql语句评估（语法检测），然后通过sqlite3_step()依次取出查询结果的每一行数据，对于每行数据都可以通过对应的sqlite3_column_类型()方法获得对应列的数据，如此反复循环直到遍历完成。当然，最后需要释放句柄。</li></ul></li></ul><h4 id="说一说你对FMDB的认识"><a href="#说一说你对FMDB的认识" class="headerlink" title="说一说你对FMDB的认识"></a>说一说你对FMDB的认识</h4><ul><li>FMDB是一个处理数据存储的第三方框架，框架是对sqlite的封装，整个框架非常轻量级但又不失灵活性，而且更加面向对象。FMDB有如下几个特性： <ul><li>FMDB既然是对于libsqlite3框架的封装，自然使用起来也是类似的，使用前也要打开一个数据库，这个数据库文件存在则直接打开否则会创建并打开。这里FMDB引入了一个MFDatabase对象来表示数据库，打开数据库和后面的数据库操作全部依赖此对象。</li><li>对于数据库的操作跟前面KCDbManager的封装是类似的，在FMDB中FMDatabase类提供了两个方法executeUpdate:和executeQuery:分别用于执行无返回结果的查询和有返回结果的查询。当然这两个方法有很多的重载这里就不详细解释了。唯一需要指出的是，如果调用有格式化参数的sql语句时，格式化符号使用“?”而不是“%@”、等。</li><li>我们知道直接使用libsqlite3进行数据库操作其实是线程不安全的，如果遇到多个线程同时操作一个表的时候可能会发生意想不到的结果。为了解决这个问题建议在多线程中使用FMDatabaseQueue对象，相比FMDatabase而言，它是线程安全的。</li><li>将事务放到FMDB中去说并不是因为只有FMDB才支持事务，而是因为FMDB将其封装成了几个方法来调用，不用自己写对应的sql而已。其实在在使用libsqlite3操作数据库时也是原生支持事务的（因为这里的事务是基于数据库的，FMDB还是使用的SQLite数据库），只要在执行sql语句前加上“begin transaction;”执行完之后执行“commit transaction;”或者“rollback transaction;”进行提交或回滚即可。另外在Core Data中大家也可以发现，所有的增、删、改操作之后必须调用上下文的保存方法，其实本身就提供了事务的支持，只要不调用保存方法，之前所有的操作是不会提交的。在FMDB中FMDatabase有beginTransaction、commit、rollback三个方法进行开启事务、提交事务和回滚事务。</li></ul></li></ul><h4 id="说一说你对Core-Data的认识"><a href="#说一说你对Core-Data的认识" class="headerlink" title="说一说你对Core Data的认识"></a>说一说你对Core Data的认识</h4><p>Core Data使用起来相对直接使用SQLite3的API而言更加的面向对象，操作过程通常分为以下几个步骤：</p><ul><li>创建管理上下文<br> 创建管理上下可以细分为：加载模型文件-&gt;指定数据存储路径-&gt;创建对应数据类型的存储-&gt;创建管理对象上下方并指定存储。<br> 经过这几个步骤之后可以得到管理对象上下文NSManagedObjectContext，以后所有的数据操作都由此对象负责。同时如果是第一次创建上下文，Core Data会自动创建存储文件（例如这里使用SQLite3存储），并且根据模型对象创建对应的表结构。</li><li>查询数据<br> 对于有条件的查询，在Core Data中是通过谓词来实现的。首先创建一个请求，然后设置请求条件，最后调用上下文执行请求的方法。</li><li>插入数据<br> 插入数据需要调用实体描述对象NSEntityDescription返回一个实体对象，然后设置对象属性，最后保存当前上下文即可。这里需要注意，增、删、改操作完最后必须调用管理对象上下文的保存方法，否则操作不会执行。</li><li>删除数据<br> 删除数据可以直接调用管理对象上下文的deleteObject方法，删除完保存上下文即可。注意，删除数据前必须先查询到对应对象。</li><li>修改数据<br> 修改数据首先也是取出对应的实体对象，然后通过修改对象的属性，最后保存上下文。</li></ul><h4 id="OC中有哪些数据存储方式-各有什么区别"><a href="#OC中有哪些数据存储方式-各有什么区别" class="headerlink" title="OC中有哪些数据存储方式,各有什么区别?"></a>OC中有哪些数据存储方式,各有什么区别?</h4><ul><li>OC中有四种数据存储方式: <ul><li>NSUserDefaults,用于存储配置信息</li><li>SQLite,用于存储查询需求较多的数据</li><li>CoreData,用于规划应用中的对象</li></ul></li><li>使用基本对象类型定制的个性化缓存方案. <ul><li>NSUserDefaults:对象中储存了系统中用户的配置信息,开发者可以通过这个实例对象对这些已有的信息进行修改,也 可以按照自己的需求创建新的配置项。</li><li>SQLite擅长处理的数据类型其实与NSUserDefaults差不多,也是基础类型的小数据,只是从组织形式上不同。开发者可以以关系型数据库的方式组织数据,使用SQL DML来管理数据。一般来说应用中的格式化的文本类数据可以存放在数据库 中,尤其是类似聊天记录、Timeline等这些具有条件查询和排序需求的数据。</li><li>CoreData是一个管理方案,它的持久化可以通过SQLite、XML或二进制文件储存。它可以把整个应用中的对象建模并进行自动化的管理。从归档文件还原模型时CoreData并不是一次性把整个模型中的所有数据都载入内存,而是根据运行时状态,把被调用到的对象实例载入内存。框架会自动控制这个过程,从而达到控制内存消耗,避免浪费。 无论从设计原理还是使用方法上看,CoreData都比较复杂。因此,如果仅仅是考虑缓存数据这个需求,CoreData绝对不是一个优选方案。</li><li>CoreData的使用场景在于:整个应用使用CoreData规划,把应用内的数据通过CoreData建模,完全基于CoreData架构应用。</li><li>使用基本对象类型定制的个性化缓存方案:从需求出发分析缓存数据有哪些要求:按Key查找,快速读取,写入不影响正常操作,不浪费内存,支持归档。这些都是基本需求,那么再进一步或许还需要固定缓存项数量,支持队列缓存,缓存过期等。<br> 数据存储这一块, 面试常问, 你常用哪一种数据存储? 什么是序列化? sqlite是直接用它还是用封装了它的第三方库? 尤其是会问sqlite和core data的区别?</li></ul></li></ul><h4 id="iOS平台怎么做数据的持久化-coredata和sqlite有无必然联系-coredata是一个关系型数据库吗"><a href="#iOS平台怎么做数据的持久化-coredata和sqlite有无必然联系-coredata是一个关系型数据库吗" class="headerlink" title="iOS平台怎么做数据的持久化?coredata和sqlite有无必然联系?coredata是一个关系型数据库吗?"></a>iOS平台怎么做数据的持久化?coredata和sqlite有无必然联系?coredata是一个关系型数据库吗?</h4><ul><li>iOS中可以有四种持久化数据的方式: 属性列表、对象归档、SQLite3和Core Data</li><li>coredata可以使你以图形界面的方式快速的定义app的数据模型,同时在你的代码中容易获取到它。</li><li>coredata提供了基础结构去处理常用的功能,例如保存,恢复,撤销和重做,允许你在app中继续创建新的任务。</li><li>在使用coredata的时候,你不用安装额外的数据库系统,因为coredata使用内置的sqlite数据库。</li><li>coredata将你app的模型层放入到一组定义在内存中的数据对象。</li><li>coredata会 追踪这些对象的改变,同时可以根据需要做相应的改变,例如用户执行撤销命令。</li><li>当coredata在对你app数据的改变进行保存的时 候,core data会把这些数据归档,并永久性保存。</li><li>mac os x中sqlite库,它是一个轻量级功能强大的关系数据引擎,也很容易嵌入到应用程序。可以在多个平台使用,sqlite是一个轻 量级的嵌入式sql数据库编程。</li><li>与coredata框架不同的是,sqlite是使用程序式的,sql的主要的API来直接操作数据表。</li><li>Core Data不是一个关系型数据库,也不是关系型数据库管理系统(RDBMS)。</li><li>虽然Core Dta支持SQLite作为一种存储类型, 但它不能使用任意的SQLite数据库。</li><li>Core Data在使用的过程种自己创建这个数据库。Core Data支持对一、对多的关系。</li></ul><h4 id="如果后期需要增加数据库中的字段怎么实现，如果不使用CoreData呢？"><a href="#如果后期需要增加数据库中的字段怎么实现，如果不使用CoreData呢？" class="headerlink" title="如果后期需要增加数据库中的字段怎么实现，如果不使用CoreData呢？"></a>如果后期需要增加数据库中的字段怎么实现，如果不使用CoreData呢？</h4><ul><li>编写SQL语句来操作原来表中的字段</li><li>增加表字段：ALTER TABLE 表名 ADD COLUMN 字段名 字段类型;</li><li>删除表字段：ALTER TABLE 表名 DROP COLUMN 字段名;</li><li>修改表字段：ALTER TABLE 表名 RENAME COLUMN 旧字段名 TO 新字段名;</li></ul><h4 id="SQLite数据存储是怎么用？"><a href="#SQLite数据存储是怎么用？" class="headerlink" title="SQLite数据存储是怎么用？"></a>SQLite数据存储是怎么用？</h4><ul><li>添加SQLite动态库：导入主头文件：#import &lt;sqlite3.h&gt;</li><li>利用C语言函数创建\打开数据库，编写SQL语句</li></ul><h4 id="简单描述下客户端的缓存机制？-1"><a href="#简单描述下客户端的缓存机制？-1" class="headerlink" title="简单描述下客户端的缓存机制？"></a>简单描述下客户端的缓存机制？</h4><ul><li>缓存可以分为：内存数据缓存、数据库缓存、文件缓存</li><li>每次想获取数据的时候</li><li>先检测内存中有无缓存</li><li>再检测本地有无缓存(数据库\文件)</li><li>最终发送网络请求</li><li>将服务器返回的网络数据进行缓存（内存、数据库、文件）以便下次读取</li></ul><h4 id="你实现过多线程的Core-Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？-1"><a href="#你实现过多线程的Core-Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？-1" class="headerlink" title="你实现过多线程的Core Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？"></a>你实现过多线程的Core Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？</h4><ul><li>CoreData是对SQLite数据库的封装</li><li>CoreData中的NSManagedObjectContext在多线程中不安全</li><li>如果想要多线程访问CoreData的话，最好的方法是一个线程一个NSManagedObjectContext</li><li>每个NSManagedObjectContext对象实例都可以使用同一个NSPersistentStoreCoordinator实例，这是因为NSManagedObjectContext会在便用NSPersistentStoreCoordinator前上锁</li></ul><h4 id="Core-Data数据迁移"><a href="#Core-Data数据迁移" class="headerlink" title="Core Data数据迁移"></a>Core Data数据迁移</h4><p>博客地址: <a href="https://link.jianshu.com?t=http://blog.csdn.net/jasonblog/article/details/17842535" target="_blank" rel="noopener">http://blog.csdn.net/jasonblog/article/details/17842535</a></p><h4 id="FMDB的使用和对多张表的处理"><a href="#FMDB的使用和对多张表的处理" class="headerlink" title="FMDB的使用和对多张表的处理"></a>FMDB的使用和对多张表的处理</h4><p>博客地址: <a href="https://link.jianshu.com?t=http://blog.csdn.net/wscqqlucy/article/details/8464398" target="_blank" rel="noopener">http://blog.csdn.net/wscqqlucy/article/details/8464398</a></p><h4 id="说说数据库的左连接和右连接的区别"><a href="#说说数据库的左连接和右连接的区别" class="headerlink" title="说说数据库的左连接和右连接的区别"></a>说说数据库的左连接和右连接的区别</h4><ul><li>数据库左连接和右连接的区别：主表不一样通过左连接和右连接，最小条数为3（记录条数较小的记录数），最大条数为12（3×4）</li><li>技术博客的地址 : <a href="https://link.jianshu.com?t=http://www.2cto.com/database/201407/317367.html" target="_blank" rel="noopener">http://www.2cto.com/database/201407/317367.html</a></li></ul><h4 id="iOS-的沙盒目录结构是怎样的？-App-Bundle-里面都有什么？"><a href="#iOS-的沙盒目录结构是怎样的？-App-Bundle-里面都有什么？" class="headerlink" title="iOS 的沙盒目录结构是怎样的？ App Bundle 里面都有什么？"></a>iOS 的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</h4><ol><li>沙盒结构<ul><li>Application：存放程序源文件，上架前经过数字签名，上架后不可修改</li><li>Documents：常用目录，iCloud备份目录，存放数据,这里不能存缓存文件,否则上架不被通过</li><li>Library <ul><li>Caches：存放体积大又不需要备份的数据,SDWebImage缓存路径就是这个</li><li>Preference：设置目录，iCloud会备份设置信息</li></ul></li><li>tmp：存放临时文件，不会被备份，而且这个文件下的数据有可能随时被清除的可能</li></ul></li><li>App Bundle 里面有什么<ul><li>Info.plist:此文件包含了应用程序的配置信息.系统依赖此文件以获取应用程序的相关信息</li><li>可执行文件:此文件包含应用程序的入口和通过静态连接到应用程序target的代码</li><li>资源文件:图片,声音文件一类的</li><li>其他:可以嵌入定制的数据资源</li></ul></li></ol><h4 id="你会如何存储用户的一些敏感信息，如登录的-token"><a href="#你会如何存储用户的一些敏感信息，如登录的-token" class="headerlink" title="你会如何存储用户的一些敏感信息，如登录的 token"></a>你会如何存储用户的一些敏感信息，如登录的 token</h4><p>使用keychain来存储,也就是钥匙串,使用keychain需要导入Security框架</p><pre><code>自定义一个keychain的类#import &lt;Security/Security.h&gt;@implementation YCKKeyChain+(NSMutableDictionary *)getKeychainQuery:(NSString *)service {return [NSMutableDictionary dictionaryWithObjectsAndKeys:        (__bridge_transfer id)kSecClassGenericPassword,(__bridge_transfer   id)kSecClass,        service, (__bridge_transfer id)kSecAttrService,        service, (__bridge_transfer id)kSecAttrAccount,        (__bridge_transfer id)kSecAttrAccessibleAfterFirstUnlock,   (__bridge_transfer id)kSecAttrAccessible,        nil];}+(void)save:(NSString *)service data:(id)data {// 获得搜索字典NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];// 添加新的删除旧的SecItemDelete((__bridge_retained CFDictionaryRef)keychainQuery);// 添加新的对象到字符串[keychainQuery setObject:[NSKeyedArchiver archivedDataWithRootObject:data]  forKey:(__bridge_transfer id)kSecValueData];// 查询钥匙串SecItemAdd((__bridge_retained CFDictionaryRef)keychainQuery, NULL);}+(id)load:(NSString *)service {id ret = nil;NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];// 配置搜索设置[keychainQuery setObject:(id)kCFBooleanTrue forKey:(__bridge_transfer   id)kSecReturnData];[keychainQuery setObject:(__bridge_transfer id)kSecMatchLimitOne forKey:    (__bridge_transfer id)kSecMatchLimit];CFDataRef keyData = NULL;if (SecItemCopyMatching((__bridge_retained CFDictionaryRef)keychainQuery, (CFTypeRef *)&amp;keyData) == noErr) {    @try {        ret = [NSKeyedUnarchiver unarchiveObjectWithData:(__bridge_transfer NSData *)keyData];    } @catch (NSException *e) {        NSLog(@&quot;Unarchive of %@ failed: %@&quot;, service, e);    } @finally {    }}return ret;}+(void)delete:(NSString *)service {NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];SecItemDelete((__bridge_retained CFDictionaryRef)keychainQuery);}</code></pre><p>在别的类实现存储,加载,删除敏感信息方法<br> // 用来标识这个钥匙串<br> static NSString <em> const KEY_IN_KEYCHAIN = @”com.yck.app.allinfo”;<br> // 用来标识密码<br> static NSString </em> const KEY_PASSWORD = @”com.yck.app.password”;</p><pre><code>+(void)savePassWord:(NSString *)password{NSMutableDictionary *passwordDict = [NSMutableDictionary dictionary];[passwordDict setObject:password forKey:KEY_PASSWORD];[YCKKeyChain save:KEY_IN_KEYCHAIN data:passwordDict];}+(id)readPassWord{NSMutableDictionary *passwordDict = (NSMutableDictionary *)[YCKKeyChain     load:KEY_IN_KEYCHAIN];return [passwordDict objectForKey:KEY_PASSWORD];}+(void)deletePassWord{[YCKKeyChain delete:KEY_IN_KEYCHAIN];}</code></pre><h4 id="使用-NSUserDefaults-时，如何处理布尔的默认值？-比如返回-NO，不知道是真的-NO-还是没有设置过"><a href="#使用-NSUserDefaults-时，如何处理布尔的默认值？-比如返回-NO，不知道是真的-NO-还是没有设置过" class="headerlink" title="使用 NSUserDefaults 时，如何处理布尔的默认值？(比如返回 NO，不知道是真的 NO 还是没有设置过)"></a>使用 NSUserDefaults 时，如何处理布尔的默认值？(比如返回 NO，不知道是真的 NO 还是没有设置过)</h4><pre><code>if([[NSUserDefaults standardUserDefaults] objectForKey:ID] == nil){    NSLog(@&quot;没有设置&quot;);}</code></pre><h4 id="MD5和Base64的区别是什么，各自使用场景是什么？"><a href="#MD5和Base64的区别是什么，各自使用场景是什么？" class="headerlink" title="MD5和Base64的区别是什么，各自使用场景是什么？"></a>MD5和Base64的区别是什么，各自使用场景是什么？</h4><pre><code>做过加密相关的功能的，几乎都会使用到MD5和Base64，它们两者在实际开发中是最常用的。•   MD5：是一种不可逆的摘要算法，用于生成摘要，无法逆着破解得到原文。常用的是生成32位摘要，用于验证数据的有效性。比如，在网络请求接口中，通过将所有的参数生成摘要，客户端和服务端采用同样的规则生成摘要，这样可以防篡改。又如，下载文件时，通过生成文件的摘要，用于验证文件是否损坏。•   Base64：属于加密算法，是可逆的，经过encode后，可以decode得到原文。在开发中，有的公司上传图片采用的是将图片转换成base64字符串，再上传。在做加密相关的功能时，通常会将数据进行base64加密/解密。</code></pre><h4 id="plist文件是用来做什么的。一般用它来处理一些什么方面的问题。"><a href="#plist文件是用来做什么的。一般用它来处理一些什么方面的问题。" class="headerlink" title="plist文件是用来做什么的。一般用它来处理一些什么方面的问题。"></a>plist文件是用来做什么的。一般用它来处理一些什么方面的问题。</h4><ul><li>plist是iOS系统中特有的文件格式。我们常用的NSUserDefaults偏好设置实质上就是plist文件操作。plist文件是用来持久化存储数据的。</li><li>我们通常使用它来存储偏好设置，以及那些少量的、数组结构比较复杂的不适合存储数据库的数据。比如，我们要存储全国城市名称和id，那么我们要优先选择plist直接持久化存储，因为更简单。</li></ul><h4 id="当存储大块数据是怎么做？"><a href="#当存储大块数据是怎么做？" class="headerlink" title="当存储大块数据是怎么做？"></a>当存储大块数据是怎么做？</h4><ul><li>你有很多选择，比如：</li><li>使用NSUerDefaults</li><li>使用XML, JSON, 或者 plist</li><li>使用NSCoding存档</li><li>使用类似SQLite的本地SQL数据库</li><li>使用 Core Data</li><li>NSUserDefaults的问题是什么？虽然它很nice也很便捷，但是它只适用于小数据，比如一些简单的布尔型的设置选项，再大点你就要考虑其它方式了</li><li>XML这种结构化档案呢？总体来说，你需要读取整个文件到内存里去解析，这样是很不经济的。使用SAX又是一个很麻烦的事情。</li><li>NSCoding？不幸的是，它也需要读写文件，所以也有以上问题。</li><li>在这种应用场景下，使用SQLite 或者 Core Data比较好。使用这些技术你用特定的查询语句就能只加载你需要的对象。在性能层面来讲，SQLite和Core Data是很相似的。他们的不同在于具体使用方法。Core Data代表一个对象的graph model，但SQLite就是一个DBMS。Apple在一般情况下建议使用Core Data，但是如果你有理由不使用它，那么就去使用更加底层的SQLite吧。如果你使用SQLite，你可以用FMDB(<a href="https://link.jianshu.com?t=https://GitHub.com/ccgus/fmdb" target="_blank" rel="noopener">https://GitHub.com/ccgus/fmdb</a>)这个库来简化SQLite的操作，这样你就不用花很多经历了解SQLite的C API了</li></ul><h4 id="怎么解决sqlite锁定的问题"><a href="#怎么解决sqlite锁定的问题" class="headerlink" title="怎么解决sqlite锁定的问题"></a>怎么解决sqlite锁定的问题</h4><pre><code>1&gt;  设置数据库锁定的处理函数int sqlite3_busy_handler(sqlite3*, int(*)(void*,int), void*);函数可以定义一个回调函数，当出现数据库忙时，sqlite会调用该函数当回调函数为ＮＵＬＬ时，清除busy handle，申请不到锁直接返回回调函数的第二个函数会被传递为该由此次忙事件调用该函数的次数回调函数返回非０,数据库会重试当前操作，返回０则当前操作返回SQLITE_BUSY2&gt;  设定锁定时的等待时间int sqlite3_busy_timeout(sqlite3*, 60); 定义一个毫秒数，当未到达该毫秒数时，sqlite会sleep并重试当前操作如果超过ms毫秒，仍然申请不到需要的锁，当前操作返回sqlite_BUSY当ms&lt;=0时，清除busy handle，申请不到锁直接返回</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题12--绘图与动画</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9812-%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9812-%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<h4 id="CAAnimation的层级结构"><a href="#CAAnimation的层级结构" class="headerlink" title="CAAnimation的层级结构"></a>CAAnimation的层级结构</h4><ul><li>CAPropertyAnimation是CAAnimation的子类，也是个抽象类，要想创建动画对象，应该使用它的两个子类：CABasicAnimation和CAKeyframeAnimation</li><li>属性解析：keyPath：通过指定CALayer的一个属性名称为keyPath(NSString类型)，并且对CALayer的这个属性的值进行修改，达到相应的动画效果。比如，指定@”position”为keyPath，就修改CALayer的position属性的值，以达到平移的动画效果</li><li>CABasicAnimation，CAPropertyAnimation的子类</li><li>属性解析:</li><li>fromValue：keyPath相应属性的初始值</li><li>toValue：keyPath相应属性的结束值</li><li>随着动画的进行，在长度为duration的持续时间内，keyPath相应属性的值从fromValue渐渐地变为toValue。如果fillMode=kCAFillModeForwards和removedOnComletion=NO，那么在动画执行完毕后，图层会保持显示动画执行后的状态。但在实质上，图层的属性值还是动画执行前的初始值，并没有真正被改变。比如，CALayer的position初始值为(0,0)，CABasicAnimation的fromValue为(10,10)，toValue为(100,100)，虽然动画执行完毕后图层保持在(100,100)这个位置，实质上图层的position还是为(0,0)</li><li>CAKeyframeAnimation，CApropertyAnimation的子类，跟CABasicAnimation的区别是：CABasicAnimation只能从一个数值(fromValue)变到另一个数值(toValue)，而CAKeyframeAnimation会使用一个NSArray保存这些数值</li><li>属性解析：</li><li>values：就是上述的NSArray对象。里面的元素称为”关键帧”(keyframe)。动画对象会在指定的时间(duration)内，依次显示values数组中的每一个关键帧</li><li>path：可以设置一个CGPathRef\CGMutablePathRef,让层跟着路径移动。path只对CALayer的anchorPoint和position起作用。如果你设置了path，那么values将被忽略</li><li>keyTimes：可以为对应的关键帧指定对应的时间点,其取值范围为0到1.0,keyTimes中的每一个时间值都对应values中的每一帧.当keyTimes没有设置的时候,各个关键帧的时间是平分的</li><li>CABasicAnimation可看做是最多只有2个关键帧的CAKeyframeAnimation</li><li>CAAnimationGroup，CAAnimation的子类，可以保存一组动画对象，将CAAnimationGroup对象加入层后，组中所有动画对象可以同时并发运行</li><li>属性解析：</li><li>animations：用来保存一组动画对象的NSArray<br> 默认情况下，一组动画对象是同时运行的，也可以通过设置动画对象的beginTime属性来更改动画的开始时间</li><li>CATransition，CAAnimation的子类，用于做转场动画，能够为层提供移出屏幕和移入屏幕的动画效果。iOS比Mac OS X的转场动画效果少一点</li><li>UINavigationController就是通过CATransition实现了将控制器的视图推入屏幕的动画效果</li><li>属性解析:</li><li>type：动画过渡类型</li><li>subtype：动画过渡方向</li><li>startProgress：动画起点(在整体动画的百分比)</li><li>endProgress：动画终点(在整体动画的百分比)</li><li>UIView动画</li><li>UIKit直接将动画集成到UIView类中，当内部的一些属性发生改变时，UIView将为这些改变提供动画支持<br> 执行动画所需要的工作由UIView类自动完成，但仍要在希望执行动画时通知视图，为此需要将改变属性的代码放在[UIView beginAnimations:nil context:nil]和[UIView commitAnimations]之间</li><li>Block动画</li><li>帧动画</li></ul><p>PNG</p><h4 id="谈谈你对Core-Graphic-绘图的了解"><a href="#谈谈你对Core-Graphic-绘图的了解" class="headerlink" title="谈谈你对Core Graphic 绘图的了解?"></a>谈谈你对Core Graphic 绘图的了解?</h4><ul><li>Core Graphics是基于C的API，可以用于一切绘图操作</li><li>Core Graphics 和Quartz 2D的区别<ul><li>quartz是一个通用的术语，用于描述在IOS和MAC OS X ZHONG 整个媒体层用到的多种技术 包括图形、动画、音频、适配。</li><li>Quart 2D 是一组二位绘图和渲染API，Core Graphic会使用到这组API</li><li>Quartz Core 专指Core Animation用到的动画相关的库、API和类</li></ul></li><li>Core Graphics是高度集成于UIView和其他UIKit部分的。</li><li><p>Core Graphics数据结构和函数可以通过前缀CG来识别。</p></li><li><p>系统拥有坐标系，如320 <em> 480 硬件有retain屏幕和非retain屏：如320 </em> 480、640<em> 960<br> Core Graphics 使用的是系统的坐标系来绘制图片。在分辨率为640</em> 960手机上绘制图片时，实际上Core Graphics 的坐标是320*480。这个时候每个坐标系上的点，实际上拥有两个像素。</p></li><li>视图可以通过子视图、图层或实现drawRect：方法来表现内容，如果说实现了drawRect：方法，那么最好就不要混用其他方法了，如图层和子视图。自定义绘图大部分是由UIKit或者Core Graphics来实现的。</li><li>Core Graphics的优点：快速、高效，减小应用的文件大小。同时可以自由地使用动态的、高质量的图形图像。 使用Core Graphics，可以创建直线、路径、渐变、文字与图像等内容，并可以做变形处理</li><li>2D绘图一般可以拆分成以下几个操作: 线条 , 路径 , 文本 , 图片 , 渐变</li><li>由于像素是依赖于目标的，所以2D绘图并不能操作单独的像素，我们可以从上下文（Context）读取它。<br> 绘图就好比在画布上拿着画笔机械的进行画画，通过制定不同的参数来进行不同的绘制。<br> <a href="https://link.jianshu.com?t=http://www.tuicool.com/articles/jIJzMf" target="_blank" rel="noopener">http://www.tuicool.com/articles/jIJzMf</a><br> <a href="https://link.jianshu.com?t=http://blog.csdn.net/mangosnow/article/details/37054765" target="_blank" rel="noopener">http://blog.csdn.net/mangosnow/article/details/37054765</a></li></ul><h4 id="Core-Animation-核心动画"><a href="#Core-Animation-核心动画" class="headerlink" title="Core Animation(核心动画)?"></a>Core Animation(核心动画)?</h4><ul><li>CoreAnimation也就是核心动画, 是一组非常强大的动画处理API, 可以使用少量的代码做出绚丽的效果, 是直接作用在CALayer上的, 并非UIView, 并且Core Animation的动画执行过程都是在后台操作, 不会阻塞主线程.</li><li>所有动画都是作用在CALayer上的, 当把动画添加到Layer上, 是不直接修改它的属性, Core Animation维护了两个平行layer的层次结构, 模型层树可以看到Layer的状态, 表示层树则是动画正在表现的值的近似。</li><li>Core Animation的使用步骤:<ul><li>使用它需要先添加QuartzCore.framework框架和引入主头文件&lt;QuartzCore/QuartzCore.h&gt;(iOS7.0+ 不需要)</li><li>初始化一个CAAnimation对象，并设置一些动画相关属性</li><li>通过调用CALayer的addAnimation:forKey:方法增加CAAnimation对象到CALayer中，这样就能开始执行动画了</li><li>通过调用CALayer的removeAnimationForKey:方法可以停止CALayer中的动画</li></ul></li></ul><h4 id="转场动画"><a href="#转场动画" class="headerlink" title="转场动画?"></a>转场动画?</h4><ul><li>CATransition-转场动画, 作为CAAnimation的子类，用于做转场动画，能够为层提供移出屏幕和移入屏幕的动画效果。iOS比Mac OS X的转场动画效果少一点.  UINavigationController就是通CATransition实现了将控制器的视图推入屏幕的动画效果.</li></ul><h4 id="Cocoa-Touch提供了哪几种Core-Animation过渡类型？"><a href="#Cocoa-Touch提供了哪几种Core-Animation过渡类型？" class="headerlink" title="Cocoa Touch提供了哪几种Core Animation过渡类型？"></a>Cocoa Touch提供了哪几种Core Animation过渡类型？</h4><ul><li>Cocoa Touch 提供了 4 种 Core Animation 过渡类型，分别为：交叉淡化、推挤、显示和覆盖。</li></ul><h4 id="使用UIView的动画函数-实现转场动画"><a href="#使用UIView的动画函数-实现转场动画" class="headerlink" title="使用UIView的动画函数, 实现转场动画"></a>使用UIView的动画函数, 实现转场动画</h4><ul><li>单视图:<br> +(void)transitionWithView:(UIView* )view duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL finished))completion;</li><li>双视图:<br> +(void)transitionFromView:(UIView<em> )fromView toView:(UIView</em>)toView<br> duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options completion:(void (^)(BOOL finished))completion;</li></ul><h4 id="一个动画怎么实现"><a href="#一个动画怎么实现" class="headerlink" title="一个动画怎么实现?"></a>一个动画怎么实现?</h4><ul><li>以转场动画为例:<ul><li>创建CATransition对象<br> CATransition *animation = [CATransition animation];</li><li>设置运动时间(即动画时间)<br> animation.duration = DURATION;</li><li>设置运动type(类型)<br> animation.type = type;<br> if (subtype != nil) {  //设置子类 (和type配合使用, 指定运动的方向)<br> animation.subtype = subtype;}</li><li>设置运动速度(动画的运动轨迹，用于变化起点和终点之间的插值计算,形象点说它决定了动画运行的节奏,比如是均匀变化(相同时间变化量相同)还是先快后慢,先慢后快还是先慢再快再慢)<br> animation.timingFunction = UIViewAnimationOptionCurveEaseInOut;</li></ul></li><li>将动画添加到view的Layer层<br> [view.layer addAnimation:animation forKey:@”animation”];</li><li>动画类型如下:<br> typedef enum : NSUInteger {<br> Push,                       //推挤<br> Cube,                       //立方体<br> } AnimationType;</li></ul><h4 id="说说Core-Animation是如何开始和结束动画的"><a href="#说说Core-Animation是如何开始和结束动画的" class="headerlink" title="说说Core Animation是如何开始和结束动画的"></a>说说Core Animation是如何开始和结束动画的</h4><pre><code>不是很清楚题目的真正要求，是想知道核心动画的哪些知识点。如何开始和结束动画，这核心动画有很多种，每种动画还有很大的区别。参考答案：动画的开始和结束都可以通过CAMediaTiming协议来处理，核心动画的基类是遵守了CAMediaTiming协议的，可以指定动画开始时间、动画时长、动画播放速度、动画在完成时的行为（停留在结束处、动画回到开始处、动画完成时移除动画）。</code></pre><h4 id="动画有基本类型有哪几种；表视图有哪几种基本样式。"><a href="#动画有基本类型有哪几种；表视图有哪几种基本样式。" class="headerlink" title="动画有基本类型有哪几种；表视图有哪几种基本样式。"></a>动画有基本类型有哪几种；表视图有哪几种基本样式。</h4><ul><li>动画有两种基本类型：一种为UIView动画,又称隐式动画,动画后frame的数值发生了变化.另一种是CALayer动画,又称显示动画,动画后模型层的数据不会发生变化,图形回到原来的位置。</li><li>UITableViewStylePlain：普通样式</li><li>UITableViewStyleGrouped:分组样式</li><li>UITableViewCellStyleDefault:Default样式：左边一个显示图片的imageView，一个标题textLabel，没有detailTextLabel。</li><li>UITableViewCellStyleSubtitle:Subtitle样式：左边一个显示图片的imageView，上边一个主标题textLabel，一个副标题detailTextLabel。主标题字体大且加黑，副标题字体小在主标题下边。</li><li>UITableViewCellStyleValue1:Value1样式：左边一个显示图片的imageView，左边一个主标题textLabel，右边一个副标题detailTextLabel，主标题字体比较黑。</li><li>UITableViewCellStyleValue2:Value2样式：左边一个主标题textLabel字体偏小，挨着右边一个副标题detailTextLabel，字体大且加黑。</li></ul><h4 id="CADisplayLink"><a href="#CADisplayLink" class="headerlink" title="CADisplayLink"></a>CADisplayLink</h4><ul><li>CADisplayLink是一种以屏幕刷新频率触发的时钟机制，每秒钟执行大约60次左右</li><li>CADisplayLink是一个计时器，可以使绘图代码与视图的刷新频率保持同步，而NSTimer无法确保计时器实际被触发的准确时间</li><li>使用方法：<br> 定义CADisplayLink并制定触发调用方法<br> 将显示链接添加到主运行循环队列</li></ul><h4 id="Quatrz-2D的绘图功能的三个核心概念是什么并简述其作用。"><a href="#Quatrz-2D的绘图功能的三个核心概念是什么并简述其作用。" class="headerlink" title="Quatrz 2D的绘图功能的三个核心概念是什么并简述其作用。"></a>Quatrz 2D的绘图功能的三个核心概念是什么并简述其作用。</h4><p>上下文：主要用于描述图形写入哪里；</p><p>路径：是在图层上绘制的内容；</p><p>状态：用于保存配置变换的值、填充和轮廓， alpha 值等。<br> 文章如有问题，请留言，我将及时更正。</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题11--第三方框架及其管理</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9811-%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E7%AE%A1%E7%90%86/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9811-%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="使用过CocoaPods吗？它是什么？CocoaPods的原理"><a href="#使用过CocoaPods吗？它是什么？CocoaPods的原理" class="headerlink" title="使用过CocoaPods吗？它是什么？CocoaPods的原理?"></a>使用过CocoaPods吗？它是什么？CocoaPods的原理?</h4><ul><li>CocoaPod是一个第三方库的管理工具，用来管理项目中的第三方框架。</li><li>在终端中进入（cd命令）你项目所在目录，然后在当前目录下，利用vim创建Podfile，运行： $ vim Podfile</li><li>然后在Podfile文件中输入以下文字： <ul><li>platform :ios, ‘9.3’</li><li>pod “AFNetworking”, “~&gt; 2.0”</li><li>然后保存退出。vim环境下，保存退出命令是 :wq</li></ul></li><li>这时候，你会发现你的项目目录中，出现一个名字为Podfile的文件，而且文件内容就是你刚刚输入的内容。<br> 这时候，你就可以利用CocoPods下载AFNetworking类库了,运行以下命令：$ pod install</li></ul><h4 id="用cocoapods管理第三方框架的时候我想改版本，怎么办到？"><a href="#用cocoapods管理第三方框架的时候我想改版本，怎么办到？" class="headerlink" title="用cocoapods管理第三方框架的时候我想改版本，怎么办到？"></a>用cocoapods管理第三方框架的时候我想改版本，怎么办到？</h4><ul><li>可以直接或者终端打开Podfile, 修改Podfile文件中第三方框架的版本</li></ul><h4 id="集成三方框架有哪些方法"><a href="#集成三方框架有哪些方法" class="headerlink" title="集成三方框架有哪些方法"></a>集成三方框架有哪些方法</h4><ul><li>cocoapods</li><li>framework</li><li>直接下载源码拖进项目用</li></ul><h4 id="SDWebImage的原理实现机制，如何解决TableView卡的问题"><a href="#SDWebImage的原理实现机制，如何解决TableView卡的问题" class="headerlink" title="SDWebImage的原理实现机制，如何解决TableView卡的问题?"></a>SDWebImage的原理实现机制，如何解决TableView卡的问题?</h4><h5 id="SDWebImage内部实现过程（建议画图记住）-image"><a href="#SDWebImage内部实现过程（建议画图记住）-image" class="headerlink" title="SDWebImage内部实现过程（建议画图记住） image"></a>SDWebImage内部实现过程（建议画图记住） <img src="http://" alt="image">image</h5><ul><li>入口 setImageWithURL:placeholderImage:options: 会先把 placeholderImage 显示，然后 SDWebImageManager 根据 URL 开始处理图片。</li><li>进入 SDWebImageManager-downloadWithURL:delegate:options:userInfo:，交给 SDImageCache 从缓存查找图片是否已经下载 queryDiskCacheForKey:delegate:userInfo:.</li><li>先从内存图片缓存查找是否有图片，如果内存中已经有图片缓存，SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo: 到 SDWebImageManager。</li><li>SDWebImageManagerDelegate 回调 webImageManager:didFinishWithImage: 到 UIImageView+WebCache 等前端展示图片。</li><li>如果内存缓存中没有，生成 NSInvocationOperation 添加到队列开始从硬盘查找图片是否已经缓存。</li><li>根据 URLKey 在硬盘缓存目录下尝试读取图片文件。这一步是在 NSOperation 进行的操作，所以回主线程进行结果回调 notifyDelegate:。</li><li>如果上一操作从硬盘读取到了图片，将图片添加到内存缓存中（如果空闲内存过小，会先清空内存缓存）。SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo:。进而回调展示图片。</li><li>如果从硬盘缓存目录读取不到图片，说明所有缓存都不存在该图片，需要下载图片, 回调 imageCache:didNotFindImageForKey:userInfo:。</li><li>共享或重新生成一个下载器 SDWebImageDownloader 开始下载图片。</li><li>图片下载由 NSURLConnection 来做，实现相关 delegate 来判断图片下载中、下载完成和下载失败。</li><li>connection:didReceiveData: 中利用 ImageIO 做了按图片下载进度加载效果。</li><li>connectionDidFinishLoading: 数据下载完成后交给 SDWebImageDecoder 做图片解码处理。</li><li>图片解码处理在一个 NSOperationQueue 完成，不会拖慢主线程 UI。如果有需要对下载的图片进行二次处理，最好也在这里完成，效率会好很多。</li><li>在主线程 notifyDelegateOnMainThreadWithInfo: 宣告解码完成，imageDecoder:didFinishDecodingImage:userInfo: 回调给 SDWebImageDownloader。</li><li>imageDownloader:didFinishWithImage: 回调给 SDWebImageManager 告知图片下载完成。</li><li>通知所有的 downloadDelegates 下载完成，回调给需要的地方展示图片。</li><li>将图片保存到 SDImageCache 中，内存缓存和硬盘缓存同时保存。写文件到硬盘也在以单独 NSInvocationOperation 完成，避免拖慢主线程。</li><li>SDImageCache 在初始化的时候会注册一些消息通知，在内存警告或退到后台的时候清理内存图片缓存，应用结束的时候清理过期图片。</li><li>SDWI 也提供了 UIButton+WebCache 和 MKAnnotationView+WebCache，方便使用。</li><li>SDWebImagePrefetcher 可以预先下载图片，方便后续使用。</li><li>如何解决tableView卡顿问题，前面也提了很多方案。通过设置最大并发数, 设置当前页的cell, 而不是把所有cell一次性设置完, 以及数据图片的三级缓存, 直接保存在内存中和沙盒缓存中进行读取. 降低网络请求的次数, 不仅节约用户流量. 也会保证tableView滑动的流畅性</li></ul><h4 id="SDWebImage怎样实现图片的缓存机制的？"><a href="#SDWebImage怎样实现图片的缓存机制的？" class="headerlink" title="SDWebImage怎样实现图片的缓存机制的？"></a>SDWebImage怎样实现图片的缓存机制的？</h4><ul><li>图片的缓存, 内存缓存, 沙盒缓存, 操作缓存, 以tableViewController为例:</li><li>每次cell需要显示,都需要重新调用- (UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { }方法</li><li>每次调用tableView显示行的数据源方法时, 如果需要从网络加载图片, 就需要将加载图片这样的耗时操作放在子线程上执行, 从网络上下载的图片可以以键值对的形式保存在定义的可变字典中,将每张图片的唯一的路径作为键,将从网络下载下来的图片作为值, 保存在内存缓存中, 这样每次滑动tableView cell重用时就直接判断内存缓存中有没有需要的图片, 如果有就不需要再次下载,在没有出现内存警告或者程序员手动清理内存缓存时, 就直接从内存缓存中获取图片.</li><li>为了每次退出程序,再次进入程序时,不浪费用户的流量, 需要将第一次进入程序时加载的图片保存在本地沙盒缓存文件中, 在沙盒中保存的图片数据没有被改变之前,下次开启程序就直接从沙盒的缓存文件中读取需要显示的图片, 并将沙盒缓存文件夹(Cache)中保存的图片保存到内存缓存中, 这样用户每次滑动tableView cell重用时直接从内存缓存中读取而不是从沙盒中读取, 节约时间.</li></ul><h4 id="你用过哪些第三方框架？"><a href="#你用过哪些第三方框架？" class="headerlink" title="你用过哪些第三方框架？"></a>你用过哪些第三方框架？</h4><ul><li>使用过一些第三方框架, 例如AFN,SDWebimage,FMDB, MBProgressHUD, Masonry。</li></ul><h4 id="使用-AFNetworking做过断点续传吗？"><a href="#使用-AFNetworking做过断点续传吗？" class="headerlink" title="使用 AFNetworking做过断点续传吗？"></a>使用 AFNetworking做过断点续传吗？</h4><ul><li>断点续传的主要思路: <ul><li>检查服务器文件信息</li><li>检查本地文件</li><li>如果比服务器文件小, 断点续传, 利用 HTTP 请求头的 Range 实现断点续传</li><li>如果比服务器文件大，重新下载</li><li>如果和服务器文件一样，下载完成</li></ul></li></ul><h4 id="使用第三方框架的时候有没有仔细研读过它们的源码-AFNetworking-？AFN底层原理分析。"><a href="#使用第三方框架的时候有没有仔细研读过它们的源码-AFNetworking-？AFN底层原理分析。" class="headerlink" title="使用第三方框架的时候有没有仔细研读过它们的源码(AFNetworking)？AFN底层原理分析。"></a>使用第三方框架的时候有没有仔细研读过它们的源码(AFNetworking)？AFN底层原理分析。</h4><ul><li>AFNetworking主要是对NSURLSession和NSURLCollection（iOS9.0废弃）的封装,其中主要有以下类:</li><li>AFHTTPRequestOperationManager :内部封装的是 NSUrlConnection,负责发送网络请求,使用最多的一个类.（3.0废弃）</li><li>AFHTTPSessionManager :内部封装是 NSUrlSession ,负责发送网络请求,使用最多的一个类.</li><li>AFHTTPRequestOperationManager 和 AFHTTPSessionManager :定义的 API(方法名称)是一模一样,没有任何区别.</li><li>AFNetworkReachabilityManager :实时监测网络状态的工具类.当前的网络环境发生改变之后,这个工具类就可以检测到.</li><li>AFSecurityPolicy :网络安全的工具类, 主要是针对 HTTPS 服务.</li><li>AFURLRequestSerialization :序列化工具类,基类.上传的数据转换成JSON格式(AFJSONRequestSerializer).使用不多.</li><li>AFURLResponseSerialization :反序列化工具类;基类.使用比较多:</li><li>AFJSONResponseSerializer; JSON解析器,默认的解析器.</li><li>AFHTTPResponseSerializer; 万能解析器; JSON和XML之外的数据类型,直接返回二进制数据.对服务器返回的数据不做任何处理.</li><li>AFXMLParserResponseSerializer; XML解析器;</li></ul><h4 id="AFN默认超时时长是多少啊"><a href="#AFN默认超时时长是多少啊" class="headerlink" title="AFN默认超时时长是多少啊?"></a>AFN默认超时时长是多少啊?</h4><ul><li>AFN的默认超时时长是60s.</li></ul><h4 id="举出5个以上你所熟悉的iOS-sdk库有哪些和第三方库有哪些"><a href="#举出5个以上你所熟悉的iOS-sdk库有哪些和第三方库有哪些" class="headerlink" title="举出5个以上你所熟悉的iOS sdk库有哪些和第三方库有哪些?"></a>举出5个以上你所熟悉的iOS sdk库有哪些和第三方库有哪些?</h4><pre><code>1&gt; iOS-sdk:Foundation.framework,CoreGraphics.framework,UIKit.framework,MediaPlayer.framework,CoreAudio.framework2&gt; 第三方库: 1.AFNetWoring2.SDWebImage3.masonry4.MBProgressHUD3&gt; 框架分类: 音频和视频         Core Audio         OpenAL         Media Library        AVFoundation数据管理        Core Data        SQLite图片和动画        Core Animation        OpenGL ES        Quartz 2D网络        Bonjour        WebKit        BSD Sockets用户应用        Address Book        Core Location        Map Kit        Store Kit</code></pre><h4 id="第三方API是怎么用的？"><a href="#第三方API是怎么用的？" class="headerlink" title="第三方API是怎么用的？"></a>第三方API是怎么用的？</h4><ul><li>大公司的开放API,github上面别人发布的框架用第三方API, 在官方文档都有说明，按照官方文档的一步一步做参考官方提供的示例程序。先自己创建一个工程试试，等熟悉了，在使用到项目中</li></ul><h4 id="实现过框架或者库以供他人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意哪些问题，以使人人更容易地使用你的框架。"><a href="#实现过框架或者库以供他人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意哪些问题，以使人人更容易地使用你的框架。" class="headerlink" title="实现过框架或者库以供他人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意哪些问题，以使人人更容易地使用你的框架。"></a>实现过框架或者库以供他人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意哪些问题，以使人人更容易地使用你的框架。</h4><pre><code>从以下角度出发来思考和设计公共框架：•   确保外部调用简单，且保证有详细的头文件注释说明。•   确保API编码规范，保证风格统一。•   确保API易扩展，可以考虑预留参数•   确保没有外部依赖或者依赖要尽可能的少，以保证公共库的纯洁（原则上不能有外部依赖）•   确保易维护，不存在冗余API</code></pre><h4 id="简述下苹果的开发框架？"><a href="#简述下苹果的开发框架？" class="headerlink" title="简述下苹果的开发框架？"></a>简述下苹果的开发框架？</h4><p>Foundation</p><p>提供OC的基础类（像NSObject）、基本数据类型等</p><p>UIKit</p><p>创建和管理应用程序的用户界面</p><p>QuartzCore</p><p>提供动画特效以及通过硬件进行渲染的能力</p><p>CoreGraphics</p><p>提供2D绘制的基于C的API</p><p>SystemConfiguration</p><p>检测当前网络是否可用和硬件设备状态</p><p>AVFoundation</p><p>提供音频录制和回放的底层API，同时也负责管理音频硬件</p><p>CFNetwork</p><p>访问和配置网络，像HTTP、FTP和Bonjour Services</p><p>CoreFoundation</p><p>提供抽象的常用数据类型，如Unicode strings、XML、URL等</p><p>CoreLocation</p><p>使用GPS和WIFI获取位置信息</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题10--报错警告调试</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9810-%E6%8A%A5%E9%94%99%E8%AD%A6%E5%91%8A%E8%B0%83%E8%AF%95/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%9810-%E6%8A%A5%E9%94%99%E8%AD%A6%E5%91%8A%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<h4 id="你在实际开发中，有哪些手机架构与性能调试经验"><a href="#你在实际开发中，有哪些手机架构与性能调试经验" class="headerlink" title="你在实际开发中，有哪些手机架构与性能调试经验"></a>你在实际开发中，有哪些手机架构与性能调试经验</h4><ul><li>刚接手公司的旧项目时，模块特别多，而且几乎所有的代码都写在控制器里面，比如UI控件代码、网络请求代码、数据存储代码</li><li>接下来采取MVC模式进行封装、重构 <ul><li>自定义UI控件封装内部的业务逻辑</li><li>封装网络请求工具类(降低耦合)</li><li>封装数据存储工具类</li></ul></li></ul><h4 id="BAD-ACCESS在什么情况下出现？"><a href="#BAD-ACCESS在什么情况下出现？" class="headerlink" title="BAD_ACCESS在什么情况下出现？"></a>BAD_ACCESS在什么情况下出现？</h4><pre><code>这种问题是经常遇到的，在开发时经常会出现BAD_ACCESS。原因是访问了野指针，比如访问已经释放对象的成员变量或者发消息、死循环等。</code></pre><h4 id="如何调试BAD-ACCESS错误？"><a href="#如何调试BAD-ACCESS错误？" class="headerlink" title="如何调试BAD_ACCESS错误？"></a>如何调试BAD_ACCESS错误？</h4><pre><code>出现BAD_ACCESS错误，通常是访问了野指针，比如访问了已经释放了的对象。快速定位问题的步骤有：1.  重写对象的respondsToSelector方法，先找到出现EXECBADACCESS前访问的最后一个object2.  设置Enable Zombie Objects3.  设置全局断点快速定位问题代码所在行，接收所有的异常4.  Xcode7已经集成了BAD_ACCESS捕获功能：Address Sanitizer，与步骤2一样设置5. analyze也行（不一定管用）</code></pre><h4 id="什么时候会报-unrecognized-selector-异常？"><a href="#什么时候会报-unrecognized-selector-异常？" class="headerlink" title="什么时候会报 unrecognized selector 异常？"></a>什么时候会报 unrecognized selector 异常？</h4><ul><li>当调用对象（子类，各级父类）中不含有对应方法的时候，并且依旧没有给出“消息转发”的具体方案的时候，程序在运行时会crash并抛出 unrecognized selector 异常</li><li>objective-c 中的每个方法在运行时会被转为消息发送objc_msgSend(reciver, selector)</li><li>例如 [person say]就会被转化为 objc_msgSend(person, @selector(say))</li><li>运行时会根据对象(reciever) 的isa 指针找到该对象所对应的类，然后会依次在对应的类，父类，爷爷类，根类中找对应的方法</li></ul><p>下面只讲述对象方法的解析过程：</p><ul><li>第一步：+ (BOOL)resolveInstanceMethod:(SEL)sel实现方法，指定是否动态添加方法。若返回NO，则进入下一步，若返回YES，则通过class_addMethod函数动态地添加方法，消息得到处理，此流程完毕。</li><li>第二步：在第一步返回的是NO时，就会进入- (id)forwardingTargetForSelector:(SEL)aSelector方法，这是运行时给我们的第二次机会，用于指定哪个对象响应这个selector。不能指定为self。若返回nil，表示没有响应者，则会进入第三步。若返回某个对象，则会调用该对象的方法。</li><li>第三步：若第二步返回的是nil，则我们首先要通过- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector指定方法签名，若返回nil，则表示不处理。若返回方法签名，则会进入下一步。</li><li>第四步：当第三步返回方法方法签名后，就会调用- (void)forwardInvocation:(NSInvocation *)anInvocation方法，我们可以通过anInvocation对象做很多处理，比如修改实现方法，修改响应对象等</li><li>第五步：若没有实现- (void)forwardInvocation:(NSInvocation *)anInvocation方法，那么会进入- (void)doesNotRecognizeSelector:(SEL)aSelector方法。若我们没有实现这个方法，那么就会crash，然后提示打不到响应的方法。到此，动态解析的流程就结束了。</li></ul><h4 id="有哪些常见的-Crash-场景？"><a href="#有哪些常见的-Crash-场景？" class="headerlink" title="有哪些常见的 Crash 场景？"></a>有哪些常见的 Crash 场景？</h4><ul><li>访问了僵尸对象</li><li>访问了不存在的方法</li><li>数组越界</li><li>在定时器下一次回调前将定时器释放,会Crash</li></ul><h4 id="lldb（gdb）常用的调试命令？"><a href="#lldb（gdb）常用的调试命令？" class="headerlink" title="lldb（gdb）常用的调试命令？"></a>lldb（gdb）常用的调试命令？</h4><pre><code>•   p 输出基本类型//p (int)[[[self view] subviews] count]•   po 用于输出 Objective-C 对象//po [self view]•   expr 可以在调试时动态执行指定表达式，并将结果打印出来。常用于在调试过程中修改变量的值。//源代码中 a = 1 ；expr a=2 输出结果：(int) $0 = 2</code></pre><h4 id="如果一个函数10次中有7次正确，3次错误，问题可能出现在哪里？"><a href="#如果一个函数10次中有7次正确，3次错误，问题可能出现在哪里？" class="headerlink" title="如果一个函数10次中有7次正确，3次错误，问题可能出现在哪里？"></a>如果一个函数10次中有7次正确，3次错误，问题可能出现在哪里？</h4><pre><code>这样的问题通过应聘者的分析，可以知道应聘者的功底如何。很多人的回答会是很简单的，没有从多方面去分析。这样的问题也是很有意义的，在项目开发中所产生的bug，有的时候会出现这样的情况，而代码量比较大且业务比较复杂时，通过其他工具并不能分析出来是什么bug，但是我们却可以根据出现的频率推测。笔者把这个问题当作测试部反馈过来的bug描述问题来分析一下。参考答案：从问题描述可知，bug不会必现的，因此无法直接定位出错之处。从以下角度出现来分析可能出错之处：1.  因出错并不是崩溃，因此没有错误日志可看。第一步就是分析函数中的所有分支，是否在语法上存在可能缺少条件的问题。所以，检查所有的分支，确保每个分支执行的结果的正确的2.  检测函数的参数，保证必传参数不能为空，若为空应该抛出异常。因此，用断言检测参数的正确性是很重要的。3.  检测函数中每个分支所调用的函数返回结果是正确的，其实就是一个递归的过程（步骤1、2）</code></pre><h4 id="你一般是如何调试Bug的？"><a href="#你一般是如何调试Bug的？" class="headerlink" title="你一般是如何调试Bug的？"></a>你一般是如何调试Bug的？</h4><pre><code>这个问题看起来很笼统，但又一针见血。通过应聘者的回答，可很直观地看出这个应聘者的处理bug的能力，以及其解决问题的思维。参考答案：Bug分为测试中的Bug和线上的Bug：•   线上Bug：项目使用了友盟统计，因此会有崩溃日志，通过解析dYSM可以直接定位到大部分bug崩溃之处。解决线上bug需要从主干拉一个新的分支，解决bug并测试通过后，再合并到主干，然后上线。若是多团队开发，可以将fix bug分支与其他团队最近要上线的分支集成，然后集成测试再上线。•   测试Bug：根据测试所反馈的bug描述，若语义不清晰，则直接找到提bug人，操作给开发人员看，最好是可以bug复现。解决bug时，若能根据描述直接定位bug出错之处，则好处理；若无法直观定位，则根据bug类型分几种处理方式，比如崩溃的bug可以通过instruments来检测、数据显示错误的bug，则需要阅读代码一步步查看逻辑哪里写错。对于开发中出现的崩溃或者数据显示不正常，那就需要根据经验或者相关工具来检测可能出错之处。当然，团队内沟通解决是最好的。</code></pre><h4 id="获取一台设备唯一标识的方法有哪些？"><a href="#获取一台设备唯一标识的方法有哪些？" class="headerlink" title="获取一台设备唯一标识的方法有哪些？"></a>获取一台设备唯一标识的方法有哪些？</h4><ul><li>现在常用的是用UUID + keychain结合来实现这个需求。</li><li>UUID是Universally Unique Identifier的缩写，中文意思是通用唯一识别码。它是让分布式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。这样，每个人都可以建立不与其它人冲突的 UUID。在此情况下，就不需考虑数据库建立时的名称重复问题。苹果公司建议使用UUID为应用生成唯一标识字符串。</li></ul><pre><code>//获取一个UUID - (NSString*)uuid {    CFUUIDRef uuid = CFUUIDCreate( nil );    CFStringRef uuidString = CFUUIDCreateString( nil, uuid );    NSString * result = (NSString *)CFBridgingRelease(CFStringCreateCopy( NULL, uuidString));    CFRelease(uuid);    CFRelease(uuidString);    return result;}</code></pre><ul><li>现在我们获取到了一个UUID，虽然这个标识是唯一的，但是这样还是无法保证每一次的唯一性，因为当你每次调用这个方法或者把应用卸载了，UUID会重新生成一个不同的。这个时候keychain就起到了作用。</li><li>所以整个逻辑是这样的：先从keychain取UUID，如果能取到，就用这个比对，如果取不到就重新生成一个保存起来。keychain独立在App之外，是和系统统一等级的，所以你不用担心它挂掉。</li><li>keychain是苹果公司Mac OS中的密码管理系统。它在Mac OS 8.6中被导入，并且包括在了所有后续的Mac OS版本中，包括Mac OS X。一个钥匙串可以包含多种类型的数据：密码（包括网站，FTP服务器，SSH帐户，网络共享，无线网络，群组软件，加密磁盘镜像等），私钥，电子证书和加密笔记等。iOS端同样有个keychain帮助我们管理这些敏感信息。</li><li>使用过keychain保存过账号密码的童鞋应该对这个工具非常了解，在这里不做过多解释。使用keychain需要导入Security.framework和KeychainItemWrapper.h/.m，KeychainItemWrapper.h/.m搜一下可以下载下来，拖入工程中。保存UUID代码如下：</li></ul><pre class=" language-objc"><code class="language-objc">- (void)saveUuidWithKeyChain {    KeychainItemWrapper *keychainItem = [[KeychainItemWrapper alloc]                                         initWithIdentifier:@"UUID" accessGroup:@"com.xxx.www"];    NSString *strUUID = [keychainItem objectForKey:(id)kSecValueData];    if (strUUID == nil || [strUUID isEqualToString:@""])    {        [keychainItem setObject:[self uuid] forKey:(id)kSecValueData];    }}注：这个方法中accessGroup:这个参数如果一些App设置相同的话，是可以共享的。</code></pre><ul><li>从keychain获取UUID的方法如下：</li></ul><pre class=" language-objc"><code class="language-objc">- (NSString *)getKeychain {    KeychainItemWrapper *keychainItem = [[KeychainItemWrapper alloc]                                         initWithIdentifier:@"UUID" accessGroup:@"com.xxx.www"];    NSString *strUUID = [keychainItem objectForKey:(id)kSecValueData];    return strUUID;}</code></pre><ul><li>至此，基本上唯一标识的几个方法算是写完了，大家可以测试一下，卸载应用再重新装，从keychain读取的UUID还是和之前一样。</li><li>但这里有个不确定因素，就是手机系统恢复出厂设置或者抹掉所有数据的话，这个方法也可能不起作用了，因为它是依靠钥匙串在生存，钥匙串挂掉的话它也就失效了。</li></ul><h4 id="你一般是怎么用-Instruments-的？"><a href="#你一般是怎么用-Instruments-的？" class="headerlink" title="你一般是怎么用 Instruments 的？"></a>你一般是怎么用 Instruments 的？</h4><ul><li>这个问题也就是考察下你经验如何了, Instruments里面工具很多,也没必要逐一说明,挑几个常用的说下就好</li><li>参考答案:</li><li>Time Profiler:性能分析</li><li>Zombies:检查是否访问了僵尸对象,但是这个工具只能从上往下检查,不智能</li><li>Allocations:用来检查内存,写算法的那批人也用这个来检查</li><li>Leaks:检查内存,看是否有内存泄露</li></ul><h4 id="你一般是如何调试-Bug-的？"><a href="#你一般是如何调试-Bug-的？" class="headerlink" title="你一般是如何调试 Bug 的？"></a>你一般是如何调试 Bug 的？</h4><ul><li>查看异常报告</li><li>配置相关环境，重现bug</li><li>代码检查</li><li>用测试案例来捕获bug</li><li>可以请同事一同来审查问题，有些时候当局者迷，旁观者清。</li></ul><h4 id="如何对iOS设备进行性能测试"><a href="#如何对iOS设备进行性能测试" class="headerlink" title="如何对iOS设备进行性能测试?"></a>如何对iOS设备进行性能测试?</h4><p>Profile-&gt; Instruments -&gt;Time Profiler 进行性能测试！</p><p>测试iOS版的 App 注意事项分享以下几点：</p><p>1.app使用过程中，接听电话。可以测试不同的通话时间的长短，对于通话结束后，原先打开的app的响应，比如是否停留在原先界面，继续操作时的相应速度等。</p><p>2.app使用过程中，有推送消息时，对app的使用影响</p><p>3.设备在充电时，app的响应以及操作流畅度</p><p>4.设备在不同电量时(低于10%，50%，95%)，app的响应以及操作流畅度</p><p>5.意外断电时，app数据丢失情况</p><p>6.网络环境变化时，app的应对情况如何：是否有适当提示?从有网络环境到无网络环境时，app的反馈如何?从无网络环境回到有网络环境时，是否能自动加载数据，多久才能开始加载数据</p><p>7.多点触摸的情况</p><p>8.跟其他app之间互相切换时的响应</p><p>9.进程关闭再重新打开的反馈</p><p>10.IOS系统语言环境变化时</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题9--UI</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%989-UI/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%989-UI/</url>
      <content type="html"><![CDATA[<h4 id="viewcontroller的一些方法的说明viewDidLoad-viewWillDisappear-viewWillAppear方法的-顺序和作用？"><a href="#viewcontroller的一些方法的说明viewDidLoad-viewWillDisappear-viewWillAppear方法的-顺序和作用？" class="headerlink" title="viewcontroller的一些方法的说明viewDidLoad,viewWillDisappear, viewWillAppear方法的 顺序和作用？"></a>viewcontroller的一些方法的说明viewDidLoad,viewWillDisappear, viewWillAppear方法的 顺序和作用？</h4><p>viewWillAppear:视图即将可见时调用。默认情况下不执行任何操作</p><p>viewDidAppear:视图已完全过渡到屏幕上时调用</p><p>viewWillDisappear:视图被驳回时调用，覆盖或以其他方式隐藏。默认情况下不执行任何操作</p><p>viewDidDisappear:视图被驳回后调用，覆盖或以其他方式隐藏。默认情况下不执行任何操作loadView; .这是当他们没有正在使用nib视图页面，子类将会创建自己的自定义视图层。绝不能直接调用。</p><p>viewDidLoad:在视图加载后被调用，如果是在代码中创建的视图加载器，他将会在loadView方法后被调用，如果是从nib视图页面输出，他将会在视图设置好后后被调用。</p><p>「initWithNibName: bundle:」载入nib档案来初始化「loadView」载入视图「viewDidLoad」在载入视图至内存后会呼叫的方法「viewDidUnload」在视图从内存中释放后会呼叫的方法 (当内存过低，释放一些不需要的视图时调用)</p><p>「viewWillAppear」当收到视图在视窗将可见时的通知会呼叫的方法</p><p>「viewDidAppear」当收到视图在视窗已可见时的通知会呼叫的方法</p><p>「viewWillDisappear」当收到视图将去除、被覆盖或隐藏于视窗时的通知会呼叫的方法</p><p>「viewDidDisappear」当收到视图已去除、被覆盖或隐藏于视窗时的通知会呼叫的方法</p><p>「didReceiveMemoryWarning」收到系统传来的内存警告通知后会执行的方法</p><p>「shouldAutorotateToInterfaceOrientation」是否支持不同方向的旋转视图</p><p>「willAnimateRotationToInterfaceOrientation」在进行旋转视图前的会执行的方法（用于调整旋转视图之用）</p><ul><li>代码的执行顺序</li></ul><p>1、 alloc                                   创建对象，分配空间</p><p>2、init (initWithNibName) 初始化对象，初始化数据</p><p>3、loadView                          从nib载入视图 ，通常这一步不需要去干涉。除非你没有使用xib文件创建视图</p><p>4、viewDidLoad                   载入完成，可以进行自定义数据以及动态创建其他控件</p><p>5、viewWillAppear              视图将出现在屏幕之前，马上这个视图就会被展现在屏幕上了</p><p>6、viewDidAppear               视图已在屏幕上渲染完成当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反</p><p>1、viewWillDisappear            视图将被从屏幕上移除之前执行</p><p>2、viewDidDisappear             视图已经被从屏幕上移除，用户看不到这个视图了</p><p>3、dealloc                                 视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放</p><h4 id="什么是key-window？"><a href="#什么是key-window？" class="headerlink" title="什么是key window？"></a>什么是key window？</h4><ul><li>一个窗口当前能接受键盘和非触摸事件时，便被认为是主窗口。而触摸事件则被投递到触摸发生的窗口，没有相应坐标值的事件被投递到主窗口。同一时刻只有一个窗口是主窗口。</li></ul><h4 id="谈一谈你是怎么封装view的"><a href="#谈一谈你是怎么封装view的" class="headerlink" title="谈一谈你是怎么封装view的"></a>谈一谈你是怎么封装view的</h4><pre><code>- 先添加所需子控件- 再接收模型数据根据模型数据设置子控件数据和位置- 简而言之, 自己的事情自己做, 把不需要暴露出去的封装起来</code></pre><h4 id="简单说一下APP的启动过程-从main文件开始说起"><a href="#简单说一下APP的启动过程-从main文件开始说起" class="headerlink" title="简单说一下APP的启动过程,从main文件开始说起"></a>简单说一下APP的启动过程,从main文件开始说起</h4><pre class=" language-objc"><code class="language-objc">程序启动分为两类:1.有storyboard 2.没有storyboard有storyboard情况下:1.main函数2.UIApplicationMain* 创建UIApplication对象* 创建UIApplication的delegate对象3.根据Info.plist获得Main.storyboard的文件名,加载Main.storyboard(有storyboard)* 创建UIWindow* 创建和设置UIWindow的rootViewController* 显示窗口没有storyboard情况下:1.main函数2.UIApplicationMain* 创建UIApplication对象* 创建UIApplication的delegate对象3.delegate对象开始处理(监听)系统事件(没有storyboard)* 程序启动完毕的时候, 就会调用代理的application:didFinishLaunchingWithOptions:方法* 在application:didFinishLaunchingWithOptions:中创建UIWindow* 创建和设置UIWindow的rootViewController* 显示窗口</code></pre><h4 id="怎么解决缓存池满的问题-cell"><a href="#怎么解决缓存池满的问题-cell" class="headerlink" title="怎么解决缓存池满的问题(cell)"></a>怎么解决缓存池满的问题(cell)</h4><p>iOS中不存在缓存池满的情况，因为通常我们ios中开发，对象都是在需要的时候才会创建，有种常用的说话叫做懒加载，还有在UITableView中一般只会创建刚开始出现在屏幕中的cell，之后都是从缓存池里取，不会在创建新对象。缓存池里最多也就一两个对象，缓存池满的这种情况一般在开发java中比较常见，java中一般把最近最少使用的对象先释放。</p><h4 id="UIButton与UITableView的层级结构"><a href="#UIButton与UITableView的层级结构" class="headerlink" title="UIButton与UITableView的层级结构"></a>UIButton与UITableView的层级结构</h4><ul><li>继承结构，属于内部的子控件结构</li><li>UIButton为：UIButton &gt; UIControl &gt; UIView &gt; UIResponder &gt; NSObject</li><li>UITableView为：UITableView &gt; UIScrollView &gt; UIView &gt; UIResponder &gt; NSObject</li></ul><h4 id="设置scroll-view的contensize能在Viewdidload里设置么-为什么"><a href="#设置scroll-view的contensize能在Viewdidload里设置么-为什么" class="headerlink" title="设置scroll view的contensize能在Viewdidload里设置么,为什么"></a>设置scroll view的contensize能在Viewdidload里设置么,为什么</h4><ul><li>一般情况下可以设置在viewDidLoad中，但在autolayout下，系统会在viewDidAppear之前根据subview的constraint重新计算scrollview的contentsize。 这就是为什么，在viewdidload里面手动设置了contentsize没用。因为在后面，会再重新计算一次，前面手动设置的值会被覆盖掉。</li><li>解决办法就是：<ul><li>去除autolayout选项，自己手动设置contentsize</li><li>如果要使用autolayout，要么自己设置完subview的constraint，然后让系统自动根据constraint计算出contentsize。要么就在viewDidAppear里面自己手动设置contentsize。</li></ul></li></ul><h4 id="简述你对UIView、UIWindow和CALayer的理解"><a href="#简述你对UIView、UIWindow和CALayer的理解" class="headerlink" title="简述你对UIView、UIWindow和CALayer的理解"></a>简述你对UIView、UIWindow和CALayer的理解</h4><ul><li>UIView: 属于UIkit.framework框架,负责渲染矩形区域的内容,为矩形区域添加动画,响应区域的触摸事件,布局和管理一个或多个子视图</li><li><p>UIWindow:属于UIKit.framework框架,是一种特殊的UIView,通常在一个程序中只会有一个UIWindow,但可以手动创建多个UIWindow,同时加到程序里面。UIWindow在程序中主要起到三个作用:</p><ul><li>作为容器,包含app所要显示的所有视图</li><li>传递触摸消息到程序中view和其他对象</li><li>与UIViewController协同工作,方便完成设备方向旋转的支持</li></ul></li><li><p>CAlayer:属于QuartzCore.framework,是用来绘制内容的,对内容进行动画处理依赖与UIView来进行显示,不能处理用户事件。</p></li><li>UIView和CALayer是相互依赖的,UIView依赖CALayer提供内容,CALayer依赖UIView的容器显示绘制内容。</li><li>(补充)UIViewController:每个视图控制器都有一个自带的视图,并且负责这个视图相关的一切事务。方便管理视图中的子视图,负责model与view的通信;检测设备旋转以及内存警告;是所有视图控制类的积累,定义了控制器的基本功能。</li></ul><h4 id="frame和bounds有什么不同？-Difference-between-frame-and-bounds"><a href="#frame和bounds有什么不同？-Difference-between-frame-and-bounds" class="headerlink" title="frame和bounds有什么不同？(Difference between frame and bounds?)"></a>frame和bounds有什么不同？(Difference between frame and bounds?)</h4><ul><li>frame指的是：该view在父view坐标系统中的位置和大小（参照点是父亲的坐标系统）</li><li>bounds指的是：该view在本身坐标系统中的位置和大小（参照点是本身坐标系统）</li></ul><h4 id="关于页面间传值的问题"><a href="#关于页面间传值的问题" class="headerlink" title="关于页面间传值的问题?"></a>关于页面间传值的问题?</h4><pre class=" language-objc"><code class="language-objc">属性传值：A页面设置属性 NSString *paramString，在跳转B页面的时候初始化paramString。//A页面.h文件@property (nonatomic, copy)NSString *paramString;//A页面.m文件 NextViewController *nextVC = [[NextViewController alloc] init]; nextVC.paramString = @"参数传质"; [self presentViewController:nextVC animated:YES completion:nil];委托delegate传值：在B页面定义delegate，并且设置delegate属性，在A页面实现delegate协议通知notification传值：在B页面中发送通知，在A页面注册观察者并且在不用的时候移除观察者。//B页面发送通知 [[NSNotificationCenter defaultCenter] postNotificationName:@"ChangeNameNotification" object:self userInfo:@{@"name":self.nameTextField.text}]; [self dismissViewControllerAnimated:YES completion:nil]; //A页面注册观察者 [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(ChangeNameNotification:) name:@"ChangeNameNotification" object:nil];}//观察到通知时候的处理方法-(void)ChangeNameNotification:(NSNotification*)notification{    NSDictionary *nameDictionary = [notification userInfo];    self.nameLabel.text = [nameDictionary objectForKey:@"name"];}//通知不使用的时候移除观察者 [[NSNotificationCenter defaultCenter] removeObserver:self];block传值：在B页面定义一个block类型的变量，在B页面跳转A的时候调用这个block。在A页面跳转到B页面的时候对B页面的block赋值。//B页面定义block，并设置block类型的变量 typedef void (^ablock)(NSString *str); @property (nonatomic, copy) ablock block; //B页面跳转到A页面调用这个block self.block(self.nameTextField.text); [self dismissViewControllerAnimated:YES completion:nil];//A页面跳转到B页面的时候对B页面的block赋值，这样在B页面跳转的时候就会回调这个block函数 [self presentViewController:second animated:YES completion:nil]; second.block = ^(NSString *str){        self.nameLabel.text = str;    };  kvo传值：在A页面设置B页面的变量second，并且对这个变量进行观察- (void)addObserver:(NSObject * _Nonnull)anObserver forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context并在A页面实现- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSString *,id> *)change context:(void *)context方法。在B页面对变量keyPath进行设置，在A页面都会观察的到。@property (nonatomic, strong) SecondViewController *second; //在A视图跳转到B视图的地方添加如下代码 self.second = [[SecondViewController alloc] initWithNibName:@"SecondViewController" bundle:nil];[self.second addObserver:self forKeyPath:@"userName" options:NSKeyValueObservingOptionNew context:nil];[self presentViewController:self.second animated:YES completion:nil];//实现这个观察对象的方法 -(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context //在B页面对userName进行设置，在A页面都可以间听到 单例模式传值：通过全局的方式保存 对于通知代理面试常问, 代理和通知分别在什么情况下使用? 区别? 各自优点?</code></pre><h4 id="关于视图的生命周期的问题"><a href="#关于视图的生命周期的问题" class="headerlink" title="关于视图的生命周期的问题"></a>关于视图的生命周期的问题</h4><ul><li><p>首先判断控制器是否有视图，如果没有就调用loadView方法创建：通过storyboard或者代码；</p></li><li><p>随后调用viewDidLoad，可以进行下一步的初始化操作；只会被调用一次；</p></li><li><p>在视图显示之前调用viewWillAppear；该函数可以多次调用；</p></li><li><p>视图viewDidAppear</p></li><li><p>在视图显示之前调用viewWillDisappear；该函数可以多次调用；如需要）；</p></li><li><p>在布局变化前后，调用viewWill/DidLayoutSubviews处理相关信息；</p></li><li><p>视图生命周期图</p></li></ul><img src="/2018/09/12/iOS面试题9-UI/viewload.png" title="view视图生命周期"><h4 id="响应者链条-What-is-responder-chain"><a href="#响应者链条-What-is-responder-chain" class="headerlink" title="响应者链条? (What is responder chain?)"></a>响应者链条? (What is responder chain?)</h4><ul><li>事件响应链。包括点击事件，画面刷新事件等。在视图栈内从上至下，或者从下之上传播. 可以说点事件的分发，传递以及处理。具体可以去看下touch事件这块。</li><li>首先解释响应者链的概念<ul><li>UIResponder类，是UIKIT中一个用于处理事件响应的基类。窗口上的所有事件触发，都由该类响应（即事件处理入口）。所以，窗口上的View及控制器都是派生于该类的，例如UIView、UIViewController等。</li><li>调用UIResponder类提供的方法或属性，我们就可以捕捉到窗口上的所有响应事件，并进行处理。</li><li>响应者链条是由多个响应者对象连接起来的链条，其中响应者对象是能处理事件的对象，所有的View和ViewController都是响应者对象，利用响应者链条能让多个控件处理同一个触摸事件.</li></ul></li><li>事件传递机制</li></ul><p>image</p><p> 如果当前view不能处理当前事件，那么事件将会沿着响应者链(Responder Chain)进行传递，知道遇到能处理该事件的响应者(Responsder Object)。</p><pre><code>- 接收事件的initial view如果不能处理该事件并且她不是顶层的View，则事件会往它的父View进行传递。- initial view的父View获取事件后如果仍不能处理，则继续往上传递，循环这个过程。如果顶层的View还是不能处理这个事件的话，则会将事件传递给它们的ViewController，- 如果ViewController也不能处理，则传递给Window(UIWindow)，此时Window不能处理的话就将事件传递UIApplication，最后如果连Application也不能处理，则废弃该事件</code></pre><h4 id="ViewController的loadView-viewDidLoad-viewDidUnload分别是在什么时候调用的？在自定义ViewController的时候这几个函数里面应该做什么工作？"><a href="#ViewController的loadView-viewDidLoad-viewDidUnload分别是在什么时候调用的？在自定义ViewController的时候这几个函数里面应该做什么工作？" class="headerlink" title="ViewController的loadView,viewDidLoad,viewDidUnload分别是在什么时候调用的？在自定义ViewController的时候这几个函数里面应该做什么工作？"></a>ViewController的loadView,viewDidLoad,viewDidUnload分别是在什么时候调用的？在自定义ViewController的时候这几个函数里面应该做什么工作？</h4><ul><li>viewDidLoad在view从nib文件初始化时调用，</li><li>loadView在controller的view为nil时调用。</li><li>此方法在编程实现view时调用, view控制器默认会注册memory warning notification,当viewcontroller的任何view没有用的时候，viewDidUnload会被调用，在这里实现将retain的view release,如果是retain的IBOutlet view属性则不要在这里release,IBOutlet会负责release。</li></ul><h4 id="UITableView的重用机制-或者如何在一个view上显示多个tableView-tableView要求不同的数据源以及不同的样式-要求自定义cell-如何组织各个tableView的delegate和dataSource-请说说实现思路"><a href="#UITableView的重用机制-或者如何在一个view上显示多个tableView-tableView要求不同的数据源以及不同的样式-要求自定义cell-如何组织各个tableView的delegate和dataSource-请说说实现思路" class="headerlink" title="UITableView的重用机制?(或者如何在一个view上显示多个tableView,tableView要求不同的数据源以及不同的样式 (要求自定义cell), 如何组织各个tableView的delegate和dataSource?请说说实现思路?)"></a>UITableView的重用机制?(或者如何在一个view上显示多个tableView,tableView要求不同的数据源以及不同的样式 (要求自定义cell), 如何组织各个tableView的delegate和dataSource?请说说实现思路?)</h4><ul><li>查看UITableView头文件,会找到NSMutableArray <em>visiableCells,和NSMutableArray </em> reusableTableCells两个结构。</li><li>visiableCells内保存当前显示的cells,reusableTableCells保存可重用的cells。</li><li>TableView显示之初,reusableTableCells为空,那么<br> [tableView dequeueReusableCellWithIdentifier:CellIdentifier]返回nil。</li><li>开始的cell都是通过 [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier] 来创建,而且cellForRowAtIndexPath只是调用最大显示cell数的次数。 比如:有100条数据,iPhone一屏最多显示10个cell。</li><li>程序最开始显示TableView的情况是:<ul><li>用[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier]创建10次cell,并给cell指定同样的重用标识(当然,可以为不同显示类型的cell指定不同的标识)。并且10个cell全部都加入到visiableCells数组,reusableTableCells为空。</li><li>向下拖动tableView,当cell1完全移出屏幕,并且cell11(它也是alloc出来的,原因同上)完全显示出来的时候。cell11加入到visiableCells,cell1移出visiableCells,cell1加入到reusableTableCells。</li><li>接着向下拖动tableView,因为reusableTableCells中已经有值,所以,当需要显示新的cell, cellForRowAtIndexPath再次被调用的时候,[tableView dequeueReusableCellWithIdentifier:CellIdentifier],返回cell1。 cell1加入到visiableCells,cell1 移出reusableTableCells;cell2移出 visiableCells,cell2加入到reusableTableCells。之后再需要显示的Cell就可 以正常重用了.</li><li>注意：配置Cell的时候一定要注意，对取出的重用的cell做重新赋值，不要遗留老数据。</li></ul></li></ul><h4 id="在一个tableView中需要自定义多种样式的cell-两种或三种-通常你如何实现-说说思路即可"><a href="#在一个tableView中需要自定义多种样式的cell-两种或三种-通常你如何实现-说说思路即可" class="headerlink" title="在一个tableView中需要自定义多种样式的cell(两种或三种),通常你如何实现,说说思路即可?"></a>在一个tableView中需要自定义多种样式的cell(两种或三种),通常你如何实现,说说思路即可?</h4><ul><li>同上！</li></ul><h4 id="UITableView的性能优化-滑动的时候有种卡的感觉是为什么？怎么解决？"><a href="#UITableView的性能优化-滑动的时候有种卡的感觉是为什么？怎么解决？" class="headerlink" title="UITableView的性能优化? 滑动的时候有种卡的感觉是为什么？怎么解决？"></a>UITableView的性能优化? 滑动的时候有种卡的感觉是为什么？怎么解决？</h4><ul><li><p>在使用第三方应用时，却经常遇到性能上的问题，普遍表现在滚动时比较卡，特别是cell中包含图片的情况时。</p></li><li><p>实际上针对性地优化一下就可以解决tableView滑动的时候卡顿的问题:</p><ul><li>使用不透明视图。不透明的视图可以提高渲染的速度。可以将cell及其子视图的opaque属性设为YES（默认值）。</li><li>不要重复创建不必要的cell。UITableView只需要一屏幕的UITableViewCell对象即可。因此在cell不可见时，可以将其缓存起来，而在需要时继续使用它即可。注意：cell被重用时，需要调用setNeedsDisplayInRect:或setNeedsDisplay方法重绘cell。</li><li>减少动画效果的使用，最好不要使用insertRowsAtIndexPaths:withRowAnimation:方法，而是直接调用reloadData方法。</li><li>减少视图的数目。Cell包含了textLabel、detailTextLabel和imageView等view，而你还可以自定义一些视图放在它的contentView里，创建它会消耗较多资源，并且也影响渲染的性能。</li><li>cell包含图片，且数目较多，使用自定义的cell速度会比使用默认的要快。继承UITableViewCell，重写drawRect方法：- (void)drawRect:(CGRect)rect { if (image) { [image drawAtPoint:imagePoint]; self.image = nil; } else { [placeHolder drawAtPoint:imagePoint]; } [text drawInRect:textRect withFont:font lineBreakMode:UILineBreakModeTailTruncation]; }<br> 不过这样一来，你会发现选中一行后，这个cell就变蓝了，其中的内容就被挡住了。最简单的方法就是将cell的selectionStyle属性设为UITableViewCellSelectionStyleNone，这样就不会被高亮了。</li></ul><p>-不需要与用户交互时，使用CALayer，将内容绘制到layer上，然后对cell的contentView.layer调用addSublayer:方法。这个例子中，layer并不会显著影响性能，但如果layer透明，或者有圆角、变形等效果，就会影响到绘制速度了。解决办法可参见后面的预渲染图像。</p><ul><li>不要做多余的绘制工作。在实现drawRect:的时候，它的rect参数就是需要绘制的区域，这个区域之外的不需要进行绘制。</li><li>预渲染图像。你会发现即使做到了上述几点，当新的图像出现时，仍然会有短暂的停顿现象。解决的办法就是在图形上下文中画，导出成UIImage对象，然后再绘制到屏幕。（头像圆角，或者其他变形的时候，用图形上下文能提高性能。）异步绘制</li><li>不要阻塞主线程。tableview在更新数据时，整个界面卡住不动，完全不响应用户请求。常见的是网络请求，等待时间长待数秒。</li><li>解决方案：使用多线程，让子线程去执行这些函数或方法。</li><li>注意：当下载线程数超过2时，会显著影响主线程的性能。所以在不需要响应用户请求时，下载线程数可以增加到5，不建议再加了，以加快下载速度。如果用户正在交互，应把线程数量控制在2个以内。</li><li>提前计算并缓存好高度，因为heightforrowatindexpath调用非常频繁</li><li>选择正确的数据结构：学会选择对业务场景最合适的数组结构是写出高效代码的基础。比如，数组: 有序的一组值。使用索引来查询很快，使用值查询很慢，插入/删除很慢。字典: 存储键值对，用键来查找比较快。集合: 无序的一组值，用值来查找很快，插入/删除很快。</li><li>gzip/zip压缩：当从服务端下载相关附件时，可以通过gzip/zip压缩后再下载，使得内存更小，下载速度也更快。</li></ul></li></ul><h4 id="tableview的cell里如何嵌套collection-view？"><a href="#tableview的cell里如何嵌套collection-view？" class="headerlink" title="tableview的cell里如何嵌套collection view？"></a>tableview的cell里如何嵌套collection view？</h4><p>思路同网易新闻类似,用自定义的继承自UITableViewCell的类,在initWithFrame的构造方法中, 初始化自定义的继承自UICollectionView的类</p><h4 id="下拉和上拉的原理"><a href="#下拉和上拉的原理" class="headerlink" title="下拉和上拉的原理?"></a>下拉和上拉的原理?</h4><ul><li>以tableView的上拉刷新为例:<ul><li>为了进行无缝阅读, 通过tableView的代理方法, willDisplayCell判断是否是最后一行,</li><li>如果是最后一行, 在显示最后一行的同时, 判断当前是否存在上拉刷新</li><li>如果当前没有上拉刷新, 就进行加载数据, 启动小菊花转啊转。</li></ul></li><li>以tableView的下拉刷新为例:<ul><li>判断当前的上拉刷新视图是否动画</li><li>如果没有动画, 就不是上拉刷新</li><li>然后下拉刷新加载数据</li><li>加载完毕数据关闭刷新</li></ul></li></ul><h4 id="如何实现cell的动态的行高？"><a href="#如何实现cell的动态的行高？" class="headerlink" title="如何实现cell的动态的行高？"></a>如何实现cell的动态的行高？</h4><ul><li>如果希望每条数据显示自身的行高, 必须设置两个属性, 1.预估行高, 2.自定义行高</li><li>设置预估行高 tableView.estimatedRowHeight = 200</li><li>设置定义行高 tableView.rowHeight = UITableViewAutomaticDimension</li><li>如果要让自定义行高有效, 必须让容器视图有一个自下而上的约束</li></ul><h4 id="谈谈webView"><a href="#谈谈webView" class="headerlink" title="谈谈webView"></a>谈谈webView</h4><ul><li>iOS开发中webview和native code的配合上的一些经验和技巧。</li><li>webview与运维成本低，更新几乎不依赖App的版本；但在交互和性能上与跟native code有很大差距。</li><li>native code与之对应。</li><li>HTML5确实给web带入了一个新时代。这个时代是什么，web app。也就是说，只有脱离native的这个前提，在浏览器的环境下，HTML5的意义才能显现，而我们讨论iOS App的时候，HTML5显然没什么意义。</li><li>不管是用webview还是native code，两个原则：<ul><li>用户体验不打折</li><li>运维成本低</li></ul></li><li>为什么不提开发成本。因为做web开发和iOS开发根本就是两回事。当然，web开发发展了这么多年，对于某些功能实现是要比native app快。但多数情况，同一个功能，对于iOS开发者和web开发者，用各自擅长的方式开发成本都最低，所以说某个功能开发成本低，往往是一个伪命题。</li><li>刚刚说了，webview的优势在于更新不依赖版本，那么在一款App中，只有会频繁更新的界面考虑webview才有意义。那么哪些界面会频繁更新，这就要因App而异了。</li><li>首页。首页资源可谓必争之地，内容一天一换是正常现象，一天几换也不稀奇。而如果仅仅是内容的更换，非要上个webview就显得有些激进了。而事实上首页的变化千奇百怪，逢年过节变个脸，特殊情况挂个公告，偶尔还要特批强推一把某个业务，等等。此前，我在设计App首页的时候，把首页配置设计的非常复杂。App端要处理n种情况，n各参数，server端要记住n种规则，直到一天，我崩溃了，把首页完全换成webview，才豁然开朗。</li><li>活动页。做互联网都知道，活动，是一个最常见的运营手段。特点是，周期短，功能少，但基本不能复用。这些特点都标识了活动不适合做native，要用webview实现。即使有人告诉你说，我的活动是一个长期活动而且形式不变，也不要相信他。因为在第二期，第三期，第四期他会分别加上一些非常诡异，却有很合理的小变更，而这些变更是你在那个版本根本无法实现的。</li><li>试水的新功能。这种界面，往往设计不成熟，需要在运行过程中不断收集用户反馈，更新升级，甚至决定去留。所以，只有webview才能hold住如此不稳定的功能。切记在一个功能还没有确定之前，不要大张旗鼓单位开发native code，要知道，你写的这些代码，三天后就要改一遍，而且要发布上线。</li><li>富文本内容。这个不用多说了吧，按照HTML的常用标签做一个webtext可不是小工程。而且富文本的变化太多了，一点无法匹配，都会导致整个界面巨丑。</li><li>OK，上边说了我认为最该使用webview的4个界面，分别带有不同的特点，但webview的交互是个短板，因此webview在一个App中，只能作为界面，不允许在界面中出现动作。而一个webview的界面如何跟native code结合起来呢，我的答案是，超链接。在webview上点击超链接，会调用webview delegate的shouldload方法，自这里拦截请求，进行处理。由于webview的链接都是URL，因此我建议，把整个App的界面都用URL管理起来。</li><li>长相问题，webview很难长成native的view。方案：长不成也要装成。在一些情况下，禁用webview滚动，使用滚动框架（iScroll不错）去实现。webview上下留出200pixel的空白背景，y从-200开始。否则大家知道，webview上下会有阴影的背景，不藏起来会很丑。等等，还有很多其他的方法去伪装webview，是要视情景而用。</li><li>cell中嵌套webview，在oc中调用js获取web的高度， CGFloat height = [[self.webView stringByEvaluatingJavaScriptFromString:@”document.body.offsetHeight”] floatValue];在通过webViewDidFinishLoad里面更新行高。</li></ul><h4 id="awakeFromNib与viewdidload区别"><a href="#awakeFromNib与viewdidload区别" class="headerlink" title="awakeFromNib与viewdidload区别"></a>awakeFromNib与viewdidload区别</h4><ul><li>awakefromnib：当.nib文件被加载的时候，会发送一个awakefromnib消息到.nib文件中的每个对象，每个对象都可以定义自己的awakefromnib函数来响应这个消息，执行必要操作。也就是说 通过.nib文件创建view对象执行awakefromnib</li><li>viewdidload：当view对象被加载到内存就会执行viewdidload，不管是通过nib还是代码形式，创建对象就会执行viewdidload</li></ul><h4 id="layoutSubview何时调用"><a href="#layoutSubview何时调用" class="headerlink" title="layoutSubview何时调用?"></a>layoutSubview何时调用?</h4><ul><li>初始化init方法时不会触发</li><li>滚动uiscrollview触发</li><li>旋转屏幕触发</li><li>改变view的值触发，前提是frame改变了</li><li>改变uiview的大小触发</li></ul><h4 id="viewcontroller的didreceivememorywaring在什么时候调用-默认操作是什么"><a href="#viewcontroller的didreceivememorywaring在什么时候调用-默认操作是什么" class="headerlink" title="viewcontroller的didreceivememorywaring在什么时候调用 默认操作是什么"></a>viewcontroller的didreceivememorywaring在什么时候调用 默认操作是什么</h4><ul><li>应用程序收到来自系统的内存警告时，调用didreceivememorywaring方法</li><li>默认做法：控制器上的view不再窗口上显示时，调用viewWillUnload，直接销毁view，并调用viewdidunload</li></ul><h4 id="UIWindow和UIView和-CALayer-的联系和区别"><a href="#UIWindow和UIView和-CALayer-的联系和区别" class="headerlink" title="UIWindow和UIView和 CALayer 的联系和区别?"></a>UIWindow和UIView和 CALayer 的联系和区别?</h4><ul><li>UIView是视图的基类，UIViewController是视图控制器的基类，UIResponder是表示一个可以在屏幕上响应触摸事件的对象；</li><li>UIwindow是UIView的子类，UIWindow的主要作用：一是提供一个区域来显示UIView，二是将事件（event）的分发给UIView，一个应用基本上只有一个UIWindow.<br> 图层不会直接渲染到屏幕上，UIView是iOS系统中界面元素的基础，所有的界面元素都是继承自它。它本身完全是由CoreAnimation来实现的。它真正的绘图部分，是由一个CALayer类来管理。UIView本身更像是一个CALayer的管理器。一个UIView上可以有n个CALayer，每个layer显示一种东西，增强UIView的展现能力。</li><li>都可以显示屏幕效果</li><li>如果需要用户交互就要用UIVIew,其可接收触摸事件(继承UIResponder),而CALayer不能接收触摸事件</li><li>如果没有用户交互可选用CALayer,因为其所在库较小,占用的资源较少</li></ul><h4 id="UIScrollView"><a href="#UIScrollView" class="headerlink" title="UIScrollView"></a>UIScrollView</h4><ul><li>contentsize 内容视图的尺寸</li><li>contentoffset 内容视图当前位置相对滚动视图frame的偏移量</li><li>contentinset 内容视图相对滚动视图frame的展示原点</li></ul><h4 id="如何实现瀑布流-流水布局"><a href="#如何实现瀑布流-流水布局" class="headerlink" title="如何实现瀑布流,流水布局"></a>如何实现瀑布流,流水布局</h4><ul><li>使用UICollectionView</li><li>使用自定义的FlowLayout</li><li>需要在layoutAttributesForElementsInRect中设置自定义的布局(item的frame)</li><li>在 prepareLayout中计算布局</li><li>遍历数据内容,根据索引取出对应的attributes(使用layoutAttributesForCellWithIndexPath),根据九宫格算法设置布局</li><li>细节1: 实时布局,重写shouldInvalidateLayoutForBoundsChange(bounds改变重新布局,scrollview的contentoffset&gt;bounds)</li><li>细节2: 计算设置itemsize(保证内容显示完整,uicollectionview的content size是根据itemize计算的),根据列最大高度/对应列数量求出,最大高度累加得到</li><li>细节3: 追加item到最短列,避免底部参差不齐.</li></ul><h4 id="UIImage有哪几种加载方式"><a href="#UIImage有哪几种加载方式" class="headerlink" title="UIImage有哪几种加载方式"></a>UIImage有哪几种加载方式</h4><ul><li>二进制    imageWithData</li><li>Bundle    imageWithName</li><li>本地路径   imageWithContentOfFile</li></ul><h4 id="描述九宫格算法"><a href="#描述九宫格算法" class="headerlink" title="描述九宫格算法"></a>描述九宫格算法</h4><ul><li>NSInteger col = x;//定义列数</li><li>NSInteger index  = self.shopsView.subviews.count;//获取下标</li><li>CGFloat margin = (self.shopsView.frame.size.width - col*viewW) / (col - 1);//定义间隔</li><li>CGFloat viewX = (index % col ) * (viewW + margin);</li><li>CGFloat viewY = (index / col ) * (viewH + 10);</li></ul><h4 id="实现图片轮播图"><a href="#实现图片轮播图" class="headerlink" title="实现图片轮播图"></a>实现图片轮播图</h4><ul><li>ScrollView只需要设置三个ImageView即可，并且默认显示中间的ImageView</li><li>根据ScrollView的移动情况，迅速变化三个ImageView中图片数据</li><li>ImageView更新完毕后，偷偷把ScrollView拉回到中间的ImageView位置，这样视觉效果上就实现了无限循环的效果</li></ul><h4 id="应用的生命周期"><a href="#应用的生命周期" class="headerlink" title="应用的生命周期"></a>应用的生命周期</h4><ul><li>-(BOOL)application:(UIApplication <em>)application willFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions  告诉代理进程启动但还没进入状态保存</li><li>-(BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions   告诉代理启动基本完成程序准备开始运行</li><li>-(void)applicationWillResignActive:(UIApplication *)application   当应用程序将要入非活动状态执行，在此期间，应用程序不接收消息或事件，比如来电话了</li><li>-(void)applicationDidBecomeActive:(UIApplication *)application    当应用程序入活动状态执行，这个刚好跟上面那个方法相反</li><li>-(void)applicationDidEnterBackground:(UIApplication *)application   当程序被推送到后台的时候调用。所以要设置后台继续运行，则在这个函数里面设置即可</li><li>-(void)applicationWillEnterForeground:(UIApplication *)application   当程序从后台将要重新回到前台时候调用，这个刚好跟上面的那个方法相反。</li><li>-(void)applicationWillTerminate:(UIApplication *)application   当程序将要退出是被调用，通常是用来保存数据和一些退出前的清理工作。</li></ul><h4 id="load-initialize方法的区别"><a href="#load-initialize方法的区别" class="headerlink" title="load initialize方法的区别"></a>load initialize方法的区别</h4><ul><li>+(void)load; <ul><li>当类对象被引入项目时, runtime 会向每一个类对象发送 load 消息</li><li>load 方法会在每一个类甚至分类被引入时仅调用一次,调用的顺序：父类优先于子类, 子类优先于分类</li><li>load 方法不会被类自动继承</li></ul></li><li>+(void)initialize; <ul><li>也是在第一次使用这个类的时候会调用这个方法</li></ul></li></ul><h4 id="UIScrollView-大概是如何实现的，它是如何捕捉、响应手势的？"><a href="#UIScrollView-大概是如何实现的，它是如何捕捉、响应手势的？" class="headerlink" title="UIScrollView 大概是如何实现的，它是如何捕捉、响应手势的？"></a>UIScrollView 大概是如何实现的，它是如何捕捉、响应手势的？</h4><ul><li>我对UIScrollView的理解是frame就是他的contentSize,bounds就是他的可视范围,通过改变bounds从而达到让用户误以为在滚动,以下是一个简单的UIScrollView实现</li><li>第二个问题个人理解是解决手势冲突,对自己添加的手势进行捕获和响应</li></ul><p>// 让UIScrollView遵守UIGestureRecognizerDelegate协议,实现这个方法,在这里方法里对添加的手势进行处理就可以解决冲突</p><ul><li>(BOOL)gestureRecognizer:(UIGestureRecognizer <em>)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer </em>)otherGestureRecognizer</li></ul><h4 id="UIView-animateWithDuration-animations-completion-内部大概是如何实现的？"><a href="#UIView-animateWithDuration-animations-completion-内部大概是如何实现的？" class="headerlink" title="+[UIView animateWithDuration:animations:completion:] 内部大概是如何实现的？"></a>+[UIView animateWithDuration:animations:completion:] 内部大概是如何实现的？</h4><pre><code>animateWithDuration:这就等于创建一个定时器animations:这是创建定时器需要实现的SELcompletion:是定时器结束以后的一个回调block</code></pre><h4 id="什么时候会发生「隐式动画」？"><a href="#什么时候会发生「隐式动画」？" class="headerlink" title="什么时候会发生「隐式动画」？"></a>什么时候会发生「隐式动画」？</h4><ul><li>当改变CALayer的一个可做动画的属性，它并不能立刻在屏幕上体现出来.相反，它是从先前的值平滑过渡到新的值。这一切都是默认的行为，你不需要做额外的操作,这就是隐式动画</li></ul><h4 id="如何把一张大图缩小为1-4大小的缩略图？"><a href="#如何把一张大图缩小为1-4大小的缩略图？" class="headerlink" title="如何把一张大图缩小为1/4大小的缩略图？"></a>如何把一张大图缩小为1/4大小的缩略图？</h4><p>imgData = UIImageJPEGRepresentation(image, 0.6f)</p><h4 id="当TableView的Cell改变时，如何让这些改变以动画的形式呈现？"><a href="#当TableView的Cell改变时，如何让这些改变以动画的形式呈现？" class="headerlink" title="当TableView的Cell改变时，如何让这些改变以动画的形式呈现？"></a>当TableView的Cell改变时，如何让这些改变以动画的形式呈现？</h4><pre><code>[tableView deselectRowAtIndexPath:indexPath animated:TRUE];// 重点是这2句代码实现的功能[tableView beginUpdates];[tableView endUpdates];</code></pre><h4 id="为什么当-Core-Animation-完成时，layer-又会恢复到原先的状态？"><a href="#为什么当-Core-Animation-完成时，layer-又会恢复到原先的状态？" class="headerlink" title="为什么当 Core Animation 完成时，layer 又会恢复到原先的状态？"></a>为什么当 Core Animation 完成时，layer 又会恢复到原先的状态？</h4><ul><li>因为这些产生的动画只是假象,并没有对layer进行改变.那么为什么会这样呢,这里要讲一下图层树里的呈现树.呈现树实际上是模型图层的复制,但是它的属性值表示了当前外观效果,动画的过程实际上只是修改了呈现树,并没有对图层的属性进行改变,所以在动画结束以后图层会恢复到原先状态</li></ul><h4 id="设计一个进度条。"><a href="#设计一个进度条。" class="headerlink" title="设计一个进度条。"></a>设计一个进度条。</h4><ol><li><p>自定义一个UIView的子类</p><pre><code> //提供一个成员属性，接收下载进度值 @property (nonatomic, assign) CGFloat progress;</code></pre></li><li><p>重写成员属性progress的setter</p><pre><code> //每次改变成员属性progress的值，就会调用它的setter -(void)setProgress:(CGFloat)progress { _progress = progress; //当下载进度改变时，手动调用重绘方法 [self setNeedsDisplay]; }</code></pre></li><li><p>重写</p><pre><code> -(void)drawRect:(CGRect)rect（核心） -(void)drawRect:(CGRect)rect { //设置圆弧的半径 CGFloat radius = rect.size.width * 0.5; //设置圆弧的圆心 CGPoint center = CGPointMake(radius, radius); //设置圆弧的开始的角度（弧度制） CGFloat startAngle = - M_PI_2; //设置圆弧的终止角度 CGFloat endAngle = - M_PI_2 + 2 * M_PI * self.progress; //使用UIBezierPath类绘制圆弧 UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:center radius:radius - 5 startAngle:startAngle endAngle:endAngle clockwise:YES]; //将绘制的圆弧渲染到图层上（即显示出来） [path stroke]; }</code></pre></li></ol><h4 id="如何播放-GIF-图片，有什么优化方案么？"><a href="#如何播放-GIF-图片，有什么优化方案么？" class="headerlink" title="如何播放 GIF 图片，有什么优化方案么？"></a>如何播放 GIF 图片，有什么优化方案么？</h4><ul><li>UIImageView用来显示图片， 使用UIImageView中的动画数组来实现图片的动画效果</li><li>用UIWebView来显示动态图片</li><li>第三方显示框架</li><li>通过UIImageView显示动画效果，实际上是把动态的图拆成了一组静态的图，放到数组中，播放的时候依次从数组中取出。如果播放的图片比较少占得内存比较小或者比较常用（比如工具条上一直显示的动态小图标），可以选择用imageNamed：方式获取图片，但是通过这种方式加到内存中，使用结束，不会自己释放，多次播放动画会造成内存溢出问题。因此，对于大图或经常更换的图，在取图片的时候可以选择imageWithContentsOfFile:方式获取图片，优化内存。</li><li>使用UIWebView显示图片需要注意显示图片的尺寸与UIWebView尺寸的设置，如果只是为了显示动态图片，可以禁止UIWebView滚动。在显示动态图片的时候，即使是动图的背景处为透明，默认显示出来是白色背景，这个时候需要手动设置UIWebView的透明才能达到显示动图背景透明的效果。</li></ul><h4 id="有哪几种方式可以对图片进行缩放，使用-CoreGraphics-缩放时有什么注意事项？"><a href="#有哪几种方式可以对图片进行缩放，使用-CoreGraphics-缩放时有什么注意事项？" class="headerlink" title="有哪几种方式可以对图片进行缩放，使用 CoreGraphics 缩放时有什么注意事项？"></a>有哪几种方式可以对图片进行缩放，使用 CoreGraphics 缩放时有什么注意事项？</h4><ul><li>UIImageView整体拉伸</li><li>UIImage局部拉伸</li><li>UIImage修改大小</li><li>images.xcassets：多亏了Xcode中Asset Catalog的slice和dice，我们不需要代码也能拉伸图片。首先在Xcode中选中图片，然后点击右下角的Show Slicing：</li><li>图形上下文等比例缩放</li></ul><h4 id="XIB与Storyboards的优缺点"><a href="#XIB与Storyboards的优缺点" class="headerlink" title="XIB与Storyboards的优缺点?"></a>XIB与Storyboards的优缺点?</h4><pre><code>- XIB：在编译前就提供了可视化界面，可以直接拖控件，也可以直接给控件添加约束，更直观一些，而且类文件中就少了创建控件的代码，确实简化不少，通常每个XIB对应一个类。- Storyboard：在编译前提供了可视化界面，可拖控件，可加约束，在开发时比较直观，而且一个storyboard可以有很多的界面，每个界面对应一个类文件，通过storybard，可以直观地看出整个App的结构。- XIB：需求变动时，需要修改XIB很大，有时候甚至需要重新添加约束，导致开发周期变长。XIB载入相比纯代码自然要慢一些。对于比较复杂逻辑控制不同状态下显示不同内容时，使用XIB是比较困难的。当多人团队或者多团队开发时，如果XIB文件被发动，极易导致冲突，而且解决冲突相对要困难很多。- Storyboard：需求变动时，需要修改storyboard上对应的界面的约束，与XIB一样可能要重新添加约束，或者添加约束会造成大量的冲突，尤其是多团队开发。对于复杂逻辑控制不同显示内容时，比较困难。当多人团队或者多团队开发时，大家会同时修改一个storyboard，导致大量冲突，解决起来相当困难。</code></pre><h4 id="控制器View的加载过程？"><a href="#控制器View的加载过程？" class="headerlink" title="控制器View的加载过程？"></a>控制器View的加载过程？</h4><pre><code>当程序访问了控制器的View属性时会先判断控制器的View是否存在，如果存在就直接返回已经存在的View；如果不存在，就会先调用loadView这个方法；如果控制器的loadView方法实现了，就会按照loadView方法加载自定义的View；如果控制器的loadView方法没有实现就会判断storyboard是否存在；如果storyboard存在就会按照storyboard加载控制器的View；如果storyboard不存在，就会创建一个空视图返回。</code></pre><h4 id="应用程序的启动流程？"><a href="#应用程序的启动流程？" class="headerlink" title="应用程序的启动流程？"></a>应用程序的启动流程？</h4><pre><code>1.执行Main2.执行UIApplicationMain函数.3.创建UIApplication对象,并设置UIApplicationMain对象的代理.  UIApplication的第三个参数就是UIApplication的名称,如果指定为nil,它会默认为UIApplication.  UIApplication的第四个参数为UIApplication的代理.4.开启一个主运行循环.保证应用程序不退出.5.加载info.plist.加载配置文件.判断一下info.plist文件当中有没有Main storyboard file base name里面有没有指定storyboard文件,如果有就去加载info.plist文件,如果没有,那么应用程序加载完毕.</code></pre><h4 id="事件传递与响应的完整过程"><a href="#事件传递与响应的完整过程" class="headerlink" title="事件传递与响应的完整过程?"></a>事件传递与响应的完整过程?</h4><pre><code>在产生一个事件时,系统会将该事件加入到一个由UIApplication管理的事件队列中,UIApplication会从事件队列中取出最前面的事件,将它传递给先发送事件给应用程序的主窗口.主窗口会调用hitTest方法寻找最适合的视图控件,找到后就会调用视图控件的touches方法来做具体的事情.当调用touches方法,它的默认做法, 就会将事件顺着响应者链条往上传递，传递给上一个响应者,接着就会调用上一个响应者的touches方法</code></pre><h4 id="下列回调机制的理解不正确的是"><a href="#下列回调机制的理解不正确的是" class="headerlink" title="下列回调机制的理解不正确的是"></a>下列回调机制的理解不正确的是</h4><pre><code>A target-action：当两个对象之间有⽐较紧密的关系时，如视图控制器与其下的某个视图。       B delegate：当某个对象收到多个事件，并要求同一个对象来处理所有事件时。委托机制必须依赖于某个协议定义的⽅法来发送消息。       C NSNotification：当需要多个对象或两个无关对象处理同一个事件时。       D Block：适⽤于回调只发⽣生一次的简单任务。参考答案：B</code></pre><h4 id="给UIImageView添加圆角"><a href="#给UIImageView添加圆角" class="headerlink" title="给UIImageView添加圆角"></a>给UIImageView添加圆角</h4><ul><li>最直接的方法就是使用如下属性设置：</li></ul><pre><code>imgView.layer.cornerRadius = 10;// 这一行代码是很消耗性能的imgView.clipsToBounds = YES;</code></pre><ul><li>好处是使用简单，操作方便。坏处是离屏渲染（off-screen-rendering）需要消耗性能。对于图片比较多的视图上，不建议使用这种方法来设置圆角。通常来说，计算机系统中CPU、GPU、显示器是协同工作的。CPU计算好显示内容提交到GPU，GPU渲染完成后将渲染结果放入帧缓冲区。</li><li>简单来说，离屏渲染，导致本该GPU干的活，结果交给了CPU来干，而CPU又不擅长GPU干的活，于是拖慢了UI层的FPS（数据帧率），并且离屏需要创建新的缓冲区和上下文切换，因此消耗较大的性能。</li><li>给UIImage添加生成圆角图片的扩展API：</li></ul><pre><code>- (UIImage *)hyb_imageWithCornerRadius:(CGFloat)radius {  CGRect rect = (CGRect){0.f, 0.f, self.size};  UIGraphicsBeginImageContextWithOptions(self.size, NO, UIScreen.mainScreen.scale);  CGContextAddPath(UIGraphicsGetCurrentContext(),                   [UIBezierPath bezierPathWithRoundedRect:rect cornerRadius:radius].CGPath);  CGContextClip(UIGraphicsGetCurrentContext());  [self drawInRect:rect];  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();  UIGraphicsEndImageContext();  return image;}</code></pre><p>然后调用时就直接传一个圆角来处理：</p><pre><code>imgView.image = [[UIImage imageNamed:@&quot;test&quot;] hyb_imageWithCornerRadius:4];</code></pre><p>这么做就是on-screen-rendering了，通过模拟器-&gt;debug-&gt;Color Off-screen-rendering看到没有离屏渲染了!（黄色的小圆角没有显示了，说明这个不是离屏渲染了）</p><ul><li>在画之前先通过UIBezierPath添加裁剪，但是这种不实用</li></ul><pre><code>- (void)drawRect:(CGRect)rect {  CGRect bounds = self.bounds;  [[UIBezierPath bezierPathWithRoundedRect:rect cornerRadius:8.0] addClip];  [self.image drawInRect:bounds];}</code></pre><ul><li>通过mask遮罩实现</li></ul><h4 id="一个view已经初始化完毕，view上面添加了n个button（可能使用循环创建），除用view的tag之外，还可以采用什么办法来找到自己想要的button来修改Button的值"><a href="#一个view已经初始化完毕，view上面添加了n个button（可能使用循环创建），除用view的tag之外，还可以采用什么办法来找到自己想要的button来修改Button的值" class="headerlink" title="一个view已经初始化完毕，view上面添加了n个button（可能使用循环创建），除用view的tag之外，还可以采用什么办法来找到自己想要的button来修改Button的值"></a>一个view已经初始化完毕，view上面添加了n个button（可能使用循环创建），除用view的tag之外，还可以采用什么办法来找到自己想要的button来修改Button的值</h4><pre><code>这个问题有很多种方式，而且不同的使用场景也不一样的。比如说：•   第一种：如果是点击某个按钮后，才会刷新它的值，其它不用修改，那么不用引用任何按钮，直接在回调时，就已经将接收响应的按钮给传过来了，直接通过它修改即可。•   第二种：点击某个按钮后，所有与之同类型的按钮都要修改值，那么可以通过在创建按钮时将按钮存入到数组中，在需要的时候遍历查找。</code></pre><h4 id="使用drawRect有什么影响？"><a href="#使用drawRect有什么影响？" class="headerlink" title="使用drawRect有什么影响？"></a>使用drawRect有什么影响？</h4><ul><li>drawRect方法依赖Core Graphics框架来进行自定义的绘制，但这种方法主要的缺点就是它处理touch事件的方式：每次按钮被点击后，都会用setNeddsDisplay进行强制重绘；而且不止一次，每次单点事件触发两次执行。这样的话从性能的角度来说，对CPU和内存来说都是欠佳的。特别是如果在我们的界面上有多个这样的UIButton实例。</li></ul><h4 id="viewWillLayoutSubView你总是知道的。"><a href="#viewWillLayoutSubView你总是知道的。" class="headerlink" title="viewWillLayoutSubView你总是知道的。"></a>viewWillLayoutSubView你总是知道的。</h4><pre><code>controller layout触发的时候，开发者有机会去重新layout自己的各个subview。横竖屏切换的时候，系统会响应一些函数，其中 viewWillLayoutSubviews 和 viewDidLayoutSubviews。- (void)viewWillLayoutSubviews  {       [self _shouldRotateToOrientation:(UIDeviceOrientation)[UIApplication sharedApplication].statusBarOrientation];  }  -(void)_shouldRotateToOrientation:(UIDeviceOrientation)orientation {          if (orientation == UIDeviceOrientationPortrait ||orientation ==                 UIDeviceOrientationPortraitUpsideDown)  {           // 竖屏 }  else {          // 横屏     } }通过上述一个函数就知道横竖屏切换的接口了。 注意：viewWillLayoutSubviews只能用在ViewController里面，在view里面没有响应。</code></pre><h4 id="一个tableView是否可以关联两个不同的数据源？"><a href="#一个tableView是否可以关联两个不同的数据源？" class="headerlink" title="一个tableView是否可以关联两个不同的数据源？"></a>一个tableView是否可以关联两个不同的数据源？</h4><ul><li>当然是可以关联多个不同的数据源，但是不能同时使用多个数据源而已。比如，一个列表有两个筛选功能，一个是筛选城市，一个是筛选时间，那么这两个就是两个数据源了。当筛选城市时，就会使用城市数据源；当筛选时间时，就会使用时间数据源。</li></ul><h4 id="如何自动计算cell的高度？"><a href="#如何自动计算cell的高度？" class="headerlink" title="如何自动计算cell的高度？"></a>如何自动计算cell的高度？</h4><ul><li>实现原理：通过数据模型的id作为key，以确保唯一，如何才能保证复用cell时不会出现混乱。在配置完数据后，通过更新约束，得到最后一个控件的frame，就只可以判断cell实际需要的高度，并且缓存下来，下次再获取时，判断是否存在，若存在则直接返回。因此，只会计算一遍</li></ul><h4 id="UITableView是如何计算内容高度的？为什么初始化时配置数据时，获取行高的代理方法会调用数据条数次？"><a href="#UITableView是如何计算内容高度的？为什么初始化时配置数据时，获取行高的代理方法会调用数据条数次？" class="headerlink" title="UITableView是如何计算内容高度的？为什么初始化时配置数据时，获取行高的代理方法会调用数据条数次？"></a>UITableView是如何计算内容高度的？为什么初始化时配置数据时，获取行高的代理方法会调用数据条数次？</h4><ul><li>UITableView是继承于UIScrollView的，因此也有contentSize。要得到tableview的contentsize，就需要得到所有cell的高度，从而计算出总高度，才能得到contentsize。因此，在reloadData时，就会调用该代理方法数据条数次。</li></ul><h4 id="一个tableView是否可以关联两个不同的数据源-你会怎么处理"><a href="#一个tableView是否可以关联两个不同的数据源-你会怎么处理" class="headerlink" title="一个tableView是否可以关联两个不同的数据源?你会怎么处理?"></a>一个tableView是否可以关联两个不同的数据源?你会怎么处理?</h4><pre><code>答：首先我们从代码来看，数据源如何关联上的，其实是在数据源关联的代理方法里实现的。因此我们并不关心如何去关联他，他怎么关联上，方法只是让我返回根据自己的需要去设置如相关的数据源。因此，我觉得可以设置多个数据源啊，但是有个问题是，你这是想干嘛呢?想让列表如何显示，不同的数据源分区块显示?</code></pre><h4 id="给出委托方法的实例，并且说出UITableVIew的Data-Source方法"><a href="#给出委托方法的实例，并且说出UITableVIew的Data-Source方法" class="headerlink" title="给出委托方法的实例，并且说出UITableVIew的Data Source方法"></a>给出委托方法的实例，并且说出UITableVIew的Data Source方法</h4><pre><code>CocoaTouch框架中用到了大量委托，其中UITableViewDelegate就是委托机制的典型应用，是一个典型的使用委托来实现适配器模式，其中UITableViewDelegate协议是目标，tableview是适配器，实现UITableViewDelegate协议，并将自身设置为talbeview的delegate的对象，是被适配器，一般情况下该对象是UITableViewController。UITableVIew的Data Source方法有- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section;- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath;</code></pre><h4 id="cocoa-touch框架"><a href="#cocoa-touch框架" class="headerlink" title="cocoa touch框架"></a>cocoa touch框架</h4><p>答：iPhone OS 应用程序的基础 Cocoa Touch 框架重用了许多 Mac 系统的成熟模式，但是它更多地专注于触摸的接口和优化。</p><p>UIKit 为您提供了在 iPhone OS 上实现图形，事件驱动程序的基本工具，其建立在和 Mac OS X 中一样的 Foundation 框架上，包括文件处理，网络，字符串操作等。</p><p>Cocoa Touch 具有和 iPhone 用户接口一致的特殊设计。有了 UIKit，您可以使用 iPhone OS 上的独特的图形接口控件，按钮，以及全屏视图的功能，您还可以使用加速仪和多点触摸手势来控制您的应用。</p><p>各色俱全的框架 除了UIKit 外，Cocoa Touch 包含了创建世界一流 iPhone 应用程序需要的所有框架，从三维图形，到专业音效，甚至提供设备访问 API 以控制摄像头，或通过 GPS 获知当前位置。</p><p>Cocoa Touch 既包含只需要几行代码就可以完成全部任务的强大的 Objective-C 框架，也在需要时提供基础的 C 语言 API 来直接访问系统。这些框架包括：</p><p>Core Animation：通过 Core Animation，您就可以通过一个基于组合独立图层的简单的编程模型来创建丰富的用户体验。</p><p>Core Audio：Core Audio 是播放，处理和录制音频的专业技术，能够轻松为您的应用程序添加强大的音频功能。</p><p>Core Data：提供了一个面向对象的数据管理解决方案，它易于使用和理解，甚至可处理任何应用或大或小的数据模型。</p><p>功能列表：框架分类</p><p>下面是 Cocoa Touch 中一小部分可用的框架：</p><p>音频和视频：Core Audio ，OpenAL ，Media Library ，AV Foundation</p><p>数据管理 ：Core Data ，SQLite</p><p>图形和动画 ：Core Animation ，OpenGL ES ，Quartz 2D</p><p>网络：Bonjour ，WebKit ，BSD Sockets</p><p>用户应用：Address Book ，Core Location ，Map Kit ，Store Kit</p><h4 id="xib文件的构成分为哪3个图标？都具有什么功能。"><a href="#xib文件的构成分为哪3个图标？都具有什么功能。" class="headerlink" title="xib文件的构成分为哪3个图标？都具有什么功能。"></a>xib文件的构成分为哪3个图标？都具有什么功能。</h4><p>File’s Owner 是所有 nib 文件中的每个图标，它表示从磁盘加载 nib 文件的对象；</p><p>First Responder 就是用户当前正在与之交互的对象；</p><p>View 显示用户界面；完成用户交互；是 UIView 类或其子类。</p><h4 id="简述应用程序按Home键进入后台时的生命周期-和从后台回到前台时的生命周期-应用程序"><a href="#简述应用程序按Home键进入后台时的生命周期-和从后台回到前台时的生命周期-应用程序" class="headerlink" title="简述应用程序按Home键进入后台时的生命周期,和从后台回到前台时的生命周期? 应用程序:"></a>简述应用程序按Home键进入后台时的生命周期,和从后台回到前台时的生命周期? 应用程序:</h4><pre><code>-[AppDelegate application:willFinishLaunchingWithOptions:]-[AppDelegate application:didFinishLaunchingWithOptions:]-[AppDelegate applicationDidBecomeActive:] </code></pre><p>退到后台:</p><pre><code>-[AppDelegate applicationWillResignActive:] -[AppDelegate applicationDidEnterBackground:] </code></pre><p>回到前台:</p><pre><code>-[AppDelegate applicationWillEnterForeground:] -[AppDelegate applicationDidBecomeActive:] </code></pre><p>ViewController之间，<br> 加载页面:</p><pre><code>-[mainViewController viewDidLoad] -[mainViewController viewWillAppear:] -[mainViewController viewWillLayoutSubviews] -[mainViewController viewDidLayoutSubviews] -[mainViewController viewDidAppear:] </code></pre><p>退出当前页面:</p><pre><code>-[mainViewController viewWillDisappear:]-[mainViewController viewDidDisappear:]</code></pre><p>返回之前页面:</p><pre><code>-[mainViewController viewWillAppear:]-[mainViewController viewWillLayoutSubviews]-[mainViewController viewDidLayoutSubviews]-[mainViewController viewDidAppear:]</code></pre><h4 id="是否使用Core-Text或者Core-Image等？如果使用过，请谈谈你使用Core-Text或者Core-Image的体验。"><a href="#是否使用Core-Text或者Core-Image等？如果使用过，请谈谈你使用Core-Text或者Core-Image的体验。" class="headerlink" title="是否使用Core Text或者Core Image等？如果使用过，请谈谈你使用Core Text或者Core Image的体验。"></a>是否使用Core Text或者Core Image等？如果使用过，请谈谈你使用Core Text或者Core Image的体验。</h4><pre><code>CoreText•   随意修改文本的样式•   图文混排(纯C语言)•   国外:NiumbCore Image(滤镜处理)* 能调节图片的各种属性(对比度, 色温, 色差等)</code></pre><h4 id="分析一下使用手机获取验证码注册账号的实现逻辑-给了一个示例图-，发送到手机的验证码超过60秒钟后重新发送"><a href="#分析一下使用手机获取验证码注册账号的实现逻辑-给了一个示例图-，发送到手机的验证码超过60秒钟后重新发送" class="headerlink" title="分析一下使用手机获取验证码注册账号的实现逻辑(给了一个示例图)，发送到手机的验证码超过60秒钟后重新发送"></a>分析一下使用手机获取验证码注册账号的实现逻辑(给了一个示例图)，发送到手机的验证码超过60秒钟后重新发送</h4><ul><li>定义一个label属性，赋值为60秒，再定义一个count 设置一个timer 每次减少一秒 把count– 再把count的值拼接到label上 当count == 0 的时候 再显示重新发送</li></ul><h4 id="你做iphone开发时候-有哪些传值方式-view和view之间是如何传值的"><a href="#你做iphone开发时候-有哪些传值方式-view和view之间是如何传值的" class="headerlink" title="你做iphone开发时候,有哪些传值方式,view和view之间是如何传值的?"></a>你做iphone开发时候,有哪些传值方式,view和view之间是如何传值的?</h4><p>block, target-action ,代理,属性</p><h4 id="有哪几种手势通知方法、写清楚方法名？"><a href="#有哪几种手势通知方法、写清楚方法名？" class="headerlink" title="有哪几种手势通知方法、写清楚方法名？"></a>有哪几种手势通知方法、写清楚方法名？</h4><p>-(void)touchesBegan:(NSSet<em>)touchedwithEvent:(UIEvent</em>)event;</p><p>-(void)touchesMoved:(NSSet<em>)touched withEvent:(UIEvent</em>)event;</p><p>-(void)touchesEnded:(NSSet<em>)touchedwithEvent:(UIEvent</em>)event;</p><p>-(void)touchesCanceled:(NSSet<em>)touchedwithEvent:(UIEvent</em>)event;</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题8--Swift</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%988-Swift/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%988-Swift/</url>
      <content type="html"><![CDATA[<h4 id="Swift和Objective-C的联系"><a href="#Swift和Objective-C的联系" class="headerlink" title="Swift和Objective-C的联系"></a>Swift和Objective-C的联系</h4><ul><li>Swift与Objective-C共用同一套运行时环境<br> 我们编写程序，让程序运行起来，被机器执行的代码并非全部是由我们自己来编写的。需要同时运行很多预先写好的支持性的代码，才能让我们自己的代码运行起来。程序并非单独存在的，运行时处在一定的环境当中。我总联想到很多小蚂蚁在泥土上面爬，而我自己写的程序只是其中的一只。<br> Swift跟Objective-C编译出的程序代码运行在同一套运行环境上面。Swift的类型可以桥接到Objective-C的类型，反之亦然。Swift编写的代码可以调用Objective-C编写的代码，反之也一样。<br> Objective-C之前积累下来的大量类库，实现不用改写Swift就可以直接调用。</li><li>同一个工程，可以同时使用Swift和Objective-C<br> Objective-C在一端，Swift在另一端，两端经中间文件进行桥接。桥接文件包含Objective-C的头文件，编译时自动转成Swift可以识别的形式。Swift就可以使用Objective-C的类和它的函数。<br> 在Swift的类中，加上@objc（类名）的字样，Objective-C也可以使用Swift编写的类。但Swift跟C++的相互调用，需要Objective-C来封装。</li><li>Swift骨子里大多与Objective-C一样<br> Objective-C出现过的绝大多数概念，比如引用记数、ARC、属性、协议、接口、初始化、扩展类、命名参数、匿名函数等，在Swift中继续有效（可能只是换了个术语）。我自己将Swift看成是Objective-C的一块大大的语法糖，其他人可能有不同感受。<br> Swift大多数概念与Objective-C一样，也有些概念在Objective-C找不到对应，比如泛型。Swift中将那种操作写一次就可以作用多个类型的语法叫做Generics（泛型）。</li></ul><h4 id="Swift比Objective-C有什么优势？"><a href="#Swift比Objective-C有什么优势？" class="headerlink" title="Swift比Objective-C有什么优势？"></a>Swift比Objective-C有什么优势？</h4><ul><li>Swift 容易阅读<br> 不再需要行尾的分号，以及 if/else 语句中围绕条件表达式的括弧。另外就是方法的调用不再互相嵌套成中括号[[[ ]]]。Swift 中的方法和函数的调用使用行业内标准的在一对括弧内使用逗号分隔的参数列表。这样做的结果就是一种带有简化了句法和语法的更加干净有表现力的语言。</li><li>Swift 更易于维护<br> Swift 丢掉了对着两个文件的要求。 Xcode编译器可以自动计算出以来并执行增量构建。如此，将头文件 同实现文件相分离。把 Objective-C 头文件(.h) 和实现文件 (.m) 合并成了一个代码文件 (.swift)</li><li>Swift 更加安全<br> Swift代码中的可选类型使得一个nil可选值的可能性变得非常的明确, 这意味它能在你写下一段糟糕的代码时会生成一个编译器错误. 这就建立了一种短程反馈的循环，可以让程序员带着目标去写代码. 问题在代码被写就时就可以被修复, 这大大节省了你要在修复有关来自 Objective-C 指针逻辑的bug时需要耗费的时间和金钱.</li><li>Swift 代码更少<br> Swift 减少了重复性语句和字符串操作所需要的代码量。在 Objective-C 中, 使用文本字符串将两块信息组合起来的操作非常繁琐。Swift 采用当代编程语言的特性，比如使用“+”操作符将两个字符串加到一起<br> Swift中的类型系统减少了代码语句的复杂性–作为编译器可以理解的类型。比如，Objective-C要求程序员记住特殊字符标记（%s，%d，%@）并且提供了一个用逗号分隔的变量来代替每个标记。Swift支持字符串插入，这就消除了需要记住的标记和允许程序员直接插入变量到面向用户的字符串中</li><li>Swift 速度更快<br> 删除遗留下来的C语言约定大大提升了引擎盖之下Swift的性能, 进行计算密集型任务的性能上，Swift已经逼近C++的表现, 将近是OC运行速度的1.4倍.</li><li>总结: 使用 Swift，程序员只要维护原来一半量的代码文件，手动的代码同步工作为零，标点输入出错的概率也远远低于以前 – 这样就能腾出更多的时间写高质量的代码。通过使用可选类型 —— 一种针对返回或不返回值的编译时安全机制，而返回值是同步操作、网络失效时无效的用户输入以及数据验证错误发生时普遍会遇到的问题。ARC 在 Swift 中对过程式 C 风格的代码，还有苹果公司 Cocoa 框架使用的面向对象代码都进行了统一。</li></ul><h4 id="Swift的内存管理是怎样的？"><a href="#Swift的内存管理是怎样的？" class="headerlink" title="Swift的内存管理是怎样的？"></a>Swift的内存管理是怎样的？</h4><ul><li>Swift 使用自动引用计数（Automatic Reference Counting, ARC）来简化内存管理, 这种内存管理方式相比GC而言，对程序员的要求较高, 并且ARC比GC更容易引起编程错误，但却比GC快。尤其在性能很重要的场合。</li></ul><h4 id="Swift支持面向过程编程吗？"><a href="#Swift支持面向过程编程吗？" class="headerlink" title="Swift支持面向过程编程吗？"></a>Swift支持面向过程编程吗？</h4><ul><li>它采用了 Objective-C 的命名参数以及动态对象模型，可以无缝对接到现有的 Cocoa 框架，并且可以兼容 Objective-C 代码，支持面向过程编程和面向对象编程。</li></ul><h4 id="举例说明Swift里面有哪些是-Objective-C中没有的？"><a href="#举例说明Swift里面有哪些是-Objective-C中没有的？" class="headerlink" title="举例说明Swift里面有哪些是 Objective-C中没有的？"></a>举例说明Swift里面有哪些是 Objective-C中没有的？</h4><ul><li>Swift引入了在Objective-C中没有的一些高级数据类型，例如tuples（元组），可以使你创建和传递一组数值。</li><li>Swift还引入了可选项类型（Optionals），用于处理变量值不存在的情况。可选项的意思有两种：一是变量是存在的，例如等于X，二是变量值根本不存在。Optionals类似于Objective-C中指向nil的指针，但是适用于所有的数据类型，而非仅仅局限于类，Optionals 相比于Objective-C中nil指针更加安全和简明，并且也是Swift诸多最强大功能的核心。</li></ul><h4 id="Swift-是一门安全语言吗？"><a href="#Swift-是一门安全语言吗？" class="headerlink" title="Swift 是一门安全语言吗？"></a>Swift 是一门安全语言吗？</h4><ul><li>Swift是一门类型安全的语言，Optionals就是代表。Swift能帮助你在类型安全的环境下工作，如果你的代码中需要使用String类型，Swift的安全机制能阻止你错误的将Int值传递过来，这使你在开发阶段就能及时发现并修正问题。</li></ul><h4 id="为什么要在变量类型后面加个问号？"><a href="#为什么要在变量类型后面加个问号？" class="headerlink" title="为什么要在变量类型后面加个问号？"></a>为什么要在变量类型后面加个问号？</h4><ul><li>用来标记这个变量的值是可选的，一般用“！”和“？”定义可选变量的区别：用“！”定的可选变量必须保证转换能够成功，否则报错，但定义的变量可以直接使用，不会封装在option里；而用“？”号定的可选变量即使转换不成功本身也不会出错，变量值为nil，如果转换成功，要使用该变量进行计算时变量名后需要加“！”</li></ul><h4 id="什么是泛型，它们又解决了什么问题？"><a href="#什么是泛型，它们又解决了什么问题？" class="headerlink" title="什么是泛型，它们又解决了什么问题？"></a>什么是泛型，它们又解决了什么问题？</h4><ul><li>泛型是用来使代码能安全工作。在Swift中，泛型可以在函数数据类型和普通数据类型中使用，例如类、结构体或枚举。</li><li>泛型解决了代码复用的问题。有一种常见的情况，你有一个方法，需要一个类型的参数，你为了适应另一种类型的参数还得重新再写一遍这个方法。<br> 比如，在下面的代码中，第二个方法是第一个方法的“克隆体”：</li></ul><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">areIntEqual</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> y<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">==</span> y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">areStringsEqual</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token number">_</span> y<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">==</span> y<span class="token punctuation">}</span><span class="token function">areStringsEqual</span><span class="token punctuation">(</span><span class="token string">"ray"</span><span class="token punctuation">,</span> <span class="token string">"ray"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">areIntEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>一个Objective-C开发者可能会采用NSObject来解决问题：</p><pre class=" language-swift"><code class="language-swift">   <span class="token keyword">import</span> <span class="token builtin">Foundation</span>   <span class="token keyword">func</span> <span class="token function">areTheyEqual</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">NSObject</span><span class="token punctuation">,</span> <span class="token number">_</span> y<span class="token punctuation">:</span> <span class="token builtin">NSObject</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> x <span class="token operator">==</span> y   <span class="token punctuation">}</span>   <span class="token function">areTheyEqual</span><span class="token punctuation">(</span><span class="token string">"ray"</span><span class="token punctuation">,</span> <span class="token string">"ray"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>   <span class="token function">areTheyEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>这段代码能达到了目的，但是编译的时候并不安全。它允许一个字符串和一个整型数据进行比较：</p><pre class=" language-swift"><code class="language-swift"><span class="token function">areTheyEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ray"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//程序可能不会崩溃，但是允许一个字符串和一个整型数据进行比较可能不会得到想要的结果。</span>采用泛型的话，你可以将上面两个方法合并为一个，并同时还保证了数据类型安全。这是实现代码：<span class="token keyword">func</span> areTheyEqual<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> <span class="token builtin">Equatable</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> T<span class="token punctuation">,</span> <span class="token number">_</span> y<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> x <span class="token operator">==</span> y<span class="token punctuation">}</span><span class="token function">areTheyEqual</span><span class="token punctuation">(</span><span class="token string">"ray"</span><span class="token punctuation">,</span> <span class="token string">"ray"</span><span class="token punctuation">)</span><span class="token function">areTheyEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题7--Block</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%987-Block/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%987-Block/</url>
      <content type="html"><![CDATA[<h4 id="Block底层原理实现"><a href="#Block底层原理实现" class="headerlink" title="Block底层原理实现"></a>Block底层原理实现</h4><ul><li>首先我们来看四个函数</li></ul><pre class=" language-objc"><code class="language-objc">void test1() {    int a = 10;    void (^block)() = ^{        NSLog(@"a is %d", a);    };    a = 20;    block(); // 10}void test2() {    __block int a = 10;    void (^block)() = ^{        NSLog(@"a is %d", a);    };    a = 20;    block(); // 20}void test3() {    static int a = 10;    void (^block)() = ^{        NSLog(@"a is %d", a);    };    a = 20;    block(); // 20}int a = 10;void test4() {    void (^block)() = ^{        NSLog(@"a is %d", a);    };    a = 20;    block();//20}</code></pre><ul><li>造成这样的原因是：传值和传址。为什么说会有传值和传址，把.m编译成c++代码。得到.cpp文件，我们来到文件的最后，看到如下代码</li></ul><pre class=" language-objc"><code class="language-objc">struct __test1_block_impl_0 {    struct __block_impl impl;    struct __test1_block_desc_0* Desc;    int a;    __test1_block_impl_0(void *fp,struct __test1_block_desc_0* Desc,int _a,int flag=0): a(_a){    impl.isa = &_NSConcreteStackBlock;    impl.Flags = flags;    impl.FuncPtr = fp;    Desc = desc;    }};static void __test1_block_func_0(struct __test1_block_imp_0 *__cself){    int a = __cself->a;    NSLog(a);//这里就是打印a的值，代码太长，而且没意义，我就不敲出来了。}void test1(){    int a = 10;    void (*block)() = (void (*)())&__test1_block_impl_0((void *))__test1_block_func_0,&__test1_block_desc_0_DATA,a);    a = 20;    ((void (*)(__block_impl *))((__block_ipml *)block)->FuncPtr)((_block_impl *)block);}int main(int argc, const char * argv[]){    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool;                test1();    }    return 0;}static struct IMAGE_INFO { unsigned version; unsigned flag; } _OBJC_IMAGE_INFO = { 0, 2 };</code></pre><ul><li>我们看到void test1()中，void (*block)() 右边最后面 ，把a传进去了，也就是把10这个值传进去了.</li><li>而且对void (*block)()简化分析，<pre><code>void (* block)() = &amp;__test1_block_impl_0();</code></pre></li></ul><p>所以block就是指向结构体的指针。</p><ul><li>10传入block后，代码最上面创建的__test1_block_impl_0结构体中，a = 10；</li><li>对void test1()中最下面的函数进行简化分析，得到<code>(block)-&gt;FuncPtr)(block)</code>，我们在回到刚才<code>__test1_block_impl_0</code>这个结构体中，<code>impl.FuncPtr = fp;</code>而fp又是传入结构体的第一个参数，而在<code>void (*block)()</code>中，传入结构体的第一个参数为<code>__test1_block_func_0</code>，也就是说<code>(block)-&gt;FuncPtr)(block) =》__test1_block_func_0(block);</code></li><li>上一步相当于调用<code>__test1_block_func_0（）</code>这个函数，我们来看这个函数，有这样一段代码：int a = __cself-&gt;a;访问block中的a值，传递给a；所以是10.这种就是<strong>传值</strong>！！！</li></ul><p>=====</p><ul><li>我们再来看test2( );添加了__block会发送什么变化呢</li></ul><pre class=" language-objc"><code class="language-objc">void test2() {    __attribute__((_blocks__(byref))) __Block_byref_a_0 a = {(void*)0,(__Block_byref_a_0 *)&a,0,sizeof(__Block_byref_a_0),10};    void(*block)() =  (void (*)())&__test2_block_impl_0((void *))__test2_block_func_0,&__test2_block_desc_0_DATA,(__Block_byref_a_0 *)&a,570425344);    (a.__forwarding->a) = 20;    ((void (*)(__block_impl *))((__block_ipml *)block)->FuncPtr)((_block_impl *)block);}int main(int argc, const char * argv[]){    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool;                test2();    }    return 0;}static struct IMAGE_INFO { unsigned version; unsigned flag; } _OBJC_IMAGE_INFO = { 0, 2 };</code></pre><ul><li>代码虽然很多看着很复杂，但是我们只需要看我们想要知道的，睁大你的眼睛，看到void(*block)()这个函数的最后面，有个&amp;a,天啊，这里传的是a的地址。从test2到test4，都是传址，所以a的值发生改变，block打印出来的是a的最终值。</li><li>总结：只有普通局部变量是传值，其他情况都是传址。</li></ul><h4 id="block的定义"><a href="#block的定义" class="headerlink" title="block的定义"></a>block的定义</h4><pre><code>// 无参无返回void(^block)();// 无参有返回int(^block1)();// 有参有返回int(^block1)(int number);</code></pre><p>也可以直接打入inline来自动生成block格式</p><pre><code>&lt;#returnType#&gt;(^&lt;#blockName#&gt;)(&lt;#parameterTypes#&gt;) = ^(&lt;#parameters#&gt;) {    &lt;#statements#&gt;};</code></pre><h4 id="block的内存管理"><a href="#block的内存管理" class="headerlink" title="block的内存管理"></a>block的内存管理</h4><ul><li>无论当前环境是ARC还是MRC,只要block没有访问外部变量,block始终在全局区</li><li>MRC情况下 <ul><li>block如果访问外部变量,block在栈里</li><li>不能对block使用retain,否则不能保存在堆里</li><li>只有使用copy,才能放到堆里</li></ul></li><li>ARC情况下 <ul><li>block如果访问外部变量,block在堆里</li><li>block可以使用copy和strong,并且block是一个对象</li></ul></li></ul><h4 id="block的循环引用"><a href="#block的循环引用" class="headerlink" title="block的循环引用"></a>block的循环引用</h4><ul><li><p>如果要在block中直接使用外部强指针会发生错误,使用以下代码在block外部实现可以解决</p><p>__weak typeof(self) weakSelf = self;</p></li><li><p>但是如果在block内部使用延时操作还使用弱指针的话会取不到该弱指针,需要在block内部再将弱指针强引用一下</p><p>__strong typeof(self) strongSelf = weakSelf;</p></li></ul><h4 id="描述一个你遇到过的retain-cycle例子。"><a href="#描述一个你遇到过的retain-cycle例子。" class="headerlink" title="描述一个你遇到过的retain cycle例子。"></a>描述一个你遇到过的retain cycle例子。</h4><pre class=" language-objc"><code class="language-objc">block中的循环引用：一个viewController@property (nonatomic,strong)HttpRequestHandler * handler;    @property (nonatomic,strong)NSData  *data;     _handler = [httpRequestHandler sharedManager];     [ downloadData:^(id responseData){     _data = responseData;     }];self 拥有_handler, _handler 拥有block, block拥有self（因为使用了self的_data属性，block会copy 一份self） 解决方法：__weak typedof(self)weakSelf = self   [ downloadData:^(id responseData){         weakSelf.data = responseData;</code></pre><h5 id="block中的weak-self，是任何时候都需要加的么？"><a href="#block中的weak-self，是任何时候都需要加的么？" class="headerlink" title="block中的weak self，是任何时候都需要加的么？"></a>block中的weak self，是任何时候都需要加的么？</h5><ul><li>不是什么任何时候都需要添加的，不过任何时候都添加似乎总是好的。只要出现像self-&gt;block-&gt;self.property/self-&gt;_ivar这样的结构链时，才会出现循环引用问题。好好分析一下，就可以推断出是否会有循环引用问题。</li></ul><h4 id="通过block来传值"><a href="#通过block来传值" class="headerlink" title="通过block来传值"></a>通过block来传值</h4><ul><li><p>在控制器间传值可以使用代理或者block,使用block相对来说简洁</p></li><li><p>在前一个控制器的touchesBegan:方法内实现如下代码</p><pre class=" language-objc"><code class="language-objc">  ModalViewController *modalVc = [[ModalViewController alloc] init];  modalVc.valueBlcok = ^(NSString *str){  NSLog(@"ViewController拿到%@",str);  };  [self presentViewController:modalVc animated:YES completion:nil];</code></pre></li><li><p>在ModalViewController控制器的.h文件中声明一个block属性 @property (nonatomic ,strong) void(^valueBlcok)(NSString *str);</p></li><li><p>并在.m文件中实现方法</p></li></ul><pre class=" language-objc"><code class="language-objc">- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {    // 传值:调用block    if (_valueBlcok) {     _valueBlcok(@"123");        }    }</code></pre><ul><li>这样在ModalViewController回到上一个控制器的时候,上一个控制器的label就能显示ModalViewController传过来的字符串</li></ul><h4 id="block作为一个参数使用"><a href="#block作为一个参数使用" class="headerlink" title="block作为一个参数使用"></a>block作为一个参数使用</h4><ul><li><p>新建一个类,在.h文件中声明一个方法- (void)calculator:(int(^)(int result))block;</p></li><li><p>并在.m文件中实现该方法</p></li></ul><pre class=" language-objc"><code class="language-objc">-(void)calculator:(int (^)(int))block {   self.result = block(self.result);}</code></pre><ul><li>在其他类中调用该方法</li></ul><pre class=" language-objc"><code class="language-objc">CalculatorManager *mgr = [[CalculatorManager alloc] init];[mgr calculator:^(int result){    result += 5;    return result;}];</code></pre><h4 id="block作为返回值使用"><a href="#block作为返回值使用" class="headerlink" title="block作为返回值使用"></a>block作为返回值使用</h4><ul><li><p>在masonry框架中我们可以看到如下用法<code>make.top.equalTo(superview.mas_top).with.offset(padding.top);</code> 这个方法实现就是将block作为返回值来使用</p></li><li><p>来分析一下这段代码：其实可以将这段代码看成<code>make.top,make.equalTo,make.with,make.offset</code>,所以可以得出一个结论是<code>make.top</code>返回了一个make,才能实现<code>make.top.equalTo</code></p></li><li><p>那来模仿一下这种功能的实现</p></li><li><p>新建一个类,在.h文件中声明一个方法- (CalculatorManager *(^)(int a))add;</p></li><li><p>在.m文件中实现方法<br><code>`</code>objc</p></li><li>(CalculatorManager * (^)(int a))add {<br> return ^(int a){<br>   _result += a;<br>   return self;<br> };<br>}<br><code>`</code></li><li><p>这样就可以在别的类中实现上面代码的用法</p><pre><code>  mgr.add(1).add(2).add(3);</code></pre></li></ul><h4 id="block的变量传递"><a href="#block的变量传递" class="headerlink" title="block的变量传递"></a>block的变量传递</h4><ul><li>如果block访问的外部变量是局部变量,那么就是值传递,外界改了,不会影响里面</li><li>如果block访问的外部变量是__block或者static修饰,或者是全局变量,那么就是指针传递,block里面的值和外界同一个变量,外界改变,里面也会改变</li><li>验证一下是不是这样</li><li>通过Clang来将main.m文件编译为C++</li><li>在终端输入如下命令clang -rewrite-objc main.m</li></ul><pre><code>    void(*block)() = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0,         &amp;__main_block_desc_0_DATA, (__Block_byref_a_0 *)&amp;a, 570425344));    void(*block)() = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0,         &amp;__main_block_desc_0_DATA, a));</code></pre><ul><li>可以看到在编译后的代码最后可以发现被__block修饰过得变量使用的是&amp;a,而局部变量是a</li></ul><h4 id="block的注意点"><a href="#block的注意点" class="headerlink" title="block的注意点"></a>block的注意点</h4><ul><li><p>在block内部使用外部指针且会造成循环引用情况下,需要用__weak修饰外部指针</p><pre><code>  __weak typeof(self) weakSelf = self;</code></pre></li><li><p>在block内部如果调用了延时函数还使用弱指针会取不到该指针,因为已经被销毁了,需要在block内部再将弱指针重新强引用一下</p><pre><code>  __strong typeof(self) strongSelf = weakSelf;</code></pre></li><li><p>如果需要在block内部改变外部变量的话,需要在用__block修饰外部变量</p></li></ul><h4 id="使用block有什么好处？使用NSTimer写出一个使用block显示（在UILabel上）秒表的代码。"><a href="#使用block有什么好处？使用NSTimer写出一个使用block显示（在UILabel上）秒表的代码。" class="headerlink" title="使用block有什么好处？使用NSTimer写出一个使用block显示（在UILabel上）秒表的代码。"></a>使用block有什么好处？使用NSTimer写出一个使用block显示（在UILabel上）秒表的代码。</h4><pre><code>说到block的好处，最直接的就是代码紧凑，传值、回调都很方便，省去了写代理的很多代码。对于这里根本没有必要使用block来刷新UILabel显示，因为都是直接赋值。当然，笔者觉得这是在考验应聘者如何将NSTimer写成一个通用用的Block版本。NSTimer封装成Block版: http://www.henishuo.com/nstimer-block/使用起来像这样：NSTimer *timer = [NSTimer scheduledTimerWithTimeInterval:1.0                                    repeats:YES                                   callback:^() {  weakSelf.secondsLabel.text = ...}[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</code></pre><h4 id="block跟函数很像："><a href="#block跟函数很像：" class="headerlink" title="block跟函数很像："></a>block跟函数很像：</h4><ul><li>可以保存代码</li><li>有返回值</li><li>有形参</li><li>调用方式一样</li></ul><h4 id="使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？"><a href="#使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？" class="headerlink" title="使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？"></a>使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</h4><p>系统的某些block api中，UIView的block版本写动画时不需要考虑，但也有一些api需要考虑。所谓“引用循环”是指双向的强引用，<br> 所以那些“单向的强引用”（block 强引用 self ）没有问题，比如这些：</p><pre><code>[UIView animateWithDuration:duration animations:^{ [self.superview layoutIfNeeded]; }]; [[NSOperationQueue mainQueue] addOperationWithBlock:^{ self.someProperty = xyz; }]; [[NSNotificationCenter defaultCenter] addObserverForName:@&quot;someNotification&quot;                            object:nil                            queue:[NSOperationQueue mainQueue]                           usingBlock:^(NSNotification * notification) {                           self.someProperty = xyz;                                                     }]; </code></pre><p>这些情况不需要考虑“引用循环”。<br> 但如果你使用一些参数中可能含有成员变量的系统api，如GCD、NSNotificationCenter就要小心一点。比如GCD内部如果引用了 self，而且GCD的其他参数是成员变量，则要考虑到循环引用：</p><pre><code>__weak __typeof(self) weakSelf = self;dispatch_group_async(_operationsGroup, _operationsQueue, ^{    __typeof__(self) strongSelf = weakSelf;    [strongSelf doSomething];    [strongSelf doSomethingElse];});</code></pre><p>类似的：</p><pre><code>__weak __typeof(self) weakSelf = self;_observer = [[NSNotificationCenter defaultCenter] addObserverForName:@&quot;testKey&quot;                                                            object:nil                                                             queue:nil                                                        usingBlock:^(NSNotification *note) {  __typeof__(self) strongSelf = weakSelf;  [strongSelf dismissModalViewControllerAnimated:YES];}];self –&gt; _observer –&gt; block –&gt; self 显然这也是一个循环引用。</code></pre><h4 id="谈谈对Block-的理解-并写出一个使用Block执行UIVew动画"><a href="#谈谈对Block-的理解-并写出一个使用Block执行UIVew动画" class="headerlink" title="谈谈对Block 的理解?并写出一个使用Block执行UIVew动画?"></a>谈谈对Block 的理解?并写出一个使用Block执行UIVew动画?</h4><ul><li>Block是可以获取其他函数局部变量的匿名函数，其不但方便开发，并且可以大幅提高应用的执行效率(多核心CPU可直接处理Block指令)</li></ul><pre><code>[UIView transitionWithView:self.view duration:0.2                                      ptions:UIViewAnimationOptionTransitionFlipFromLeft                                      animations:^{ [[blueViewController view] removeFromSuperview]; [[self view] insertSubview:yellowViewController.view atIndex:0]; }                                      completion:NULL];</code></pre><h4 id="写出上面代码的Block的定义。"><a href="#写出上面代码的Block的定义。" class="headerlink" title="写出上面代码的Block的定义。"></a>写出上面代码的Block的定义。</h4><ul><li>typedef void(^animations) (void);</li><li>typedef void(^completion) (BOOL finished);</li></ul><h4 id="什么是block"><a href="#什么是block" class="headerlink" title="什么是block"></a>什么是block</h4><ul><li>对于闭包(block),有很多定义，其中闭包就是获取其它函数局部变量的匿名函数，这个定义即接近本质又较好理解。</li><li>对于刚接触Block的同学，会觉得有些绕，因为我们习惯写这样的程序main(){ funA();} funA(){funB();} funB(){…..}; 就是函数main调用函数A，函数A调用函数B… 函数们依次顺序执行，但现实中不全是这样的，例如项目经理M，手下有3个程序员A、B、C，当他给程序员A安排实现功能F1时，他并不等着A完成之后，再去安排B去实现F2，而是安排给A功能F1，B功能F2，C功能F3，然后可能去写技术文档，而当A遇到问题时，他会来找项目经理M，当B做完时，会通知M，这就是一个异步执行的例子。</li><li>在这种情形下，Block便可大显身手，因为在项目经理M，给A安排工作时，同时会告诉A若果遇到困难，如何能找到他报告问题(例如打他手机号)，这就是项目经理M给A的一个回调接口，要回掉的操作，比如接到电话，百度查询后，返回网页内容给A，这就是一个Block，在M交待工作时，已经定义好，并且取得了F1的任务号(局部变量)，却是在当A遇到问题时，才调用执行，跨函数在项目经理M查询百度，获得结果后回调该block。</li></ul><h4 id="block-实现原理"><a href="#block-实现原理" class="headerlink" title="block 实现原理"></a>block 实现原理</h4><ul><li>Objective-C是对C语言的扩展，block的实现是基于指针和函数指针。</li><li>从计算语言的发展，最早的goto，高级语言的指针，到面向对象语言的block，从机器的思维，一步步接近人的思维，以方便开发人员更为高效、直接的描述出现实的逻辑(需求)。</li><li>使用实例:cocoaTouch框架下动画效果的Block的调用</li></ul><pre><code>使用typed声明blocktypedef void(^didFinishBlock) (NSObject *ob);这就声明了一个didFinishBlock类型的block，然后便可用@property (nonatomic,copy) didFinishBlock finishBlock;声明一个blokc对象，注意对象属性设置为copy，接到block 参数时，便会自动复制一份。__block是一种特殊类型，使用该关键字声明的局部变量，可以被block所改变，并且其在原函数中的值会被改变。</code></pre><p>关于block</p><p>答: 面试时，面试官会先问一些，是否了解block，是否使用过block，这些问题相当于开场白，往往是下面一系列问题的开始，所以一定要如实根据自己的情况回答。</p><p>1). 使用block和使用delegate完成委托模式有什么优点?</p><p>首先要了解什么是委托模式，委托模式在iOS中大量应用，其在设计模式中是适配器模式中的对象适配器，Objective-C中使用id类型指向一切对象，使委托模式更为简洁。了解委托模式的细节：</p><p>iOS设计模式—-委托模式</p><p>使用block实现委托模式，其优点是回调的block代码块定义在委托对象函数内部，使代码更为紧凑;</p><p>适配对象不再需要实现具体某个protocol，代码更为简洁。</p><p>2). 多线程与block</p><p>GCD与Block</p><p>使用 dispatch_async 系列方法，可以以指定的方式执行block</p><p>GCD编程实例</p><p>dispatch_async的完整定义</p><p>void dispatch_async(</p><p>dispatch_queue_t queue,</p><p>dispatch_block_t block);</p><p>功能：在指定的队列里提交一个异步执行的block，不阻塞当前线程</p><p>通过queue来控制block执行的线程。主线程执行前文定义的 finishBlock对象</p><p><code>dispatch_async(dispatch_get_main_queue(),^(void){finishBlock();});</code></p><h4 id="解释以下代码的内存泄漏原因"><a href="#解释以下代码的内存泄漏原因" class="headerlink" title="解释以下代码的内存泄漏原因"></a>解释以下代码的内存泄漏原因</h4><pre><code>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {           HJTestCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;TestCell&quot; forIndexPath:indexPath];    [cell setTouchBlock:^(HJTestCell *cell) {        [self refreshData];    }];          return cell;}</code></pre><p>原因：</p><pre><code>[cell setTouchBlock:^(HJTestCell *cell) {    [self refreshData];}];</code></pre><p>产生内存泄露的原因是因为循环引用</p><p>在给cell设置的TouchBlock中，使用了__strong修饰的self，由于Block的原理，当touchBlock从栈复制到堆中时，self会一同复制到堆中，retain一次，被touchBlock持有，而touchBlock又是被cell持有的，cell又被tableView持有，tableView又被self持有，因此形成了循环引用：self间接持有touchBlock，touchBlock持有self</p><p>一旦产生了循环引用，由于两个object都被强引用，所以retainCount始终不能为0，无发释放，产生内存泄漏</p><p>解决办法：<br> 使用weakSelf解除touchBlock对self的强引用</p><pre class=" language-objc"><code class="language-objc">__weak __typeof__(self) weakSelf = self;[cell setTouchBlock:^(HJTestCell *cell) {    [weakSelf refreshData];}];</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题6--KVO和KVC</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%986-KVO%E5%92%8CKVC/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%986-KVO%E5%92%8CKVC/</url>
      <content type="html"><![CDATA[<h4 id="KVC的底层实现？"><a href="#KVC的底层实现？" class="headerlink" title="KVC的底层实现？"></a>KVC的底层实现？</h4><pre><code>当一个对象调用setValue方法时，方法内部会做以下操作：①检查是否存在相应key的set方法，如果存在，就调用set方法②如果set方法不存在，就会查找与key相同名称并且带下划线的成员属性，如果有，则直接给成员属性赋值③如果没有找到_key,就会查找相同名称的属性key，如果有就直接赋值④如果还没找到，则调用valueForUndefinedKey:和setValue:forUndefinedKey:方法。这些方法的默认实现都是抛出异常，我们可以根据需要重写它们。</code></pre><h5 id="KVO的底层实现？"><a href="#KVO的底层实现？" class="headerlink" title="KVO的底层实现？"></a>KVO的底层实现？</h5><ul><li>kvo基于runtime机制实现。</li><li><p>使用了isa 混写（isa-swizzling），当一个对象(假设是person对象，person的类是MYPerson)的属性值(假设person的age)发生改变时，系统会自动生成一个类，继承自MYPerson ：NSKVONotifying_MYPerson，在这个类的setAge方法里面，调用</p><pre><code>[super setAge:age][self willChangeValueForKey:@&quot;age&quot;] 和 [self didChangeValueForKey:@&quot;age&quot;] </code></pre><p>,而这两个方法内部会主动调用监听者内部的<code>- (void)observeValueForKeyPath</code>这个方法。</p></li><li><p>想要看到NSKVONotifying_MYPerson很简单，在self.person.age = 20; 这里打断点，在调试区域就能看到</p><pre><code>_person-&gt;NSObject-&gt;isa=(Class)NSKVONotifying_MYPerson.</code></pre><p>同时我们在</p><pre><code>self.person = [[MYPerson alloc]init];</code></pre><p>后面打断点，看到</p><pre><code>_person-&gt;NSObject-&gt;isa=(Class)MYPerson</code></pre><p>由此可见，在添加监听者之后，person类型已经由MYPerson被改变成NSKVONotifying_MYPerson</p></li></ul><h4 id="什么是KVO和KVC"><a href="#什么是KVO和KVC" class="headerlink" title="什么是KVO和KVC?"></a>什么是KVO和KVC?</h4><pre><code>答：KVC:键 – 值编码 使用字符串直接访问对象的属性。KVO:键值观察机制，它提供了观察某一属性变化的方法</code></pre><h4 id="KVO的缺陷"><a href="#KVO的缺陷" class="headerlink" title="KVO的缺陷?"></a>KVO的缺陷?</h4><p>KVO是一个对象能够观察另外一个对象的属性的值，并且能够发现值的变化。前面两种模式更加适合一个controller与任何其他的对象进行通信，而KVO更加适合任何类型的对象侦听另外一个任意对象的改变（这里也可以是controller，但一般不是controller）。这是一个对象与另外一个对象保持同步的一种方法，即当另外一种对象的状态发生改变时，观察对象马上作出反应。它只能用来对属性作出反应，而不会用来对方法或者动作作出反应。</p><p>优点：</p><p>1.能够提供一种简单的方法实现两个对象间的同步。例如：model和view之间同步；</p><p>2.能够对非我们创建的对象，即内部对象的状态改变作出响应，而且不需要改变内部对象（SKD对象）的实现；</p><p>3.能够提供观察的属性的最新值以及先前值；</p><p>4.用key paths来观察属性，因此也可以观察嵌套对象；</p><p>5.完成了对观察对象的抽象，因为不需要额外的代码来允许观察值能够被观察</p><p>缺点：</p><p>1.我们观察的属性必须使用strings来定义。因此在编译器不会出现警告以及检查；</p><p>2.对属性重构将导致我们的观察代码不再可用；</p><p>3.复杂的“IF”语句要求对象正在观察多个值,这是因为所有的观察代码通过一个方法来指向；</p><p>4.当释放观察者时需要移除观察者。</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题5--内存管理</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%985-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%985-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="ARC处理原理"><a href="#ARC处理原理" class="headerlink" title="ARC处理原理"></a>ARC处理原理</h4><p>ARC是Objective-C编译器的特性，而不是运行时特性或者垃圾回收机制，ARC所做的只不过是在代码编译时为你自动在合适的位置插入release或autorelease，只要没有强指针指向对象，对象就会被释放。</p><ul><li><p>前端编译器</p><pre><code>前端编译器会为“拥有的”每一个对象插入相应的release语句。如果对象的所有权修饰符是__strong，那么它就是被拥有的。如果在某个方法内创建了一个对象，前端编译器会在方法末尾自动插入release语句以销毁它。而类拥有的对象（实例变量/属性）会在dealloc方法内被释放。事实上，你并不需要写dealloc方法或调用父类的dealloc方法，ARC会自动帮你完成一切。此外，由编译器生成的代码甚至会比你自己写的release语句的性能还要好，因为编辑器可以作出一些假设。在ARC中，没有类可以覆盖release方法，也没有调用它的必要。ARC会通过直接使用objc_release来优化调用过程。而对于retain也是同样的方法。ARC会调用objc_retain来取代保留消息。</code></pre></li><li><p>ARC优化器</p></li></ul><p>虽然前端编译器听起来很厉害的样子，但代码中有时仍会出现几个对retain和release的重复调用。ARC优化器负责移除多余的retain和release语句，确保生成的代码运行速度高于手动引用计数的代码。</p><h4 id="下面关于Objective-C内存管理的描述错误的是"><a href="#下面关于Objective-C内存管理的描述错误的是" class="headerlink" title="下面关于Objective-C内存管理的描述错误的是"></a>下面关于Objective-C内存管理的描述错误的是</h4><pre><code>A 当使用ARC来管理内存时，代码中不可以出现autoreleaseB autoreleasepool 在 drain 的时候会释放在其中分配的对象C 当使用ARC来管理内存时，在线程中大量分配对象而不用autoreleasepool则可能会造成内存泄露D 在使用ARC的项目中不能使用NSZone</code></pre><ul><li>参考答案：A</li><li>理由：ARC只是在大多时候编译自动为我们添加上内存管理的代码，只是我们的源代码看不到而已，但是在编译时，编译器会添加上相关内存管理代码。对于自动释放池，在drain时会将自动释放池中的所有对象的引用计数减一，若引用计数为0，则会自动释放掉其内存。如果在线程中需要大量分配内存，我们理应添加上自动释放池，以防内存泄露。比如在for循环中要分配大量的内存处理数据，那么我们应该在for循环内添加自动释放池，在每个循环后就将内存释放掉，防止内存泄露。在ARC项目中，自然不能手动使用NSZone，也不能调用父类的dealloc。</li></ul><h4 id="MRC文件在ARC工程混合编译时，需要在文件的Compiler-Flags上添加什么参数"><a href="#MRC文件在ARC工程混合编译时，需要在文件的Compiler-Flags上添加什么参数" class="headerlink" title="MRC文件在ARC工程混合编译时，需要在文件的Compiler Flags上添加什么参数"></a>MRC文件在ARC工程混合编译时，需要在文件的Compiler Flags上添加什么参数</h4><pre><code>A -sharedB -fno-objc-arcC -fobjc-arcD -dynamic参考答案：B</code></pre><h4 id="什么情况使用-weak-关键字，相比-assign-有什么不同？"><a href="#什么情况使用-weak-关键字，相比-assign-有什么不同？" class="headerlink" title="什么情况使用 weak 关键字，相比 assign 有什么不同？"></a>什么情况使用 weak 关键字，相比 assign 有什么不同？</h4><ul><li>什么情况使用weak关键字?</li><li>在 ARC 中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性<br> 自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,自定义 IBOutlet 控件属性一般也使用 weak；当然，也可以使用strong。</li><li>weak与assign的不同?</li><li>weak 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同assign类似， 然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。 而 assign 的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或 NSlnteger 等)的简单赋值操作。</li><li>assigin 可以用非 OC 对象,而 weak 必须用于 OC 对象</li></ul><h4 id="调用对象的release-方法会销毁对象吗？"><a href="#调用对象的release-方法会销毁对象吗？" class="headerlink" title="调用对象的release 方法会销毁对象吗？"></a>调用对象的release 方法会销毁对象吗？</h4><pre><code>    不会，调用对象的release 方法只是将对象的引用计数器-1，当对象的引用计数器为0的时候会调用了对象的dealloc 方法才能进行释放对象的内存。</code></pre><h4 id="自动释放池常见面试代码"><a href="#自动释放池常见面试代码" class="headerlink" title="自动释放池常见面试代码"></a>自动释放池常见面试代码</h4><pre class=" language-objc"><code class="language-objc">for (int i = 0; i < someLargeNumber; ++i) {       NSString *string = @"Abc";    string = [string lowercaseString];    string = [string stringByAppendingString:@"xyz"];     NSLog(@"%@",string);}</code></pre><p>问：以上代码存在什么样的问题？如果循环的次数非常大时，应该如何修改？</p><pre><code>存在问题：问题处在每执行一次循环，就会有一个string加到当前runloop中的自动释放池中，只有当自动释放池被release的时候，自动释放池中的标示了autorelease的这些数据所占用的内存空间才能被释放掉。假设，当someLargeNumber大到一定程度时，内存空间将被耗尽而没有被释放掉，所以就出现了内存溢出的现象。解决办法1：如果i比较大，可以用@autoreleasepool {}解决，放在for循环外，循环结束后，销毁创建的对象，解决占据栈区内存的问题解决方法2：如果i玩命大，一次循环都会造成自动释放池被填满，自动释放池放在for循环内，每次循环都将上一次创建的对象release修改之后:for(int i = 0; i&lt;1000;i++) {    NSAutoreleasePool * pool1 = [[NSAutoreleasePool alloc] init];     NSString *string = @&quot;Abc&quot;;    string = [string lowercaseString];    string = [string stringByAppendingString:@&quot;xyz&quot;];     NSLog(@&quot;%@&quot;,string);    //释放池    [pool1 drain];}</code></pre><h4 id="objective-C对象的内存布局是怎样的？"><a href="#objective-C对象的内存布局是怎样的？" class="headerlink" title="objective-C对象的内存布局是怎样的？"></a>objective-C对象的内存布局是怎样的？</h4><ul><li>由于Objective-C中没有多继承，因此其内存布局还是很简单的，就是：最前面有个isa指针，然后父类的实例变量存放在子类的成员变量之前</li></ul><h4 id="看下面的程序-第一个NSLog会输出什么-这时str的retainCount是多少-第二个和第三个呢-为什么"><a href="#看下面的程序-第一个NSLog会输出什么-这时str的retainCount是多少-第二个和第三个呢-为什么" class="headerlink" title="看下面的程序,第一个NSLog会输出什么?这时str的retainCount是多少?第二个和第三个呢? 为什么?"></a>看下面的程序,第一个NSLog会输出什么?这时str的retainCount是多少?第二个和第三个呢? 为什么?</h4><pre class=" language-objc"><code class="language-objc">NSMutableArray* ary = [[NSMutableArray array] retain];NSString *str = [NSString stringWithFormat:@"test"];[str retain];[aryaddObject:str];NSLog(@”%@%d”,str,[str retainCount]);[str retain];[str release];[str release];NSLog(@”%@%d”,str,[str retainCount]);[aryremoveAllObjects]NSLog(@”%@%d”,str,[str retainCount]);str的retainCount创建+1，retain+1，加入数组自动+1 3retain+1，release-1，release-1 2数组删除所有对象，所有数组内的对象自动-1 1</code></pre><h4 id="回答person的retainCount值-并解释为什么"><a href="#回答person的retainCount值-并解释为什么" class="headerlink" title="回答person的retainCount值,并解释为什么"></a>回答person的retainCount值,并解释为什么</h4><pre class=" language-objc"><code class="language-objc">Person *per = [[Person alloc] init]; 此时person 的retainCount的值是1 self.person = per;在self.person 时,如果是assign,person的 retainCount的值不变,仍为1 若是:retain person的retainCount的值加1,变为2若是:copy person的retainCount值不变,仍为1</code></pre><h4 id="什么时候需要在程序中创建内存池"><a href="#什么时候需要在程序中创建内存池" class="headerlink" title="什么时候需要在程序中创建内存池?"></a>什么时候需要在程序中创建内存池?</h4><ul><li>用户自己创建的数据线程，则需要创建该线程的内存池</li></ul><h4 id="如果我们不创建内存池，是否有内存池提供给我们"><a href="#如果我们不创建内存池，是否有内存池提供给我们" class="headerlink" title="如果我们不创建内存池，是否有内存池提供给我们?"></a>如果我们不创建内存池，是否有内存池提供给我们?</h4><ul><li>界面线程维护着自己的内存池，用户自己创建的数据线程，则需要创建该线程的内存池</li></ul><h4 id="苹果是如何实现autoreleasepool的？"><a href="#苹果是如何实现autoreleasepool的？" class="headerlink" title="苹果是如何实现autoreleasepool的？"></a>苹果是如何实现autoreleasepool的？</h4><pre class=" language-objc"><code class="language-objc">autoreleasepool以一个队列数组的形式实现,主要通过下列三个函数完成.•   objc_autoreleasepoolPush•   objc_autoreleasepoolPop•   objc_autorelease看函数名就可以知道，对autorelease分别执行push、pop操作。销毁对象时执行release操作。</code></pre><h4 id="objc使用什么机制管理对象内存？"><a href="#objc使用什么机制管理对象内存？" class="headerlink" title="objc使用什么机制管理对象内存？"></a>objc使用什么机制管理对象内存？</h4><ul><li>通过引用计数器(retainCount)的机制来决定对象是否需要释放。 每次runloop完成一个循环的时候，都会检查对象的 retainCount，如果retainCount为0，说明该对象没有地方需要继续使用了，可以释放掉了。</li></ul><h4 id="为什么要进行内存管理"><a href="#为什么要进行内存管理" class="headerlink" title="为什么要进行内存管理?"></a>为什么要进行内存管理?</h4><ul><li>因为移动设备的内存极其有限,当一个程序所占内存达到一定值时， 系统会发出内存警告. 当程序达到更大的值时, 程序会闪退, 影响用户体验. 为了保证程序的运行流畅, 必须进行内存管理</li></ul><h4 id="内存管理的范围"><a href="#内存管理的范围" class="headerlink" title="内存管理的范围?"></a>内存管理的范围?</h4><ul><li>管理所有继承自NSObject的对象, 对基本数据类型无效.是因为对象和其他数据类型在系统中存储的空间不一样,其他局部变量主要存储在栈区(因为基本数据类型占用的存储空间是固定的,一般存放于栈区),而对象存储于堆中,当代码块结束时,这个代码块所涉及到的所有局部变量会自动弹栈清空,指向对象的指针也会被回收,这时对象就没有指针指向,但依然存在于堆内存中,造成内存泄露.</li></ul><h4 id="objc使用什么机制管理对象内存-或者内存管理方式有哪些-？-重点"><a href="#objc使用什么机制管理对象内存-或者内存管理方式有哪些-？-重点" class="headerlink" title="objc使用什么机制管理对象内存(或者内存管理方式有哪些)？(重点)"></a>objc使用什么机制管理对象内存(或者内存管理方式有哪些)？(重点)</h4><ul><li>MRC(manual retain-release)手动内存管理</li><li>ARC(automatic reference counting)自动引用计数</li><li>Garbage collection (垃圾回收)。但是iOS不支持垃圾回收, ARC作为LLVM3.0编译器的一项特性, 在iOS5.0 (Xcode4) 版本后推出的。</li><li>ARC的判断准则, 只要没有强指针指向对象, 对象就会被释放.</li></ul><h4 id="iOS是如何管理内存的？"><a href="#iOS是如何管理内存的？" class="headerlink" title="iOS是如何管理内存的？"></a>iOS是如何管理内存的？</h4><ul><li>这个问题的话上一个问题也提到过,讲下block的内存管理,ARC下的黄金法则就行。</li><li>这里说下swift里的内存管理:<br> delgate照样weak修饰,闭包前面用[weak self],swift里的新东西,unowned,举例,如果self在闭包被调用的时候可能为空,则用weak,反之亦然,如果为空时使用了unowned,程序会崩溃,类似访问了悬挂指针,在oc中类似于unsafe_unretained,类似assign修饰了oc对象,对象被销毁后,被unowned修饰的对象不会为空,但是unowned访问速度更快,因为weak需要unwarp后才能使用</li></ul><h4 id="内存管理的原则"><a href="#内存管理的原则" class="headerlink" title="内存管理的原则"></a>内存管理的原则</h4><ul><li>只要还有人在使用这个对象, 那么这个对象就不会被回收</li><li>只有你想使用这个对象, 那么就应该让这个对象的引用计数器加1</li><li>当你不想使用这个对象时, 应该让对象的引用计数器减1</li><li>谁创建, 就由谁来release <ul><li>如果你通过alloc, new, copy 来创建一个对象, 当你不想用这个对象的时候就必须调用release 或者autorelease 让引用计数器减1</li><li>不是你创建的就不用你负责 release</li></ul></li><li>谁retain 谁release <ul><li>只要你调用了retain ,无论这个对象如何生成,  都需要调用release</li></ul></li><li>总结:<br> 有加就应该有减, 曾让某个计数器加1, 就应该让其在最后减1</li></ul><h4 id="内存管理研究的对象"><a href="#内存管理研究的对象" class="headerlink" title="内存管理研究的对象:"></a>内存管理研究的对象:</h4><ul><li><code>野指针</code>:指针变量没有进行初始化或指向的空间已经被释放。<ul><li>使用野指针调用对象方法，会报异常，程序崩溃。</li><li>通常再调用完release方法后，把保存对象指针的地址清空，赋值为nil，找oc中没有空指针异常，所以[nil retain]调用方法不会有异常。</li></ul></li><li><code>内存泄露</code><ul><li>如 Person * person = [Person new]; (对象提前赋值nil或者清空)在栈区的person已经被释放, 而堆区new产生的对象还没有释放, 就会造成内存泄露</li><li>在MRC手动引用计数器模式下, 造成内存泄露的情况 <ol><li>没有配对释放，不符合内存管理原则</li><li>对象提前赋值nil或者清空，导致release不起作用。</li></ol></li></ul></li><li><code>僵尸对象</code> : 堆中已经被释放的对象(retainCount = 0)</li><li><code>空指针</code> : 指针赋值为空,nil</li></ul><h4 id="如何判断对象已经被销毁"><a href="#如何判断对象已经被销毁" class="headerlink" title="如何判断对象已经被销毁"></a>如何判断对象已经被销毁</h4><ul><li>重写dealloc方法，对象销毁时，会调用，重写时一定要[super dealloc]</li></ul><h4 id="retainCount-0，使用retain能否复活对象"><a href="#retainCount-0，使用retain能否复活对象" class="headerlink" title="retainCount = 0，使用retain能否复活对象"></a>retainCount = 0，使用retain能否复活对象</h4><ul><li>已经被释放的对象无法复活</li></ul><h4 id="对象与对象之间存在的关系"><a href="#对象与对象之间存在的关系" class="headerlink" title="对象与对象之间存在的关系"></a>对象与对象之间存在的关系</h4><ol><li>继承关系</li><li>组合关系（是一种强烈的包含关系）</li><li>依赖关系(对象作为方法参数传递)</li></ol><h4 id="对象的组合关系中，确保成员变量不被提前释放？"><a href="#对象的组合关系中，确保成员变量不被提前释放？" class="headerlink" title="对象的组合关系中，确保成员变量不被提前释放？"></a>对象的组合关系中，确保成员变量不被提前释放？</h4><ul><li>重写set方法，在set方法中，retain该对象。</li></ul><h4 id="成员变量的对象，在哪里配对释放？"><a href="#成员变量的对象，在哪里配对释放？" class="headerlink" title="成员变量的对象，在哪里配对释放？"></a>成员变量的对象，在哪里配对释放？</h4><ul><li>dealloc中释放</li></ul><h4 id="对象组合关系中，内存泄露有哪几种情况？"><a href="#对象组合关系中，内存泄露有哪几种情况？" class="headerlink" title="对象组合关系中，内存泄露有哪几种情况？"></a>对象组合关系中，内存泄露有哪几种情况？</h4><ul><li>set方法没有retain对象</li><li>没有release旧对象</li><li>没有判断向set方法中传入的是否为同一个对象</li></ul><h4 id="正确重写set方法"><a href="#正确重写set方法" class="headerlink" title="正确重写set方法"></a>正确重写set方法</h4><ul><li>判断是否为同一对象</li><li>release旧对象</li><li>retain新对象</li></ul><h4 id="分别描述内存管理要点、autorelease、release、NSAutoreleasePool-并说明autorelease是什么时候被release的-简述什么时候由你负责释放对象-什么时候不由你释放-NSAutoreleasePool-release-和-NSAutoreleasePool-drain-有什么区别"><a href="#分别描述内存管理要点、autorelease、release、NSAutoreleasePool-并说明autorelease是什么时候被release的-简述什么时候由你负责释放对象-什么时候不由你释放-NSAutoreleasePool-release-和-NSAutoreleasePool-drain-有什么区别" class="headerlink" title="分别描述内存管理要点、autorelease、release、NSAutoreleasePool?并说明autorelease是什么时候被release的?简述什么时候由你负责释放对象,什么时候不由你释放?[NSAutoreleasePool release]和[NSAutoreleasePool drain]有什么区别?"></a>分别描述内存管理要点、autorelease、release、NSAutoreleasePool?并说明autorelease是什么时候被release的?简述什么时候由你负责释放对象,什么时候不由你释放?[NSAutoreleasePool release]和[NSAutoreleasePool drain]有什么区别?</h4><ul><li>内存管理要点:Objective-C 使用引用计数机制(retainCount)来管理内存。</li><li>内存每被引用一次,该内存的引用计数+1,每被释放一次引 用计数-1。</li><li>当引用计数 = 0 的时候,调用该对象的 dealloc 方法,来彻底从内存中删除该对象。</li><li>alloc,allocWithZone,new(带初始化)时:该对象引用计数 +1;</li><li>retain:手动为该对象引用计数 +1;</li><li>copy:对象引用计数 +1;//注意copy的OC数据类型是否有mutable，如有为深拷贝，新对象计数为1，如果没有，为浅拷贝，计数+1</li><li>mutableCopy:生成一个新对象,新对象引用计数为 1;</li><li>release:手动为该对象引用计数 -1;</li><li>autorelease:把该对象放入自动释放池,当自动释放池释放时,其内的对象引用计数 -1。</li><li>NSAutoreleasePool: NSAutoreleasePool是通过接收对象向它发送的autorelease消息,记录该对象的release消息,当自动释放池被销毁时,会自动向池中的对象发送release消息。</li><li>autorelease 是在自动释放池被销毁,向池中的对象发送release<br> 只能释放自己拥有的对象。</li><li>区别是:在引用计数环境下(在不使用ARC情况下),两者基本一样,在GC(垃圾回收制)环境下,release 是一个no-op(无效操作),所以无论是不是GC都使用drain</li><li>面试中内存管理,release和autorelease的含义?这里尤其要强调下autorelease,它引申出自动释放池,也能引申出Run loop!</li></ul><h4 id="自动释放池是什么-如何工作"><a href="#自动释放池是什么-如何工作" class="headerlink" title="自动释放池是什么,如何工作 ?"></a>自动释放池是什么,如何工作 ?</h4><ul><li>什么是自动释放池：用来存储多个对象类型的指针变量</li><li>自动释放池对池内对象的作用：存入池内的对象，当自动释放池被销毁时，会对池内对象全部做一次release操作</li><li>对象如何加入池中：调用对象的autorelease方法</li><li>自动释放池能嵌套使用吗：能</li><li>自动释放池何时被销毁 ：简单的看，autorelease的”}”执行完以后。而实际情况是Autorelease对象是在当前的runloop迭代结束时释放的，而它能够释放的原因是系统在每个runloop迭代中都加入了自动释放池Push和Pop</li><li>多次调用对象的autorelease方法会导致：野指针异常</li><li>自动释放池的作用：将对象与自动释放池建立关系，池子内调用autorelease，在自动释放池销毁时销毁对象，延迟release销毁时间</li></ul><h4 id="自动释放池什么时候释放？"><a href="#自动释放池什么时候释放？" class="headerlink" title="自动释放池什么时候释放？"></a>自动释放池什么时候释放？</h4><ul><li>通过Observer监听RunLoop的状态，一旦监听到RunLoop即将进入睡眠等待状态，就释放自动释放池（kCFRunLoopBeforeWaiting）</li></ul><h4 id="iPhone-OS有没有垃圾回收-autorelease-和垃圾回收制-gc-有什么关系"><a href="#iPhone-OS有没有垃圾回收-autorelease-和垃圾回收制-gc-有什么关系" class="headerlink" title="iPhone OS有没有垃圾回收?autorelease 和垃圾回收制(gc)有什么关系?"></a>iPhone OS有没有垃圾回收?autorelease 和垃圾回收制(gc)有什么关系?</h4><ul><li>iOS 中没有垃圾回收。autorelease只是延迟释放,gc是每隔一段时间询问程序,看是否有无指针指向的对象,若有,就将它回收。他们两者没有什么关系。</li></ul><h4 id="ARC问题"><a href="#ARC问题" class="headerlink" title="ARC问题"></a>ARC问题</h4><ol><li>什么是arc机制：自动引用计数.</li><li>系统判断对象是否销毁的依据：指向对象的强指针是否被销毁</li><li>arc的本质：对retainCount计算，创建+1 清空指针 - 1 或者到达autoreleasepool的大括号-1</li><li>arc目的：不需要程序员关心retain和release操作.</li><li>如何解决arc机制下类的相互引用：.h文件中使用@class关键字声明一个类，两端不能都用强指针，一端用strong一端用weak</li></ol><h4 id="ARC通过什么方式帮助开发者管理内存？"><a href="#ARC通过什么方式帮助开发者管理内存？" class="headerlink" title="ARC通过什么方式帮助开发者管理内存？"></a>ARC通过什么方式帮助开发者管理内存？</h4><p>ARC相对于MRC，不是在编译时添加retain/release/autorelease这么简单。应该是编译期和运行期两部分共同帮助开发者管理内存。</p><ul><li>在编译期，ARC用的是更底层的C接口实现的retain/release/autorelease，这样做性能更好，也是为什么不能在ARC环境下手动retain/release/autorelease，同时对同一上下文的同一对象的成对retain/release操作进行优化（即忽略掉不必要的操作）</li><li>ARC也包含运行期组件，这个地方做的优化比较复杂，但也不能被忽略，手动去做未必优化得好，因此直接交给编译器来优化，相信苹果吧！</li></ul><h4 id="开发项目时你是怎么检查内存泄露"><a href="#开发项目时你是怎么检查内存泄露" class="headerlink" title="开发项目时你是怎么检查内存泄露"></a>开发项目时你是怎么检查内存泄露</h4><ul><li>静态分析 analyze</li><li>instruments工具里面有个leak 可以动态分析</li></ul><p>如果在block中多次使用 weakSelf的话，可以在block中先使用strongSelf，防止block执行时weakSelf被意外释放<br> 对于非ARC，将 <strong>weak 改用为 </strong>block 即可</p><h4 id="麻烦你设计个简单的图片内存缓存器（移除策略是一定要说的）"><a href="#麻烦你设计个简单的图片内存缓存器（移除策略是一定要说的）" class="headerlink" title="麻烦你设计个简单的图片内存缓存器（移除策略是一定要说的）"></a>麻烦你设计个简单的图片内存缓存器（移除策略是一定要说的）</h4><ul><li>内存缓存是个通用话题，每个平台都会涉及到。cache算法会影响到整个app的表现。候选人最好能谈下自己都了解哪些cache策略及各自的特点。</li><li>常见的有FIFO,LRU,LFU等等。由于NSCache的缓存策略不透明，一些app开发者会选择自己做一套cache机制，其实并不难。</li><li>FIFO : 新访问的数据插入FIFO队列尾部，数据在FIFO队列中顺序移动；淘汰FIFO队列头部的数据；</li><li>LRU : 新数据插入到链表头部；每当缓存数据命中，则将数据移到链表头部；当链表满的时候，将链表尾部的数据丢弃；</li><li>LFU : 新加入数据插入到队列尾部（因为引用计数为1）；队列中的数据被访问后，引用计数增加，队列重新排序；当需要淘汰数据时，将已经排序的列表最后的数据块删除；</li></ul><h4 id="常见的出现内存循环引用的场景有哪些？"><a href="#常见的出现内存循环引用的场景有哪些？" class="headerlink" title="常见的出现内存循环引用的场景有哪些？"></a>常见的出现内存循环引用的场景有哪些？</h4><ul><li><code>定时器（NSTimer）</code>：<ul><li>NSTimer经常会被作为某个类的成员变量，而NSTimer初始化时要指定self为target，容易造成循环引用（self-&gt;timer-&gt;self）。 另外，若timer一直处于validate的状态，则其引用计数将始终大于0，因此在不再使用定时器以后，应该先调用invalidate方法</li></ul></li><li><code>block的使用</code>：<ul><li>block在copy时都会对block内部用到的对象进行强引用(ARC)或者retainCount增1(非ARC)。在ARC与非ARC环境下对block使用不当都会引起循环引用问题， 一般表现为，某个类将block作为自己的属性变量，然后该类在block的方法体里面又使用了该类本身，简单说就是self.someBlock =Type var{[self dosomething];或者self.otherVar = XXX;或者_otherVar = …};出现循环的原因是：self-&gt;block-&gt;self或者self-&gt;block-&gt;_ivar（成员变量）</li></ul></li><li><code>代理（delegate）</code>：<ul><li>在委托问题上出现循环引用问题已经是老生常谈了，规避该问题的杀手锏也是简单到哭，一字诀：声明delegate时请用assign(MRC)或者weak(ARC)，千万别手贱玩一下retain或者strong，毕竟这基本逃不掉循环引用了！</li></ul></li></ul><h4 id="对象添加到通知中心中，当通知中心发通知时，这个对象却已经被释放了，可能会出现什么问题？"><a href="#对象添加到通知中心中，当通知中心发通知时，这个对象却已经被释放了，可能会出现什么问题？" class="headerlink" title="对象添加到通知中心中，当通知中心发通知时，这个对象却已经被释放了，可能会出现什么问题？"></a>对象添加到通知中心中，当通知中心发通知时，这个对象却已经被释放了，可能会出现什么问题？</h4><ul><li>其实这种只是考查对通知的简单应用。通知是多对多的关系，主要使用场景是跨模块传值。当某对象加入到通知中心后，若在对象被销毁前不将该对象从通知中心中移除，当发送通知时，就会造成崩溃。这是很常见的。所以，在添加到通知中心后，一定要在释放前移除。</li></ul><h4 id="ARC下不显式指定任何属性关键字时，默认的关键字都有哪些？"><a href="#ARC下不显式指定任何属性关键字时，默认的关键字都有哪些？" class="headerlink" title="ARC下不显式指定任何属性关键字时，默认的关键字都有哪些？"></a>ARC下不显式指定任何属性关键字时，默认的关键字都有哪些？</h4><ul><li>对于基本数据类型默认关键字是：atomic,readwrite,assign</li><li>对于普通的Objective-C对象：atomic,readwrite,strong</li></ul><h4 id="写一个便利构造器"><a href="#写一个便利构造器" class="headerlink" title="写一个便利构造器"></a>写一个便利构造器</h4><pre class=" language-objc"><code class="language-objc">+ (id)Person {Person *person=[Person alloc]init];return [person autorelease]; 备注:ARC时不用 autorelease}</code></pre><h4 id="写出下面程序段的输出结果"><a href="#写出下面程序段的输出结果" class="headerlink" title="写出下面程序段的输出结果"></a>写出下面程序段的输出结果</h4><pre class=" language-objc"><code class="language-objc">NSDictionary *dict = [NSDictionary dictionaryWithObject:@"a string value" forKey:@"akey"]; NSLog(@"%@", [dict objectForKey:@"akey"]);[dict release];打印输出 a string value,然后崩溃----原因:便利构造器创建的对象,之后的release,会造成过度释放</code></pre><h4 id="请写出以下代码的执行结果"><a href="#请写出以下代码的执行结果" class="headerlink" title="请写出以下代码的执行结果"></a>请写出以下代码的执行结果</h4><pre class=" language-objc"><code class="language-objc">NSString * name = [ [ NSString alloc] init ];name = @”Habb”;[ name release];打印输出结果是: Habb,在[name release]前后打印均有输出结果 ---会造成内存泄露---原先指向的区域变成了野指针,之后的释放,不能释放之前创建的区域</code></pre><h4 id="写出方法获取iOS内存使用情况？"><a href="#写出方法获取iOS内存使用情况？" class="headerlink" title="写出方法获取iOS内存使用情况？"></a>写出方法获取iOS内存使用情况？</h4><h4 id="iOS是如何管理内存的？-1"><a href="#iOS是如何管理内存的？-1" class="headerlink" title="iOS是如何管理内存的？"></a>iOS是如何管理内存的？</h4><p>我相信很多人的回答是内存管理的黄金法则，其实如果我是面试官，我想要的答案不是这样的。我希望的回答是工作中如何处理内存管理的。<br> 参考答案：</p><ul><li><p>Block内存管理：由于使用block很容易造成循环引用，因此一定要小心内存管理问题。最好在基类controller下重写dealloc，加一句打印日志，表示类可以得到释放。如果出现无打印信息，说明这个类一直得不到释放，表明很有可能是使用block的地方出现循环引用了。对于block中需要引用外部controller的属性或者成员变量时，一定要使用弱引用，特别是成员变量像_testId这样的，很多人都没有使用弱引用，导致内存得不到释放。</p></li><li><p>对于普通所创建的对象，因为现在都是ARC项目，所以记住内存管理的黄金法则就可以解决。</p></li></ul><h4 id="很多内置的类，如tableview的delegate的属性是assign不是retain？"><a href="#很多内置的类，如tableview的delegate的属性是assign不是retain？" class="headerlink" title="很多内置的类，如tableview的delegate的属性是assign不是retain？"></a>很多内置的类，如tableview的delegate的属性是assign不是retain？</h4><ul><li>tableview的代理一般都是它所属的控制器，控制器会对它内部的view进行一次retain操作，而tableview对代理控制器也进行一次retain操作，就会出现循环引用问题。</li></ul>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题4--Objective-C</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%984-Objective-C/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%984-Objective-C/</url>
      <content type="html"><![CDATA[<p>面试笔试都是必考语法知识的。请认真复习和深入研究OC。</p><h4 id="方法和选择器有何不同？-Difference-between-method-and-selector"><a href="#方法和选择器有何不同？-Difference-between-method-and-selector" class="headerlink" title="方法和选择器有何不同？(Difference between method and selector?)"></a>方法和选择器有何不同？(Difference between method and selector?)</h4><ul><li>selector是一个方法的名字，method是一个组合体，包含了名字和实现.</li></ul><h4 id="Core-Foundation的内存管理"><a href="#Core-Foundation的内存管理" class="headerlink" title="Core Foundation的内存管理"></a>Core Foundation的内存管理</h4><ul><li>凡是带有Create、Copy、Retain等字眼的函数，创建出来的对象，都需要在最后做一次release</li><li>比如CFRunLoopObserverCreate release函数：CFRelease(对象);</li></ul><h4 id="malloc和New的区别"><a href="#malloc和New的区别" class="headerlink" title="malloc和New的区别"></a>malloc和New的区别</h4><ul><li>new 是c++中的操作符，malloc是c 中的一个函数</li><li>new 不止是分配内存，而且会调用类的构造函数，同理delete会调用类的析构函数，而malloc则只分配内存，不会进行初始化类成员的工作，同样free也不会调用析构函数</li><li>内存泄漏对于malloc或者new都可以检查出来的，区别在于new可以指明是那个文件的那一行，  而malloc没有这些信息。</li><li>new 和 malloc效率比较</li><li>new可以认为是malloc加构造函数的执行。</li><li>new出来的指针是直接带类型信息的。</li></ul><h4 id="你是否接触过OC中的反射机制？简单聊一下概念和使用"><a href="#你是否接触过OC中的反射机制？简单聊一下概念和使用" class="headerlink" title="你是否接触过OC中的反射机制？简单聊一下概念和使用"></a>你是否接触过OC中的反射机制？简单聊一下概念和使用</h4><ul><li>class反射</li><li>通过类名的字符串形式实例化对象</li></ul><pre class=" language-objc"><code class="language-objc">   Class class NSClassFromString@(@"student");   Student *stu = [[class alloc ]init];</code></pre><ul><li><p>将类名变为字符串</p><pre class=" language-objc"><code class="language-objc"> Class class  =[Student class]; NSString *className = NSStringFromClass(class);</code></pre></li><li><p>SEL的反射</p></li><li><p>通过方法的字符串形式实例化方法</p><pre class=" language-objc"><code class="language-objc"> SEL selector  = NSSelectorFromClass(@"setName"); [stu performSelector:selector withObject:@"Mike"];</code></pre></li><li><p>将方法变成字符串</p><pre class=" language-objc"><code class="language-objc">NSStringFomrSelector(@selector*(setName:))</code></pre></li></ul><h4 id="什么是SEL-如何声明一个SEL-通过那些方法能够-调用SEL包装起来的方法"><a href="#什么是SEL-如何声明一个SEL-通过那些方法能够-调用SEL包装起来的方法" class="headerlink" title="什么是SEL?如何声明一个SEL?通过那些方法能够,调用SEL包装起来的方法?"></a>什么是SEL?如何声明一个SEL?通过那些方法能够,调用SEL包装起来的方法?</h4><ul><li>SEL就是对方法的一种包装。包装的SEL类型数据它对应相应的方法地址，找到方法地址就可以调用方法。在内存中每个类的方法都存储在类对象中，每个方法都有一个与之对应的SEL类型的数据，根据一个SEL数据就可以找到对应的方法地址，进而调用方法。</li></ul><pre class=" language-objc"><code class="language-objc">SEL s1 = @selector(test1); // 将test1方法包装成SEL对象SEL s2 = NSSelectorFromString(@"test1"); // 将一个字符串方法转换成为SEL对象</code></pre><ul><li>调用方法有两种方式：</li><li>1.直接通过方法名来调用 [person text]</li><li><p>2.间接的通过SEL数据来调用  </p><pre class=" language-objc"><code class="language-objc">SEL aaa = @selector(text); [person performSelector:aaa];</code></pre><h4 id="协议中是什么意思-子类继承了父类-那么子类会遵守父类中遵守的协议吗-协议中能够定义成员变量-如何约束一个对象类型的变量要存储的地址是遵守一个协议对象"><a href="#协议中是什么意思-子类继承了父类-那么子类会遵守父类中遵守的协议吗-协议中能够定义成员变量-如何约束一个对象类型的变量要存储的地址是遵守一个协议对象" class="headerlink" title="协议中是什么意思?子类继承了父类,那么子类会遵守父类中遵守的协议吗?协议中能够定义成员变量?如何约束一个对象类型的变量要存储的地址是遵守一个协议对象?"></a>协议中<nsobject>是什么意思?子类继承了父类,那么子类会遵守父类中遵守的协议吗?协议中能够定义成员变量?如何约束一个对象类型的变量要存储的地址是遵守一个协议对象?</nsobject></h4></li><li><p>遵守NSObject协议</p></li><li>会</li><li>能，但是只在头文件中声明，编译器是不会自动生成实例变量的。需要自己处理getter和setter方法</li><li>id<xxx></xxx></li></ul><h4 id="NS-CF-CG-CA-UI这些前缀分别是什么含义"><a href="#NS-CF-CG-CA-UI这些前缀分别是什么含义" class="headerlink" title="NS/CF/CG/CA/UI这些前缀分别是什么含义"></a>NS/CF/CG/CA/UI这些前缀分别是什么含义</h4><ul><li>函数归属于属于cocoa Fundation框架</li><li>函数归属于属于core Fundation框架</li><li>函数归属于属于CoreGraphics.frameworks框架</li><li>函数归属于属于CoreAnimation.frameworks框架</li><li>函数归属于属于UIkit框架</li></ul><h4 id="面向对象都有哪些特征以及你对这些特征的理解。"><a href="#面向对象都有哪些特征以及你对这些特征的理解。" class="headerlink" title="面向对象都有哪些特征以及你对这些特征的理解。"></a>面向对象都有哪些特征以及你对这些特征的理解。</h4><ul><li><p><code>继承</code>：继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。 继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段。</p></li><li><p><code>封装</code>：封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口。</p></li><li><p><code>多态性</code> ：多态性是指允许不同子类型的对象对同一消息作出不同的响应。简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。多态性分为编译时的多态性和运行时的多态性。方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）。<br>运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：</p><ul><li>方法重写（子类继承父类并重写父类中已有的或抽象的方法）；</li><li>对象造型（用父类型引用引用子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。</li></ul></li><li><p><code>抽象</code>：抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。</p></li></ul><h4 id="我们说的Objective-C是动态运行时语言是什么意思-When-we-call-objective-c-is-runtime-language-what-does-it-mean"><a href="#我们说的Objective-C是动态运行时语言是什么意思-When-we-call-objective-c-is-runtime-language-what-does-it-mean" class="headerlink" title="我们说的Objective-C是动态运行时语言是什么意思? (When we call objective c is runtime language what does it mean?)"></a>我们说的Objective-C是动态运行时语言是什么意思? (When we call objective c is runtime language what does it mean?)</h4><ul><li>主要是将数据类型的确定由编译时,推迟到了运行时。这个问题其实浅涉及到两个概念,运行时和多态。</li><li>简单来说, 运行时机制使我们直到运行时才去决定一个对象的类别,以及调用该类别对象指定方法。</li><li>多态:不同对象以自己的方式响应相同的消息的能力叫做多态。</li><li>意思就是假设生物类(life)都拥有一个相同的方法-eat;那人类属于生物,猪也属于生物,都继承了life后,实现各自的eat,但是调用是我们只需调用各自的eat方法。也就是不同的对象以自己的方式响应了相同的消 息(响应了eat这个选择器)。因此也可以说,运行时机制是多态的基础.</li></ul><h4 id="readwrite-readonly-assign-retain-copy-nonatomic属性的作用"><a href="#readwrite-readonly-assign-retain-copy-nonatomic属性的作用" class="headerlink" title="readwrite, readonly, assign, retain, copy, nonatomic属性的作用?"></a>readwrite, readonly, assign, retain, copy, nonatomic属性的作用?</h4><ul><li><p><code>readwrite</code> 是可读可写特性;需要生成getter方法和setter方法;</p></li><li><p><code>readonly</code> 是只读特性 只会生成getter方法 不会生成setter方法 ,不希望属性在类外改变;</p></li><li><p><code>assign</code> 是赋值特性,setter方法将传入参数赋值给实例变量;仅设置变量时; assign用于简单数据类型,如NSInteger,double,bool;</p></li><li><p><code>retain</code> 表示持有特性,setter方法将传入参数先保留,再赋值,传入参数的引用计数retaincount会+1;</p></li><li><p><code>copy</code> 表示赋值特性,setter方法将传入对象复制一份;需要完全一份新的变量时;</p></li><li><p><code>nonatomic</code> 非原子操作,决定编译器生成的setter getter是否是原子操作;</p></li><li><p><code>atomic</code> 表示多线程安全,一般使用 nonatomic。</p></li></ul><h4 id="简述NotificationCenter、KVC、KVO、Delegate-并说明它们之间的区别-重点"><a href="#简述NotificationCenter、KVC、KVO、Delegate-并说明它们之间的区别-重点" class="headerlink" title="简述NotificationCenter、KVC、KVO、Delegate?并说明它们之间的区别?(重点)"></a>简述NotificationCenter、KVC、KVO、Delegate?并说明它们之间的区别?(重点)</h4><ul><li><code>KVO</code>（Key-Value- Observing）：一对多, 观察者模式,键值观察机制，它提供了观察某一属性变化的方法，极大简化了代码。</li><li><code>KVC</code> (Key-Value-Coding)：是键值编码, 一个对象在调用setValue的时候，<ul><li>检查是否存在相应key的set方法，存在就调用set方法。</li><li>set方法不存在，就查找_key的成员变量是否存在，存在就直接赋值。</li><li>如果_key没找到，就查找相同名称的key，存在就赋值。</li><li>如果没有就调用valueForUndefinedkey和setValue：forUndefinedKey。</li></ul></li><li><p><code>Delegate</code>: 通常发送者和接收者的关系是直接的一对一的关系。</p><ul><li>代理的目的是改变或传递控制链。允许一个类在某些特定时刻通知到其他类，而不需要获取到那些类的指针。</li><li>可以减少框架复杂度。消息的发送者(sender)告知接收者(receiver)某个事件将要发生，delegate同意然然后发送者响应事件，delegate机制使得接收者可以改变发送者的行为。</li></ul></li><li><p><code>Notification</code>: 观察者模式, 通常发送者和接收者的关系是间接的多对多关系。 消息的发送者告知接收者事件已经发生或者将要发送，仅此而已，接收者并不能反过来影响发送者的行为。</p></li><li><p>区别</p><ul><li>效率肯定是delegate比NSNotification高。</li><li>delegate方法比notification更加直接，需要关注返回值，所以delegate方法往往包含should这个很传神的词。相反的，notification最大的特色就是不关心结果。所以notification往往用did这个词汇。</li><li>两个模块之间联系不是很紧密，就用notification传值，例如多线程之间传值用notificaiton。</li><li>delegate只是一种较为简单的回调，且主要用在一个模块中，例如底层功能完成了，需要把一些值传到上层去，就事先把上层的函数通过delegate传到底层，然后在底层call这个delegate，它们都在一个模块中，完成一个功能，例如说 NavgationController 从 B 界面到A 点返回按钮 (调用popViewController方法) 可以用delegate比较好。</li></ul></li></ul><h4 id="懒加载-What-is-lazy-loading"><a href="#懒加载-What-is-lazy-loading" class="headerlink" title="懒加载(What is lazy loading ?)"></a>懒加载(What is lazy loading ?)</h4><ul><li>就是懒加载,只在用到的时候才去初始化。也可以理解成延时加载。我觉得最好也最简单的一个列子就是tableView中图片的加载显示了, 一个延时加载, 避免内存过高,一个异步加载,避免线程堵塞提高用户体验</li></ul><h4 id="OC有多继承吗-没有的话可以用什么方法替代"><a href="#OC有多继承吗-没有的话可以用什么方法替代" class="headerlink" title="OC有多继承吗?没有的话可以用什么方法替代?"></a>OC有多继承吗?没有的话可以用什么方法替代?</h4><ul><li>多继承即一个子类可以有多个父类,它继承了多个父类的特性。</li><li>Object-c的类没有多继承,只支持单继承,如果要实现多继承的话,可以通过类别和协议的方式来实现。</li><li>protocol（协议）可以实现多个接口,通过实现多个接口可以完成多继承;</li><li>Category（类别）一般使用分类,用Category去重写类的方法,仅对本Category有效,不会影响到其他类与原有类的关系。</li></ul><h4 id="分别描述类别-categories-和延展-extensions-是什么-以及两者的区别-继承和类别在实现中有何区别-为什么Category只能为对象添加方法-却不能添加成员变量"><a href="#分别描述类别-categories-和延展-extensions-是什么-以及两者的区别-继承和类别在实现中有何区别-为什么Category只能为对象添加方法-却不能添加成员变量" class="headerlink" title="分别描述类别(categories)和延展(extensions)是什么?以及两者的区别?继承和类别在实现中有何区别?为什么Category只能为对象添加方法,却不能添加成员变量?"></a>分别描述类别(categories)和延展(extensions)是什么?以及两者的区别?继承和类别在实现中有何区别?为什么Category只能为对象添加方法,却不能添加成员变量?</h4><ul><li>类别: 在没有原类.m文件的基础上,给该类添加方法;</li><li>延展:一种特殊形式的类别,主要在一个类的.m文件里声明和实现延展的作用,就是给某类添加私有方法或是私有变量。</li><li>两个的区别: <ul><li>延展可以添加属性并且它添加的方法是必须要实现的。延展可以认为是一个私有的类目。</li><li>类别可以在不知道,不改变原来代码的情况下往里面添加新的方法,只能添加,不能删除修改。</li><li>并且如果类别和原来类中的方法产生名称冲突,则类别将覆盖原来的方法,因为类别具有更高的优先级。</li></ul></li><li>继承可以增加，修改删除方法，添加属性。</li><li>Category只能为对象添加方法,却不能添加成员变量的原因:如果可以添加成员变量,添加的成员变量没有办法初始化</li></ul><h4 id="Objective-C有私有方法么-私有变量呢-如多没有的话-有没有什么代替的方法"><a href="#Objective-C有私有方法么-私有变量呢-如多没有的话-有没有什么代替的方法" class="headerlink" title="Objective-C有私有方法么?私有变量呢?如多没有的话,有没有什么代替的方法?"></a>Objective-C有私有方法么?私有变量呢?如多没有的话,有没有什么代替的方法?</h4><ul><li>objective-c类里面的方法只有两种,静态方法和实例方法.但是可以通过把方法的声明和定义都放在.m文件中来实现一个表面上的私有方法。有私有变量,可以通过@private来修饰,或者把声明放到.m文件中。在Objective‐C中,所有实例变量默认都是私有的, 所有实例方法默认都是公有的</li></ul><h4 id="include与-import的区别-import与-class的区别"><a href="#include与-import的区别-import与-class的区别" class="headerlink" title="#include与#import的区别? #import与 @class的区别?"></a><code>#include</code>与<code>#import</code>的区别? <code>#import</code>与 <code>@class</code>的区别?</h4><ul><li><p><code>#import</code>指令是Object-C针对<code></code>#include的改进版本，<code>#import</code>确保引用的文件只会被引用一次，这样你就不会陷入递归包含的问题中。</p></li><li><p><code># impor</code>与<code>@class</code>二者的区别在于：</p><ul><li><p><code>#import</code>会链入该头文件的全部信息，包括实例变量和方法等；而<code>@class</code>只是告诉编译器，其后面声明的名称是类的名称，至于这些类是如何定义的，暂时不用考虑。</p></li><li><p>在头文件中一般使用<code>@class</code>来声明这个名称是类的名称,不需要知道其内部的实体变量和方法.</p></li><li><p>而在实现类里面，因为会用到这个引用类的内部的实体变量和方法，所以需要使用<code>#import</code>来包含这个被引用类的头文件。</p></li><li><p>在编译效率方面，如果你有100个头文件都<code>#import</code>了同一个头文件，或者这些文件是依次引用的，如A–&gt;B, B–&gt;C, C–&gt;D这样的引用关系。当最开始的那个头文件有变化的话，后面所有引用它的类都需要重新编译，如果你的类有很多的话，这将耗费大量的时间。而是用<code>@class</code>则不会。</p></li><li><p>如果有循环依赖关系，如:A–&gt;B, B–&gt;A这样的相互依赖关系，如果使用<code>#import</code>来相互包含，那么就会出现编译错误，如果使用<code>@class</code>在两个类的头文件中相互声明，则不会有编译错误出现。</p></li></ul></li></ul><h4 id="浅复制-拷贝-和深复制的区别-Difference-between-shallow-copy-and-deep-copy"><a href="#浅复制-拷贝-和深复制的区别-Difference-between-shallow-copy-and-deep-copy" class="headerlink" title="浅复制(拷贝)和深复制的区别? (Difference between shallow copy and deep copy?)"></a>浅复制(拷贝)和深复制的区别? (Difference between shallow copy and deep copy?)</h4><ul><li>浅复制(copy)：只复制指向对象的指针，而不复制引用对象本身。</li><li>深复制(mutableCopy)：复制引用对象本身。深复制就好理解了,内存中存在了两份独立对象本身, 当修改A时,A_copy不变。</li></ul><h4 id="类变量的-protected-private-public-package声明各有什么含义"><a href="#类变量的-protected-private-public-package声明各有什么含义" class="headerlink" title="类变量的@protected,@private,@public,@package声明各有什么含义?"></a>类变量的@protected,@private,@public,@package声明各有什么含义?</h4><p>变量的作用域不同。</p><ul><li>@protected 该类和子类中访问，是默认的;</li><li>@private 只能在本类中访问;</li><li>@public 任何地方都能访问;</li><li>@package 本包内使用，跨包不可以</li></ul><h4 id="Objective-C与C、C-之间的联系和区别？"><a href="#Objective-C与C、C-之间的联系和区别？" class="headerlink" title="Objective-C与C、C+++之间的联系和区别？"></a>Objective-C与C、C+++之间的联系和区别？</h4><ul><li>Objective-C和C++都是C的面向对象的超集。</li><li>Object与C++的区别主要点：Objective-C是完全动态的，支持在运行时动态类型决议(dynamic typing)，动态绑定(dynamic binding)以及动态装载(dynamic loading)；而C++是部分动态的，编译时静态绑定，通过嵌入类(多重继承)和虚函数(虚表)来模拟实现。</li><li>Objective-C 在语言层次上支持动态消息转发，其消息发送语法为 [object function]； 而且C++ 为 object-&gt;function()。 两者的语义也不同，在 Objective-C 里是说发送消息到一个对象上，至于这个对象能不能响应消息以及是响应还是转发消息都不会 crash； 而在 C++ 里是说对象进行了某个操作，如果对象没有这个操作的话，要么编译会报错(静态绑定)，要么程序会 crash 掉的(动态绑定)。</li></ul><h4 id="目标-动作机制"><a href="#目标-动作机制" class="headerlink" title="目标-动作机制"></a>目标-动作机制</h4><ul><li>目标是动作消息的接收者。一个控件，或者更为常见的是它的单元，以插座变量的形式保有其动作消息的目标。</li><li>动作是控件发送给目标的消息，或者从目标的角度看，它是目标为了响应动作而实现的方法. 程序需要某些机制来进行事件和指令的翻译。这个机制就是目标-动作机制。</li></ul><h4 id="Objective-C优点和缺点"><a href="#Objective-C优点和缺点" class="headerlink" title="Objective-C优点和缺点"></a>Objective-C优点和缺点</h4><ul><li>优点:1.Cateogies 2.Posing 3.动态识别 4.指标计算 5.弹性讯息传递 6.不是一个过度复杂的C衍生语言 7.Objective-C与C++可混合编程</li><li>缺点:1.不支持命名空間 2.不支持运算符重载 3.不支持多重继承 4.使用动态运行时类型,所有的方法都是函数调用,所以很多编译时优化方法都用不到。(如内联函数等),性能低劣。</li></ul><h4 id="C语言的函数调用和oc的消息机制有什么区别"><a href="#C语言的函数调用和oc的消息机制有什么区别" class="headerlink" title="C语言的函数调用和oc的消息机制有什么区别?"></a>C语言的函数调用和oc的消息机制有什么区别?</h4><ul><li>对于C语言，函数的调用在编译的时候会决定调用哪个函数。编译完成之后直接顺序执行。</li><li>OC的函数调用成为消息发送。属于动态调用过程。在编译的时候并不能决定真正调用哪个函数（事实证明，在编译阶段，OC可以调用任何函数，即使这个函数并未实现，只要申明过就不会报错。而C语言在编译阶段就会报错）。只有在真正运行的时候才会根据函数的名称找到对应的函数来调用。</li></ul><h4 id="什么是谓词"><a href="#什么是谓词" class="headerlink" title="什么是谓词"></a>什么是谓词</h4><p>谓词就是通过NSPredicate给定的逻辑条件作为约束条件，完成对数据的筛选。</p><ul><li><p>定义谓词对象，谓词对象中包含了过滤条件</p><pre class=" language-objc"><code class="language-objc">NSPredicate *predicate = [NSPredicate predicateWithFormat:@"age<%d",30];</code></pre></li><li><p>使用谓词条件过滤数组中的元素，过滤之后返回查询的结果</p><pre class=" language-objc"><code class="language-objc">NSArray *array = [persons filteredArrayUsingPredicate:predicate];</code></pre></li><li><p>可以使用&amp;&amp;进行多条件过滤</p><pre class=" language-objc"><code class="language-objc">predicate = [NSPredicate predicateWithFormat:@"name='1' && age>40"];array = [persons filteredArrayUsingPredicate:predicate];</code></pre></li><li><p>包含语句的使用</p><pre class=" language-objc"><code class="language-objc">predicate = [NSPredicate predicateWithFormat:@"[self.name](https://link.jianshu.com?t=http://self.name) IN {'1','2','4'} || self.age IN{30,40}"];</code></pre></li><li><p>指定字符开头和指定字符结尾，是否包含指定字符</p></li><li><p>name以a开头的</p><pre class=" language-objc"><code class="language-objc">predicate = [NSPredicate predicateWithFormat:@"name BEGINSWITH 'a'"];</code></pre></li><li><p>name以ba结尾的</p><pre class=" language-objc"><code class="language-objc">predicate = [NSPredicate predicateWithFormat:@"name ENDSWITH 'ba'"];</code></pre></li><li><p>name中包含字符a的</p><pre class=" language-objc"><code class="language-objc">predicate = [NSPredicate predicateWithFormat:@"name CONTAINS 'a'"];</code></pre></li><li><p>like进行匹配多个字符</p></li><li><p>name中只要有s字符就满足条件</p><pre class=" language-objc"><code class="language-objc">predicate = [NSPredicate predicateWithFormat:@"name like '*s*'"];</code></pre></li><li><p>?代表一个字符，下面的查询条件是：name中第二个字符是s的</p><pre class=" language-objc"><code class="language-objc">predicate = [NSPredicate predicateWithFormat:@"name like '?s'"];</code></pre></li></ul><h4 id="C与OC混用"><a href="#C与OC混用" class="headerlink" title="C与OC混用"></a>C与OC混用</h4><p>处理.m可以识别c和oc，.mm可以识别c c++ oc 但是cpp只能用c/c++</p><h4 id="atomic和nonatomic的区别"><a href="#atomic和nonatomic的区别" class="headerlink" title="atomic和nonatomic的区别"></a>atomic和nonatomic的区别</h4><ul><li>atomic提供多线程安全，防止读写未完成的时候被另外一个线程读写，造成数据错误。</li><li>nonatomic在自己管理内存的环境中，解析的访问器保留并自动释放返回值，若指定了nonatomic，那么访问器只是简单的返回这个值。</li></ul><h4 id="常见的oc数据类型哪些，和c的基本类型有啥区别"><a href="#常见的oc数据类型哪些，和c的基本类型有啥区别" class="headerlink" title="常见的oc数据类型哪些，和c的基本类型有啥区别"></a>常见的oc数据类型哪些，和c的基本类型有啥区别</h4><ul><li>常见的：NSInteger CGFloat NSString NSNumber NSArray NSDate</li><li>NSInteger根据32或者64位系统决定本身是int还是long</li><li>CGFloat根据32或者64位系统决定本身是float还是double</li><li>NSString NSNumber NSArray NSDate都是指针类型的对象，在堆中分配内存，c语言中的char int 等都是在栈中分配空间</li></ul><h4 id="id和nil代表什么"><a href="#id和nil代表什么" class="headerlink" title="id和nil代表什么"></a>id和nil代表什么</h4><ul><li>id类型的指针可以指向任何OC对象</li><li>nil代表空值（空指针的值，0）</li></ul><h4 id="nil和NULL的区别？"><a href="#nil和NULL的区别？" class="headerlink" title="nil和NULL的区别？"></a>nil和NULL的区别？</h4><ul><li>从oc的官方语法上看，nil表示对象的指针 即对象的引用为空</li><li>null表示指向基础数据类型变量 即c语言变量的指针为空</li><li>在非arc中 两个空可以互换，但是在arc中 普通指针和对象引用被严格限制，不能互换</li></ul><h4 id="nil、Nil、NULL和NSNull区别"><a href="#nil、Nil、NULL和NSNull区别" class="headerlink" title="nil、Nil、NULL和NSNull区别"></a>nil、Nil、NULL和NSNull区别</h4><ul><li><p>nil和C语言的NULL相同，在objc/objc.h中定义。nil表示Objective-C对象的值为空。在C语言中，指针的空值用NULL表示。在Objective-C中，nil对象调用任何方法表示什么也不执行，也不会崩溃。</p></li><li><p>Nil:那么对于我们Objective-C开发来说，Nil也就代表((void *)0)。但是它是用于代表空类的. 比如：Class myClass = Nil;</p></li><li><p>NULL: 在C语言中，NULL是无类型的，只是一个宏，它代表空. 这就是在C/C++中的空指针。对于我们Objective-C开发来说，NULL就表示((void*)0).</p></li><li><p>NSNull:NSNull是继承于NSObject的类型。它是很特殊的类，它表示是空，什么也不存储，但是它却是对象，只是一个占位对象。使用场景就不一样了，比如说服务端接口中让我们在值为空时，传空。NSDictionry *parameters = @{@”arg1” : @”value1”,@”arg2” : arg2.isEmpty ? [NSNull null] : arg2};</p></li><li>NULL、nil、Nil这三者对于Objective-C中值是一样的，都是(void *)0，那么为什么要区分呢？又与NSNull之间有什么区别：</li><li>NULL是宏，是对于C语言指针而使用的，表示空指针</li><li>nil是宏，是对于Objective-C中的对象而使用的，表示对象为空</li><li>Nil是宏，是对于Objective-C中的类而使用的，表示类指向空</li><li>NSNull是类类型，是用于表示空的占位对象，与JS或者服务端的null类似的含意</li></ul><h4 id="向一个nil对象发送消息会发生什么？"><a href="#向一个nil对象发送消息会发生什么？" class="headerlink" title="向一个nil对象发送消息会发生什么？"></a>向一个nil对象发送消息会发生什么？</h4><ul><li>向nil发送消息是完全有效的——只是在运行时不会有任何作用。</li><li>如果一个方法返回值是一个对象，那么发送给nil的消息将返回0(nil)</li><li>如果方法返回值为指针类型，其指针大小为小于或者等于sizeof(void*)，float，double，long double 或者long long的整型标量，发送给nil的消息将返回0。</li></ul><p>-如果方法返回值为结构体，正如在《Mac OS X ABI 函数调用指南》，发送给nil的消息将返回0。结构体中各个字段的值将都是0。其他的结构体数据类型将不是用0填充的。</p><ul><li>如果方法的返回值不是上述提到的几种情况，那么发送给nil的消息的返回值将是未定义的。</li></ul><h4 id="self-和self-gt-的区别"><a href="#self-和self-gt-的区别" class="headerlink" title="self.和self-&gt;的区别"></a>self.和self-&gt;的区别</h4><ul><li>self.是调用get或者set方法</li><li>self是当前本身，是一个指向当前对象的指针</li><li>self-&gt;是直接访问成员变量</li></ul><h4 id="类方法和实例方法的本质区别和联系"><a href="#类方法和实例方法的本质区别和联系" class="headerlink" title="类方法和实例方法的本质区别和联系"></a>类方法和实例方法的本质区别和联系</h4><table><thead><tr><th>类方法</th><th>实例方法</th></tr></thead><tbody><tr><td>属于类对象</td><td>属于实例对象</td></tr><tr><td>只能类对象调用</td><td>实例对象调用</td></tr><tr><td>self是类对象</td><td>self是实例对象</td></tr><tr><td>类方法可以调用其他类方法</td><td>实例方法可以调用实例方法</td></tr><tr><td>类方法不能访问成员变量</td><td>实例方法可以访问成员变量</td></tr><tr><td>类方法不能直接调用对象方法</td><td>实例方法可以调用类方法</td></tr></tbody></table><h4 id="block-weak修饰符区别"><a href="#block-weak修饰符区别" class="headerlink" title="_block/weak修饰符区别"></a>_block/weak修饰符区别</h4><ul><li>_block在arc和mrc环境下都能用，可以修饰对象，也能修饰基本数据类型</li><li>_weak只能在arc环境下使用，只能修饰对象(NSString)，不能修饰基本数据类型(int)</li><li>_block对象可以在block中重新赋值，_weak不行。</li></ul><h4 id="写一个NSString类的实现"><a href="#写一个NSString类的实现" class="headerlink" title="写一个NSString类的实现"></a>写一个NSString类的实现</h4><pre class=" language-objc"><code class="language-objc">NSString *str = [[NSString alloc] initWithCString: nullTerminatedCString encoding:encoding];</code></pre><h4 id="为什么标准头文件都有类似以下的结构？"><a href="#为什么标准头文件都有类似以下的结构？" class="headerlink" title="为什么标准头文件都有类似以下的结构？"></a>为什么标准头文件都有类似以下的结构？</h4><pre class=" language-c"><code class="language-c"><span class="token macro property"># <span class="token directive keyword">ifndef</span> __INCvxWorksh</span><span class="token macro property"># <span class="token directive keyword">define</span> __INCvxWorksh</span><span class="token macro property"># <span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">{</span><span class="token macro property"># <span class="token directive keyword">endif</span></span><span class="token macro property"># <span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token punctuation">}</span><span class="token macro property"># <span class="token directive keyword">endif</span></span><span class="token macro property"># <span class="token directive keyword">endif</span></span></code></pre><p>显然，头文件中的编译宏 <code>#ifndef __INCvxWorksh、#define __INCvxWorksh、#endif</code> 的作用是防止该头文件被重复引用</p><h4 id="init和initwithobject区别（语法）？"><a href="#init和initwithobject区别（语法）？" class="headerlink" title="init和initwithobject区别（语法）？"></a>init和initwithobject区别（语法）？</h4><ul><li>后者给属性赋值</li></ul><h4 id="property的本质是什么？ivar、getter、setter是如何生成并添加到这个类中的？"><a href="#property的本质是什么？ivar、getter、setter是如何生成并添加到这个类中的？" class="headerlink" title="@property的本质是什么？ivar、getter、setter是如何生成并添加到这个类中的？"></a>@property的本质是什么？ivar、getter、setter是如何生成并添加到这个类中的？</h4><pre><code>@property的本质：@property = ivar（实例变量） + getter（取方法） + setter（存方法）“属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）ivar、getter、setter如何生成并添加到类中：这是编译器自动合成的，通过@synthesize关键字指定，若不指定，默认为@synthesize propertyName = _propertyName;若手动实现了getter/setter方法，则不会自动合成。现在编译器已经默认为我们添加@synthesize propertyName = _propertyName;因此不再需要手动添加了，除非你真的要改成员变量名。生成getter方法时，会判断当前属性名是否有_，比如声明属性为@property (nonatomic, copy) NSString *_name;那么所生成的成员变量名就会变成__name，如果我们要手动生成getter方法，就要判断是否以_开头了。不过，命名都要有规范，是不允许声明属性是使用_开头的，不规范的命名，在使用runtime时，会带来很多的不方便的。</code></pre><h4 id="这个写法会出什么问题：-property-copy-NSMutableArray-array"><a href="#这个写法会出什么问题：-property-copy-NSMutableArray-array" class="headerlink" title="这个写法会出什么问题：@property (copy) NSMutableArray *array;"></a>这个写法会出什么问题：@property (copy) NSMutableArray *array;</h4><ul><li>没有指明为nonatomic，因此就是atomic原子操作，会影响性能。该属性使用了同步锁，会在创建时生成一些额外的代码用于帮助编写多线程程序，这会带来性能问题，通过声明nonatomic可以节省这些虽然很小但是不必要额外开销。在我们的应用程序中，几乎都是使用nonatomic来声明的，因为使用atomic并不能保证绝对的线程安全，对于要绝对保证线程安全的操作，还需要使用更高级的方式来处理，比如NSSpinLock、@syncronized等</li><li>因为使用的是copy，所得到的实际是NSArray类型，它是不可变的，若在使用中使用了增、删、改操作，则会crash</li></ul><h4 id="protocol和category中如何使用-property"><a href="#protocol和category中如何使用-property" class="headerlink" title="@protocol和category中如何使用 @property"></a>@protocol和category中如何使用 @property</h4><p>•   在protocol中使用@property只会生成setter和getter方法声明，我们使用属性的目的是希望遵守我协议的对象能实现该属性<br>•   category使用@property也是只会生成setter和getter方法的声明，如果我们真的需要给category增加属性的实现，需要借助于运行时的两个函数：<br>•   objc_setAssociatedObject<br>•   objc_getAssociatedObject</p><h4 id="property中有哪些属性关键字？"><a href="#property中有哪些属性关键字？" class="headerlink" title="@property中有哪些属性关键字？"></a>@property中有哪些属性关键字？</h4><p>1.原子性 （atomic，nonatomic）<br>2.读写（readwrite, readonly）<br>3.内存管理（assign, strong, weak, unsafe_unretained,copy）<br>4.getter、setter</p><h4 id="isa指针问题"><a href="#isa指针问题" class="headerlink" title="isa指针问题"></a>isa指针问题</h4><ul><li>isa：是一个Class 类型的指针. 每个实例对象有个isa的指针,他指向对象的类，而Class里也有个isa的指针, 指向meteClass(元类)。元类保存了类方法的列表。当类方法被调用时，先会从本身查找类方法的实现，如果没有，元类会向他父类查找该方法。同时注意的是：元类（meteClass）也是类，它也是对象。元类也有isa指针,它的isa指针最终指向的是一个根元类(root meteClass).根元类的isa指针指向本身，这样形成了一个封闭的内循环。</li></ul><h4 id="如何访问并修改一个类的私有属性？"><a href="#如何访问并修改一个类的私有属性？" class="headerlink" title="如何访问并修改一个类的私有属性？"></a>如何访问并修改一个类的私有属性？</h4><ul><li>一种是通过KVC获取</li><li>通过runtime访问并修改私有属性</li></ul><h4 id="如何为-Class-定义一个对外只读对内可读写的属性"><a href="#如何为-Class-定义一个对外只读对内可读写的属性" class="headerlink" title="如何为 Class 定义一个对外只读对内可读写的属性?"></a>如何为 Class 定义一个对外只读对内可读写的属性?</h4><p>在头文件中将属性定义为readonly,在.m文件中将属性重新定义为readwrite</p><h4 id="Objective-C-中，meta-class-指的是什么？"><a href="#Objective-C-中，meta-class-指的是什么？" class="headerlink" title="Objective-C 中，meta-class 指的是什么？"></a>Objective-C 中，meta-class 指的是什么？</h4><p>meta-class 是 Class 对象的类,为这个Class类存储类方法,当一个类发送消息时,就去这个类对应的meta-class中查找那个消息,每个Class都有不同的meta-class,所有的meta-class都使用基类的meta-class(假如类继承NSObject,那么他所对应的meta-class也是NSObject)作为他们的类</p><h4 id="Objective-C-的class是如何实现的？Selector是如何被转化为-C-语言的函数调用的？"><a href="#Objective-C-的class是如何实现的？Selector是如何被转化为-C-语言的函数调用的？" class="headerlink" title="Objective-C 的class是如何实现的？Selector是如何被转化为 C 语言的函数调用的？"></a>Objective-C 的class是如何实现的？Selector是如何被转化为 C 语言的函数调用的？</h4><ul><li><p>当一个类被正确的编译过后，在这个编译成功的类里面，存在一个变量用于保存这个类的信息。我们可以通过[NSClassFromString]或[obj class]。这样的机制允许我们在程序执行的过程当中，可以Class来得到对象的类，也可以在程序执行的阶段动态的生成一个在编译阶段无法确定的一个对象。 （isa指针）</p></li><li><p>@selector()基本可以等同C语言的中函数指针,只不过C语言中，可以把函数名直接赋给一个函数指针，而Object-C的类不能直接应用函数指针，这样只能做一个@selector语法来取.</p><pre class=" language-objc"><code class="language-objc">@interface foo-(int)add:int val;@endSEL class_func ; //定义一个类方法指针class_func = @selector(add:int);</code></pre></li><li><p>@selector是查找当前类的方法，而[object @selector(方法名:方法参数..) ] ;是取object对应类的相应方法.</p></li><li><p>查找类方法时，除了方法名,方法参数也查询条件之一.</p></li><li><p>可以用字符串来找方法 SEL　变量名　=　NSSelectorFromString(方法名字的字符串);</p></li><li><p>可以运行中用SEL变量反向查出方法名字字符串。NSString　*变量名　=　NSStringFromSelector(SEL参数);</p></li><li><p>取到selector的值以后，执行seletor。 SEL变量的执行.用performSelecor方法来执行.<br> [对象　performSelector:SEL变量　withObject:参数1　withObject:参数2];</p></li></ul><h4 id="对于语句NSString-obj-NSData-alloc-init-，编译时和运行时obj分别是什么类型？"><a href="#对于语句NSString-obj-NSData-alloc-init-，编译时和运行时obj分别是什么类型？" class="headerlink" title="对于语句NSString *obj = [[NSData alloc] init]; ，编译时和运行时obj分别是什么类型？"></a>对于语句NSString *obj = [[NSData alloc] init]; ，编译时和运行时obj分别是什么类型？</h4><ul><li>编译时是NSString类型 ，运行时是NSData类型.</li></ul><h4 id="synthesize和-dynamic分别有什么作用？"><a href="#synthesize和-dynamic分别有什么作用？" class="headerlink" title="@synthesize和@dynamic分别有什么作用？"></a>@synthesize和@dynamic分别有什么作用？</h4><p>答:</p><ul><li>@property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是@syntheszie var = _var;</li><li>@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。</li><li>@dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 instance.var = someVar，由于缺 setter 方法会导致程序崩溃；或者当运行到 someVar = var 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。</li></ul><h4 id="NSString-的时候用copy和strong的区别？"><a href="#NSString-的时候用copy和strong的区别？" class="headerlink" title="NSString 的时候用copy和strong的区别？"></a>NSString 的时候用copy和strong的区别？</h4><pre><code>OC中NSString为不可变字符串的时候，用copy和strong都是只分配一次内存，但是如果用copy的时候，需要先判断字符串是否是不可变字符串，如果是不可变字符串，就不再分配空间，如果是可变字符串才分配空间。如果程序中用到NSString的地方特别多，每一次都要先进行判断就会耗费性能，影响用户体验，用strong就不会再进行判断，所以，不可变字符串可以直接用strong。</code></pre><h4 id="NSArray、NSSet、NSDictionary与NSMutableArray、NSMutableSet、NSMutableDictionary的特性和作用（遇到copy修饰产生的变化）"><a href="#NSArray、NSSet、NSDictionary与NSMutableArray、NSMutableSet、NSMutableDictionary的特性和作用（遇到copy修饰产生的变化）" class="headerlink" title="NSArray、NSSet、NSDictionary与NSMutableArray、NSMutableSet、NSMutableDictionary的特性和作用（遇到copy修饰产生的变化）"></a>NSArray、NSSet、NSDictionary与NSMutableArray、NSMutableSet、NSMutableDictionary的特性和作用（遇到copy修饰产生的变化）</h4><ul><li>特性：</li><li>NSArray表示不可变数组，是有序元素集，只能存储对象类型，可通过索引直接访问元素，而且元素类型可以不一样，但是不能进行增、删、改操作；NSMutableArray是可变数组，能进行增、删、改操作。通过索引查询值很快，但是插入、删除等效率很低。</li><li>NSSet表示不可变集合，具有确定性、互异性、无序性的特点，只能访问而不能修改集合；NSMutableSet表示可变集合，可以对集合进行增、删、改操作。集合通过值查询很快，插入、删除操作极快。</li><li><p>NSDictionary表示不可变字典，具有无序性的特点，每个key对应的值是唯一的，可通过key直接获取值；NSMutableDictionary表示可变字典，能对字典进行增、删、改操作。通过key查询值、插入、删除值都很快。</p></li><li><p>作用：</p><ul><li>数组用于处理一组有序的数据集，比如常用的列表的dataSource要求有序，可通过索引直接访问，效率高。</li><li>集合要求具有确定性、互异性、无序性，在iOS开发中是比较少使用到的，笔者也不清楚如何说明其作用</li><li>字典是键值对数据集，操作字典效率极高，时间复杂度为常量，但是值是无序的。在ios中，常见的JSON转字典，字典转模型就是其中一种应用。</li></ul></li></ul><h4 id="请把字符串2015-04-10格式化日期转为NSDate类型"><a href="#请把字符串2015-04-10格式化日期转为NSDate类型" class="headerlink" title="请把字符串2015-04-10格式化日期转为NSDate类型"></a>请把字符串2015-04-10格式化日期转为NSDate类型</h4><pre class=" language-objc"><code class="language-objc">NSString *timeStr = @"2015-04-10";NSDateFormatter *formatter = [[NSDateFormatter alloc] init];formatter.dateFormat = @"yyyy-MM-dd";formatter.timeZone = [NSTimeZone defaultTimeZone];NSDate *date = [formatter dateFromString:timeStr];// 2015-04-09 16:00:00 +0000NSLog(@"%@", date);</code></pre><h4 id="在一个对象的方法里：-self-name-object-和name-object有什么不同"><a href="#在一个对象的方法里：-self-name-object-和name-object有什么不同" class="headerlink" title="在一个对象的方法里：[self.name=@object] 和name=@object有什么不同"></a>在一个对象的方法里：<code>[self.name=@object]</code> 和<code>name=@object</code>有什么不同</h4><ul><li>这是老生常谈的话题了，实质上就是问setter方法赋值与成员变量赋值有什么不同。通过点语法<code>self.name</code>实质上就是 <code>[self setName:@object];</code>。而name这里是成员变量，直接赋值。<br> 一般来说，在对象的方法里成员变量和方法都是可以访问的，我们通常会重写Setter方法来执行某些额外的工作。比如说，外部传一个模型过来，那么我会直接重写Setter方法，当模型传过来时，也就是意味着数据发生了变化，那么视图也需要更新显示，则在赋值新模型的同时也去刷新UI。这样也不用再额外提供其他方法了。</li></ul><h4 id="怎样使用performSelector传入3个以上参数，其中一个为结构体"><a href="#怎样使用performSelector传入3个以上参数，其中一个为结构体" class="headerlink" title="怎样使用performSelector传入3个以上参数，其中一个为结构体"></a>怎样使用performSelector传入3个以上参数，其中一个为结构体</h4><pre class=" language-objc"><code class="language-objc">- (id)performSelector:(SEL)aSelector;- (id)performSelector:(SEL)aSelector withObject:(id)object;- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;</code></pre><p>因为系统提供的performSelector的api中，并没有提供三个参数。因此，我们只能传数组或者字典，但是数组或者字典只有存入对象类型，而结构体并不是对象类型，那么怎么办呢？<br> 没有办法，我们只能通过对象放入结构作为属性来传过去了：</p><pre class=" language-objc"><code class="language-objc">ypedef struct HYBStruct {  int a;  int b;} *my_struct;@interface HYBObject : NSObject@property (nonatomic, assign) my_struct arg3;@property (nonatomic, copy)  NSString *arg1;@property (nonatomic, copy) NSString *arg2;@end@implementation HYBObject// 在堆上分配的内存，我们要手动释放掉- (void)dealloc {  free(self.arg3);}@end</code></pre><p>测试：</p><pre class=" language-objc"><code class="language-objc">my_struct str = (my_struct)(malloc(sizeof(my_struct)));str->a = 1;str->b = 2;HYBObject *obj = [[HYBObject alloc] init];obj.arg1 = @"arg1";obj.arg2 = @"arg2";obj.arg3 = str;[self performSelector:@selector(call:) withObject:obj];// 在回调时得到正确的数据的- (void)call:(HYBObject *)obj {    NSLog(@"%d %d", obj.arg3->a, obj.arg3->b);}</code></pre><h4 id="objc中向一个对象发送消息-obj-foo-和objc-msgSend-函数之间有什么关系？"><a href="#objc中向一个对象发送消息-obj-foo-和objc-msgSend-函数之间有什么关系？" class="headerlink" title="objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？"></a>objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？</h4><p>实际上，编译器在编译时会转换成objc_msgSend，大概会像这样：</p><pre class=" language-objc"><code class="language-objc">((void (*)(id, SEL))(void)objc_msgSend)((id)obj, sel_registerName("foo"));</code></pre><p>也就是说，[obj foo];在objc动态编译时，会被转换为：objc_msgSend(obj, @selector(foo));这样的形式，但是需要根据具体的参数类型及返回值类型进行相应的类型转换。</p><h4 id="下面的代码输出什么？"><a href="#下面的代码输出什么？" class="headerlink" title="下面的代码输出什么？"></a>下面的代码输出什么？</h4><pre class=" language-objc"><code class="language-objc">@implementation Son : Father- (id)init {    self = [super init];    if (self) {        NSLog(@"%@", NSStringFromClass([self class]));        NSLog(@"%@", NSStringFromClass([super class]));    }    return self;}@end// 输出NSStringFromClass([self class]) = SonNSStringFromClass([super class]) = Son</code></pre><p>这个题目主要是考察关于Objective-C中对self和super的理解。我们都知道：self是类的隐藏参数，指向当前调用方法的这个类的实例。那super呢？<br>很多人会想当然的认为“super和self类似，应该是指向父类的指针吧！”。这是很普遍的一个误区。其实 super是一个 Magic Keyword，它本质是一个编译器标示符，和self 是指向的同一个消息接受者！他们两个的不同点在于：super会告诉编译器，调用class 这个方法时，要去父类的方法，而不是本类里的。</p><p>上面的例子不管调用[self class]还是[super class]，接受消息的对象都是当前 Son ＊xxx 这个对象。<br>当使用self调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；而当使用super时，则从父类的方法列表中开始找。然后调用父类的这个方法。</p><h4 id="若一个类有实例变量NSString-foo，调用setValue-forKey-时，可以以foo还是-foo作为key？"><a href="#若一个类有实例变量NSString-foo，调用setValue-forKey-时，可以以foo还是-foo作为key？" class="headerlink" title="若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？"></a>若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？</h4><ul><li>两者都可以。</li></ul><h4 id="什么时候使用NSMutableArray，什么时候使用NSArray"><a href="#什么时候使用NSMutableArray，什么时候使用NSArray" class="headerlink" title="什么时候使用NSMutableArray，什么时候使用NSArray?"></a>什么时候使用NSMutableArray，什么时候使用NSArray?</h4><ul><li>当数组在程序运行时，需要不断变化的，使用NSMutableArray，当数组在初始化后，便不再改变的，使用NSArray。需要指出的是，使用NSArray只表明的是该数组在运行时不发生改变，即不能往NSAarry的数组里新增和删除元素，但不表明其数组內的元素的内容不能发生改变。NSArray是线程安全的，NSMutableArray不是线程安全的，多线程使用到NSMutableArray需要注意。</li></ul><h4 id="类NSObject的那些方法经常被使用"><a href="#类NSObject的那些方法经常被使用" class="headerlink" title="类NSObject的那些方法经常被使用?"></a>类NSObject的那些方法经常被使用?</h4><ul><li>NSObject是Objetive-C的基类，其由NSObject类及一系列协议构成。</li><li>其中类方法alloc、class、 description 对象方法init、dealloc、– performSelector:withObject:afterDelay:等经常被使用</li></ul><h4 id="什么是简便构造方法"><a href="#什么是简便构造方法" class="headerlink" title="什么是简便构造方法?"></a>什么是简便构造方法?</h4><ul><li>简便构造方法一般由CocoaTouch框架提供，如NSNumber的<br><code>`</code>objc</li></ul><ul><li>numberWithBool: </li><li>numberWithChar: </li><li>numberWithDouble: </li><li>numberWithFloat: </li><li>numberWithInt:<br><code>`</code></li></ul><ul><li>Foundation下大部分类均有简便构造方法，我们可以通过简便构造方法，获得系统给我们创建好的对象，并且不需要手动释放。</li></ul><h4 id="什么是构造方法，使用构造方法有什么注意点。"><a href="#什么是构造方法，使用构造方法有什么注意点。" class="headerlink" title="什么是构造方法，使用构造方法有什么注意点。"></a>什么是构造方法，使用构造方法有什么注意点。</h4><p>什么是构造方法：构造方法是对象初始化并一个实例的方法。</p><p>构造方法有什么用： 一般在构造方法里 对类进行一些初始化操作<br> 注意点：方法开头必须以init开头，接下来名称要大写 例如 initWithName ，initLayout</p><h4 id="创建一个对象需要经过那三个步骤？"><a href="#创建一个对象需要经过那三个步骤？" class="headerlink" title="创建一个对象需要经过那三个步骤？"></a>创建一个对象需要经过那三个步骤？</h4><ul><li>开辟内存空间</li><li>初始化参数</li><li>返回内存地址值</li></ul><h4 id="Get方法的作用是什么？"><a href="#Get方法的作用是什么？" class="headerlink" title="Get方法的作用是什么？"></a>Get方法的作用是什么？</h4><p>Get方法的作用：为调用者返回对象内部的成员变量</p><h4 id="Set方法的作用是什么？Set方法的好处？"><a href="#Set方法的作用是什么？Set方法的好处？" class="headerlink" title="Set方法的作用是什么？Set方法的好处？"></a>Set方法的作用是什么？Set方法的好处？</h4><ul><li>Set方法的作用：为外界提供一个设置成员变量值的方法。</li><li>Set方法的好处： <ul><li>不让数据暴露在外，保证了数据的安全性</li><li>对设置的数据进行过滤</li></ul></li></ul><h4 id="结构体当中能定义oc对象吗？"><a href="#结构体当中能定义oc对象吗？" class="headerlink" title="结构体当中能定义oc对象吗？"></a>结构体当中能定义oc对象吗？</h4><p>不能, 因为结构体当中只能是类型的声明不能进行分配空间</p><h4 id="点语法本质是什么-写一个点语法的例子-并写上注释"><a href="#点语法本质是什么-写一个点语法的例子-并写上注释" class="headerlink" title="点语法本质是什么,写一个点语法的例子,并写上注释"></a>点语法本质是什么,写一个点语法的例子,并写上注释</h4><ul><li>点语法的本质是方法的调用，而不是访问成员变量，当使用点语法时，编译器会自动展开成相应的方法。切记点语法的本质是转换成相应的set和get方法，如果没有set和get方法，则不能使用点语法。</li><li><p>例如有一个Person类 通过@property定义了name和age属性,再提供了一个run方法。</p><pre class=" language-objc"><code class="language-objc">Person *person = [Person new];person.name=@”sk666”;//调用了person的setName方法int age = person.age;  //  调用了person的age方法person.run      //调用了person的run方法</code></pre><h4 id="id类型是什么，instancetype是什么，有什么区别？"><a href="#id类型是什么，instancetype是什么，有什么区别？" class="headerlink" title="id类型是什么，instancetype是什么，有什么区别？"></a>id类型是什么，instancetype是什么，有什么区别？</h4></li><li><p>id类型：万能指针，能作为参数，方法的返回类型。</p></li><li>instancetype：只能作为方法的范围类型，并且返回的类型是当前定义类的类类型。</li></ul><h4 id="成员变量名的命名以下划线开头的好处？"><a href="#成员变量名的命名以下划线开头的好处？" class="headerlink" title="成员变量名的命名以下划线开头的好处？"></a>成员变量名的命名以下划线开头的好处？</h4><ul><li>与get方法的方法名区分开来；</li><li>可以和一些其他的局部变量区分开来，下划线开头的变量，通常都是类的成员变量。</li></ul><h4 id="这段代码有什么问题吗"><a href="#这段代码有什么问题吗" class="headerlink" title="这段代码有什么问题吗:"></a>这段代码有什么问题吗:</h4><pre class=" language-objc"><code class="language-objc">@implementation Person- (void)setAge:(int)newAge {self.age = newAge; }@end会死循环,会重复调用自己!self.age 改为_age即可;并且书写不规范:setter方法中的newAge应该为age</code></pre><h4 id="截取字符串”20-http-www-baidu-com”-中-”-”字符前面和后面的数据-分别输出它们。"><a href="#截取字符串”20-http-www-baidu-com”-中-”-”字符前面和后面的数据-分别输出它们。" class="headerlink" title="截取字符串”20 | http://www.baidu.com” 中, ”|”字符前面和后面的数据,分别输出它们。"></a>截取字符串”20 | <a href="http://www.baidu.com”" target="_blank" rel="noopener">http://www.baidu.com”</a> 中, ”|”字符前面和后面的数据,分别输出它们。</h4><pre class=" language-objc"><code class="language-objc">NSString * str = @"20 | http://www.baidu.com";NSArray *array = [str componentsSeparatedByString:@"|"]; //这是分别输出的截取后的字符串for (int i = 0; i<[array count]; ++i) {    NSLog(@"%d=%@", i, [array objectAtIndex:i]);}</code></pre><h4 id="写一个完整的代理-包括声明-实现"><a href="#写一个完整的代理-包括声明-实现" class="headerlink" title="写一个完整的代理,包括声明,实现"></a>写一个完整的代理,包括声明,实现</h4><pre class=" language-objc"><code class="language-objc">//创建@protocol MyDelagate@required-(void)eat:(NSString *)foodName;@optional-(void)run;@end//声明@interface person: NSObject< MyDelagate>//实现@implementation person-(void)eat:(NSString *)foodName{    NSLog(@"吃:%@!",foodName);}-(void)run{    NSLog(@"run!");}@end</code></pre><h4 id="isKindOfClass、isMemberOfClass、selector作用分别是什么"><a href="#isKindOfClass、isMemberOfClass、selector作用分别是什么" class="headerlink" title="isKindOfClass、isMemberOfClass、selector作用分别是什么"></a>isKindOfClass、isMemberOfClass、selector作用分别是什么</h4><ul><li>isKindOfClass,作用是,某个对象属于某个类型或者继承自某类型</li><li>isMemberOfClass:某个对象确切属于某个类型</li><li>selector:通过方法名,获取在内存中的函数的入口地址</li></ul><h4 id="请分别写出SEL、id、-的意思"><a href="#请分别写出SEL、id、-的意思" class="headerlink" title="请分别写出SEL、id、@的意思?"></a>请分别写出SEL、id、@的意思?</h4><ul><li>SEL是“selector”的一个类型,表示一个方法的名字——-就是一个方法的入口地址</li><li>id是一个指向任何一个继承了Object(或者NSObject)类的对象。需要注意的是id是一个指针,所以在使用id 的时候不需要加*。</li><li>@:OC中的指令符</li></ul><h4 id="unsigned-int-和int-有什么区别。假设int长度为65535，请写出unsigned-int与-int的取值范围"><a href="#unsigned-int-和int-有什么区别。假设int长度为65535，请写出unsigned-int与-int的取值范围" class="headerlink" title="unsigned int 和int 有什么区别。假设int长度为65535，请写出unsigned int与 int的取值范围"></a>unsigned int 和int 有什么区别。假设int长度为65535，请写出unsigned int与 int的取值范围</h4><p>int:基本整型，当字节数为2时 取值范围为-32768~32767，当字节数为4时 取值范围<br> 负的2的31次方 到 2的31次方减1<br> unsigned int：无符号基本整型，当字节数为2时 取值范围为0~65535，当字节数为4时 取值范围为0到2的32次方减1</p><h4 id="Foundation对象与Core-Foundation对象有什么区别"><a href="#Foundation对象与Core-Foundation对象有什么区别" class="headerlink" title="Foundation对象与Core Foundation对象有什么区别"></a>Foundation对象与Core Foundation对象有什么区别</h4><ul><li>Foundation对象是OC的，Core Foundation对象是C对象</li><li>数据类型之间的转换 <ul><li>ARC:<strong>bridge_retained（持有对象所有权,F-&gt;CF）、</strong>bridge_transfer（释放对象有所权CF-&gt;F）</li><li>非ARC: __bridge</li></ul></li></ul><h4 id="编写一个函数，实现递归删除指定路径下的所有文件。"><a href="#编写一个函数，实现递归删除指定路径下的所有文件。" class="headerlink" title="编写一个函数，实现递归删除指定路径下的所有文件。"></a>编写一个函数，实现递归删除指定路径下的所有文件。</h4><pre class=" language-objc"><code class="language-objc">+ (void)deleteFiles:(NSString *)path;{    // 1.判断文件还是目录    NSFileManager * fileManger = [NSFileManager defaultManager];    BOOL isDir = NO;    BOOL isExist = [fileManger fileExistsAtPath:path isDirectory:&isDir];    if (isExist) {        // 2. 判断是不是目录        if (isDir) {        NSArray * dirArray = [fileManger contentsOfDirectoryAtPath:path error:nil];            NSString * subPath = nil;            for (NSString * str in dirArray) {                subPath  = [path stringByAppendingPathComponent:str];                BOOL issubDir = NO;                 [fileManger fileExistsAtPath:subPath isDirectory:&issubDir];                [self deleteFiles:subPath];            }               }else{            NSLog(@"%@",path);            [manager removeItemAtPath:filePath error:nil];          }    }else{        NSLog(@"你打印的是目录或者不存在");    }}</code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题3--C语言</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%983-C%E8%AF%AD%E8%A8%80/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%983-C%E8%AF%AD%E8%A8%80/</url>
      <content type="html"><![CDATA[<p>C语言，开发的基础功底，iOS很多高级应用都要和C语言打交道，所以，C语言在iOS开发中的重要性，你懂的。里面的一些问题可能并不是C语言问题，但是属于计算机的一些原理性的知识点，所以我就不再另外写一篇文章了，直接写在这里。</p><h4 id="当你写下面的代码时会发生什么事？"><a href="#当你写下面的代码时会发生什么事？" class="headerlink" title="当你写下面的代码时会发生什么事？"></a>当你写下面的代码时会发生什么事？</h4><ul><li>least = MIN(*p++, b);</li><li>结果是：((<em>p++) &lt;= (b) ? (</em>p++) : (*p++)) 这个表达式会产生副作用，指针p会作三次++自增操作。</li></ul><h4 id="用预处理指令-define声明一个常数，用以表明1年中有多少秒（忽略闰年问题）"><a href="#用预处理指令-define声明一个常数，用以表明1年中有多少秒（忽略闰年问题）" class="headerlink" title="用预处理指令#define声明一个常数，用以表明1年中有多少秒（忽略闰年问题）"></a>用预处理指令#define声明一个常数，用以表明1年中有多少秒（忽略闰年问题）</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SECONDS_PER_YEAR (60 * 60 * 24 * 365)UL(UL无符号长整形)</span></code></pre><h4 id="写一个”标准”宏MIN-，这个宏输入两个参数并返回较小的一个。"><a href="#写一个”标准”宏MIN-，这个宏输入两个参数并返回较小的一个。" class="headerlink" title="写一个”标准”宏MIN ，这个宏输入两个参数并返回较小的一个。"></a>写一个”标准”宏MIN ，这个宏输入两个参数并返回较小的一个。</h4><pre><code>#define MIN(A,B) （（A） &lt;= (B) ? (A) : (B))</code></pre><h4 id="写一个标准宏Max，并给出以下代码的输出"><a href="#写一个标准宏Max，并给出以下代码的输出" class="headerlink" title="写一个标准宏Max，并给出以下代码的输出"></a>写一个标准宏Max，并给出以下代码的输出</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> max<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>参考答案： <span class="token number">1</span>，<span class="token number">2</span><span class="token macro property">#<span class="token directive keyword">define</span> Max(X, Y) ((X) > (Y) ? (X) : (Y))</span>当看到宏时，就会想到宏定义所带来的副作用。对于<span class="token operator">++</span>、–，在宏当中使用是最容易产生副作用的，因此要慎用。分析：p指针指向了数组array的首地址，也就是第一个元素对应的地址，其值为<span class="token number">1</span><span class="token punctuation">.</span>宏定义时一定要注意每个地方要加上圆括号<span class="token operator">*</span>p<span class="token operator">++</span>相当于<span class="token operator">*</span>p<span class="token punctuation">,</span> p<span class="token operator">++</span><span class="token punctuation">,</span>所以<span class="token function">Max</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>相当于：<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>第一个<span class="token operator">*</span>p<span class="token operator">++</span>的结果是，p所指向的值变成了<span class="token number">2</span>，但是<span class="token number">1</span> <span class="token operator">></span> <span class="token number">1</span>为値，所以最终max的值就是<span class="token number">1</span>。而后面的<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span>也就不会执行，因此p所指向的地址对应的值就是<span class="token number">2</span>，而不是<span class="token number">3</span><span class="token punctuation">.</span>扩展：如果上面的<span class="token operator">*</span>p<span class="token operator">++</span>改成<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">++</span>p<span class="token punctuation">)</span>如何？<span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> max <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">++</span>p<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">3</span>，max <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><h4 id="define定义的宏和const定义的常量有什么区别？"><a href="#define定义的宏和const定义的常量有什么区别？" class="headerlink" title="define定义的宏和const定义的常量有什么区别？"></a>define定义的宏和const定义的常量有什么区别？</h4><pre class=" language-c"><code class="language-c">λ   #define定义宏的指令，程序在预处理阶段将用#define所定义的内容只是进行了替换。因此程序运行时，常量表中并没有用#define所定义的宏，系统并不为它分配内存，而且在编译时不会检查数据类型，出错的概率要大一些。λ   <span class="token keyword">const</span>定义的常量，在程序运行时是存放在常量表中，系统会为它分配内存，而且在编译时会进行类型检查。<span class="token macro property">#<span class="token directive keyword">define</span>定义表达式时要注意“边缘效应”，例如如下定义：</span><span class="token macro property">#<span class="token directive keyword">define</span> N 2 + 3 </span><span class="token comment" spellcheck="true">// 我们预想的N值是5，我们这样使用N</span><span class="token keyword">int</span> a <span class="token operator">=</span> N <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 我们预想的a的值是2.5，可实际上a的值是3.5</span></code></pre><h4 id="关键字volatile有什么含意-并给出三个不同的例子"><a href="#关键字volatile有什么含意-并给出三个不同的例子" class="headerlink" title="关键字volatile有什么含意?并给出三个不同的例子"></a>关键字volatile有什么含意?并给出三个不同的例子</h4><ul><li>优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。下面是volatile变量的几个例子：</li><li>并行设备的硬件寄存器（如：状态寄存器）</li><li>一个中断服务子程序中会访问到的非自动变量(Non-automatic variables)</li><li>多线程应用中被几个任务共享的变量</li></ul><h4 id="完成字符串拷贝可以使用sprintf、strcpy、以及memcpy函数，请问这些函数有什么区别-你喜欢哪一个？为什么？"><a href="#完成字符串拷贝可以使用sprintf、strcpy、以及memcpy函数，请问这些函数有什么区别-你喜欢哪一个？为什么？" class="headerlink" title="完成字符串拷贝可以使用sprintf、strcpy、以及memcpy函数，请问这些函数有什么区别?你喜欢哪一个？为什么？"></a>完成字符串拷贝可以使用sprintf、strcpy、以及memcpy函数，请问这些函数有什么区别?你喜欢哪一个？为什么？</h4><p>这些函数的区别在于实现功能以及操作对象不同。</p><ul><li>strcpy：函数操作的对象是字符串，完成从源字符串到目的字符串的拷贝功能。</li><li>sprintf：这个函数主要用来实现（字符串或基本数据类型）向字符串的转换功能。如果源对象是字符串，并且指定%s格式符，也可实现字符串拷贝功能。</li><li>memcpy：函数顾名思义就是内存拷贝，实现将一个内存块的内容复制到另一个内存块这一功能。内存块由其首地址以及长度确定。因此，memcpy 的操作对象适用于任意数据类型，只要能给出对象的起始地址和内存长度信息、并且对象具有可操作性即可。鉴于memcpy函数等长拷贝的特点以及数据类型代表的物理意义，memcpy函数通常限于同种类型数据或对象之间的拷贝，其中当然也包括字符串拷贝以及基本数据类型的拷贝。</li><li>对于字符串拷贝来说，用上述三个函数都可以实现，但是其实现的效率和使用的方便程度不同：</li><li>strcpy 无疑是最合适的选择：效率高且调用方便。</li><li>snprintf 要额外指定格式符并且进行格式转化，麻烦且效率不高。</li><li>memcpy 虽然高效，但是需要额外提供拷贝的内存长度这一参数，易错且使用不便；并且如果长度指定过大的话（最优长度是源字符串长度 + 1），还会带来性能的下降。其实 strcpy 函数一般是在内部调用 memcpy函数或者用汇编直接实现的，以达到高效的目的。因此，使用 memcpy 和 strcpy 拷贝字符串在性能上应该没有什么大的差别。</li><li>对于非字符串类型的数据的复制来说，strcpy和snprintf一般就无能为力了，可是对memcpy却没有什么影响。但是，对于基本数据类型来说，尽管可以用 memcpy 进行拷贝，由于有赋值运算符可以方便且高效地进行同种或兼容类型的数据之间的拷贝，所以这种情况下memcpy几乎不被使用。memcpy的长处是用来实现（通常是内部实现居多）对结构或者数组的拷贝，其目的是或者高效，或者使用方便，甚或两者兼有。</li></ul><h4 id="sprintf-strcpy-memcpy使用上有什么要注意的地方"><a href="#sprintf-strcpy-memcpy使用上有什么要注意的地方" class="headerlink" title="sprintf,strcpy,memcpy使用上有什么要注意的地方"></a>sprintf,strcpy,memcpy使用上有什么要注意的地方</h4><ul><li>strcpy是一个字符串拷贝的函数，它的函数原型为strcpy(char <em>dst, const char </em>src);</li><li>将src开始的一段字符串拷贝到dst开始的内存中去，结束的标志符号为 ‘\0’，由于拷贝的长度不是由我们自己控制的，所以这个字符串拷贝很容易出错。</li><li>具备字符串拷贝功能的函数有memcpy，这是一个内存拷贝函数，它的函数原型为memcpy(char <em>dst, const char</em> src, unsigned int len);将长度为len的一段内存，从src拷贝到dst中去，这个函数的长度可控。但是会有内存读写错误。(比如len的长度大于要拷贝的空间或目的空间)</li><li>sprintf是格式化函数。将一段数据通过特定的格式，格式化到一个字符串缓冲区中去。sprintf格式化的函数的长度不可控，有可能格式化后的字符串会超出缓冲区的大小，造成溢出。</li></ul><h4 id="static关键字的作用"><a href="#static关键字的作用" class="headerlink" title="static关键字的作用"></a>static关键字的作用</h4><ul><li>隐藏。编译多个文件时，所有未加static前缀的全局变量和函数都全局可见。</li><li>保持变量内容的持久。全局变量和static变量都存储在静态存储区，程序开始运行就初始化，只初始化一次。static控制了变量的作用范围。</li><li>默认初始化为0.在静态数据区，内存中的所有字节都是0x00，全局变量和static变量都是默认初始化为0.</li></ul><h4 id="static关键字区别："><a href="#static关键字区别：" class="headerlink" title="static关键字区别："></a>static关键字区别：</h4><ul><li>static全局变量与普通的全局变量有什么区别：static全局变量只初使化一次，防止在其他文件单元中被引用;</li><li>static局部变量和普通局部变量有什么区别：static局部变量只被初始化一次，下一次依据上一次结果值；</li><li>static函数与普通函数有什么区别：static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝</li></ul><h4 id="关键字const"><a href="#关键字const" class="headerlink" title="关键字const"></a>关键字const</h4><ul><li>const int a;int const a; 作用是一样：a 是一个常整型数</li><li>const int <em>a;int const </em>a; a 是一个指向常整型数的指针(整型数是不可修改的，但指针可以)</li><li>int * const a;a 是一个指向整型数的常指针(指针指向的整型数是可以修改的，但指针是不可修改的)</li><li>int const * const a;a 是一个指向常整型数的常指针(指针指向的整型数是不可修改的，同时指针也是不可修改的)</li></ul><h4 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h4><ul><li>管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生内存泄露 (memory leak)。</li><li>申请大小：<ul><li>栈：在Windows下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在Windows下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示 overflow。因此，能从栈获得的空间较小。</li><li>堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</li></ul></li><li>碎片问题：<br> 对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个 问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出</li><li>分配方式：<br> 堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由 alloc函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。</li><li>分配效率：<br> 栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的 效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的</li></ul><h4 id="数组和指针的区别"><a href="#数组和指针的区别" class="headerlink" title="数组和指针的区别"></a>数组和指针的区别</h4><ul><li>数组可以申请在栈区和数据区；指针可以指向任意类型的内存块<br> sizeof作用于数组时，得到的是数组所占的内存大小；作用于指针时，得到的都是4个字节的大小</li><li>数组名表示数组首地址，是常量指针，不可修改指向。比如不可以将＋＋作用于数组名上；普通指针的值可以改变，比如可将＋＋作用于指针上</li><li>用字符串初始化字符数组是将字符串的内容拷贝到字符数组中；用字符串初始化字符指针是将字符串的首地址赋给指针，也就是指针指向了该字符串</li></ul><h4 id="引用和指针的区别"><a href="#引用和指针的区别" class="headerlink" title="引用和指针的区别"></a>引用和指针的区别</h4><ul><li>指针指向一块内存，内容存储所指内存的地址。</li><li>引用是某块内存的别名。</li><li>引用使用时不需要解引用（*）而指针需要</li><li>引用只在定义时被初始化，之后不可变，指针可变。</li><li>引用没有const</li><li>引用不能为空</li><li>sizeof引用得到的是所指向变量（对象）的大小，sizeof指针是指针本身的大小。</li><li>指针和引用的自增(++)运算意义不一样：引用++为引用对象自己++，指针++是指向对象后面的内存</li><li>程序需要为指针分配内存区域，引用不需要。</li></ul><h4 id="用变量a给出下面的定义"><a href="#用变量a给出下面的定义" class="headerlink" title="用变量a给出下面的定义"></a>用变量a给出下面的定义</h4><ul><li>一个整型数（An integer）</li><li>一个指向整型数的指针（ A pointer to an integer）</li><li>一个指向指针的的指针，它指向的指针是指向一个整型数（ A pointer to a pointer to an intege）r</li><li>一个有10个整型数的数组（ An array of 10 integers）</li><li>一个有10个指针的数组，该指针是指向一个整型数的。（An array of 10 pointers to integers）</li><li>一个指向有10个整型数数组的指针（ A pointer to an array of 10 integers）</li><li>一个指向函数的指针，该函数有一个整型参数并返回一个整型数（A pointer to a function that takes an integer as an argument<br> and returns an integer）</li><li>一个有10个指针的数组，该指针指向一个函数，该函数有一个整型参数并返回一个整型数（ An array of ten pointers to functions t<br> hat take an integer argument and return an integer ）</li></ul><p>答案是：</p><ul><li>int a; // An integer</li><li>int *a; // A pointer to an integer</li><li>int **a; // A pointer to a pointer to an integer</li><li>int a[10]; // An array of 10 integers</li><li>int *a[10]; // An array of 10 pointers to integers</li><li>int (*a)[10]; // A pointer to an array of 10 integers</li><li>int (*a)(int); // A pointer to a function a that  takes an integer argument and returns an integer</li><li>int (*a[10])(int); // An array of 10 pointers to functions  that take an integer argument and return an integer</li></ul><h4 id="请写出以下代码输出"><a href="#请写出以下代码输出" class="headerlink" title="请写出以下代码输出"></a>请写出以下代码输出</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>参考答案： <span class="token number">2</span><span class="token punctuation">,</span> 随机值这种类型题好像挺常见的。考的就是C语言上的指针的理解和数组的理解。分析：a代表有<span class="token number">5</span>个元素的数组的首地址，a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>的元素分别是<span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token number">5</span>。接下来，a <span class="token operator">+</span> <span class="token number">1</span>表示数据首地址加<span class="token number">1</span>，那么就是a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>，也就是对应于值为<span class="token number">2</span><span class="token punctuation">.</span>但是，这里是<span class="token operator">&amp;</span>a <span class="token operator">+</span> <span class="token number">1</span>，因为a代表的是整个数组，它的空间大小为<span class="token number">5</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>，因此<span class="token operator">&amp;</span>a <span class="token operator">+</span> <span class="token number">1</span>就是a<span class="token operator">+</span><span class="token number">5</span>。a是个常量指针，指向当前数组的首地址，指针<span class="token operator">+</span><span class="token number">1</span>就是移动<span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>个字节。因此，ptr是指向<span class="token keyword">int</span> <span class="token operator">*</span>类型的指针，而ptr指向的就是a <span class="token operator">+</span> <span class="token number">5</span>，那么ptr <span class="token operator">+</span> <span class="token number">1</span>也相当于a <span class="token operator">+</span> <span class="token number">6</span>，所以最后的<span class="token operator">*</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>就是一个随机值了。而<span class="token operator">*</span><span class="token punctuation">(</span>ptr – <span class="token number">1</span><span class="token punctuation">)</span>就相当于a <span class="token operator">+</span> <span class="token number">4</span>，对应的值就是<span class="token number">5</span>。</code></pre><h4 id="简述内存分区情况"><a href="#简述内存分区情况" class="headerlink" title="简述内存分区情况"></a>简述内存分区情况</h4><ul><li>代码区：存放函数二进制代码</li><li>数据区：系统运行时申请内存并初始化，系统退出时由系统释放，存放全局变量、静态变量、常量</li><li>堆区：通过malloc等函数或new等操作符动态申请得到，需程序员手动申请和释放</li><li>栈区：函数模块内申请，函数结束时由系统自动释放，存放局部变量、函数参数</li></ul><h4 id="用NSLog函数输出一个浮点类型，结果四舍五入，并保留一位小数"><a href="#用NSLog函数输出一个浮点类型，结果四舍五入，并保留一位小数" class="headerlink" title="用NSLog函数输出一个浮点类型，结果四舍五入，并保留一位小数"></a>用NSLog函数输出一个浮点类型，结果四舍五入，并保留一位小数</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">float</span> money <span class="token operator">=</span> <span class="token number">1.011</span><span class="token punctuation">;</span><span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">"%.1f"</span><span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题2--UNIX常用命令</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%982-UNIX%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%982-UNIX%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>做开发说用不到命令行，那肯定是不可能的。所以记住几个常用的命令还是很有用。</p><ol><li>cd      改变工作目录</li><li>pwd     输出当前工作目录的绝对路径<br> 在UNIX中要执行什么命令，一定要知道自己当前所在的工作目录</li><li><p>ls      查看文件</p><pre><code> $ ls        显示文件 $ ls -a     显示所有文件 $ ls -l     列表显示文件 $ ls -la    列表显示所有文件</code></pre></li><li><p>touch   用于更改文件访问和修改时间的标准UNIX程序，也被用于创建新文件</p></li></ol><p>$ touch test.txt</p><p>注意：touch不修改test.txt内容，只更改它的访问、修改时间，如果test.txt不存在，它会被创建</p><ol><li>cat     连续查看文件内容</li><li>more    分页查看文件内容</li></ol><p>提示：</p><p>1&gt;  命令和参数之间需要添加空格<br> 2&gt;  如果要使用当前目录中的文件名，输入到一半时，按TAB键能够补全</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS面试题1--版本控制</title>
      <link href="/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%981-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
      <url>/2018/09/12/iOS%E9%9D%A2%E8%AF%95%E9%A2%981-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>面试过程中，可能会问及一些关于版本控制的问题，理解下SVN和Git的原理，记住常用命令即可。</p><h2 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h2><ul><li>SVN 是集中式源代码管理工具</li></ul><pre><code>概念：1&gt; Repository   代码仓库，保存代码的仓库2&gt; Server       服务器，保存所有版本的代码仓库3&gt; Client       客户端，只保存当前用户的代码仓库4&gt; 用户名&amp;密码   访问代码仓库需要使用自己的&quot;用户名和密码&quot;，从而可以区分出不同的人对代码做的修改操作：1&gt; checkout     将服务器上最新的代码仓库下载到本地，&quot;只需要做一次&quot;2&gt; update       从服务器上将其他人所做的修改下载到本地，&quot;每天上班必须要做的事情&quot;3&gt; commit       将工作提交到服务器，&quot;每天下班之前至少做一次&quot;</code></pre><ul><li>SVN服务器安装(略)</li><li>SVN常用命令</li></ul><pre><code>切换工作目录$ cd 工作目录checkout服务器上的代码仓库$ svn co http://xxx/svn/xxxx --username=manager --password=manager提示：checkout(co)之后，命令行会记录用户名和密码，后续操作不用再另行指定查看本地代码库状态$ svn st错误提示：&quot;is not a working copy&quot;，必须在svn的工作目录下才能正确使用svn的命令查看svn日志$ svn log查看某一个文件的日志$ svn log filename查看某一个文件某个版本的日志$ svn log filename@1创建文件$ touch main.c打开并编写文件内容$ open main.c查看工作目录状态$ svn st将文件添加到本地版本库中$ svn add main.c/main.*将文件提交到服务器的版本库中$ svn ci -m &quot;备注信息&quot;注意：一定要养成写注释的良好习惯删除文件$ svn rm Person.h 提交删除$ svn ci -m &quot;删除了文件&quot;注意：不要使用文件管理器直接删除文件撤销修改$ svn revert Person.m恢复到之前的某个版本$ svn update -r 5冲突解决(p) postpone            对比(mc) mine-conflict      使用我的(tc) theirs-conflict    使用对方的svn st 显示的文件状态&#39; &#39; 没有修改&#39;A&#39; 被添加到本地代码仓库&#39;C&#39; 冲突&#39;D&#39; 被删除&#39;I&#39; 被忽略&#39;M&#39; 被修改&#39;R&#39; 被替换&#39;X&#39; 外部定义创建的版本目录&#39;?&#39; 文件没有被添加到本地版本库内&#39;!&#39; 文件丢失或者不完整（不是通过svn命令删除的文件）&#39;~&#39; 受控文件被其他文件阻隔</code></pre><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>git是一款开源的分布式版本控制工具</li></ul><pre><code>$ git help查看git所有命令的帮助$ git help 子命令要退出帮助信息，按&quot;q&quot;翻看下页，按&quot;空格&quot;翻看上页，按&quot;CTRL+B&quot;要搜索相关文字，按&quot;/&quot;然后输入&quot;相关文字&quot;创建代码仓库$ git init配置用户名和邮箱$ git config user.name manager$ git config user.email manager@gmail.com以上两个命令会将用户信息保存在当前代码仓库中如果要一次性配置完成可以使用一下命令$ git config --global user.name manager$ git config --global user.email manager@gmail.com以上两个命令会将用户信息保存在用户目录下的 .gitconfig 文件中查看当前所有配置$ git config -l创建代码，开始开发$ touch main.c$ open main.c将代码添加到代码库查看当前代码库状态$ git status将文件添加到代码库$ git add main.c将修改提交到代码库$ git commit -m &quot;添加了main.c&quot;在此一定要使用 -m 参数指定修改的备注信息否则会进入 vim 编辑器，如果对vim不熟悉，会是很糟糕的事情将当前文件夹下的所有新建或修改的文件一次性添加到代码库$ git add .添加多个文件$ touch Person.h Person.m$ git add .$ git commit -m &quot;添加了Person类&quot;$ open Person.h$ git add .$ git commit -m &quot;增加Person类属性&quot;注意 使用git时，每一次修改都需要添加再提交，这一点是与svn不一样的查看所有版本库日志$ git log查看指定文件的版本库日志$ git log 文件名回到当前版本，放弃所有没有提交的修改$ git reset --hard HEAD回到上一个版本$ git reset --hard HEAD^回到之前第3个修订版本$ git reset --hard HEAD~3回到指定版本号的版本$ git reset --hard e695b67查看分支引用记录$ git reflog</code></pre><h4 id="为什么要用源代码管理工具"><a href="#为什么要用源代码管理工具" class="headerlink" title="为什么要用源代码管理工具"></a>为什么要用源代码管理工具</h4><ul><li>能追踪一个项目从诞生一直到定案的过程</li><li>记录一个项目的所有内容变化</li><li>方便地查阅特定版本的修订情况</li></ul><h4 id="最常用的版本控制工具是什么，能大概讲讲原理么？"><a href="#最常用的版本控制工具是什么，能大概讲讲原理么？" class="headerlink" title="最常用的版本控制工具是什么，能大概讲讲原理么？"></a>最常用的版本控制工具是什么，能大概讲讲原理么？</h4><p>参考答案：</p><ul><li>最常用的版本控制工具有SourceTree（GIT）和CornerStone（SVN）；</li><li>原理提到svn是集中式代码管理，解释下具体意思，git也这样回答就行了。</li><li>集中式代码管理（SVN）的核心是服务器，所有开发者在开始新一天的工作之前必须从服务器获取代码，然后开发，最后解决冲突，提交。所有的版本信息都放在服务器上。如果脱离了服务器，开发者基本上可以说是无法工作的。</li><li>分布式的版本控制系统，在Git中并不存在主库这样的概念，每一份出的库都可以独立使用，任何两个库之间的不一致之处都可以进行合并。</li></ul>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS体系结构图</title>
      <link href="/2018/09/11/iOS%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9B%BE/"/>
      <url>/2018/09/11/iOS%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p><img src="/2018/09/11/iOS体系结构图/xmind.jpg" alt="iOS结构图1"></p><img src="/2018/09/11/iOS体系结构图/xmind.jpg" title="[iOS结构图2]"><p>这张图是github上一位大牛所制作。建议找工作的同学，把这张图打印出来，自己对着看，有哪些知识点遗忘的，赶紧去复习，每天过一遍，保证你面试的时候胸有成竹。</p><p>在这里，我将总结这段时间收集的和面试记录下来的各类问题，助各位同学面试一臂之力。文章如有问题，请留言，我将及时更正。</p><p><img src="/github/blog-honkersk/source/_posts/2018-09-12-iOS体系结构图/xmind.jpg" alt="xmind"></p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>速学block在ARC和MRC中的使用</title>
      <link href="/2018/09/04/%E9%80%9F%E5%AD%A6block%E5%9C%A8ARC%E5%92%8CMRC%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/09/04/%E9%80%9F%E5%AD%A6block%E5%9C%A8ARC%E5%92%8CMRC%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-ARC转MRC-MRC转ARC"><a href="#1-ARC转MRC-MRC转ARC" class="headerlink" title="1.ARC转MRC MRC转ARC"></a>1.ARC转MRC MRC转ARC</h2><p>首先, 先要了解下ARC转MRC和MRC转ARC.<br><strong>ARC项目转MRC</strong><br>创建项目, 打开Xcode,  点击项目,  找到Build Phases中的Compile Sources, 将需要转为MRC的 .m文件加入编译标记  <code>-fno-objc-arc</code></p><p><strong>MRC项目转ARC</strong><br>给MRC项目中.m文件添加ARC标记  <code>-fobjc-arc</code></p><h2 id="2-示例演示"><a href="#2-示例演示" class="headerlink" title="2.示例演示"></a>2.示例演示</h2><p><strong>Example A</strong></p><pre class=" language-objc"><code class="language-objc">void exampleA() {    char a = 'A';    ^{        printf("%c\n", a);    }();}</code></pre><p>1.ARC和MRC都有效 ?<br>2.只有ARC 有效?<br>3.MRC有效 ?<br>4.都没有效?</p><p><strong>Example B</strong></p><pre class=" language-objc"><code class="language-objc">void exampleB_addBlockToArray(NSMutableArray *array) {    char b = 'B';    [array addObject:^{        printf("%c\n", b);    }];}void exampleB() {    NSMutableArray *array = [NSMutableArray array];    exampleB_addBlockToArray(array);    void (^block)(void) = [array objectAtIndex:0];    block();                    //MRC 断点查看下 __NSStackBlock__    NSLog(@"%@", [block class]);// ARC __NSMallocBlock__}</code></pre><p>1.ARC和MRC都有效 ?<br>2.只有ARC 有效?<br>3.MRC有效 ?<br>4.都没有效?</p><p><strong>Example C</strong></p><pre class=" language-objc"><code class="language-objc">void exampleC_addBlockToArray(NSMutableArray *array) {    [array addObject:^{        printf("C\n");    }];}void exampleC() {    NSMutableArray *array = [NSMutableArray array];    exampleC_addBlockToArray(array);    void (^block)(void) = [array objectAtIndex:0];    block();    NSLog(@"%@", [block class]); // __NSGlobalBlock__}</code></pre><p>1.ARC和MRC都有效 ?<br>2.只有ARC 有效?<br>3.MRC有效 ?<br>4.都没有效?</p><p><strong>Example D</strong></p><pre class=" language-objc"><code class="language-objc">typedef void (^dBlock)(void);dBlock exampleD_getBlock() {    char d = 'D';    return ^{        printf("%c\n", d);    } ;}void exampleD() {    exampleD_getBlock()();}</code></pre><p>1.ARC和MRC都有效 ?<br>2.只有ARC 有效?<br>3.MRC有效 ?<br>4.都没有效?</p><p><strong>Example E</strong></p><pre class=" language-objc"><code class="language-objc">typedef void (^eBlock)(void);eBlock exampleE_getBlock() {    char e = 'E';    void (^block)(void) = ^{        printf("%c\n", e);    };    return block;}void exampleE() {    eBlock block = exampleE_getBlock();    block();                //MRC 断点查看下 __NSStackBlock__    NSLog(@"%@", [block class]); // ARC __NSMallocBlock__}</code></pre><p>1.ARC和MRC都有效 ?<br>2.只有ARC 有效?<br>3.MRC有效 ?<br>4.都没有效?</p><h2 id="3-解析"><a href="#3-解析" class="headerlink" title="3.解析"></a>3.解析</h2><p><strong>Example A: ARC和MRC都有效</strong></p><blockquote><p>不管在 ARC 还是 MRC 下，不论 block 存放在 stack 还是 heap 内存中，当example A 被调用时，block 仍然有效，都能正常执行.</p></blockquote><p><strong>Example B: 只有ARC 有效</strong></p><blockquote><p>在 MRC 下，exampleB_addBlockToArray 中的 block 是 NSStackBlock 类型，存放在stack内存中。当执行 exampleB 时，stack 内存被释放，block 失效.</p></blockquote><blockquote><p>在 ARC 下，block 是 autoreleased NSMallocBlock 类型，存放在 heap 内存中，所以 Exmaple B 只有ARC 有效.</p></blockquote><p><strong>Example C: ARC和MRC都有效</strong></p><blockquote><p>当 block 不需要从外部获取变量时，它不需要在 runtime 设置任何状态。此时，block 被编译成 NSGlobalBlock 类型，放在内存 data 段，就像 C 函数一样，属于代码的一部分，所以 ARC和MRC都有效.</p></blockquote><p><strong>Example D: 只有ARC 有效</strong></p><blockquote><p>这题有点类似于 Example B. 在 MRC 下，exampleD_getBlock 中的block 会被创建在 stack 内存中，当函数返回时，block马上失效。鉴于本题的错误实在太明显，编译器在编译时，就会抛出错误 error: returning block that lives on the local stack.</p></blockquote><blockquote><p>而在 ARC 下，block 会被编译成 autoreleased NSMallocBlock 类型，存放于 heap 内存中。<br>所以 只有ARC 有效.</p></blockquote><p><strong>Example E: 只有ARC 有效</strong></p><blockquote><p>本题类似于 Example D，区别在于本题代码不会出现编译错误，而是在运行时才会崩溃。更槽糕的是，如果你关闭了编译器优化选项，代码运行正常，而无法发现这个隐藏的bug。</p></blockquote><blockquote><p>而在 ARC 下，block 会被编译成 autoreleased NSMallocBlock 类型，存放于 heap 内存中。<br>所以 只有ARC 有效.</p></blockquote><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p><strong>总结1:</strong></p><blockquote><p>MRC 中block 没有引用外部变量, block为 NSGlobalBlock 类型,存储在全局数据区.<br>MRC 中block 引用外部变量,block为NSStackBlock 类型,存储在栈内存中.<br>所以, 在block所属的栈作用域外使用block时, 需要将调用copy方法将该block存储在堆区.</p></blockquote><p><strong>总结2:</strong></p><blockquote><p>ARC 中 没有引用外部变量, block为 NSGlobalBlock 类型,存储在全局数据区.<br>ARC 中 引用外部变量, block为 autoreleased NSMallocBlock 类型,存储在堆内存中.</p></blockquote><p><strong>例外:匿名block 引用外部变量</strong></p><blockquote><p>在ARC下其实很少见到 NSStackBlock 类的Block，大多数情况编译器都保证了Block是在堆上创建的</p><pre class=" language-objc"><code class="language-objc">int count = 11;NSLog(@"Stack Block:%@", [^{NSLog(@"Stack Block:%d",count);} class]);//打印：Stack Block:__NSStackBlock__</code></pre></blockquote><h2 id="5-以上这么多例子告诉我们什么？"><a href="#5-以上这么多例子告诉我们什么？" class="headerlink" title="5.以上这么多例子告诉我们什么？"></a>5.以上这么多例子告诉我们什么？</h2><p>告诉我们要使用ARC！在ARC下，block总能正确运行。如果你不用ARC，最好能保证在 stack 内存中声明定义的block，能够拷贝到heap内存，保证block的正常运行。</p>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> block </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown语法</title>
      <link href="/2018/08/30/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/08/30/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="欢迎使用马克飞象"><a href="#欢迎使用马克飞象" class="headerlink" title="欢迎使用马克飞象"></a>欢迎使用马克飞象</h1><p>@(示例笔记本)[马克飞象|帮助|Markdown]</p><p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p><ul><li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li><li><strong>得心应手</strong> ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；</li><li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li></ul><hr><p>[TOC] (不支持)</p><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><p>(hexo引用不一样)</p><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="noopener">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Cmd + /</code>查看帮助。 </p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre class=" language-python"><code class="language-python">@requires_authorization<span class="token keyword">def</span> <span class="token function">somefunc</span><span class="token punctuation">(</span>param1<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> param2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''A docstring'''</span>    <span class="token keyword">if</span> param1 <span class="token operator">></span> param2<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># interesting</span>        <span class="token keyword">print</span> <span class="token string">'Greater'</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>param2 <span class="token operator">-</span> param1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">or</span> None<span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token operator">>></span><span class="token operator">></span> message <span class="token operator">=</span> <span class="token triple-quoted-string string">'''interpreter... prompt'''</span></code></pre><h3 id="LaTeX-公式-hexo不支持此写法"><a href="#LaTeX-公式-hexo不支持此写法" class="headerlink" title="LaTeX 公式 (hexo不支持此写法)"></a>LaTeX 公式 (hexo不支持此写法)</h3><p>可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：</p><p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><h3 id="表格-不一样"><a href="#表格-不一样" class="headerlink" title="表格 (不一样)"></a>表格 (不一样)</h3><table><thead><tr><th style="text-align:left">Item</th><th style="text-align:right">Value</th><th style="text-align:center">Qty</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 USD</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 USD</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 USD</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="流程图-hexo不支持此写法"><a href="#流程图-hexo不支持此写法" class="headerlink" title="流程图 (hexo不支持此写法)"></a>流程图 (hexo不支持此写法)</h3><pre class=" language-flow"><code class="language-flow">st=>start: Starte=>endop=>operation: My Operationcond=>condition: Yes or No?st->op->condcond(yes)->econd(no)->op</code></pre><p>以及时序图:</p><pre class=" language-sequence"><code class="language-sequence">Alice->Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob-->Alice: I am good thanks!</code></pre><blockquote><p><strong>提示：</strong>想了解更多，请查看<strong>流程图</strong>[语法][3]以及<strong>时序图</strong>[语法][4]。</p></blockquote><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p><ul><li style="list-style: none"><input type="checkbox" checked> 已完成事项</li><li style="list-style: none"><input type="checkbox"> 待办事项1</li><li style="list-style: none"><input type="checkbox"> 待办事项2</li></ul><blockquote><p><strong>注意：</strong>目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在<strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将会全面支持。</p></blockquote><h2 id="印象笔记相关"><a href="#印象笔记相关" class="headerlink" title="印象笔记相关"></a>印象笔记相关</h2><h3 id="笔记本和标签"><a href="#笔记本和标签" class="headerlink" title="笔记本和标签"></a>笔记本和标签</h3><p><strong>马克飞象</strong>增加了<code>@(笔记本)[标签A|标签B]</code>语法, 以选择笔记本和添加标签。 <strong>绑定账号后</strong>， 输入<code>(</code>自动会出现笔记本列表，请从中选择。</p><h3 id="笔记标题"><a href="#笔记标题" class="headerlink" title="笔记标题"></a>笔记标题</h3><p><strong>马克飞象</strong>会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 <code>欢迎使用马克飞象</code>。</p><h3 id="快捷编辑"><a href="#快捷编辑" class="headerlink" title="快捷编辑"></a>快捷编辑</h3><p>保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到<strong>马克飞象</strong>中打开并编辑该笔记。</p><blockquote><p><strong>注意：</strong>目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。</p></blockquote><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p><strong>马克飞象</strong>通过<strong>将Markdown原文以隐藏内容保存在笔记中</strong>的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。</p><blockquote><p><strong>隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。</strong></p></blockquote><h3 id="离线存储"><a href="#离线存储" class="headerlink" title="离线存储"></a>离线存储</h3><p><strong>马克飞象</strong>使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过<code>文档管理</code>打开。</p><blockquote><p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，<strong>请务必经常及时同步到印象笔记</strong>。</p></blockquote><h2 id="编辑器相关"><a href="#编辑器相关" class="headerlink" title="编辑器相关"></a>编辑器相关</h2><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>右侧系统菜单（快捷键<code>Cmd + M</code>）的<code>设置</code>中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>帮助    <code>Cmd + /</code><br>同步文档    <code>Cmd + S</code><br>创建文档    <code>Cmd + Opt + N</code><br>最大化编辑器    <code>Cmd + Enter</code><br>预览文档 <code>Cmd + Opt + Enter</code><br>文档管理    <code>Cmd + O</code><br>系统菜单    <code>Cmd + M</code> </p><p>加粗    <code>Cmd + B</code><br>插入图片    <code>Cmd + G</code><br>插入链接    <code>Cmd + L</code><br>提升标题    <code>Cmd + H</code></p><h2 id="关于收费"><a href="#关于收费" class="headerlink" title="关于收费"></a>关于收费</h2><p><strong>马克飞象</strong>为新用户提供 10 天的试用期，试用期过后需要<a href="maxiang.info/vip.html">续费</a>才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。</p><h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul><li>微博：<a href="http://weibo.com/u/2788354117" target="_blank" rel="noopener">@马克飞象</a>，<a href="http://weibo.com/ggock" title="开发者个人账号" target="_blank" rel="noopener">@GGock</a></li><li>邮箱：<a href="mailto:&#104;&#x75;&#x73;&#116;&#x67;&#111;&#x63;&#x6b;&#x40;&#103;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#104;&#x75;&#x73;&#116;&#x67;&#111;&#x63;&#x6b;&#x40;&#103;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a></li></ul><hr><p>感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。</p><p>[^demo] (hexo不支持)</p><p>[^demo]: 这是一个示例脚注。请查阅 <a href="https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes" target="_blank" rel="noopener">MultiMarkdown 文档</a> 关于脚注的说明。 <strong>限制：</strong> 印象笔记的笔记内容使用 [ENML][5] 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致<code>脚注</code>和<code>TOC</code>无法正常点击。</p><p>(支持)<br>  [1]: <a href="http://maxiang.info/client_zh" target="_blank" rel="noopener">http://maxiang.info/client_zh</a><br>  [2]: <a href="https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop</a><br>  [3]: <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">http://adrai.github.io/flowchart.js/</a><br>  [4]: <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">http://bramp.github.io/js-sequence-diagrams/</a><br>  [5]: <a href="https://dev.yinxiang.com/doc/articles/enml.php" target="_blank" rel="noopener">https://dev.yinxiang.com/doc/articles/enml.php</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo语法体验</title>
      <link href="/2018/08/30/hexo%E8%AF%AD%E6%B3%95%E4%BD%93%E9%AA%8C/"/>
      <url>/2018/08/30/hexo%E8%AF%AD%E6%B3%95%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26085703&auto=1&height=66"></iframe><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>在文章中插入指定大小的图片。</p><img src="/path/to/image" class="[class names]" title="[width][height] [title text [alt text]]"><h2 id="标签插件（Tag-Plugins）"><a href="#标签插件（Tag-Plugins）" class="headerlink" title="标签插件（Tag Plugins）"></a>标签插件（Tag Plugins）</h2><h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><p>在文章中插入引言，可包含作者、来源和标题。</p><h4 id="别号：-quote"><a href="#别号：-quote" class="headerlink" title="别号： quote"></a>别号： quote</h4><blockquote><p>content</p><footer><strong>[author[</strong><cite>source]] [link] [source_link_title]</cite></footer></blockquote><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p><strong>没有提供参数，则只输出普通的 blockquote</strong></p><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><blockquote><p>111111</p></blockquote><blockquote><blockquote><p>222222</p></blockquote></blockquote><blockquote><blockquote><p>333</p></blockquote></blockquote><hr><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在文章中插入代码。</p><h4 id="别名：-code"><a href="#别名：-code" class="headerlink" title="别名： code"></a>别名： code</h4><pre><code>code snippet</code></pre><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><h4 id="普通的代码块"><a href="#普通的代码块" class="headerlink" title="普通的代码块"></a>普通的代码块</h4><pre><code>alert(&#39;Hello World!&#39;);</code></pre><p>alert(‘Hello World!’);</p><h4 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h4><pre><code>[rectangle setX: 10 y: 10 width: 20 height: 20];</code></pre><p>[rectangle setX: 10 y: 10 width: 20 height: 20];</p><pre class=" language-oc"><code class="language-oc">[rectangle setX: 10 y: 10 width: 20 height: 20];</code></pre><h4 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h4><pre><code>array.map(callback[, thisArg])</code></pre><p>Array.map<br>array.map(callback[, thisArg])</p><h4 id="附加说明和网址"><a href="#附加说明和网址" class="headerlink" title="附加说明和网址"></a>附加说明和网址</h4><pre><code>_.compact([0, 1, false, 2, &#39;&#39;, 3]);=&gt; [1, 2, 3]</code></pre><p>_.compactUnderscore.js<br>_.compact([0, 1, false, 2, ‘’, 3]);<br>=&gt; [1, 2, 3]</p><h4 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h4><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p><figcaption>[title] [url] [link text] </figcaption><pre class=" language-[language]"><code class="language-[language]">code snippet</code></pre><hr><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。</p><a>text url [external] [title]</a><h3 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h3><p>在文章中插入 Youtube 视频。</p><div class="video-container"><iframe src="//www.youtube.com/embed/video_id" frameborder="0" allowfullscreen></iframe></div><h3 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h3><p>在文章中插入 Vimeo 视频。</p><div class="video-container"><iframe src="//player.vimeo.com/video/video_id" frameborder="0" allowfullscreen></iframe></div><h3 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h3><p>引用其他文章的链接。</p><h3 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h3><p>引用文章的资源。</p><p><div class="bdsharebuttonbox"><a href="#" class="bds_more" data-cmd="more"></a><a href="#" class="bds_qzone" data-cmd="qzone"></a><a href="#" class="bds_tsina" data-cmd="tsina"></a><a href="#" class="bds_tqq" data-cmd="tqq"></a><a href="#" class="bds_renren" data-cmd="renren"></a><a href="#" class="bds_weixin" data-cmd="weixin"></a></div></p><script>window._bd_share_config={"common":{"bdSnsKey":{},"bdText":"","bdMini":"2","bdPic":"","bdStyle":"0","bdSize":"16"},"share":{},"image":{"viewList":["qzone","tsina","tqq","renren","weixin"],"viewText":"分享到：","viewSize":"16"},"selectShare":{"bdContainerClass":null,"bdSelectMiniList":["qzone","tsina","tqq","renren","weixin"]}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];</script>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客开篇</title>
      <link href="/2018/08/30/%E5%8D%9A%E5%AE%A2%E5%BC%80%E7%AF%87/"/>
      <url>/2018/08/30/%E5%8D%9A%E5%AE%A2%E5%BC%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>　　终于下决心要开始写博客了，做程序员快四年了，四年的时间里，由一个嫩头青，成长为了一个能在公司项目里独立完成一些业务逻辑复杂的大模块的中坚程序员。首先我还是概括下这几年的成长历程吧。</p><p>　　由于本人的脸长得比较缓慢，刚出道时还是一张孩童脸，用时下流行的一个词来描述那就是“萌”。因为太萌，刚安排到客户现场做开发时，还被客户开玩笑说你们公司违法招收童工，我一怒之下蓄了几个月胡须，留了几个月飘逸的长发，想让自己在外表上看上去更老成。但不巧的是，此时的我又与那时刚出道的“犀利哥”风格极为类似，又被戏称为犀利程序哥，再怒之下，开始潜心工作，不再追求表面的浮夸，在工作中逐渐展露头角，完成了项目中几个重要需求的开发，在后来的普选中当选为公司年度优秀员工之一。最近1，2年波澜不惊，因为自学没有断过，技术也在逐步积累。</p><p>下面进入主题，关于我的博客，我用自问自答的方式来介绍：</p><h4 id="1、我为什么要写博客？"><a href="#1、我为什么要写博客？" class="headerlink" title="1、我为什么要写博客？"></a>1、我为什么要写博客？</h4><p>　　做程序员这几年，技术不断积累，思想不断在升华，有些思考和想法在与同事、朋友的交流中会迸发出来。在交流的过程中，我觉得很过瘾。有些模糊不清的事情，通过交流明确了，有些以为自己把握的很准的事情，通过交流颠覆了，而有些自己已经明白的事情，又开阔了新的思路。但交流只是瞬时的、已逝的，我们的讨论不是国家政要接见外国领导，没有人把我们的谈话记录下来。就像在内存里一样，断电后恢复不了，事后很难回忆起来那些曾经闪光的思想。所以我要把我在程序人生中得到的思想给持久化了，给固化下来。再一个就是，我的同事、朋友始终是我身边熟悉的人，我需要一个更大的世界，所以，我也想通过博客与大家交流！</p><h4 id="2、我的博客写些什么东西？"><a href="#2、我的博客写些什么东西？" class="headerlink" title="2、我的博客写些什么东西？"></a>2、我的博客写些什么东西？</h4><p>　　这个问题我想了很久，以前想写些关于iOS的、关于前端博文。有时候在草稿中写好一段文字，最后一搜索，全世界拥有同样知识点的，同样解决方案的数不胜数，太多了。作为一个讨厌重复的人，我不能再罗列这些网上一抓一大把的普世技术知识点，更何况以我现在的积累，还不能做到非常好。当然我不是说罗列技术点没有技术含量，正是因为网上这些庞大的知识，我才能很快的找到我想要的，解决我的问题。综上，我不能做重复的事，也不要因为说的东西不扎实而误导别人。当然了，在某个技术领域达到一定境界了，我也会写研究技术细节的博文。<br>　　那我写什么？什么是不重复的？那必须斩钉截铁的说那就是我的思想，世上没有任何一个人和我的人生轨迹完全一样，在这个过程中，我会思考我会总结，我要把我的思想留存于世，即使有时候会有相同思想的东西同时存在，那也会因为是我个人的总结和反思而有所不同！</p><h4 id="3、写博客的计划？"><a href="#3、写博客的计划？" class="headerlink" title="3、写博客的计划？"></a>3、写博客的计划？</h4><p>　　不追求一个月一定要写几篇几篇的，当我有深刻的感触，对事物有不同的理解，我就写一篇，记录下来，一步一个脚印，向卓越程序员迈进！</p><p>　　夜空霓虹，都是我不要的繁荣，完。</p>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>timeline</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
